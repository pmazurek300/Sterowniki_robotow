
testowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a354  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800a4f8  0800a4f8  0001a4f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e0  0800a7e0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7e0  0800a7e0  0001a7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7e8  0800a7e8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e8  0800a7e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a7f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001dc  0800a9cc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  0800a9cc  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fee0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002391  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00032480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  000333a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000176eb  00000000  00000000  000341a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c863  00000000  00000000  0004b893  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008face  00000000  00000000  000580f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7bc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c84  00000000  00000000  000e7c40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4dc 	.word	0x0800a4dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a4dc 	.word	0x0800a4dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f92b 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f005 f8f8 	bl	80061c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f943 	bl	8001286 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f90b 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	20000208 	.word	0x20000208

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000208 	.word	0x20000208

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff feda 	bl	8001064 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e099      	b.n	80013f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012dc:	e00f      	b.n	80012fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012de:	f7ff fec1 	bl	8001064 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d908      	bls.n	80012fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e078      	b.n	80013f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e8      	bne.n	80012de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_DMA_Init+0x158>)
 8001318:	4013      	ands	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800132a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2b04      	cmp	r3, #4
 8001356:	d107      	bne.n	8001368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4313      	orrs	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f023 0307 	bic.w	r3, r3, #7
 800137e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4313      	orrs	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	2b04      	cmp	r3, #4
 8001390:	d117      	bne.n	80013c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fa91 	bl	80018cc <DMA_CheckFifoParam>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013be:	2301      	movs	r3, #1
 80013c0:	e016      	b.n	80013f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fa48 	bl	8001860 <DMA_CalcBaseAndBitshift>
 80013d0:	4603      	mov	r3, r0
 80013d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	223f      	movs	r2, #63	; 0x3f
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	f010803f 	.word	0xf010803f

080013fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Start_IT+0x26>
 800141e:	2302      	movs	r3, #2
 8001420:	e040      	b.n	80014a4 <HAL_DMA_Start_IT+0xa8>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12f      	bne.n	8001496 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2202      	movs	r2, #2
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f9da 	bl	8001804 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	223f      	movs	r2, #63	; 0x3f
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0216 	orr.w	r2, r2, #22
 800146a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e005      	b.n	80014a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800149e:	2302      	movs	r3, #2
 80014a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d004      	beq.n	80014ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00c      	b.n	80014e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2205      	movs	r2, #5
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_DMA_IRQHandler+0x258>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a92      	ldr	r2, [pc, #584]	; (800174c <HAL_DMA_IRQHandler+0x25c>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0a9b      	lsrs	r3, r3, #10
 8001508:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	2208      	movs	r2, #8
 800151c:	409a      	lsls	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01a      	beq.n	800155c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0204 	bic.w	r2, r2, #4
 8001542:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	2208      	movs	r2, #8
 800154a:	409a      	lsls	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	2201      	movs	r2, #1
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d012      	beq.n	8001592 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2201      	movs	r2, #1
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	f043 0202 	orr.w	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001596:	2204      	movs	r2, #4
 8001598:	409a      	lsls	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d012      	beq.n	80015c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2204      	movs	r2, #4
 80015b6:	409a      	lsls	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	f043 0204 	orr.w	r2, r3, #4
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2210      	movs	r2, #16
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d043      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d03c      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	2210      	movs	r2, #16
 80015ec:	409a      	lsls	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d018      	beq.n	8001632 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	d024      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
 800161e:	e01f      	b.n	8001660 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01b      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
 8001630:	e016      	b.n	8001660 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0208 	bic.w	r2, r2, #8
 800164e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001664:	2220      	movs	r2, #32
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 808e 	beq.w	800178e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8086 	beq.w	800178e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	2220      	movs	r2, #32
 8001688:	409a      	lsls	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b05      	cmp	r3, #5
 8001698:	d136      	bne.n	8001708 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0216 	bic.w	r2, r2, #22
 80016a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <HAL_DMA_IRQHandler+0x1da>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0208 	bic.w	r2, r2, #8
 80016d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	223f      	movs	r2, #63	; 0x3f
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d07d      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
        }
        return;
 8001706:	e078      	b.n	80017fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01c      	beq.n	8001750 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d108      	bne.n	8001736 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	2b00      	cmp	r3, #0
 800172a:	d030      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
 8001734:	e02b      	b.n	800178e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d027      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4798      	blx	r3
 8001746:	e022      	b.n	800178e <HAL_DMA_IRQHandler+0x29e>
 8001748:	20000008 	.word	0x20000008
 800174c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10f      	bne.n	800177e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0210 	bic.w	r2, r2, #16
 800176c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	2b00      	cmp	r3, #0
 8001794:	d032      	beq.n	80017fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d022      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2205      	movs	r2, #5
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d307      	bcc.n	80017d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f2      	bne.n	80017ba <HAL_DMA_IRQHandler+0x2ca>
 80017d4:	e000      	b.n	80017d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
 80017f8:	e000      	b.n	80017fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80017fa:	bf00      	nop
    }
  }
}
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop

08001804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001820:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d108      	bne.n	8001844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001842:	e007      	b.n	8001854 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3b10      	subs	r3, #16
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <DMA_CalcBaseAndBitshift+0x68>)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d909      	bls.n	80018a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	1d1a      	adds	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	659a      	str	r2, [r3, #88]	; 0x58
 80018a0:	e007      	b.n	80018b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	aaaaaaab 	.word	0xaaaaaaab
 80018c8:	0800a50c 	.word	0x0800a50c

080018cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d11f      	bne.n	8001926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d855      	bhi.n	8001998 <DMA_CheckFifoParam+0xcc>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <DMA_CheckFifoParam+0x28>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001917 	.word	0x08001917
 80018fc:	08001905 	.word	0x08001905
 8001900:	08001999 	.word	0x08001999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d045      	beq.n	800199c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001914:	e042      	b.n	800199c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800191e:	d13f      	bne.n	80019a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001924:	e03c      	b.n	80019a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192e:	d121      	bne.n	8001974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d836      	bhi.n	80019a4 <DMA_CheckFifoParam+0xd8>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <DMA_CheckFifoParam+0x70>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001953 	.word	0x08001953
 8001944:	0800194d 	.word	0x0800194d
 8001948:	08001965 	.word	0x08001965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
      break;
 8001950:	e02f      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d024      	beq.n	80019a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001962:	e021      	b.n	80019a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800196c:	d11e      	bne.n	80019ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001972:	e01b      	b.n	80019ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d902      	bls.n	8001980 <DMA_CheckFifoParam+0xb4>
 800197a:	2b03      	cmp	r3, #3
 800197c:	d003      	beq.n	8001986 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800197e:	e018      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
      break;
 8001984:	e015      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
      break;
 8001996:	e00b      	b.n	80019b0 <DMA_CheckFifoParam+0xe4>
      break;
 8001998:	bf00      	nop
 800199a:	e00a      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 800199c:	bf00      	nop
 800199e:	e008      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a0:	bf00      	nop
 80019a2:	e006      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a4:	bf00      	nop
 80019a6:	e004      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a8:	bf00      	nop
 80019aa:	e002      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80019ac:	bf00      	nop
 80019ae:	e000      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019b0:	bf00      	nop
    }
  } 
  
  return status; 
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e159      	b.n	8001c90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8148 	bne.w	8001c8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d00b      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0e:	2b11      	cmp	r3, #17
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0xfc>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a2 	beq.w	8001c8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a55      	ldr	r2, [pc, #340]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b62:	4a51      	ldr	r2, [pc, #324]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_GPIO_Init+0x2ec>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x202>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x1fe>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <HAL_GPIO_Init+0x2f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x1f6>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a44      	ldr	r2, [pc, #272]	; (8001cbc <HAL_GPIO_Init+0x2fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x1f2>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd4:	4934      	ldr	r1, [pc, #208]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f aea2 	bls.w	80019dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3724      	adds	r7, #36	; 0x24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e11f      	b.n	8001f4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f003 ff12 	bl	8005b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d5c:	f001 fbb6 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8001d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a7b      	ldr	r2, [pc, #492]	; (8001f54 <HAL_I2C_Init+0x25c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d807      	bhi.n	8001d7c <HAL_I2C_Init+0x84>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_I2C_Init+0x260>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	bf94      	ite	ls
 8001d74:	2301      	movls	r3, #1
 8001d76:	2300      	movhi	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e006      	b.n	8001d8a <HAL_I2C_Init+0x92>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4a77      	ldr	r2, [pc, #476]	; (8001f5c <HAL_I2C_Init+0x264>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0db      	b.n	8001f4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <HAL_I2C_Init+0x268>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0c9b      	lsrs	r3, r3, #18
 8001d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a64      	ldr	r2, [pc, #400]	; (8001f54 <HAL_I2C_Init+0x25c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d802      	bhi.n	8001dcc <HAL_I2C_Init+0xd4>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	e009      	b.n	8001de0 <HAL_I2C_Init+0xe8>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	4a63      	ldr	r2, [pc, #396]	; (8001f64 <HAL_I2C_Init+0x26c>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	3301      	adds	r3, #1
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4956      	ldr	r1, [pc, #344]	; (8001f54 <HAL_I2C_Init+0x25c>)
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	d80d      	bhi.n	8001e1c <HAL_I2C_Init+0x124>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1e59      	subs	r1, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	bf38      	it	cc
 8001e18:	2304      	movcc	r3, #4
 8001e1a:	e04f      	b.n	8001ebc <HAL_I2C_Init+0x1c4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d111      	bne.n	8001e48 <HAL_I2C_Init+0x150>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	440b      	add	r3, r1
 8001e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e012      	b.n	8001e6e <HAL_I2C_Init+0x176>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e58      	subs	r0, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	0099      	lsls	r1, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Init+0x17e>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e022      	b.n	8001ebc <HAL_I2C_Init+0x1c4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10e      	bne.n	8001e9c <HAL_I2C_Init+0x1a4>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1e58      	subs	r0, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	440b      	add	r3, r1
 8001e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9a:	e00f      	b.n	8001ebc <HAL_I2C_Init+0x1c4>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e58      	subs	r0, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	0099      	lsls	r1, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	6809      	ldr	r1, [r1, #0]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6911      	ldr	r1, [r2, #16]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68d2      	ldr	r2, [r2, #12]
 8001ef6:	4311      	orrs	r1, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	000186a0 	.word	0x000186a0
 8001f58:	001e847f 	.word	0x001e847f
 8001f5c:	003d08ff 	.word	0x003d08ff
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	10624dd3 	.word	0x10624dd3

08001f68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	817b      	strh	r3, [r7, #10]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	813b      	strh	r3, [r7, #8]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f82:	f7ff f86f 	bl	8001064 <HAL_GetTick>
 8001f86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	f040 80d9 	bne.w	8002148 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2319      	movs	r3, #25
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	496d      	ldr	r1, [pc, #436]	; (8002154 <HAL_I2C_Mem_Write+0x1ec>)
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fc7b 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
 8001fae:	e0cc      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_Mem_Write+0x56>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e0c5      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d007      	beq.n	8001fe4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2221      	movs	r2, #33	; 0x21
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2240      	movs	r2, #64	; 0x40
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a3a      	ldr	r2, [r7, #32]
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_I2C_Mem_Write+0x1f0>)
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002026:	88f8      	ldrh	r0, [r7, #6]
 8002028:	893a      	ldrh	r2, [r7, #8]
 800202a:	8979      	ldrh	r1, [r7, #10]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	4603      	mov	r3, r0
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 fab6 	bl	80025a8 <I2C_RequestMemoryWrite>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d052      	beq.n	80020e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e081      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fcfc 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00d      	beq.n	8002072 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b04      	cmp	r3, #4
 800205c:	d107      	bne.n	800206e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06b      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d11b      	bne.n	80020e8 <HAL_I2C_Mem_Write+0x180>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d017      	beq.n	80020e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1aa      	bne.n	8002046 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fce8 	bl	8002aca <I2C_WaitOnBTFFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2b04      	cmp	r3, #4
 8002106:	d107      	bne.n	8002118 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002116:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e016      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	00100002 	.word	0x00100002
 8002158:	ffff0000 	.word	0xffff0000

0800215c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	4608      	mov	r0, r1
 8002166:	4611      	mov	r1, r2
 8002168:	461a      	mov	r2, r3
 800216a:	4603      	mov	r3, r0
 800216c:	817b      	strh	r3, [r7, #10]
 800216e:	460b      	mov	r3, r1
 8002170:	813b      	strh	r3, [r7, #8]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002176:	f7fe ff75 	bl	8001064 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b20      	cmp	r3, #32
 8002186:	f040 8208 	bne.w	800259a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2319      	movs	r3, #25
 8002190:	2201      	movs	r2, #1
 8002192:	497b      	ldr	r1, [pc, #492]	; (8002380 <HAL_I2C_Mem_Read+0x224>)
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fb81 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
 80021a2:	e1fb      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_I2C_Mem_Read+0x56>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e1f4      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d007      	beq.n	80021d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2222      	movs	r2, #34	; 0x22
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <HAL_I2C_Mem_Read+0x228>)
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800221a:	88f8      	ldrh	r0, [r7, #6]
 800221c:	893a      	ldrh	r2, [r7, #8]
 800221e:	8979      	ldrh	r1, [r7, #10]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	4603      	mov	r3, r0
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fa50 	bl	80026d0 <I2C_RequestMemoryRead>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1b0      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d113      	bne.n	800226a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	623b      	str	r3, [r7, #32]
 8002256:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e184      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	2b01      	cmp	r3, #1
 8002270:	d11b      	bne.n	80022aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e164      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d11b      	bne.n	80022ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	e144      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002300:	e138      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	2b03      	cmp	r3, #3
 8002308:	f200 80f1 	bhi.w	80024ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b01      	cmp	r3, #1
 8002312:	d123      	bne.n	800235c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fc17 	bl	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e139      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800235a:	e10b      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	2b02      	cmp	r3, #2
 8002362:	d14e      	bne.n	8002402 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	2200      	movs	r2, #0
 800236c:	4906      	ldr	r1, [pc, #24]	; (8002388 <HAL_I2C_Mem_Read+0x22c>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fa94 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e10e      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
 800237e:	bf00      	nop
 8002380:	00100002 	.word	0x00100002
 8002384:	ffff0000 	.word	0xffff0000
 8002388:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002400:	e0b8      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002408:	2200      	movs	r2, #0
 800240a:	4966      	ldr	r1, [pc, #408]	; (80025a4 <HAL_I2C_Mem_Read+0x448>)
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fa45 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0bf      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	2200      	movs	r2, #0
 8002466:	494f      	ldr	r1, [pc, #316]	; (80025a4 <HAL_I2C_Mem_Read+0x448>)
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa17 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e091      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ec:	e042      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fb2a 	bl	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04c      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d118      	bne.n	8002574 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f aec2 	bne.w	8002302 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
  }
}
 800259c:	4618      	mov	r0, r3
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	00010004 	.word	0x00010004

080025a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	2200      	movs	r2, #0
 80025da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f95c 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e05f      	b.n	80026c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002604:	897b      	ldrh	r3, [r7, #10]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002612:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	6a3a      	ldr	r2, [r7, #32]
 8002618:	492c      	ldr	r1, [pc, #176]	; (80026cc <I2C_RequestMemoryWrite+0x124>)
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f995 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e04c      	b.n	80026c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	6a39      	ldr	r1, [r7, #32]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f9ff 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2b04      	cmp	r3, #4
 8002656:	d107      	bne.n	8002668 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e02b      	b.n	80026c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002672:	893b      	ldrh	r3, [r7, #8]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	611a      	str	r2, [r3, #16]
 800267c:	e021      	b.n	80026c2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800267e:	893b      	ldrh	r3, [r7, #8]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	b29b      	uxth	r3, r3
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	6a39      	ldr	r1, [r7, #32]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f9d9 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d107      	bne.n	80026b4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e005      	b.n	80026c4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b8:	893b      	ldrh	r3, [r7, #8]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	00010002 	.word	0x00010002

080026d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	817b      	strh	r3, [r7, #10]
 80026e2:	460b      	mov	r3, r1
 80026e4:	813b      	strh	r3, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	2200      	movs	r2, #0
 8002712:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f8c0 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0a9      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800273c:	897b      	ldrh	r3, [r7, #10]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800274a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	6a3a      	ldr	r2, [r7, #32]
 8002750:	4951      	ldr	r1, [pc, #324]	; (8002898 <I2C_RequestMemoryRead+0x1c8>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f8f9 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e096      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277a:	6a39      	ldr	r1, [r7, #32]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f963 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00d      	beq.n	80027a4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e075      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027aa:	893b      	ldrh	r3, [r7, #8]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	611a      	str	r2, [r3, #16]
 80027b4:	e021      	b.n	80027fa <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027b6:	893b      	ldrh	r3, [r7, #8]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	6a39      	ldr	r1, [r7, #32]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f93d 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d107      	bne.n	80027ec <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e04f      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f0:	893b      	ldrh	r3, [r7, #8]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f922 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b04      	cmp	r3, #4
 8002810:	d107      	bne.n	8002822 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e034      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2200      	movs	r2, #0
 800283e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f82a 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00c      	beq.n	8002868 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e013      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002868:	897b      	ldrh	r3, [r7, #10]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	6a3a      	ldr	r2, [r7, #32]
 800287c:	4906      	ldr	r1, [pc, #24]	; (8002898 <I2C_RequestMemoryRead+0x1c8>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f863 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	00010002 	.word	0x00010002

0800289c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ac:	e025      	b.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d021      	beq.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b6:	f7fe fbd5 	bl	8001064 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e023      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10d      	bne.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	e00c      	b.n	800293a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	429a      	cmp	r2, r3
 800293e:	d0b6      	beq.n	80028ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002958:	e051      	b.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	d123      	bne.n	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002982:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f043 0204 	orr.w	r2, r3, #4
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e046      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d021      	beq.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7fe fb53 	bl	8001064 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d116      	bne.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e020      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10c      	bne.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	e00b      	b.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d18d      	bne.n	800295a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a54:	e02d      	b.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f8ce 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e02d      	b.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d021      	beq.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7fe faf9 	bl	8001064 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e007      	b.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d1ca      	bne.n	8002a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad6:	e02d      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f88d 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e02d      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d021      	beq.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7fe fab8 	bl	8001064 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d1ca      	bne.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b58:	e042      	b.n	8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d119      	bne.n	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0210 	mvn.w	r2, #16
 8002b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e029      	b.n	8002bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9c:	f7fe fa62 	bl	8001064 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d302      	bcc.n	8002bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d116      	bne.n	8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e007      	b.n	8002bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d1b5      	bne.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d11b      	bne.n	8002c48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e25b      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d075      	beq.n	8002d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c76:	4ba3      	ldr	r3, [pc, #652]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d00c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d112      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8e:	4b9d      	ldr	r3, [pc, #628]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	4b99      	ldr	r3, [pc, #612]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x108>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d157      	bne.n	8002d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e236      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCC_OscConfig+0x74>
 8002cbe:	4b91      	ldr	r3, [pc, #580]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a90      	ldr	r2, [pc, #576]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xb0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x98>
 8002cd6:	4b8b      	ldr	r3, [pc, #556]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a8a      	ldr	r2, [pc, #552]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a87      	ldr	r2, [pc, #540]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xb0>
 8002cf0:	4b84      	ldr	r3, [pc, #528]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a83      	ldr	r2, [pc, #524]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe f9a8 	bl	8001064 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fe f9a4 	bl	8001064 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1fb      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xc0>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe f994 	bl	8001064 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe f990 	bl	8001064 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1e7      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0xe8>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7a:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d11c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d86:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d116      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x152>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e1bb      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4952      	ldr	r1, [pc, #328]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	e03a      	b.n	8002e36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	; (8002f08 <HAL_RCC_OscConfig+0x2b0>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe f949 	bl	8001064 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fe f945 	bl	8001064 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e19c      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4940      	ldr	r1, [pc, #256]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_OscConfig+0x2b0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe f928 	bl	8001064 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe f924 	bl	8001064 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e17b      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d030      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4a:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_RCC_OscConfig+0x2b4>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fe f908 	bl	8001064 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e58:	f7fe f904 	bl	8001064 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e15b      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x200>
 8002e76:	e015      	b.n	8002ea4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCC_OscConfig+0x2b4>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe f8f1 	bl	8001064 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fe f8ed 	bl	8001064 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e144      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a0 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x2b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d121      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_RCC_OscConfig+0x2b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_RCC_OscConfig+0x2b8>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efa:	f7fe f8b3 	bl	8001064 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	e011      	b.n	8002f26 <HAL_RCC_OscConfig+0x2ce>
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470000 	.word	0x42470000
 8002f0c:	42470e80 	.word	0x42470e80
 8002f10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f14:	f7fe f8a6 	bl	8001064 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0fd      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f26:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCC_OscConfig+0x4d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d106      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2f0>
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a7c      	ldr	r2, [pc, #496]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
 8002f46:	e01c      	b.n	8002f82 <HAL_RCC_OscConfig+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCC_OscConfig+0x312>
 8002f50:	4b77      	ldr	r3, [pc, #476]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a76      	ldr	r2, [pc, #472]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	4b74      	ldr	r3, [pc, #464]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a73      	ldr	r2, [pc, #460]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	e00b      	b.n	8002f82 <HAL_RCC_OscConfig+0x32a>
 8002f6a:	4b71      	ldr	r3, [pc, #452]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a70      	ldr	r2, [pc, #448]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
 8002f76:	4b6e      	ldr	r3, [pc, #440]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a6d      	ldr	r2, [pc, #436]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d015      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe f86b 	bl	8001064 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe f867 	bl	8001064 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0bc      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ee      	beq.n	8002f92 <HAL_RCC_OscConfig+0x33a>
 8002fb4:	e014      	b.n	8002fe0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe f855 	bl	8001064 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe f851 	bl	8001064 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0a6      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	4b56      	ldr	r3, [pc, #344]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ee      	bne.n	8002fbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d105      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b52      	ldr	r3, [pc, #328]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a51      	ldr	r2, [pc, #324]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8092 	beq.w	8003120 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d05c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d141      	bne.n	8003094 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <HAL_RCC_OscConfig+0x4dc>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe f825 	bl	8001064 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe f821 	bl	8001064 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e078      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	019b      	lsls	r3, r3, #6
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	3b01      	subs	r3, #1
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	4933      	ldr	r1, [pc, #204]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003066:	4b33      	ldr	r3, [pc, #204]	; (8003134 <HAL_RCC_OscConfig+0x4dc>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fd fffa 	bl	8001064 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003074:	f7fd fff6 	bl	8001064 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e04d      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x41c>
 8003092:	e045      	b.n	8003120 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_OscConfig+0x4dc>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fd ffe3 	bl	8001064 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fd ffdf 	bl	8001064 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e036      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f0      	bne.n	80030a2 <HAL_RCC_OscConfig+0x44a>
 80030c0:	e02e      	b.n	8003120 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e029      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d11c      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d115      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10d      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d106      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40007000 	.word	0x40007000
 8003130:	40023800 	.word	0x40023800
 8003134:	42470060 	.word	0x42470060

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0cc      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d90c      	bls.n	8003174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d044      	beq.n	8003258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d119      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e067      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4934      	ldr	r1, [pc, #208]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003228:	f7fd ff1c 	bl	8001064 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fd ff18 	bl	8001064 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e04f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d20c      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4601      	mov	r1, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	5cd3      	ldrb	r3, [r2, r3]
 80032d2:	fa21 f303 	lsr.w	r3, r1, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd fe7c 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	0800a514 	.word	0x0800a514
 80032fc:	20000008 	.word	0x20000008
 8003300:	20000000 	.word	0x20000000

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331a:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b04      	cmp	r3, #4
 8003324:	d007      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x32>
 8003326:	2b08      	cmp	r3, #8
 8003328:	d008      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x38>
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 80b4 	bne.w	8003498 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003332:	60bb      	str	r3, [r7, #8]
       break;
 8003334:	e0b3      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b5e      	ldr	r3, [pc, #376]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003338:	60bb      	str	r3, [r7, #8]
      break;
 800333a:	e0b0      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4b5a      	ldr	r3, [pc, #360]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003346:	4b58      	ldr	r3, [pc, #352]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d04a      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b55      	ldr	r3, [pc, #340]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	ea03 0501 	and.w	r5, r3, r1
 8003368:	ea04 0602 	and.w	r6, r4, r2
 800336c:	4629      	mov	r1, r5
 800336e:	4632      	mov	r2, r6
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f04f 0400 	mov.w	r4, #0
 8003378:	0154      	lsls	r4, r2, #5
 800337a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800337e:	014b      	lsls	r3, r1, #5
 8003380:	4619      	mov	r1, r3
 8003382:	4622      	mov	r2, r4
 8003384:	1b49      	subs	r1, r1, r5
 8003386:	eb62 0206 	sbc.w	r2, r2, r6
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f04f 0400 	mov.w	r4, #0
 8003392:	0194      	lsls	r4, r2, #6
 8003394:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003398:	018b      	lsls	r3, r1, #6
 800339a:	1a5b      	subs	r3, r3, r1
 800339c:	eb64 0402 	sbc.w	r4, r4, r2
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	00e2      	lsls	r2, r4, #3
 80033aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033ae:	00d9      	lsls	r1, r3, #3
 80033b0:	460b      	mov	r3, r1
 80033b2:	4614      	mov	r4, r2
 80033b4:	195b      	adds	r3, r3, r5
 80033b6:	eb44 0406 	adc.w	r4, r4, r6
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	0262      	lsls	r2, r4, #9
 80033c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033c8:	0259      	lsls	r1, r3, #9
 80033ca:	460b      	mov	r3, r1
 80033cc:	4614      	mov	r4, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	4621      	mov	r1, r4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f04f 0400 	mov.w	r4, #0
 80033d8:	461a      	mov	r2, r3
 80033da:	4623      	mov	r3, r4
 80033dc:	f7fd fc5c 	bl	8000c98 <__aeabi_uldivmod>
 80033e0:	4603      	mov	r3, r0
 80033e2:	460c      	mov	r4, r1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e049      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e8:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	f04f 0400 	mov.w	r4, #0
 80033f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	ea03 0501 	and.w	r5, r3, r1
 80033fe:	ea04 0602 	and.w	r6, r4, r2
 8003402:	4629      	mov	r1, r5
 8003404:	4632      	mov	r2, r6
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	f04f 0400 	mov.w	r4, #0
 800340e:	0154      	lsls	r4, r2, #5
 8003410:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003414:	014b      	lsls	r3, r1, #5
 8003416:	4619      	mov	r1, r3
 8003418:	4622      	mov	r2, r4
 800341a:	1b49      	subs	r1, r1, r5
 800341c:	eb62 0206 	sbc.w	r2, r2, r6
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	f04f 0400 	mov.w	r4, #0
 8003428:	0194      	lsls	r4, r2, #6
 800342a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800342e:	018b      	lsls	r3, r1, #6
 8003430:	1a5b      	subs	r3, r3, r1
 8003432:	eb64 0402 	sbc.w	r4, r4, r2
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	00e2      	lsls	r2, r4, #3
 8003440:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003444:	00d9      	lsls	r1, r3, #3
 8003446:	460b      	mov	r3, r1
 8003448:	4614      	mov	r4, r2
 800344a:	195b      	adds	r3, r3, r5
 800344c:	eb44 0406 	adc.w	r4, r4, r6
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	02a2      	lsls	r2, r4, #10
 800345a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800345e:	0299      	lsls	r1, r3, #10
 8003460:	460b      	mov	r3, r1
 8003462:	4614      	mov	r4, r2
 8003464:	4618      	mov	r0, r3
 8003466:	4621      	mov	r1, r4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	461a      	mov	r2, r3
 8003470:	4623      	mov	r3, r4
 8003472:	f7fd fc11 	bl	8000c98 <__aeabi_uldivmod>
 8003476:	4603      	mov	r3, r0
 8003478:	460c      	mov	r4, r1
 800347a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	60bb      	str	r3, [r7, #8]
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800349a:	60bb      	str	r3, [r7, #8]
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	68bb      	ldr	r3, [r7, #8]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000008 	.word	0x20000008

080034cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d4:	4601      	mov	r1, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4a03      	ldr	r2, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e2:	5cd3      	ldrb	r3, [r2, r3]
 80034e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	0800a524 	.word	0x0800a524

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034f8:	f7ff ffdc 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034fc:	4601      	mov	r1, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0b5b      	lsrs	r3, r3, #13
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4a03      	ldr	r2, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350a:	5cd3      	ldrb	r3, [r2, r3]
 800350c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	0800a524 	.word	0x0800a524

0800351c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e01d      	b.n	800356a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f003 f888 	bl	8006658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f000 fcb8 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b06      	cmp	r3, #6
 8003592:	d007      	beq.n	80035a4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	d007      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e01d      	b.n	8003650 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f815 	bl	8003658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f000 fc45 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 ffea 	bl	8004658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a10      	ldr	r2, [pc, #64]	; (80036cc <HAL_TIM_PWM_Start+0x60>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d107      	bne.n	800369e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b06      	cmp	r3, #6
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000

080036d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e01d      	b.n	800371e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f815 	bl	8003726 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 fbde 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2201      	movs	r2, #1
 800374a:	6839      	ldr	r1, [r7, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 ff83 	bl	8004658 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b06      	cmp	r3, #6
 8003762:	d007      	beq.n	8003774 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d841      	bhi.n	8003814 <HAL_TIM_IC_Start_IT+0x94>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HAL_TIM_IC_Start_IT+0x18>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037cd 	.word	0x080037cd
 800379c:	08003815 	.word	0x08003815
 80037a0:	08003815 	.word	0x08003815
 80037a4:	08003815 	.word	0x08003815
 80037a8:	080037df 	.word	0x080037df
 80037ac:	08003815 	.word	0x08003815
 80037b0:	08003815 	.word	0x08003815
 80037b4:	08003815 	.word	0x08003815
 80037b8:	080037f1 	.word	0x080037f1
 80037bc:	08003815 	.word	0x08003815
 80037c0:	08003815 	.word	0x08003815
 80037c4:	08003815 	.word	0x08003815
 80037c8:	08003803 	.word	0x08003803
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0202 	orr.w	r2, r2, #2
 80037da:	60da      	str	r2, [r3, #12]
      break;
 80037dc:	e01b      	b.n	8003816 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0204 	orr.w	r2, r2, #4
 80037ec:	60da      	str	r2, [r3, #12]
      break;
 80037ee:	e012      	b.n	8003816 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0208 	orr.w	r2, r2, #8
 80037fe:	60da      	str	r2, [r3, #12]
      break;
 8003800:	e009      	b.n	8003816 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0210 	orr.w	r2, r2, #16
 8003810:	60da      	str	r2, [r3, #12]
      break;
 8003812:	e000      	b.n	8003816 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003814:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 ff1a 	bl	8004658 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b06      	cmp	r3, #6
 8003834:	d007      	beq.n	8003846 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d122      	bne.n	80038ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d11b      	bne.n	80038ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0202 	mvn.w	r2, #2
 800387c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f002 f9a0 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 faf9 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fb00 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0204 	mvn.w	r2, #4
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f002 f976 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 facf 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fad6 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b08      	cmp	r3, #8
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0208 	mvn.w	r2, #8
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2204      	movs	r2, #4
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f002 f94c 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 faa5 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 faac 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d122      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b10      	cmp	r3, #16
 800396e:	d11b      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0210 	mvn.w	r2, #16
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f002 f922 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa7b 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa82 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d10e      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d107      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0201 	mvn.w	r2, #1
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f002 f9ac 	bl	8005d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 feca 	bl	8004794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fa47 	bl	8003eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0220 	mvn.w	r2, #32
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fe94 	bl	8004780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e08a      	b.n	8003b90 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6819      	ldr	r1, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f000 fc22 	bl	80042e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020c 	bic.w	r2, r2, #12
 8003ab2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6999      	ldr	r1, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	619a      	str	r2, [r3, #24]
 8003ac6:	e05a      	b.n	8003b7e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d11c      	bne.n	8003b08 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f000 fc9a 	bl	8004416 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003af0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6999      	ldr	r1, [r3, #24]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	021a      	lsls	r2, r3, #8
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	619a      	str	r2, [r3, #24]
 8003b06:	e03a      	b.n	8003b7e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11b      	bne.n	8003b46 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f000 fce7 	bl	80044f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 020c 	bic.w	r2, r2, #12
 8003b30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	61da      	str	r2, [r3, #28]
 8003b44:	e01b      	b.n	8003b7e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f000 fd07 	bl	8004568 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e0b4      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	f200 809f 	bhi.w	8003d08 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bca:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003c05 	.word	0x08003c05
 8003bd4:	08003d09 	.word	0x08003d09
 8003bd8:	08003d09 	.word	0x08003d09
 8003bdc:	08003d09 	.word	0x08003d09
 8003be0:	08003c45 	.word	0x08003c45
 8003be4:	08003d09 	.word	0x08003d09
 8003be8:	08003d09 	.word	0x08003d09
 8003bec:	08003d09 	.word	0x08003d09
 8003bf0:	08003c87 	.word	0x08003c87
 8003bf4:	08003d09 	.word	0x08003d09
 8003bf8:	08003d09 	.word	0x08003d09
 8003bfc:	08003d09 	.word	0x08003d09
 8003c00:	08003cc7 	.word	0x08003cc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f9e0 	bl	8003fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0208 	orr.w	r2, r2, #8
 8003c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0204 	bic.w	r2, r2, #4
 8003c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6999      	ldr	r1, [r3, #24]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	619a      	str	r2, [r3, #24]
      break;
 8003c42:	e062      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fa26 	bl	800409c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6999      	ldr	r1, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	619a      	str	r2, [r3, #24]
      break;
 8003c84:	e041      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa71 	bl	8004174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0208 	orr.w	r2, r2, #8
 8003ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0204 	bic.w	r2, r2, #4
 8003cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69d9      	ldr	r1, [r3, #28]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	61da      	str	r2, [r3, #28]
      break;
 8003cc4:	e021      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fabb 	bl	8004248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69d9      	ldr	r1, [r3, #28]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	021a      	lsls	r2, r3, #8
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	61da      	str	r2, [r3, #28]
      break;
 8003d06:	e000      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_ConfigClockSource+0x18>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e0a6      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x166>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d067      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0x120>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d80b      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x6c>
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d073      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x140>
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d802      	bhi.n	8003d86 <HAL_TIM_ConfigClockSource+0x62>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d06f      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d84:	e078      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d06c      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x140>
 8003d8a:	2b30      	cmp	r3, #48	; 0x30
 8003d8c:	d06a      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d8e:	e073      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d90:	2b70      	cmp	r3, #112	; 0x70
 8003d92:	d00d      	beq.n	8003db0 <HAL_TIM_ConfigClockSource+0x8c>
 8003d94:	2b70      	cmp	r3, #112	; 0x70
 8003d96:	d804      	bhi.n	8003da2 <HAL_TIM_ConfigClockSource+0x7e>
 8003d98:	2b50      	cmp	r3, #80	; 0x50
 8003d9a:	d033      	beq.n	8003e04 <HAL_TIM_ConfigClockSource+0xe0>
 8003d9c:	2b60      	cmp	r3, #96	; 0x60
 8003d9e:	d041      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003da0:	e06a      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d066      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x152>
 8003da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dac:	d017      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dae:	e063      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6899      	ldr	r1, [r3, #8]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f000 fc2a 	bl	8004618 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
      break;
 8003ddc:	e04c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6899      	ldr	r1, [r3, #8]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f000 fc13 	bl	8004618 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e00:	609a      	str	r2, [r3, #8]
      break;
 8003e02:	e039      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	461a      	mov	r2, r3
 8003e12:	f000 fad1 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2150      	movs	r1, #80	; 0x50
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fbe0 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 8003e22:	e029      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f000 fb2d 	bl	8004490 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2160      	movs	r1, #96	; 0x60
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fbd0 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 8003e42:	e019      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f000 fab1 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2140      	movs	r1, #64	; 0x40
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fbc0 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 8003e62:	e009      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f000 fbb7 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 8003e74:	e000      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <TIM_Base_SetConfig+0xe4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00f      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d00b      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a31      	ldr	r2, [pc, #196]	; (8003fb8 <TIM_Base_SetConfig+0xe8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a30      	ldr	r2, [pc, #192]	; (8003fbc <TIM_Base_SetConfig+0xec>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <TIM_Base_SetConfig+0xf0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <TIM_Base_SetConfig+0xe4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01b      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d017      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <TIM_Base_SetConfig+0xe8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <TIM_Base_SetConfig+0xec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00f      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <TIM_Base_SetConfig+0xf0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00b      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <TIM_Base_SetConfig+0xf4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <TIM_Base_SetConfig+0xf8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d003      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <TIM_Base_SetConfig+0xfc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d108      	bne.n	8003f6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <TIM_Base_SetConfig+0xe4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d103      	bne.n	8003fa0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0302 	bic.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <TIM_OC1_SetConfig+0xc8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d10c      	bne.n	8004046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0308 	bic.w	r3, r3, #8
 8004032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <TIM_OC1_SetConfig+0xc8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d111      	bne.n	8004072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40010000 	.word	0x40010000

0800409c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0210 	bic.w	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0320 	bic.w	r3, r3, #32
 80040e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <TIM_OC2_SetConfig+0xd4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <TIM_OC2_SetConfig+0xd4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d113      	bne.n	8004148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000

08004174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0303 	bic.w	r3, r3, #3
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <TIM_OC3_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <TIM_OC3_SetConfig+0xd0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d113      	bne.n	800421e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	621a      	str	r2, [r3, #32]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40010000 	.word	0x40010000

08004248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	031b      	lsls	r3, r3, #12
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a10      	ldr	r2, [pc, #64]	; (80042e4 <TIM_OC4_SetConfig+0x9c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d109      	bne.n	80042bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000

080042e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a24      	ldr	r2, [pc, #144]	; (80043a4 <TIM_TI1_SetConfig+0xbc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d00f      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a21      	ldr	r2, [pc, #132]	; (80043a8 <TIM_TI1_SetConfig+0xc0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00b      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a20      	ldr	r2, [pc, #128]	; (80043ac <TIM_TI1_SetConfig+0xc4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <TIM_TI1_SetConfig+0xc8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <TIM_TI1_SetConfig+0xcc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d101      	bne.n	8004342 <TIM_TI1_SetConfig+0x5a>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <TIM_TI1_SetConfig+0x5c>
 8004342:	2300      	movs	r3, #0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e003      	b.n	8004362 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	b2db      	uxtb	r3, r3
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f023 030a 	bic.w	r3, r3, #10
 800437c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f003 030a 	and.w	r3, r3, #10
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40014000 	.word	0x40014000

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f023 0210 	bic.w	r2, r3, #16
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	031b      	lsls	r3, r3, #12
 800445a:	b29b      	uxth	r3, r3
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004468:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f023 0210 	bic.w	r2, r3, #16
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	031b      	lsls	r3, r3, #12
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	621a      	str	r2, [r3, #32]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	b2db      	uxtb	r3, r3
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004540:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	621a      	str	r2, [r3, #32]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	031b      	lsls	r3, r3, #12
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	031b      	lsls	r3, r3, #12
 80045c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	f043 0307 	orr.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	431a      	orrs	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4313      	orrs	r3, r2
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	609a      	str	r2, [r3, #8]
}
 800464c:	bf00      	nop
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2201      	movs	r2, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1a      	ldr	r2, [r3, #32]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	43db      	mvns	r3, r3
 800467a:	401a      	ands	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1a      	ldr	r2, [r3, #32]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e050      	b.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d018      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d013      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00e      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a16      	ldr	r2, [pc, #88]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a15      	ldr	r2, [pc, #84]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10c      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4313      	orrs	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40000c00 	.word	0x40000c00
 800477c:	40014000 	.word	0x40014000

08004780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e03f      	b.n	800483a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f002 f858 	bl	8006884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fc6d 	bl	80050cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b088      	sub	sp, #32
 8004846:	af02      	add	r7, sp, #8
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b20      	cmp	r3, #32
 8004860:	f040 8083 	bne.w	800496a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_UART_Transmit+0x2e>
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e07b      	b.n	800496c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_UART_Transmit+0x40>
 800487e:	2302      	movs	r3, #2
 8004880:	e074      	b.n	800496c <HAL_UART_Transmit+0x12a>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2221      	movs	r2, #33	; 0x21
 8004894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004898:	f7fc fbe4 	bl	8001064 <HAL_GetTick>
 800489c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	88fa      	ldrh	r2, [r7, #6]
 80048a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80048b2:	e042      	b.n	800493a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d122      	bne.n	8004912 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2200      	movs	r2, #0
 80048d4:	2180      	movs	r1, #128	; 0x80
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fa76 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e042      	b.n	800496c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048f8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3302      	adds	r3, #2
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	e017      	b.n	800493a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3301      	adds	r3, #1
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	e013      	b.n	800493a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	2180      	movs	r1, #128	; 0x80
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fa53 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e01f      	b.n	800496c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	60ba      	str	r2, [r7, #8]
 8004932:	781a      	ldrb	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1b7      	bne.n	80048b4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2200      	movs	r2, #0
 800494c:	2140      	movs	r1, #64	; 0x40
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fa3a 	bl	8004dc8 <UART_WaitOnFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e006      	b.n	800496c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b20      	cmp	r3, #32
 800498c:	d166      	bne.n	8004a5c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_UART_Receive_DMA+0x26>
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e05f      	b.n	8004a5e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_UART_Receive_DMA+0x38>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e058      	b.n	8004a5e <HAL_UART_Receive_DMA+0xea>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2222      	movs	r2, #34	; 0x22
 80049ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	4a25      	ldr	r2, [pc, #148]	; (8004a68 <HAL_UART_Receive_DMA+0xf4>)
 80049d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	4a24      	ldr	r2, [pc, #144]	; (8004a6c <HAL_UART_Receive_DMA+0xf8>)
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e2:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <HAL_UART_Receive_DMA+0xfc>)
 80049e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ea:	2200      	movs	r2, #0
 80049ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3304      	adds	r3, #4
 80049fe:	4619      	mov	r1, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	f7fc fcf9 	bl	80013fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a56:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e000      	b.n	8004a5e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	08004cb1 	.word	0x08004cb1
 8004a6c:	08004d19 	.word	0x08004d19
 8004a70:	08004d35 	.word	0x08004d35

08004a74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10d      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x52>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa82 	bl	8004fc8 <UART_Receive_IT>
      return;
 8004ac4:	e0d1      	b.n	8004c6a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80b0 	beq.w	8004c2e <HAL_UART_IRQHandler+0x1ba>
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d105      	bne.n	8004ae4 <HAL_UART_IRQHandler+0x70>
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80a5 	beq.w	8004c2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_UART_IRQHandler+0x90>
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	f043 0201 	orr.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_UART_IRQHandler+0xb0>
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d005      	beq.n	8004b24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	f043 0202 	orr.w	r2, r3, #2
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_UART_IRQHandler+0xd0>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	f043 0204 	orr.w	r2, r3, #4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00f      	beq.n	8004b6e <HAL_UART_IRQHandler+0xfa>
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d104      	bne.n	8004b62 <HAL_UART_IRQHandler+0xee>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	f043 0208 	orr.w	r2, r3, #8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d078      	beq.n	8004c68 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <HAL_UART_IRQHandler+0x11c>
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f003 0320 	and.w	r3, r3, #32
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa1c 	bl	8004fc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	bf0c      	ite	eq
 8004b9e:	2301      	moveq	r3, #1
 8004ba0:	2300      	movne	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <HAL_UART_IRQHandler+0x144>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d031      	beq.n	8004c1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f965 	bl	8004e88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d123      	bne.n	8004c14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bda:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d013      	beq.n	8004c0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be8:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <HAL_UART_IRQHandler+0x1fc>)
 8004bea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fc fc5b 	bl	80014ac <HAL_DMA_Abort_IT>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d016      	beq.n	8004c2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c06:	4610      	mov	r0, r2
 8004c08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0a:	e00e      	b.n	8004c2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f845 	bl	8004c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c12:	e00a      	b.n	8004c2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f841 	bl	8004c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1a:	e006      	b.n	8004c2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f83d 	bl	8004c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004c28:	e01e      	b.n	8004c68 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2a:	bf00      	nop
    return;
 8004c2c:	e01c      	b.n	8004c68 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_UART_IRQHandler+0x1d6>
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f952 	bl	8004eec <UART_Transmit_IT>
    return;
 8004c48:	e00f      	b.n	8004c6a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_UART_IRQHandler+0x1f6>
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d005      	beq.n	8004c6a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f99a 	bl	8004f98 <UART_EndTransmit_IT>
    return;
 8004c64:	bf00      	nop
 8004c66:	e000      	b.n	8004c6a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004c68:	bf00      	nop
  }
}
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	08004ec5 	.word	0x08004ec5

08004c74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11e      	bne.n	8004d0a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ce0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0201 	bic.w	r2, r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d00:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f001 f83c 	bl	8005d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff ffae 	bl	8004c88 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b21      	cmp	r3, #33	; 0x21
 8004d66:	d108      	bne.n	8004d7a <UART_DMAError+0x46>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004d74:	68b8      	ldr	r0, [r7, #8]
 8004d76:	f000 f871 	bl	8004e5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b22      	cmp	r3, #34	; 0x22
 8004d9a:	d108      	bne.n	8004dae <UART_DMAError+0x7a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004da8:	68b8      	ldr	r0, [r7, #8]
 8004daa:	f000 f86d 	bl	8004e88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	f043 0210 	orr.w	r2, r3, #16
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dba:	68b8      	ldr	r0, [r7, #8]
 8004dbc:	f7ff ff6e 	bl	8004c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dc0:	bf00      	nop
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd8:	e02c      	b.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d028      	beq.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004de8:	f7fc f93c 	bl	8001064 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d21d      	bcs.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e00f      	b.n	8004e54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d0c3      	beq.n	8004dda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e72:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e9e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff fedc 	bl	8004c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b21      	cmp	r3, #33	; 0x21
 8004efe:	d144      	bne.n	8004f8a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f08:	d11a      	bne.n	8004f40 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f1e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	1c9a      	adds	r2, r3, #2
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	621a      	str	r2, [r3, #32]
 8004f32:	e00e      	b.n	8004f52 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	621a      	str	r2, [r3, #32]
 8004f3e:	e008      	b.n	8004f52 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	1c59      	adds	r1, r3, #1
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6211      	str	r1, [r2, #32]
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10f      	bne.n	8004f86 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e000      	b.n	8004f8c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
  }
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff fe5b 	bl	8004c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b22      	cmp	r3, #34	; 0x22
 8004fda:	d171      	bne.n	80050c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe4:	d123      	bne.n	800502e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10e      	bne.n	8005012 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	1c9a      	adds	r2, r3, #2
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	629a      	str	r2, [r3, #40]	; 0x28
 8005010:	e029      	b.n	8005066 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	b29b      	uxth	r3, r3
 800501a:	b2db      	uxtb	r3, r3
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
 800502c:	e01b      	b.n	8005066 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6858      	ldr	r0, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	1c59      	adds	r1, r3, #1
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6291      	str	r1, [r2, #40]	; 0x28
 8005046:	b2c2      	uxtb	r2, r0
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e00c      	b.n	8005066 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	b2da      	uxtb	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	1c58      	adds	r0, r3, #1
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	6288      	str	r0, [r1, #40]	; 0x28
 800505e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29b      	uxth	r3, r3
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4619      	mov	r1, r3
 8005074:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005076:	2b00      	cmp	r3, #0
 8005078:	d120      	bne.n	80050bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0220 	bic.w	r2, r2, #32
 8005088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fe68 	bl	8005d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e002      	b.n	80050c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800510e:	f023 030c 	bic.w	r3, r3, #12
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	430b      	orrs	r3, r1
 800511a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513a:	f040 818b 	bne.w	8005454 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4ac1      	ldr	r2, [pc, #772]	; (8005448 <UART_SetConfig+0x37c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d005      	beq.n	8005154 <UART_SetConfig+0x88>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4abf      	ldr	r2, [pc, #764]	; (800544c <UART_SetConfig+0x380>)
 800514e:	4293      	cmp	r3, r2
 8005150:	f040 80bd 	bne.w	80052ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005154:	f7fe f9ce 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8005158:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	461d      	mov	r5, r3
 800515e:	f04f 0600 	mov.w	r6, #0
 8005162:	46a8      	mov	r8, r5
 8005164:	46b1      	mov	r9, r6
 8005166:	eb18 0308 	adds.w	r3, r8, r8
 800516a:	eb49 0409 	adc.w	r4, r9, r9
 800516e:	4698      	mov	r8, r3
 8005170:	46a1      	mov	r9, r4
 8005172:	eb18 0805 	adds.w	r8, r8, r5
 8005176:	eb49 0906 	adc.w	r9, r9, r6
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005186:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800518a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800518e:	4688      	mov	r8, r1
 8005190:	4691      	mov	r9, r2
 8005192:	eb18 0005 	adds.w	r0, r8, r5
 8005196:	eb49 0106 	adc.w	r1, r9, r6
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	461d      	mov	r5, r3
 80051a0:	f04f 0600 	mov.w	r6, #0
 80051a4:	196b      	adds	r3, r5, r5
 80051a6:	eb46 0406 	adc.w	r4, r6, r6
 80051aa:	461a      	mov	r2, r3
 80051ac:	4623      	mov	r3, r4
 80051ae:	f7fb fd73 	bl	8000c98 <__aeabi_uldivmod>
 80051b2:	4603      	mov	r3, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	461a      	mov	r2, r3
 80051b8:	4ba5      	ldr	r3, [pc, #660]	; (8005450 <UART_SetConfig+0x384>)
 80051ba:	fba3 2302 	umull	r2, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	461d      	mov	r5, r3
 80051c8:	f04f 0600 	mov.w	r6, #0
 80051cc:	46a9      	mov	r9, r5
 80051ce:	46b2      	mov	sl, r6
 80051d0:	eb19 0309 	adds.w	r3, r9, r9
 80051d4:	eb4a 040a 	adc.w	r4, sl, sl
 80051d8:	4699      	mov	r9, r3
 80051da:	46a2      	mov	sl, r4
 80051dc:	eb19 0905 	adds.w	r9, r9, r5
 80051e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051f8:	4689      	mov	r9, r1
 80051fa:	4692      	mov	sl, r2
 80051fc:	eb19 0005 	adds.w	r0, r9, r5
 8005200:	eb4a 0106 	adc.w	r1, sl, r6
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	461d      	mov	r5, r3
 800520a:	f04f 0600 	mov.w	r6, #0
 800520e:	196b      	adds	r3, r5, r5
 8005210:	eb46 0406 	adc.w	r4, r6, r6
 8005214:	461a      	mov	r2, r3
 8005216:	4623      	mov	r3, r4
 8005218:	f7fb fd3e 	bl	8000c98 <__aeabi_uldivmod>
 800521c:	4603      	mov	r3, r0
 800521e:	460c      	mov	r4, r1
 8005220:	461a      	mov	r2, r3
 8005222:	4b8b      	ldr	r3, [pc, #556]	; (8005450 <UART_SetConfig+0x384>)
 8005224:	fba3 1302 	umull	r1, r3, r3, r2
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	2164      	movs	r1, #100	; 0x64
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	3332      	adds	r3, #50	; 0x32
 8005236:	4a86      	ldr	r2, [pc, #536]	; (8005450 <UART_SetConfig+0x384>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005244:	4498      	add	r8, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	461d      	mov	r5, r3
 800524a:	f04f 0600 	mov.w	r6, #0
 800524e:	46a9      	mov	r9, r5
 8005250:	46b2      	mov	sl, r6
 8005252:	eb19 0309 	adds.w	r3, r9, r9
 8005256:	eb4a 040a 	adc.w	r4, sl, sl
 800525a:	4699      	mov	r9, r3
 800525c:	46a2      	mov	sl, r4
 800525e:	eb19 0905 	adds.w	r9, r9, r5
 8005262:	eb4a 0a06 	adc.w	sl, sl, r6
 8005266:	f04f 0100 	mov.w	r1, #0
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005272:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005276:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800527a:	4689      	mov	r9, r1
 800527c:	4692      	mov	sl, r2
 800527e:	eb19 0005 	adds.w	r0, r9, r5
 8005282:	eb4a 0106 	adc.w	r1, sl, r6
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	461d      	mov	r5, r3
 800528c:	f04f 0600 	mov.w	r6, #0
 8005290:	196b      	adds	r3, r5, r5
 8005292:	eb46 0406 	adc.w	r4, r6, r6
 8005296:	461a      	mov	r2, r3
 8005298:	4623      	mov	r3, r4
 800529a:	f7fb fcfd 	bl	8000c98 <__aeabi_uldivmod>
 800529e:	4603      	mov	r3, r0
 80052a0:	460c      	mov	r4, r1
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b6a      	ldr	r3, [pc, #424]	; (8005450 <UART_SetConfig+0x384>)
 80052a6:	fba3 1302 	umull	r1, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2164      	movs	r1, #100	; 0x64
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	3332      	adds	r3, #50	; 0x32
 80052b8:	4a65      	ldr	r2, [pc, #404]	; (8005450 <UART_SetConfig+0x384>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f003 0207 	and.w	r2, r3, #7
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4442      	add	r2, r8
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	e26f      	b.n	80057ae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ce:	f7fe f8fd 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 80052d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	461d      	mov	r5, r3
 80052d8:	f04f 0600 	mov.w	r6, #0
 80052dc:	46a8      	mov	r8, r5
 80052de:	46b1      	mov	r9, r6
 80052e0:	eb18 0308 	adds.w	r3, r8, r8
 80052e4:	eb49 0409 	adc.w	r4, r9, r9
 80052e8:	4698      	mov	r8, r3
 80052ea:	46a1      	mov	r9, r4
 80052ec:	eb18 0805 	adds.w	r8, r8, r5
 80052f0:	eb49 0906 	adc.w	r9, r9, r6
 80052f4:	f04f 0100 	mov.w	r1, #0
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005300:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005304:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005308:	4688      	mov	r8, r1
 800530a:	4691      	mov	r9, r2
 800530c:	eb18 0005 	adds.w	r0, r8, r5
 8005310:	eb49 0106 	adc.w	r1, r9, r6
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	461d      	mov	r5, r3
 800531a:	f04f 0600 	mov.w	r6, #0
 800531e:	196b      	adds	r3, r5, r5
 8005320:	eb46 0406 	adc.w	r4, r6, r6
 8005324:	461a      	mov	r2, r3
 8005326:	4623      	mov	r3, r4
 8005328:	f7fb fcb6 	bl	8000c98 <__aeabi_uldivmod>
 800532c:	4603      	mov	r3, r0
 800532e:	460c      	mov	r4, r1
 8005330:	461a      	mov	r2, r3
 8005332:	4b47      	ldr	r3, [pc, #284]	; (8005450 <UART_SetConfig+0x384>)
 8005334:	fba3 2302 	umull	r2, r3, r3, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	461d      	mov	r5, r3
 8005342:	f04f 0600 	mov.w	r6, #0
 8005346:	46a9      	mov	r9, r5
 8005348:	46b2      	mov	sl, r6
 800534a:	eb19 0309 	adds.w	r3, r9, r9
 800534e:	eb4a 040a 	adc.w	r4, sl, sl
 8005352:	4699      	mov	r9, r3
 8005354:	46a2      	mov	sl, r4
 8005356:	eb19 0905 	adds.w	r9, r9, r5
 800535a:	eb4a 0a06 	adc.w	sl, sl, r6
 800535e:	f04f 0100 	mov.w	r1, #0
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800536a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800536e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005372:	4689      	mov	r9, r1
 8005374:	4692      	mov	sl, r2
 8005376:	eb19 0005 	adds.w	r0, r9, r5
 800537a:	eb4a 0106 	adc.w	r1, sl, r6
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	461d      	mov	r5, r3
 8005384:	f04f 0600 	mov.w	r6, #0
 8005388:	196b      	adds	r3, r5, r5
 800538a:	eb46 0406 	adc.w	r4, r6, r6
 800538e:	461a      	mov	r2, r3
 8005390:	4623      	mov	r3, r4
 8005392:	f7fb fc81 	bl	8000c98 <__aeabi_uldivmod>
 8005396:	4603      	mov	r3, r0
 8005398:	460c      	mov	r4, r1
 800539a:	461a      	mov	r2, r3
 800539c:	4b2c      	ldr	r3, [pc, #176]	; (8005450 <UART_SetConfig+0x384>)
 800539e:	fba3 1302 	umull	r1, r3, r3, r2
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2164      	movs	r1, #100	; 0x64
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	3332      	adds	r3, #50	; 0x32
 80053b0:	4a27      	ldr	r2, [pc, #156]	; (8005450 <UART_SetConfig+0x384>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053be:	4498      	add	r8, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	461d      	mov	r5, r3
 80053c4:	f04f 0600 	mov.w	r6, #0
 80053c8:	46a9      	mov	r9, r5
 80053ca:	46b2      	mov	sl, r6
 80053cc:	eb19 0309 	adds.w	r3, r9, r9
 80053d0:	eb4a 040a 	adc.w	r4, sl, sl
 80053d4:	4699      	mov	r9, r3
 80053d6:	46a2      	mov	sl, r4
 80053d8:	eb19 0905 	adds.w	r9, r9, r5
 80053dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053f4:	4689      	mov	r9, r1
 80053f6:	4692      	mov	sl, r2
 80053f8:	eb19 0005 	adds.w	r0, r9, r5
 80053fc:	eb4a 0106 	adc.w	r1, sl, r6
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	461d      	mov	r5, r3
 8005406:	f04f 0600 	mov.w	r6, #0
 800540a:	196b      	adds	r3, r5, r5
 800540c:	eb46 0406 	adc.w	r4, r6, r6
 8005410:	461a      	mov	r2, r3
 8005412:	4623      	mov	r3, r4
 8005414:	f7fb fc40 	bl	8000c98 <__aeabi_uldivmod>
 8005418:	4603      	mov	r3, r0
 800541a:	460c      	mov	r4, r1
 800541c:	461a      	mov	r2, r3
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <UART_SetConfig+0x384>)
 8005420:	fba3 1302 	umull	r1, r3, r3, r2
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	2164      	movs	r1, #100	; 0x64
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	3332      	adds	r3, #50	; 0x32
 8005432:	4a07      	ldr	r2, [pc, #28]	; (8005450 <UART_SetConfig+0x384>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	f003 0207 	and.w	r2, r3, #7
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4442      	add	r2, r8
 8005444:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005446:	e1b2      	b.n	80057ae <UART_SetConfig+0x6e2>
 8005448:	40011000 	.word	0x40011000
 800544c:	40011400 	.word	0x40011400
 8005450:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4ad7      	ldr	r2, [pc, #860]	; (80057b8 <UART_SetConfig+0x6ec>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d005      	beq.n	800546a <UART_SetConfig+0x39e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4ad6      	ldr	r2, [pc, #856]	; (80057bc <UART_SetConfig+0x6f0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	f040 80d1 	bne.w	800560c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800546a:	f7fe f843 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 800546e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	469a      	mov	sl, r3
 8005474:	f04f 0b00 	mov.w	fp, #0
 8005478:	46d0      	mov	r8, sl
 800547a:	46d9      	mov	r9, fp
 800547c:	eb18 0308 	adds.w	r3, r8, r8
 8005480:	eb49 0409 	adc.w	r4, r9, r9
 8005484:	4698      	mov	r8, r3
 8005486:	46a1      	mov	r9, r4
 8005488:	eb18 080a 	adds.w	r8, r8, sl
 800548c:	eb49 090b 	adc.w	r9, r9, fp
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	f04f 0200 	mov.w	r2, #0
 8005498:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800549c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054a4:	4688      	mov	r8, r1
 80054a6:	4691      	mov	r9, r2
 80054a8:	eb1a 0508 	adds.w	r5, sl, r8
 80054ac:	eb4b 0609 	adc.w	r6, fp, r9
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4619      	mov	r1, r3
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	f04f 0400 	mov.w	r4, #0
 80054c2:	0094      	lsls	r4, r2, #2
 80054c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054c8:	008b      	lsls	r3, r1, #2
 80054ca:	461a      	mov	r2, r3
 80054cc:	4623      	mov	r3, r4
 80054ce:	4628      	mov	r0, r5
 80054d0:	4631      	mov	r1, r6
 80054d2:	f7fb fbe1 	bl	8000c98 <__aeabi_uldivmod>
 80054d6:	4603      	mov	r3, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	461a      	mov	r2, r3
 80054dc:	4bb8      	ldr	r3, [pc, #736]	; (80057c0 <UART_SetConfig+0x6f4>)
 80054de:	fba3 2302 	umull	r2, r3, r3, r2
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	469b      	mov	fp, r3
 80054ec:	f04f 0c00 	mov.w	ip, #0
 80054f0:	46d9      	mov	r9, fp
 80054f2:	46e2      	mov	sl, ip
 80054f4:	eb19 0309 	adds.w	r3, r9, r9
 80054f8:	eb4a 040a 	adc.w	r4, sl, sl
 80054fc:	4699      	mov	r9, r3
 80054fe:	46a2      	mov	sl, r4
 8005500:	eb19 090b 	adds.w	r9, r9, fp
 8005504:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005514:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005518:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800551c:	4689      	mov	r9, r1
 800551e:	4692      	mov	sl, r2
 8005520:	eb1b 0509 	adds.w	r5, fp, r9
 8005524:	eb4c 060a 	adc.w	r6, ip, sl
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4619      	mov	r1, r3
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	0094      	lsls	r4, r2, #2
 800553c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005540:	008b      	lsls	r3, r1, #2
 8005542:	461a      	mov	r2, r3
 8005544:	4623      	mov	r3, r4
 8005546:	4628      	mov	r0, r5
 8005548:	4631      	mov	r1, r6
 800554a:	f7fb fba5 	bl	8000c98 <__aeabi_uldivmod>
 800554e:	4603      	mov	r3, r0
 8005550:	460c      	mov	r4, r1
 8005552:	461a      	mov	r2, r3
 8005554:	4b9a      	ldr	r3, [pc, #616]	; (80057c0 <UART_SetConfig+0x6f4>)
 8005556:	fba3 1302 	umull	r1, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	2164      	movs	r1, #100	; 0x64
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	3332      	adds	r3, #50	; 0x32
 8005568:	4a95      	ldr	r2, [pc, #596]	; (80057c0 <UART_SetConfig+0x6f4>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005574:	4498      	add	r8, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	469b      	mov	fp, r3
 800557a:	f04f 0c00 	mov.w	ip, #0
 800557e:	46d9      	mov	r9, fp
 8005580:	46e2      	mov	sl, ip
 8005582:	eb19 0309 	adds.w	r3, r9, r9
 8005586:	eb4a 040a 	adc.w	r4, sl, sl
 800558a:	4699      	mov	r9, r3
 800558c:	46a2      	mov	sl, r4
 800558e:	eb19 090b 	adds.w	r9, r9, fp
 8005592:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005596:	f04f 0100 	mov.w	r1, #0
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055aa:	4689      	mov	r9, r1
 80055ac:	4692      	mov	sl, r2
 80055ae:	eb1b 0509 	adds.w	r5, fp, r9
 80055b2:	eb4c 060a 	adc.w	r6, ip, sl
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4619      	mov	r1, r3
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	f04f 0400 	mov.w	r4, #0
 80055c8:	0094      	lsls	r4, r2, #2
 80055ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055ce:	008b      	lsls	r3, r1, #2
 80055d0:	461a      	mov	r2, r3
 80055d2:	4623      	mov	r3, r4
 80055d4:	4628      	mov	r0, r5
 80055d6:	4631      	mov	r1, r6
 80055d8:	f7fb fb5e 	bl	8000c98 <__aeabi_uldivmod>
 80055dc:	4603      	mov	r3, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b77      	ldr	r3, [pc, #476]	; (80057c0 <UART_SetConfig+0x6f4>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	3332      	adds	r3, #50	; 0x32
 80055f6:	4a72      	ldr	r2, [pc, #456]	; (80057c0 <UART_SetConfig+0x6f4>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4442      	add	r2, r8
 8005608:	609a      	str	r2, [r3, #8]
 800560a:	e0d0      	b.n	80057ae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800560c:	f7fd ff5e 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8005610:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	469a      	mov	sl, r3
 8005616:	f04f 0b00 	mov.w	fp, #0
 800561a:	46d0      	mov	r8, sl
 800561c:	46d9      	mov	r9, fp
 800561e:	eb18 0308 	adds.w	r3, r8, r8
 8005622:	eb49 0409 	adc.w	r4, r9, r9
 8005626:	4698      	mov	r8, r3
 8005628:	46a1      	mov	r9, r4
 800562a:	eb18 080a 	adds.w	r8, r8, sl
 800562e:	eb49 090b 	adc.w	r9, r9, fp
 8005632:	f04f 0100 	mov.w	r1, #0
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800563e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005642:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005646:	4688      	mov	r8, r1
 8005648:	4691      	mov	r9, r2
 800564a:	eb1a 0508 	adds.w	r5, sl, r8
 800564e:	eb4b 0609 	adc.w	r6, fp, r9
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4619      	mov	r1, r3
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	f04f 0400 	mov.w	r4, #0
 8005664:	0094      	lsls	r4, r2, #2
 8005666:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800566a:	008b      	lsls	r3, r1, #2
 800566c:	461a      	mov	r2, r3
 800566e:	4623      	mov	r3, r4
 8005670:	4628      	mov	r0, r5
 8005672:	4631      	mov	r1, r6
 8005674:	f7fb fb10 	bl	8000c98 <__aeabi_uldivmod>
 8005678:	4603      	mov	r3, r0
 800567a:	460c      	mov	r4, r1
 800567c:	461a      	mov	r2, r3
 800567e:	4b50      	ldr	r3, [pc, #320]	; (80057c0 <UART_SetConfig+0x6f4>)
 8005680:	fba3 2302 	umull	r2, r3, r3, r2
 8005684:	095b      	lsrs	r3, r3, #5
 8005686:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	469b      	mov	fp, r3
 800568e:	f04f 0c00 	mov.w	ip, #0
 8005692:	46d9      	mov	r9, fp
 8005694:	46e2      	mov	sl, ip
 8005696:	eb19 0309 	adds.w	r3, r9, r9
 800569a:	eb4a 040a 	adc.w	r4, sl, sl
 800569e:	4699      	mov	r9, r3
 80056a0:	46a2      	mov	sl, r4
 80056a2:	eb19 090b 	adds.w	r9, r9, fp
 80056a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056aa:	f04f 0100 	mov.w	r1, #0
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056be:	4689      	mov	r9, r1
 80056c0:	4692      	mov	sl, r2
 80056c2:	eb1b 0509 	adds.w	r5, fp, r9
 80056c6:	eb4c 060a 	adc.w	r6, ip, sl
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4619      	mov	r1, r3
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	f04f 0400 	mov.w	r4, #0
 80056dc:	0094      	lsls	r4, r2, #2
 80056de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056e2:	008b      	lsls	r3, r1, #2
 80056e4:	461a      	mov	r2, r3
 80056e6:	4623      	mov	r3, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	4631      	mov	r1, r6
 80056ec:	f7fb fad4 	bl	8000c98 <__aeabi_uldivmod>
 80056f0:	4603      	mov	r3, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	461a      	mov	r2, r3
 80056f6:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <UART_SetConfig+0x6f4>)
 80056f8:	fba3 1302 	umull	r1, r3, r3, r2
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	2164      	movs	r1, #100	; 0x64
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	3332      	adds	r3, #50	; 0x32
 800570a:	4a2d      	ldr	r2, [pc, #180]	; (80057c0 <UART_SetConfig+0x6f4>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005716:	4498      	add	r8, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	469b      	mov	fp, r3
 800571c:	f04f 0c00 	mov.w	ip, #0
 8005720:	46d9      	mov	r9, fp
 8005722:	46e2      	mov	sl, ip
 8005724:	eb19 0309 	adds.w	r3, r9, r9
 8005728:	eb4a 040a 	adc.w	r4, sl, sl
 800572c:	4699      	mov	r9, r3
 800572e:	46a2      	mov	sl, r4
 8005730:	eb19 090b 	adds.w	r9, r9, fp
 8005734:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005738:	f04f 0100 	mov.w	r1, #0
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005744:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005748:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800574c:	4689      	mov	r9, r1
 800574e:	4692      	mov	sl, r2
 8005750:	eb1b 0509 	adds.w	r5, fp, r9
 8005754:	eb4c 060a 	adc.w	r6, ip, sl
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4619      	mov	r1, r3
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	f04f 0400 	mov.w	r4, #0
 800576a:	0094      	lsls	r4, r2, #2
 800576c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005770:	008b      	lsls	r3, r1, #2
 8005772:	461a      	mov	r2, r3
 8005774:	4623      	mov	r3, r4
 8005776:	4628      	mov	r0, r5
 8005778:	4631      	mov	r1, r6
 800577a:	f7fb fa8d 	bl	8000c98 <__aeabi_uldivmod>
 800577e:	4603      	mov	r3, r0
 8005780:	460c      	mov	r4, r1
 8005782:	461a      	mov	r2, r3
 8005784:	4b0e      	ldr	r3, [pc, #56]	; (80057c0 <UART_SetConfig+0x6f4>)
 8005786:	fba3 1302 	umull	r1, r3, r3, r2
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	2164      	movs	r1, #100	; 0x64
 800578e:	fb01 f303 	mul.w	r3, r1, r3
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	3332      	adds	r3, #50	; 0x32
 8005798:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <UART_SetConfig+0x6f4>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	f003 020f 	and.w	r2, r3, #15
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4442      	add	r2, r8
 80057aa:	609a      	str	r2, [r3, #8]
}
 80057ac:	e7ff      	b.n	80057ae <UART_SetConfig+0x6e2>
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b8:	40011000 	.word	0x40011000
 80057bc:	40011400 	.word	0x40011400
 80057c0:	51eb851f 	.word	0x51eb851f

080057c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <MX_DMA_Init+0x3c>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	4a0b      	ldr	r2, [pc, #44]	; (8005800 <MX_DMA_Init+0x3c>)
 80057d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057d8:	6313      	str	r3, [r2, #48]	; 0x30
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <MX_DMA_Init+0x3c>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80057e6:	2200      	movs	r2, #0
 80057e8:	2100      	movs	r1, #0
 80057ea:	2010      	movs	r0, #16
 80057ec:	f7fb fd21 	bl	8001232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80057f0:	2010      	movs	r0, #16
 80057f2:	f7fb fd3a 	bl	800126a <HAL_NVIC_EnableIRQ>

}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40023800 	.word	0x40023800

08005804 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	; 0x30
 8005808:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800580a:	f107 031c 	add.w	r3, r7, #28
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	605a      	str	r2, [r3, #4]
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	60da      	str	r2, [r3, #12]
 8005818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	4bac      	ldr	r3, [pc, #688]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	4aab      	ldr	r2, [pc, #684]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005824:	f043 0310 	orr.w	r3, r3, #16
 8005828:	6313      	str	r3, [r2, #48]	; 0x30
 800582a:	4ba9      	ldr	r3, [pc, #676]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	4ba5      	ldr	r3, [pc, #660]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	4aa4      	ldr	r2, [pc, #656]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005840:	f043 0304 	orr.w	r3, r3, #4
 8005844:	6313      	str	r3, [r2, #48]	; 0x30
 8005846:	4ba2      	ldr	r3, [pc, #648]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005852:	2300      	movs	r3, #0
 8005854:	613b      	str	r3, [r7, #16]
 8005856:	4b9e      	ldr	r3, [pc, #632]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	4a9d      	ldr	r2, [pc, #628]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 800585c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005860:	6313      	str	r3, [r2, #48]	; 0x30
 8005862:	4b9b      	ldr	r3, [pc, #620]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	4b97      	ldr	r3, [pc, #604]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	4a96      	ldr	r2, [pc, #600]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6313      	str	r3, [r2, #48]	; 0x30
 800587e:	4b94      	ldr	r3, [pc, #592]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	4b90      	ldr	r3, [pc, #576]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	4a8f      	ldr	r2, [pc, #572]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 8005894:	f043 0302 	orr.w	r3, r3, #2
 8005898:	6313      	str	r3, [r2, #48]	; 0x30
 800589a:	4b8d      	ldr	r3, [pc, #564]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	607b      	str	r3, [r7, #4]
 80058aa:	4b89      	ldr	r3, [pc, #548]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	4a88      	ldr	r2, [pc, #544]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 80058b0:	f043 0308 	orr.w	r3, r3, #8
 80058b4:	6313      	str	r3, [r2, #48]	; 0x30
 80058b6:	4b86      	ldr	r3, [pc, #536]	; (8005ad0 <MX_GPIO_Init+0x2cc>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	607b      	str	r3, [r7, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2108      	movs	r1, #8
 80058c6:	4883      	ldr	r0, [pc, #524]	; (8005ad4 <MX_GPIO_Init+0x2d0>)
 80058c8:	f7fc f9fc 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80058cc:	2201      	movs	r2, #1
 80058ce:	2101      	movs	r1, #1
 80058d0:	4881      	ldr	r0, [pc, #516]	; (8005ad8 <MX_GPIO_Init+0x2d4>)
 80058d2:	f7fc f9f7 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, En_STEPPER_UPPER_Pin|En_STEPPER_LOWER_Pin|Dc_IN2_Pin|Dc_IN1_Pin 
 80058d6:	2200      	movs	r2, #0
 80058d8:	f648 6110 	movw	r1, #36368	; 0x8e10
 80058dc:	487f      	ldr	r0, [pc, #508]	; (8005adc <MX_GPIO_Init+0x2d8>)
 80058de:	f7fc f9f1 	bl	8001cc4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step_STEPPER_LOWER_Pin|Dir_STEPPER_LOWER_Pin|Step_STEPPER_UPPER_Pin|Dir_STEPPER_UPPER_Pin, GPIO_PIN_RESET);
 80058e2:	2200      	movs	r2, #0
 80058e4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80058e8:	487b      	ldr	r0, [pc, #492]	; (8005ad8 <MX_GPIO_Init+0x2d4>)
 80058ea:	f7fc f9eb 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80058ee:	2304      	movs	r3, #4
 80058f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80058f2:	2300      	movs	r3, #0
 80058f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058fa:	f107 031c 	add.w	r3, r7, #28
 80058fe:	4619      	mov	r1, r3
 8005900:	4874      	ldr	r0, [pc, #464]	; (8005ad4 <MX_GPIO_Init+0x2d0>)
 8005902:	f7fc f85d 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8005906:	2308      	movs	r3, #8
 8005908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800590a:	2301      	movs	r3, #1
 800590c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590e:	2300      	movs	r3, #0
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005912:	2300      	movs	r3, #0
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8005916:	f107 031c 	add.w	r3, r7, #28
 800591a:	4619      	mov	r1, r3
 800591c:	486d      	ldr	r0, [pc, #436]	; (8005ad4 <MX_GPIO_Init+0x2d0>)
 800591e:	f7fc f84f 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8005922:	2332      	movs	r3, #50	; 0x32
 8005924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005926:	4b6e      	ldr	r3, [pc, #440]	; (8005ae0 <MX_GPIO_Init+0x2dc>)
 8005928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592a:	2300      	movs	r3, #0
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800592e:	f107 031c 	add.w	r3, r7, #28
 8005932:	4619      	mov	r1, r3
 8005934:	4867      	ldr	r0, [pc, #412]	; (8005ad4 <MX_GPIO_Init+0x2d0>)
 8005936:	f7fc f843 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Dir_STEPPER_LOWER_Pin|Step_STEPPER_UPPER_Pin|Dir_STEPPER_UPPER_Pin;
 800593a:	f240 3381 	movw	r3, #897	; 0x381
 800593e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005940:	2301      	movs	r3, #1
 8005942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005944:	2300      	movs	r3, #0
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005948:	2300      	movs	r3, #0
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800594c:	f107 031c 	add.w	r3, r7, #28
 8005950:	4619      	mov	r1, r3
 8005952:	4861      	ldr	r0, [pc, #388]	; (8005ad8 <MX_GPIO_Init+0x2d4>)
 8005954:	f7fc f834 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8005958:	2308      	movs	r3, #8
 800595a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595c:	2302      	movs	r3, #2
 800595e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005960:	2300      	movs	r3, #0
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005964:	2300      	movs	r3, #0
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005968:	2305      	movs	r3, #5
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800596c:	f107 031c 	add.w	r3, r7, #28
 8005970:	4619      	mov	r1, r3
 8005972:	4859      	ldr	r0, [pc, #356]	; (8005ad8 <MX_GPIO_Init+0x2d4>)
 8005974:	f7fc f824 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005978:	2301      	movs	r3, #1
 800597a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800597c:	4b58      	ldr	r3, [pc, #352]	; (8005ae0 <MX_GPIO_Init+0x2dc>)
 800597e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005980:	2300      	movs	r3, #0
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005984:	f107 031c 	add.w	r3, r7, #28
 8005988:	4619      	mov	r1, r3
 800598a:	4856      	ldr	r0, [pc, #344]	; (8005ae4 <MX_GPIO_Init+0x2e0>)
 800598c:	f7fc f818 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005990:	2310      	movs	r3, #16
 8005992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005994:	2302      	movs	r3, #2
 8005996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005998:	2300      	movs	r3, #0
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800599c:	2300      	movs	r3, #0
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80059a0:	2306      	movs	r3, #6
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80059a4:	f107 031c 	add.w	r3, r7, #28
 80059a8:	4619      	mov	r1, r3
 80059aa:	484e      	ldr	r0, [pc, #312]	; (8005ae4 <MX_GPIO_Init+0x2e0>)
 80059ac:	f7fc f808 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 80059b0:	23a0      	movs	r3, #160	; 0xa0
 80059b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059b4:	2302      	movs	r3, #2
 80059b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059bc:	2303      	movs	r3, #3
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059c0:	2305      	movs	r3, #5
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059c4:	f107 031c 	add.w	r3, r7, #28
 80059c8:	4619      	mov	r1, r3
 80059ca:	4846      	ldr	r0, [pc, #280]	; (8005ae4 <MX_GPIO_Init+0x2e0>)
 80059cc:	f7fb fff8 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80059d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80059d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d6:	2302      	movs	r3, #2
 80059d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059de:	2300      	movs	r3, #0
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80059e2:	2305      	movs	r3, #5
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e6:	f107 031c 	add.w	r3, r7, #28
 80059ea:	4619      	mov	r1, r3
 80059ec:	483e      	ldr	r0, [pc, #248]	; (8005ae8 <MX_GPIO_Init+0x2e4>)
 80059ee:	f7fb ffe7 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = En_STEPPER_UPPER_Pin|En_STEPPER_LOWER_Pin;
 80059f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80059f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059f8:	2301      	movs	r3, #1
 80059fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005a00:	2301      	movs	r3, #1
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a04:	f107 031c 	add.w	r3, r7, #28
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4834      	ldr	r0, [pc, #208]	; (8005adc <MX_GPIO_Init+0x2d8>)
 8005a0c:	f7fb ffd8 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Dc_IN2_Pin|Dc_IN1_Pin|Audio_RST_Pin;
 8005a10:	f648 0310 	movw	r3, #34832	; 0x8810
 8005a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a16:	2301      	movs	r3, #1
 8005a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a22:	f107 031c 	add.w	r3, r7, #28
 8005a26:	4619      	mov	r1, r3
 8005a28:	482c      	ldr	r0, [pc, #176]	; (8005adc <MX_GPIO_Init+0x2d8>)
 8005a2a:	f7fb ffc9 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Step_STEPPER_LOWER_Pin;
 8005a2e:	2340      	movs	r3, #64	; 0x40
 8005a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a32:	2301      	movs	r3, #1
 8005a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Step_STEPPER_LOWER_GPIO_Port, &GPIO_InitStruct);
 8005a3e:	f107 031c 	add.w	r3, r7, #28
 8005a42:	4619      	mov	r1, r3
 8005a44:	4824      	ldr	r0, [pc, #144]	; (8005ad8 <MX_GPIO_Init+0x2d4>)
 8005a46:	f7fb ffbb 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Servo_JOINT_Pin|Servo_EFFECTOR_Pin;
 8005a4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a50:	2302      	movs	r3, #2
 8005a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a60:	f107 031c 	add.w	r3, r7, #28
 8005a64:	4619      	mov	r1, r3
 8005a66:	481f      	ldr	r0, [pc, #124]	; (8005ae4 <MX_GPIO_Init+0x2e0>)
 8005a68:	f7fb ffaa 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005a6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a72:	2302      	movs	r3, #2
 8005a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005a7e:	230a      	movs	r3, #10
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a82:	f107 031c 	add.w	r3, r7, #28
 8005a86:	4619      	mov	r1, r3
 8005a88:	4816      	ldr	r0, [pc, #88]	; (8005ae4 <MX_GPIO_Init+0x2e0>)
 8005a8a:	f7fb ff99 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8005a8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a94:	2302      	movs	r3, #2
 8005a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005aa0:	2306      	movs	r3, #6
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aa4:	f107 031c 	add.w	r3, r7, #28
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	480b      	ldr	r0, [pc, #44]	; (8005ad8 <MX_GPIO_Init+0x2d4>)
 8005aac:	f7fb ff88 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8005ab0:	2320      	movs	r3, #32
 8005ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005abc:	f107 031c 	add.w	r3, r7, #28
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4806      	ldr	r0, [pc, #24]	; (8005adc <MX_GPIO_Init+0x2d8>)
 8005ac4:	f7fb ff7c 	bl	80019c0 <HAL_GPIO_Init>

}
 8005ac8:	bf00      	nop
 8005aca:	3730      	adds	r7, #48	; 0x30
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	40021000 	.word	0x40021000
 8005ad8:	40020800 	.word	0x40020800
 8005adc:	40020c00 	.word	0x40020c00
 8005ae0:	10120000 	.word	0x10120000
 8005ae4:	40020000 	.word	0x40020000
 8005ae8:	40020400 	.word	0x40020400

08005aec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005af0:	4b12      	ldr	r3, [pc, #72]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005af2:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <MX_I2C1_Init+0x54>)
 8005af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005af8:	4a12      	ldr	r2, [pc, #72]	; (8005b44 <MX_I2C1_Init+0x58>)
 8005afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005afc:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005b02:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b1c:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b28:	4804      	ldr	r0, [pc, #16]	; (8005b3c <MX_I2C1_Init+0x50>)
 8005b2a:	f7fc f8e5 	bl	8001cf8 <HAL_I2C_Init>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005b34:	f000 fb3c 	bl	80061b0 <Error_Handler>
  }

}
 8005b38:	bf00      	nop
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	2000020c 	.word	0x2000020c
 8005b40:	40005400 	.word	0x40005400
 8005b44:	00061a80 	.word	0x00061a80

08005b48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08a      	sub	sp, #40	; 0x28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b50:	f107 0314 	add.w	r3, r7, #20
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	605a      	str	r2, [r3, #4]
 8005b5a:	609a      	str	r2, [r3, #8]
 8005b5c:	60da      	str	r2, [r3, #12]
 8005b5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <HAL_I2C_MspInit+0x84>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d12c      	bne.n	8005bc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <HAL_I2C_MspInit+0x88>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <HAL_I2C_MspInit+0x88>)
 8005b74:	f043 0302 	orr.w	r3, r3, #2
 8005b78:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7a:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <HAL_I2C_MspInit+0x88>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8005b86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b8c:	2312      	movs	r3, #18
 8005b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b90:	2301      	movs	r3, #1
 8005b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b94:	2300      	movs	r3, #0
 8005b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005b98:	2304      	movs	r3, #4
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	480c      	ldr	r0, [pc, #48]	; (8005bd4 <HAL_I2C_MspInit+0x8c>)
 8005ba4:	f7fb ff0c 	bl	80019c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	4b08      	ldr	r3, [pc, #32]	; (8005bd0 <HAL_I2C_MspInit+0x88>)
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	4a07      	ldr	r2, [pc, #28]	; (8005bd0 <HAL_I2C_MspInit+0x88>)
 8005bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8005bb8:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <HAL_I2C_MspInit+0x88>)
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	3728      	adds	r7, #40	; 0x28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	40005400 	.word	0x40005400
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40020400 	.word	0x40020400

08005bd8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8005bd8:	b590      	push	{r4, r7, lr}
 8005bda:	b08d      	sub	sp, #52	; 0x34
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a4b      	ldr	r2, [pc, #300]	; (8005d10 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	f040 8089 	bne.w	8005cfc <HAL_TIM_IC_CaptureCallback+0x124>
	uint16_t time;
	char buff[25];
	uint8_t len;

	time = __HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_2) -__HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_1);
 8005bea:	4b49      	ldr	r3, [pc, #292]	; (8005d10 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	4b47      	ldr	r3, [pc, #284]	; (8005d10 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	847b      	strh	r3, [r7, #34]	; 0x22
	if(time < 23615) {
 8005bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c00:	f645 423e 	movw	r2, #23614	; 0x5c3e
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d879      	bhi.n	8005cfc <HAL_TIM_IC_CaptureCallback+0x124>
		Hcsr04_Distance_tmp = (float)time / 2.0 * 0.0343;
 8005c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	ee17 0a90 	vmov	r0, s15
 8005c16:	f7fa fc9f 	bl	8000558 <__aeabi_f2d>
 8005c1a:	f04f 0200 	mov.w	r2, #0
 8005c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c22:	f7fa fe1b 	bl	800085c <__aeabi_ddiv>
 8005c26:	4603      	mov	r3, r0
 8005c28:	460c      	mov	r4, r1
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	a336      	add	r3, pc, #216	; (adr r3, 8005d08 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f7fa fce8 	bl	8000608 <__aeabi_dmul>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	4621      	mov	r1, r4
 8005c40:	f7fa ffda 	bl	8000bf8 <__aeabi_d2f>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b33      	ldr	r3, [pc, #204]	; (8005d14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005c48:	601a      	str	r2, [r3, #0]
		len = sprintf(buff,"%.2f ",Hcsr04_Distance_tmp);
 8005c4a:	4b32      	ldr	r3, [pc, #200]	; (8005d14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fa fc82 	bl	8000558 <__aeabi_f2d>
 8005c54:	4603      	mov	r3, r0
 8005c56:	460c      	mov	r4, r1
 8005c58:	f107 0008 	add.w	r0, r7, #8
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4623      	mov	r3, r4
 8005c60:	492d      	ldr	r1, [pc, #180]	; (8005d18 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005c62:	f001 fd35 	bl	80076d0 <siprintf>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		for(int i =0; i<strlen(buff);i++){
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c70:	e00d      	b.n	8005c8e <HAL_TIM_IC_CaptureCallback+0xb6>
			H_sum +=buff[i];
 8005c72:	f107 0208 	add.w	r2, r7, #8
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	4413      	add	r3, r2
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <HAL_TIM_IC_CaptureCallback+0x144>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4413      	add	r3, r2
 8005c84:	4a25      	ldr	r2, [pc, #148]	; (8005d1c <HAL_TIM_IC_CaptureCallback+0x144>)
 8005c86:	6013      	str	r3, [r2, #0]
		for(int i =0; i<strlen(buff);i++){
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8e:	f107 0308 	add.w	r3, r7, #8
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fa faa4 	bl	80001e0 <strlen>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d8e8      	bhi.n	8005c72 <HAL_TIM_IC_CaptureCallback+0x9a>
		}
		H_sum = H_sum %37;
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <HAL_TIM_IC_CaptureCallback+0x144>)
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	4b1e      	ldr	r3, [pc, #120]	; (8005d20 <HAL_TIM_IC_CaptureCallback+0x148>)
 8005ca6:	fb83 2301 	smull	r2, r3, r3, r1
 8005caa:	440b      	add	r3, r1
 8005cac:	115a      	asrs	r2, r3, #5
 8005cae:	17cb      	asrs	r3, r1, #31
 8005cb0:	1ad2      	subs	r2, r2, r3
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	1aca      	subs	r2, r1, r3
 8005cbe:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <HAL_TIM_IC_CaptureCallback+0x144>)
 8005cc0:	601a      	str	r2, [r3, #0]
		len = sprintf(buff,"%.2f #%d\r\n" ,Hcsr04_Distance_tmp,H_sum);
 8005cc2:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fa fc46 	bl	8000558 <__aeabi_f2d>
 8005ccc:	460a      	mov	r2, r1
 8005cce:	4601      	mov	r1, r0
 8005cd0:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <HAL_TIM_IC_CaptureCallback+0x144>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f107 0008 	add.w	r0, r7, #8
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	460a      	mov	r2, r1
 8005cde:	4911      	ldr	r1, [pc, #68]	; (8005d24 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8005ce0:	f001 fcf6 	bl	80076d0 <siprintf>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		HAL_UART_Transmit(&huart2, (uint8_t*)buff, len,15);
 8005cea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f107 0108 	add.w	r1, r7, #8
 8005cf4:	230f      	movs	r3, #15
 8005cf6:	480c      	ldr	r0, [pc, #48]	; (8005d28 <HAL_TIM_IC_CaptureCallback+0x150>)
 8005cf8:	f7fe fda3 	bl	8004842 <HAL_UART_Transmit>
	}
	}
}
 8005cfc:	bf00      	nop
 8005cfe:	372c      	adds	r7, #44	; 0x2c
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd90      	pop	{r4, r7, pc}
 8005d04:	f3af 8000 	nop.w
 8005d08:	04816f00 	.word	0x04816f00
 8005d0c:	3fa18fc5 	.word	0x3fa18fc5
 8005d10:	200002b0 	.word	0x200002b0
 8005d14:	20000264 	.word	0x20000264
 8005d18:	0800a4f8 	.word	0x0800a4f8
 8005d1c:	20000268 	.word	0x20000268
 8005d20:	dd67c8a7 	.word	0xdd67c8a7
 8005d24:	0800a500 	.word	0x0800a500
 8005d28:	20000390 	.word	0x20000390

08005d2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
if(htim == &htim2){
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a10      	ldr	r2, [pc, #64]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d118      	bne.n	8005d6e <HAL_TIM_PeriodElapsedCallback+0x42>
	if(flag==1){
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d114      	bne.n	8005d6e <HAL_TIM_PeriodElapsedCallback+0x42>
	if(out) {
 8005d44:	4b0e      	ldr	r3, [pc, #56]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d008      	beq.n	8005d5e <HAL_TIM_PeriodElapsedCallback+0x32>
	        out = 0;
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port, Step_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
 8005d52:	2200      	movs	r2, #0
 8005d54:	2140      	movs	r1, #64	; 0x40
 8005d56:	480b      	ldr	r0, [pc, #44]	; (8005d84 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005d58:	f7fb ffb4 	bl	8001cc4 <HAL_GPIO_WritePin>
	        out = 1;
	        HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port, Step_STEPPER_LOWER_Pin, GPIO_PIN_SET);
	    }
	}
}
}
 8005d5c:	e007      	b.n	8005d6e <HAL_TIM_PeriodElapsedCallback+0x42>
	        out = 1;
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port, Step_STEPPER_LOWER_Pin, GPIO_PIN_SET);
 8005d64:	2201      	movs	r2, #1
 8005d66:	2140      	movs	r1, #64	; 0x40
 8005d68:	4806      	ldr	r0, [pc, #24]	; (8005d84 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005d6a:	f7fb ffab 	bl	8001cc4 <HAL_GPIO_WritePin>
}
 8005d6e:	bf00      	nop
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	200002f0 	.word	0x200002f0
 8005d7c:	20000261 	.word	0x20000261
 8005d80:	200001f9 	.word	0x200001f9
 8005d84:	40020800 	.word	0x40020800

08005d88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	flag=1;
 8005d90:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_UART_RxCpltCallback+0x20>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, &Received, 1);
 8005d96:	2201      	movs	r2, #1
 8005d98:	4904      	ldr	r1, [pc, #16]	; (8005dac <HAL_UART_RxCpltCallback+0x24>)
 8005d9a:	4805      	ldr	r0, [pc, #20]	; (8005db0 <HAL_UART_RxCpltCallback+0x28>)
 8005d9c:	f7fe fdea 	bl	8004974 <HAL_UART_Receive_DMA>
 }
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20000261 	.word	0x20000261
 8005dac:	20000260 	.word	0x20000260
 8005db0:	20000390 	.word	0x20000390

08005db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	flag=0;
 8005dba:	4b9f      	ldr	r3, [pc, #636]	; (8006038 <main+0x284>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
	H_sum = 0;
 8005dc0:	4b9e      	ldr	r3, [pc, #632]	; (800603c <main+0x288>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]
	pwm_duty=0;
 8005dc6:	4b9e      	ldr	r3, [pc, #632]	; (8006040 <main+0x28c>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005dcc:	f7fb f8e4 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005dd0:	f000 f986 	bl	80060e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005dd4:	f7ff fd16 	bl	8005804 <MX_GPIO_Init>
  MX_DMA_Init();
 8005dd8:	f7ff fcf4 	bl	80057c4 <MX_DMA_Init>
  MX_TIM3_Init();
 8005ddc:	f000 fb06 	bl	80063ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8005de0:	f000 fbae 	bl	8006540 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8005de4:	f000 fd24 	bl	8006830 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8005de8:	f7ff fe80 	bl	8005aec <MX_I2C1_Init>
  MX_TIM2_Init();
 8005dec:	f000 fab2 	bl	8006354 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 8005df0:	4894      	ldr	r0, [pc, #592]	; (8006044 <main+0x290>)
 8005df2:	f7fd fbbe 	bl	8003572 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8005df6:	2100      	movs	r1, #0
 8005df8:	4892      	ldr	r0, [pc, #584]	; (8006044 <main+0x290>)
 8005dfa:	f7fd fc37 	bl	800366c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005dfe:	2104      	movs	r1, #4
 8005e00:	4890      	ldr	r0, [pc, #576]	; (8006044 <main+0x290>)
 8005e02:	f7fd fc33 	bl	800366c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005e06:	2108      	movs	r1, #8
 8005e08:	488e      	ldr	r0, [pc, #568]	; (8006044 <main+0x290>)
 8005e0a:	f7fd fc2f 	bl	800366c <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim3);
 8005e0e:	488e      	ldr	r0, [pc, #568]	; (8006048 <main+0x294>)
 8005e10:	f7fd fbaf 	bl	8003572 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8005e14:	2108      	movs	r1, #8
 8005e16:	488c      	ldr	r0, [pc, #560]	; (8006048 <main+0x294>)
 8005e18:	f7fd fc28 	bl	800366c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	488a      	ldr	r0, [pc, #552]	; (8006048 <main+0x294>)
 8005e20:	f7fd fc8b 	bl	800373a <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8005e24:	2104      	movs	r1, #4
 8005e26:	4888      	ldr	r0, [pc, #544]	; (8006048 <main+0x294>)
 8005e28:	f7fd fcaa 	bl	8003780 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start_IT(&htim2);
 8005e2c:	4887      	ldr	r0, [pc, #540]	; (800604c <main+0x298>)
 8005e2e:	f7fd fbc4 	bl	80035ba <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_DMA(&huart2, &Received, 1);
 8005e32:	2201      	movs	r2, #1
 8005e34:	4986      	ldr	r1, [pc, #536]	; (8006050 <main+0x29c>)
 8005e36:	4887      	ldr	r0, [pc, #540]	; (8006054 <main+0x2a0>)
 8005e38:	f7fe fd9c 	bl	8004974 <HAL_UART_Receive_DMA>

  HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x10, 1, (uint8_t*)&test, sizeof(test), HAL_MAX_DELAY);
 8005e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e40:	9302      	str	r3, [sp, #8]
 8005e42:	2301      	movs	r3, #1
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	4b84      	ldr	r3, [pc, #528]	; (8006058 <main+0x2a4>)
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	2210      	movs	r2, #16
 8005e4e:	21a0      	movs	r1, #160	; 0xa0
 8005e50:	4882      	ldr	r0, [pc, #520]	; (800605c <main+0x2a8>)
 8005e52:	f7fc f889 	bl	8001f68 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c1, 0xa0, 0x10, 1, (uint8_t*)&result, sizeof(result), HAL_MAX_DELAY);
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5a:	9302      	str	r3, [sp, #8]
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	4b7f      	ldr	r3, [pc, #508]	; (8006060 <main+0x2ac>)
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	2301      	movs	r3, #1
 8005e66:	2210      	movs	r2, #16
 8005e68:	21a0      	movs	r1, #160	; 0xa0
 8005e6a:	487c      	ldr	r0, [pc, #496]	; (800605c <main+0x2a8>)
 8005e6c:	f7fc f976 	bl	800215c <HAL_I2C_Mem_Read>
  HAL_GPIO_WritePin(Dir_STEPPER_LOWER_GPIO_Port, Dir_STEPPER_LOWER_Pin, GPIO_PIN_SET);
 8005e70:	2201      	movs	r2, #1
 8005e72:	2180      	movs	r1, #128	; 0x80
 8005e74:	487b      	ldr	r0, [pc, #492]	; (8006064 <main+0x2b0>)
 8005e76:	f7fb ff25 	bl	8001cc4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1){
 8005e7a:	4b6f      	ldr	r3, [pc, #444]	; (8006038 <main+0x284>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	f040 8122 	bne.w	80060c8 <main+0x314>
		  switch (atoi(&Received)){
 8005e84:	4872      	ldr	r0, [pc, #456]	; (8006050 <main+0x29c>)
 8005e86:	f000 fda8 	bl	80069da <atoi>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	f200 80f1 	bhi.w	8006074 <main+0x2c0>
 8005e92:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <main+0xe4>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005ead 	.word	0x08005ead
 8005e9c:	08005f41 	.word	0x08005f41
 8005ea0:	08005f8f 	.word	0x08005f8f
 8005ea4:	08005fdd 	.word	0x08005fdd
 8005ea8:	0800602b 	.word	0x0800602b
		  case 0: // do przodu
			  if(Hcsr04_Distance_tmp >= 50){
 8005eac:	4b6e      	ldr	r3, [pc, #440]	; (8006068 <main+0x2b4>)
 8005eae:	edd3 7a00 	vldr	s15, [r3]
 8005eb2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800606c <main+0x2b8>
 8005eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebe:	db26      	blt.n	8005f0e <main+0x15a>
				  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ec6:	486a      	ldr	r0, [pc, #424]	; (8006070 <main+0x2bc>)
 8005ec8:	f7fb fefc 	bl	8001cc4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ed2:	4867      	ldr	r0, [pc, #412]	; (8006070 <main+0x2bc>)
 8005ed4:	f7fb fef6 	bl	8001cc4 <HAL_GPIO_WritePin>

				  if(pwm_duty <3000){
 8005ed8:	4b59      	ldr	r3, [pc, #356]	; (8006040 <main+0x28c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	dc04      	bgt.n	8005eee <main+0x13a>
					  pwm_duty +=1;
 8005ee4:	4b56      	ldr	r3, [pc, #344]	; (8006040 <main+0x28c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	4a55      	ldr	r2, [pc, #340]	; (8006040 <main+0x28c>)
 8005eec:	6013      	str	r3, [r2, #0]
				  }
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm_duty);
 8005eee:	4b54      	ldr	r3, [pc, #336]	; (8006040 <main+0x28c>)
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	4b54      	ldr	r3, [pc, #336]	; (8006044 <main+0x290>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,pwm_duty);
 8005ef8:	4b51      	ldr	r3, [pc, #324]	; (8006040 <main+0x28c>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b51      	ldr	r3, [pc, #324]	; (8006044 <main+0x290>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,pwm_duty);
 8005f02:	4b4f      	ldr	r3, [pc, #316]	; (8006040 <main+0x28c>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b4f      	ldr	r3, [pc, #316]	; (8006044 <main+0x290>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	63da      	str	r2, [r3, #60]	; 0x3c

				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
			  }
			  break;
 8005f0c:	e0dd      	b.n	80060ca <main+0x316>
				  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f14:	4856      	ldr	r0, [pc, #344]	; (8006070 <main+0x2bc>)
 8005f16:	f7fb fed5 	bl	8001cc4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f20:	4853      	ldr	r0, [pc, #332]	; (8006070 <main+0x2bc>)
 8005f22:	f7fb fecf 	bl	8001cc4 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8005f26:	4b47      	ldr	r3, [pc, #284]	; (8006044 <main+0x290>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	63da      	str	r2, [r3, #60]	; 0x3c
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8005f2e:	4b45      	ldr	r3, [pc, #276]	; (8006044 <main+0x290>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8005f36:	4b43      	ldr	r3, [pc, #268]	; (8006044 <main+0x290>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8005f3e:	e0c4      	b.n	80060ca <main+0x316>

		  case 1: // w lewo
			  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8005f40:	2200      	movs	r2, #0
 8005f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f46:	484a      	ldr	r0, [pc, #296]	; (8006070 <main+0x2bc>)
 8005f48:	f7fb febc 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_SET);
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f52:	4847      	ldr	r0, [pc, #284]	; (8006070 <main+0x2bc>)
 8005f54:	f7fb feb6 	bl	8001cc4 <HAL_GPIO_WritePin>

			  if(pwm_duty <3000){
 8005f58:	4b39      	ldr	r3, [pc, #228]	; (8006040 <main+0x28c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005f60:	4293      	cmp	r3, r2
 8005f62:	dc04      	bgt.n	8005f6e <main+0x1ba>
				  pwm_duty +=1;
 8005f64:	4b36      	ldr	r3, [pc, #216]	; (8006040 <main+0x28c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	4a35      	ldr	r2, [pc, #212]	; (8006040 <main+0x28c>)
 8005f6c:	6013      	str	r3, [r2, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,pwm_duty);
 8005f6e:	4b34      	ldr	r3, [pc, #208]	; (8006040 <main+0x28c>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4b34      	ldr	r3, [pc, #208]	; (8006044 <main+0x290>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,pwm_duty);
 8005f78:	4b31      	ldr	r3, [pc, #196]	; (8006040 <main+0x28c>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b31      	ldr	r3, [pc, #196]	; (8006044 <main+0x290>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm_duty);
 8005f82:	4b2f      	ldr	r3, [pc, #188]	; (8006040 <main+0x28c>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4b2f      	ldr	r3, [pc, #188]	; (8006044 <main+0x290>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8005f8c:	e09d      	b.n	80060ca <main+0x316>

		  case 2: //  w prawo
			  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_SET);
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f94:	4836      	ldr	r0, [pc, #216]	; (8006070 <main+0x2bc>)
 8005f96:	f7fb fe95 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fa0:	4833      	ldr	r0, [pc, #204]	; (8006070 <main+0x2bc>)
 8005fa2:	f7fb fe8f 	bl	8001cc4 <HAL_GPIO_WritePin>

			  if(pwm_duty <3000){
 8005fa6:	4b26      	ldr	r3, [pc, #152]	; (8006040 <main+0x28c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	dc04      	bgt.n	8005fbc <main+0x208>
				  pwm_duty +=1;
 8005fb2:	4b23      	ldr	r3, [pc, #140]	; (8006040 <main+0x28c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	4a21      	ldr	r2, [pc, #132]	; (8006040 <main+0x28c>)
 8005fba:	6013      	str	r3, [r2, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,pwm_duty);
 8005fbc:	4b20      	ldr	r3, [pc, #128]	; (8006040 <main+0x28c>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b20      	ldr	r3, [pc, #128]	; (8006044 <main+0x290>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,pwm_duty);
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <main+0x28c>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b1e      	ldr	r3, [pc, #120]	; (8006044 <main+0x290>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm_duty);
 8005fd0:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <main+0x28c>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	4b1b      	ldr	r3, [pc, #108]	; (8006044 <main+0x290>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8005fda:	e076      	b.n	80060ca <main+0x316>

		  case 3: // do tylu
			  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_SET);
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fe2:	4823      	ldr	r0, [pc, #140]	; (8006070 <main+0x2bc>)
 8005fe4:	f7fb fe6e 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_SET);
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fee:	4820      	ldr	r0, [pc, #128]	; (8006070 <main+0x2bc>)
 8005ff0:	f7fb fe68 	bl	8001cc4 <HAL_GPIO_WritePin>

			  if(pwm_duty <3000){
 8005ff4:	4b12      	ldr	r3, [pc, #72]	; (8006040 <main+0x28c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	dc04      	bgt.n	800600a <main+0x256>
				  pwm_duty +=1;
 8006000:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <main+0x28c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a0e      	ldr	r2, [pc, #56]	; (8006040 <main+0x28c>)
 8006008:	6013      	str	r3, [r2, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,pwm_duty);
 800600a:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <main+0x28c>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <main+0x290>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,pwm_duty);
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <main+0x28c>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <main+0x290>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm_duty);
 800601e:	4b08      	ldr	r3, [pc, #32]	; (8006040 <main+0x28c>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b08      	ldr	r3, [pc, #32]	; (8006044 <main+0x290>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8006028:	e04f      	b.n	80060ca <main+0x316>
		  case 4:
			  HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port, En_STEPPER_LOWER_Pin, GPIO_PIN_SET);
 800602a:	2201      	movs	r2, #1
 800602c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006030:	480f      	ldr	r0, [pc, #60]	; (8006070 <main+0x2bc>)
 8006032:	f7fb fe47 	bl	8001cc4 <HAL_GPIO_WritePin>
			  break;
 8006036:	e048      	b.n	80060ca <main+0x316>
 8006038:	20000261 	.word	0x20000261
 800603c:	20000268 	.word	0x20000268
 8006040:	2000026c 	.word	0x2000026c
 8006044:	20000270 	.word	0x20000270
 8006048:	200002b0 	.word	0x200002b0
 800604c:	200002f0 	.word	0x200002f0
 8006050:	20000260 	.word	0x20000260
 8006054:	20000390 	.word	0x20000390
 8006058:	20000005 	.word	0x20000005
 800605c:	2000020c 	.word	0x2000020c
 8006060:	200001f8 	.word	0x200001f8
 8006064:	40020800 	.word	0x40020800
 8006068:	20000264 	.word	0x20000264
 800606c:	42480000 	.word	0x42480000
 8006070:	40020c00 	.word	0x40020c00
		  default:
			  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 8006074:	2200      	movs	r2, #0
 8006076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800607a:	4814      	ldr	r0, [pc, #80]	; (80060cc <main+0x318>)
 800607c:	f7fb fe22 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8006080:	2200      	movs	r2, #0
 8006082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006086:	4811      	ldr	r0, [pc, #68]	; (80060cc <main+0x318>)
 8006088:	f7fb fe1c 	bl	8001cc4 <HAL_GPIO_WritePin>

			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <main+0x31c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2200      	movs	r2, #0
 8006092:	63da      	str	r2, [r3, #60]	; 0x3c
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8006094:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <main+0x31c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2200      	movs	r2, #0
 800609a:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 800609c:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <main+0x31c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2200      	movs	r2, #0
 80060a2:	635a      	str	r2, [r3, #52]	; 0x34

			  HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port, Step_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
 80060a4:	2200      	movs	r2, #0
 80060a6:	2140      	movs	r1, #64	; 0x40
 80060a8:	480a      	ldr	r0, [pc, #40]	; (80060d4 <main+0x320>)
 80060aa:	f7fb fe0b 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port, En_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
 80060ae:	2200      	movs	r2, #0
 80060b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80060b4:	4805      	ldr	r0, [pc, #20]	; (80060cc <main+0x318>)
 80060b6:	f7fb fe05 	bl	8001cc4 <HAL_GPIO_WritePin>
			  pwm_duty=0;
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <main+0x324>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
			  flag = 0;
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <main+0x328>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	701a      	strb	r2, [r3, #0]
			  break;
 80060c6:	e000      	b.n	80060ca <main+0x316>
		  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//  HAL_Delay(10);
  }
 80060c8:	bf00      	nop
	  if(flag == 1){
 80060ca:	e6d6      	b.n	8005e7a <main+0xc6>
 80060cc:	40020c00 	.word	0x40020c00
 80060d0:	20000270 	.word	0x20000270
 80060d4:	40020800 	.word	0x40020800
 80060d8:	2000026c 	.word	0x2000026c
 80060dc:	20000261 	.word	0x20000261

080060e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b094      	sub	sp, #80	; 0x50
 80060e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060e6:	f107 0320 	add.w	r3, r7, #32
 80060ea:	2230      	movs	r2, #48	; 0x30
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fca2 	bl	8006a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006104:	2300      	movs	r3, #0
 8006106:	60bb      	str	r3, [r7, #8]
 8006108:	4b27      	ldr	r3, [pc, #156]	; (80061a8 <SystemClock_Config+0xc8>)
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	4a26      	ldr	r2, [pc, #152]	; (80061a8 <SystemClock_Config+0xc8>)
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006112:	6413      	str	r3, [r2, #64]	; 0x40
 8006114:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <SystemClock_Config+0xc8>)
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006120:	2300      	movs	r3, #0
 8006122:	607b      	str	r3, [r7, #4]
 8006124:	4b21      	ldr	r3, [pc, #132]	; (80061ac <SystemClock_Config+0xcc>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a20      	ldr	r2, [pc, #128]	; (80061ac <SystemClock_Config+0xcc>)
 800612a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <SystemClock_Config+0xcc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006138:	607b      	str	r3, [r7, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800613c:	2302      	movs	r3, #2
 800613e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006140:	2301      	movs	r3, #1
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006144:	2310      	movs	r3, #16
 8006146:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006148:	2302      	movs	r3, #2
 800614a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800614c:	2300      	movs	r3, #0
 800614e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006150:	2308      	movs	r3, #8
 8006152:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8006154:	2364      	movs	r3, #100	; 0x64
 8006156:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006158:	2302      	movs	r3, #2
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800615c:	2308      	movs	r3, #8
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006160:	f107 0320 	add.w	r3, r7, #32
 8006164:	4618      	mov	r0, r3
 8006166:	f7fc fd77 	bl	8002c58 <HAL_RCC_OscConfig>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006170:	f000 f81e 	bl	80061b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006174:	230f      	movs	r3, #15
 8006176:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006178:	2302      	movs	r3, #2
 800617a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006184:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006186:	2300      	movs	r3, #0
 8006188:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800618a:	f107 030c 	add.w	r3, r7, #12
 800618e:	2103      	movs	r1, #3
 8006190:	4618      	mov	r0, r3
 8006192:	f7fc ffd1 	bl	8003138 <HAL_RCC_ClockConfig>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800619c:	f000 f808 	bl	80061b0 <Error_Handler>
  }
}
 80061a0:	bf00      	nop
 80061a2:	3750      	adds	r7, #80	; 0x50
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40007000 	.word	0x40007000

080061b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80061b4:	bf00      	nop
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
	...

080061c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c6:	2300      	movs	r3, #0
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	4b10      	ldr	r3, [pc, #64]	; (800620c <HAL_MspInit+0x4c>)
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	4a0f      	ldr	r2, [pc, #60]	; (800620c <HAL_MspInit+0x4c>)
 80061d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061d4:	6453      	str	r3, [r2, #68]	; 0x44
 80061d6:	4b0d      	ldr	r3, [pc, #52]	; (800620c <HAL_MspInit+0x4c>)
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061de:	607b      	str	r3, [r7, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80061e2:	2300      	movs	r3, #0
 80061e4:	603b      	str	r3, [r7, #0]
 80061e6:	4b09      	ldr	r3, [pc, #36]	; (800620c <HAL_MspInit+0x4c>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	4a08      	ldr	r2, [pc, #32]	; (800620c <HAL_MspInit+0x4c>)
 80061ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f0:	6413      	str	r3, [r2, #64]	; 0x40
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <HAL_MspInit+0x4c>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80061fe:	2007      	movs	r0, #7
 8006200:	f7fb f80c 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	40023800 	.word	0x40023800

08006210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800621e:	b480      	push	{r7}
 8006220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006222:	e7fe      	b.n	8006222 <HardFault_Handler+0x4>

08006224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006228:	e7fe      	b.n	8006228 <MemManage_Handler+0x4>

0800622a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800622a:	b480      	push	{r7}
 800622c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800622e:	e7fe      	b.n	800622e <BusFault_Handler+0x4>

08006230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006234:	e7fe      	b.n	8006234 <UsageFault_Handler+0x4>

08006236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006236:	b480      	push	{r7}
 8006238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800623a:	bf00      	nop
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006248:	bf00      	nop
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006252:	b480      	push	{r7}
 8006254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006264:	f7fa feea 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006268:	bf00      	nop
 800626a:	bd80      	pop	{r7, pc}

0800626c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006270:	4802      	ldr	r0, [pc, #8]	; (800627c <DMA1_Stream5_IRQHandler+0x10>)
 8006272:	f7fb f93d 	bl	80014f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006276:	bf00      	nop
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000330 	.word	0x20000330

08006280 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006284:	4802      	ldr	r0, [pc, #8]	; (8006290 <TIM2_IRQHandler+0x10>)
 8006286:	f7fd fae3 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800628a:	bf00      	nop
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200002f0 	.word	0x200002f0

08006294 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006298:	4802      	ldr	r0, [pc, #8]	; (80062a4 <TIM3_IRQHandler+0x10>)
 800629a:	f7fd fad9 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800629e:	bf00      	nop
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	200002b0 	.word	0x200002b0

080062a8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80062ac:	4802      	ldr	r0, [pc, #8]	; (80062b8 <TIM4_IRQHandler+0x10>)
 80062ae:	f7fd facf 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80062b2:	bf00      	nop
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000270 	.word	0x20000270

080062bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80062c0:	4802      	ldr	r0, [pc, #8]	; (80062cc <USART2_IRQHandler+0x10>)
 80062c2:	f7fe fbd7 	bl	8004a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80062c6:	bf00      	nop
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000390 	.word	0x20000390

080062d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80062d8:	4b11      	ldr	r3, [pc, #68]	; (8006320 <_sbrk+0x50>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <_sbrk+0x16>
		heap_end = &end;
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <_sbrk+0x50>)
 80062e2:	4a10      	ldr	r2, [pc, #64]	; (8006324 <_sbrk+0x54>)
 80062e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80062e6:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <_sbrk+0x50>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <_sbrk+0x50>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4413      	add	r3, r2
 80062f4:	466a      	mov	r2, sp
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d907      	bls.n	800630a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80062fa:	f000 fb73 	bl	80069e4 <__errno>
 80062fe:	4602      	mov	r2, r0
 8006300:	230c      	movs	r3, #12
 8006302:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	e006      	b.n	8006318 <_sbrk+0x48>
	}

	heap_end += incr;
 800630a:	4b05      	ldr	r3, [pc, #20]	; (8006320 <_sbrk+0x50>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4413      	add	r3, r2
 8006312:	4a03      	ldr	r2, [pc, #12]	; (8006320 <_sbrk+0x50>)
 8006314:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006316:	68fb      	ldr	r3, [r7, #12]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	200001fc 	.word	0x200001fc
 8006324:	200003d8 	.word	0x200003d8

08006328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800632c:	4b08      	ldr	r3, [pc, #32]	; (8006350 <SystemInit+0x28>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006332:	4a07      	ldr	r2, [pc, #28]	; (8006350 <SystemInit+0x28>)
 8006334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800633c:	4b04      	ldr	r3, [pc, #16]	; (8006350 <SystemInit+0x28>)
 800633e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006342:	609a      	str	r2, [r3, #8]
#endif
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	e000ed00 	.word	0xe000ed00

08006354 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800635a:	f107 0308 	add.w	r3, r7, #8
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	605a      	str	r2, [r3, #4]
 8006364:	609a      	str	r2, [r3, #8]
 8006366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006368:	463b      	mov	r3, r7
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8006370:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <MX_TIM2_Init+0x94>)
 8006372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <MX_TIM2_Init+0x94>)
 800637a:	2263      	movs	r2, #99	; 0x63
 800637c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800637e:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <MX_TIM2_Init+0x94>)
 8006380:	2200      	movs	r2, #0
 8006382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006384:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <MX_TIM2_Init+0x94>)
 8006386:	f240 32e7 	movw	r2, #999	; 0x3e7
 800638a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800638c:	4b16      	ldr	r3, [pc, #88]	; (80063e8 <MX_TIM2_Init+0x94>)
 800638e:	2200      	movs	r2, #0
 8006390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <MX_TIM2_Init+0x94>)
 8006394:	2200      	movs	r2, #0
 8006396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006398:	4813      	ldr	r0, [pc, #76]	; (80063e8 <MX_TIM2_Init+0x94>)
 800639a:	f7fd f8bf 	bl	800351c <HAL_TIM_Base_Init>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80063a4:	f7ff ff04 	bl	80061b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80063a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	4619      	mov	r1, r3
 80063b4:	480c      	ldr	r0, [pc, #48]	; (80063e8 <MX_TIM2_Init+0x94>)
 80063b6:	f7fd fcb5 	bl	8003d24 <HAL_TIM_ConfigClockSource>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80063c0:	f7ff fef6 	bl	80061b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063c4:	2300      	movs	r3, #0
 80063c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063c8:	2300      	movs	r3, #0
 80063ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80063cc:	463b      	mov	r3, r7
 80063ce:	4619      	mov	r1, r3
 80063d0:	4805      	ldr	r0, [pc, #20]	; (80063e8 <MX_TIM2_Init+0x94>)
 80063d2:	f7fe f967 	bl	80046a4 <HAL_TIMEx_MasterConfigSynchronization>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80063dc:	f7ff fee8 	bl	80061b0 <Error_Handler>
  }

}
 80063e0:	bf00      	nop
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	200002f0 	.word	0x200002f0

080063ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b092      	sub	sp, #72	; 0x48
 80063f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	605a      	str	r2, [r3, #4]
 80063fc:	609a      	str	r2, [r3, #8]
 80063fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006400:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800640a:	f107 0320 	add.w	r3, r7, #32
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	609a      	str	r2, [r3, #8]
 8006416:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006418:	1d3b      	adds	r3, r7, #4
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	605a      	str	r2, [r3, #4]
 8006420:	609a      	str	r2, [r3, #8]
 8006422:	60da      	str	r2, [r3, #12]
 8006424:	611a      	str	r2, [r3, #16]
 8006426:	615a      	str	r2, [r3, #20]
 8006428:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800642a:	4b43      	ldr	r3, [pc, #268]	; (8006538 <MX_TIM3_Init+0x14c>)
 800642c:	4a43      	ldr	r2, [pc, #268]	; (800653c <MX_TIM3_Init+0x150>)
 800642e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8006430:	4b41      	ldr	r3, [pc, #260]	; (8006538 <MX_TIM3_Init+0x14c>)
 8006432:	2263      	movs	r2, #99	; 0x63
 8006434:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006436:	4b40      	ldr	r3, [pc, #256]	; (8006538 <MX_TIM3_Init+0x14c>)
 8006438:	2200      	movs	r2, #0
 800643a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 800643c:	4b3e      	ldr	r3, [pc, #248]	; (8006538 <MX_TIM3_Init+0x14c>)
 800643e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006442:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006444:	4b3c      	ldr	r3, [pc, #240]	; (8006538 <MX_TIM3_Init+0x14c>)
 8006446:	2200      	movs	r2, #0
 8006448:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800644a:	4b3b      	ldr	r3, [pc, #236]	; (8006538 <MX_TIM3_Init+0x14c>)
 800644c:	2200      	movs	r2, #0
 800644e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006450:	4839      	ldr	r0, [pc, #228]	; (8006538 <MX_TIM3_Init+0x14c>)
 8006452:	f7fd f863 	bl	800351c <HAL_TIM_Base_Init>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800645c:	f7ff fea8 	bl	80061b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006464:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006466:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800646a:	4619      	mov	r1, r3
 800646c:	4832      	ldr	r0, [pc, #200]	; (8006538 <MX_TIM3_Init+0x14c>)
 800646e:	f7fd fc59 	bl	8003d24 <HAL_TIM_ConfigClockSource>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8006478:	f7ff fe9a 	bl	80061b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800647c:	482e      	ldr	r0, [pc, #184]	; (8006538 <MX_TIM3_Init+0x14c>)
 800647e:	f7fd f927 	bl	80036d0 <HAL_TIM_IC_Init>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8006488:	f7ff fe92 	bl	80061b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800648c:	482a      	ldr	r0, [pc, #168]	; (8006538 <MX_TIM3_Init+0x14c>)
 800648e:	f7fd f8b8 	bl	8003602 <HAL_TIM_PWM_Init>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8006498:	f7ff fe8a 	bl	80061b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800649c:	2300      	movs	r3, #0
 800649e:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064a0:	2300      	movs	r3, #0
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80064a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064a8:	4619      	mov	r1, r3
 80064aa:	4823      	ldr	r0, [pc, #140]	; (8006538 <MX_TIM3_Init+0x14c>)
 80064ac:	f7fe f8fa 	bl	80046a4 <HAL_TIMEx_MasterConfigSynchronization>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80064b6:	f7ff fe7b 	bl	80061b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80064ba:	2300      	movs	r3, #0
 80064bc:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80064be:	2301      	movs	r3, #1
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80064c2:	2300      	movs	r3, #0
 80064c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80064ca:	f107 0320 	add.w	r3, r7, #32
 80064ce:	2200      	movs	r2, #0
 80064d0:	4619      	mov	r1, r3
 80064d2:	4819      	ldr	r0, [pc, #100]	; (8006538 <MX_TIM3_Init+0x14c>)
 80064d4:	f7fd fac4 	bl	8003a60 <HAL_TIM_IC_ConfigChannel>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80064de:	f7ff fe67 	bl	80061b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80064e2:	2302      	movs	r3, #2
 80064e4:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80064e6:	2302      	movs	r3, #2
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80064ea:	f107 0320 	add.w	r3, r7, #32
 80064ee:	2204      	movs	r2, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4811      	ldr	r0, [pc, #68]	; (8006538 <MX_TIM3_Init+0x14c>)
 80064f4:	f7fd fab4 	bl	8003a60 <HAL_TIM_IC_ConfigChannel>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 80064fe:	f7ff fe57 	bl	80061b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006502:	2360      	movs	r3, #96	; 0x60
 8006504:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11;
 8006506:	230b      	movs	r3, #11
 8006508:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006512:	1d3b      	adds	r3, r7, #4
 8006514:	2208      	movs	r2, #8
 8006516:	4619      	mov	r1, r3
 8006518:	4807      	ldr	r0, [pc, #28]	; (8006538 <MX_TIM3_Init+0x14c>)
 800651a:	f7fd fb3d 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <MX_TIM3_Init+0x13c>
  {
    Error_Handler();
 8006524:	f7ff fe44 	bl	80061b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8006528:	4803      	ldr	r0, [pc, #12]	; (8006538 <MX_TIM3_Init+0x14c>)
 800652a:	f000 f91f 	bl	800676c <HAL_TIM_MspPostInit>

}
 800652e:	bf00      	nop
 8006530:	3748      	adds	r7, #72	; 0x48
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200002b0 	.word	0x200002b0
 800653c:	40000400 	.word	0x40000400

08006540 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b08e      	sub	sp, #56	; 0x38
 8006544:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	605a      	str	r2, [r3, #4]
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006554:	f107 0320 	add.w	r3, r7, #32
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	60da      	str	r2, [r3, #12]
 800656a:	611a      	str	r2, [r3, #16]
 800656c:	615a      	str	r2, [r3, #20]
 800656e:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8006570:	4b37      	ldr	r3, [pc, #220]	; (8006650 <MX_TIM4_Init+0x110>)
 8006572:	4a38      	ldr	r2, [pc, #224]	; (8006654 <MX_TIM4_Init+0x114>)
 8006574:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8006576:	4b36      	ldr	r3, [pc, #216]	; (8006650 <MX_TIM4_Init+0x110>)
 8006578:	2263      	movs	r2, #99	; 0x63
 800657a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800657c:	4b34      	ldr	r3, [pc, #208]	; (8006650 <MX_TIM4_Init+0x110>)
 800657e:	2200      	movs	r2, #0
 8006580:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8006582:	4b33      	ldr	r3, [pc, #204]	; (8006650 <MX_TIM4_Init+0x110>)
 8006584:	f242 720f 	movw	r2, #9999	; 0x270f
 8006588:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800658a:	4b31      	ldr	r3, [pc, #196]	; (8006650 <MX_TIM4_Init+0x110>)
 800658c:	2200      	movs	r2, #0
 800658e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006590:	4b2f      	ldr	r3, [pc, #188]	; (8006650 <MX_TIM4_Init+0x110>)
 8006592:	2200      	movs	r2, #0
 8006594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006596:	482e      	ldr	r0, [pc, #184]	; (8006650 <MX_TIM4_Init+0x110>)
 8006598:	f7fc ffc0 	bl	800351c <HAL_TIM_Base_Init>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80065a2:	f7ff fe05 	bl	80061b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80065a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80065ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065b0:	4619      	mov	r1, r3
 80065b2:	4827      	ldr	r0, [pc, #156]	; (8006650 <MX_TIM4_Init+0x110>)
 80065b4:	f7fd fbb6 	bl	8003d24 <HAL_TIM_ConfigClockSource>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80065be:	f7ff fdf7 	bl	80061b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80065c2:	4823      	ldr	r0, [pc, #140]	; (8006650 <MX_TIM4_Init+0x110>)
 80065c4:	f7fd f81d 	bl	8003602 <HAL_TIM_PWM_Init>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80065ce:	f7ff fdef 	bl	80061b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065d2:	2300      	movs	r3, #0
 80065d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065d6:	2300      	movs	r3, #0
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80065da:	f107 0320 	add.w	r3, r7, #32
 80065de:	4619      	mov	r1, r3
 80065e0:	481b      	ldr	r0, [pc, #108]	; (8006650 <MX_TIM4_Init+0x110>)
 80065e2:	f7fe f85f 	bl	80046a4 <HAL_TIMEx_MasterConfigSynchronization>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80065ec:	f7ff fde0 	bl	80061b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065f0:	2360      	movs	r3, #96	; 0x60
 80065f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006600:	1d3b      	adds	r3, r7, #4
 8006602:	2200      	movs	r2, #0
 8006604:	4619      	mov	r1, r3
 8006606:	4812      	ldr	r0, [pc, #72]	; (8006650 <MX_TIM4_Init+0x110>)
 8006608:	f7fd fac6 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8006612:	f7ff fdcd 	bl	80061b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006616:	1d3b      	adds	r3, r7, #4
 8006618:	2204      	movs	r2, #4
 800661a:	4619      	mov	r1, r3
 800661c:	480c      	ldr	r0, [pc, #48]	; (8006650 <MX_TIM4_Init+0x110>)
 800661e:	f7fd fabb 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8006628:	f7ff fdc2 	bl	80061b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800662c:	1d3b      	adds	r3, r7, #4
 800662e:	2208      	movs	r2, #8
 8006630:	4619      	mov	r1, r3
 8006632:	4807      	ldr	r0, [pc, #28]	; (8006650 <MX_TIM4_Init+0x110>)
 8006634:	f7fd fab0 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800663e:	f7ff fdb7 	bl	80061b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8006642:	4803      	ldr	r0, [pc, #12]	; (8006650 <MX_TIM4_Init+0x110>)
 8006644:	f000 f892 	bl	800676c <HAL_TIM_MspPostInit>

}
 8006648:	bf00      	nop
 800664a:	3738      	adds	r7, #56	; 0x38
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20000270 	.word	0x20000270
 8006654:	40000800 	.word	0x40000800

08006658 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08c      	sub	sp, #48	; 0x30
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	f107 031c 	add.w	r3, r7, #28
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006678:	d116      	bne.n	80066a8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	4b37      	ldr	r3, [pc, #220]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	4a36      	ldr	r2, [pc, #216]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	6413      	str	r3, [r2, #64]	; 0x40
 800668a:	4b34      	ldr	r3, [pc, #208]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006696:	2200      	movs	r2, #0
 8006698:	2100      	movs	r1, #0
 800669a:	201c      	movs	r0, #28
 800669c:	f7fa fdc9 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80066a0:	201c      	movs	r0, #28
 80066a2:	f7fa fde2 	bl	800126a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80066a6:	e054      	b.n	8006752 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM3)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a2c      	ldr	r2, [pc, #176]	; (8006760 <HAL_TIM_Base_MspInit+0x108>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d134      	bne.n	800671c <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
 80066b6:	4b29      	ldr	r3, [pc, #164]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	4a28      	ldr	r2, [pc, #160]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 80066bc:	f043 0302 	orr.w	r3, r3, #2
 80066c0:	6413      	str	r3, [r2, #64]	; 0x40
 80066c2:	4b26      	ldr	r3, [pc, #152]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	4b22      	ldr	r3, [pc, #136]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	4a21      	ldr	r2, [pc, #132]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	6313      	str	r3, [r2, #48]	; 0x30
 80066de:	4b1f      	ldr	r3, [pc, #124]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Hc_ECHO_Pin;
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ee:	2302      	movs	r3, #2
 80066f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066f6:	2300      	movs	r3, #0
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80066fa:	2302      	movs	r3, #2
 80066fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Hc_ECHO_GPIO_Port, &GPIO_InitStruct);
 80066fe:	f107 031c 	add.w	r3, r7, #28
 8006702:	4619      	mov	r1, r3
 8006704:	4817      	ldr	r0, [pc, #92]	; (8006764 <HAL_TIM_Base_MspInit+0x10c>)
 8006706:	f7fb f95b 	bl	80019c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800670a:	2200      	movs	r2, #0
 800670c:	2100      	movs	r1, #0
 800670e:	201d      	movs	r0, #29
 8006710:	f7fa fd8f 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006714:	201d      	movs	r0, #29
 8006716:	f7fa fda8 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 800671a:	e01a      	b.n	8006752 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM4)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a11      	ldr	r2, [pc, #68]	; (8006768 <HAL_TIM_Base_MspInit+0x110>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d115      	bne.n	8006752 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	4b0c      	ldr	r3, [pc, #48]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	4a0b      	ldr	r2, [pc, #44]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 8006730:	f043 0304 	orr.w	r3, r3, #4
 8006734:	6413      	str	r3, [r2, #64]	; 0x40
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <HAL_TIM_Base_MspInit+0x104>)
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006742:	2200      	movs	r2, #0
 8006744:	2100      	movs	r1, #0
 8006746:	201e      	movs	r0, #30
 8006748:	f7fa fd73 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800674c:	201e      	movs	r0, #30
 800674e:	f7fa fd8c 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8006752:	bf00      	nop
 8006754:	3730      	adds	r7, #48	; 0x30
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40023800 	.word	0x40023800
 8006760:	40000400 	.word	0x40000400
 8006764:	40020000 	.word	0x40020000
 8006768:	40000800 	.word	0x40000800

0800676c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	; 0x28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	609a      	str	r2, [r3, #8]
 8006780:	60da      	str	r2, [r3, #12]
 8006782:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a24      	ldr	r2, [pc, #144]	; (800681c <HAL_TIM_MspPostInit+0xb0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d11e      	bne.n	80067cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800678e:	2300      	movs	r3, #0
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	4b23      	ldr	r3, [pc, #140]	; (8006820 <HAL_TIM_MspPostInit+0xb4>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_TIM_MspPostInit+0xb4>)
 8006798:	f043 0302 	orr.w	r3, r3, #2
 800679c:	6313      	str	r3, [r2, #48]	; 0x30
 800679e:	4b20      	ldr	r3, [pc, #128]	; (8006820 <HAL_TIM_MspPostInit+0xb4>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = Hc_TRIG_Pin;
 80067aa:	2301      	movs	r3, #1
 80067ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ae:	2302      	movs	r3, #2
 80067b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80067ba:	2302      	movs	r3, #2
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Hc_TRIG_GPIO_Port, &GPIO_InitStruct);
 80067be:	f107 0314 	add.w	r3, r7, #20
 80067c2:	4619      	mov	r1, r3
 80067c4:	4817      	ldr	r0, [pc, #92]	; (8006824 <HAL_TIM_MspPostInit+0xb8>)
 80067c6:	f7fb f8fb 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80067ca:	e023      	b.n	8006814 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a15      	ldr	r2, [pc, #84]	; (8006828 <HAL_TIM_MspPostInit+0xbc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d11e      	bne.n	8006814 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	4b11      	ldr	r3, [pc, #68]	; (8006820 <HAL_TIM_MspPostInit+0xb4>)
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	4a10      	ldr	r2, [pc, #64]	; (8006820 <HAL_TIM_MspPostInit+0xb4>)
 80067e0:	f043 0308 	orr.w	r3, r3, #8
 80067e4:	6313      	str	r3, [r2, #48]	; 0x30
 80067e6:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <HAL_TIM_MspPostInit+0xb4>)
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Dc_ENB_Pin|Dc_ENA_Pin|Dc_ENABLE_DRIVER_Pin;
 80067f2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80067f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f8:	2302      	movs	r3, #2
 80067fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067fc:	2300      	movs	r3, #0
 80067fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006800:	2300      	movs	r3, #0
 8006802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006804:	2302      	movs	r3, #2
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006808:	f107 0314 	add.w	r3, r7, #20
 800680c:	4619      	mov	r1, r3
 800680e:	4807      	ldr	r0, [pc, #28]	; (800682c <HAL_TIM_MspPostInit+0xc0>)
 8006810:	f7fb f8d6 	bl	80019c0 <HAL_GPIO_Init>
}
 8006814:	bf00      	nop
 8006816:	3728      	adds	r7, #40	; 0x28
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40000400 	.word	0x40000400
 8006820:	40023800 	.word	0x40023800
 8006824:	40020400 	.word	0x40020400
 8006828:	40000800 	.word	0x40000800
 800682c:	40020c00 	.word	0x40020c00

08006830 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006834:	4b11      	ldr	r3, [pc, #68]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006836:	4a12      	ldr	r2, [pc, #72]	; (8006880 <MX_USART2_UART_Init+0x50>)
 8006838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800683a:	4b10      	ldr	r3, [pc, #64]	; (800687c <MX_USART2_UART_Init+0x4c>)
 800683c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006842:	4b0e      	ldr	r3, [pc, #56]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006844:	2200      	movs	r2, #0
 8006846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <MX_USART2_UART_Init+0x4c>)
 800684a:	2200      	movs	r2, #0
 800684c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006850:	2200      	movs	r2, #0
 8006852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006854:	4b09      	ldr	r3, [pc, #36]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006856:	220c      	movs	r2, #12
 8006858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800685a:	4b08      	ldr	r3, [pc, #32]	; (800687c <MX_USART2_UART_Init+0x4c>)
 800685c:	2200      	movs	r2, #0
 800685e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006860:	4b06      	ldr	r3, [pc, #24]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006862:	2200      	movs	r2, #0
 8006864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006866:	4805      	ldr	r0, [pc, #20]	; (800687c <MX_USART2_UART_Init+0x4c>)
 8006868:	f7fd ff9e 	bl	80047a8 <HAL_UART_Init>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006872:	f7ff fc9d 	bl	80061b0 <Error_Handler>
  }

}
 8006876:	bf00      	nop
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000390 	.word	0x20000390
 8006880:	40004400 	.word	0x40004400

08006884 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800688c:	f107 0314 	add.w	r3, r7, #20
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	609a      	str	r2, [r3, #8]
 8006898:	60da      	str	r2, [r3, #12]
 800689a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a34      	ldr	r2, [pc, #208]	; (8006974 <HAL_UART_MspInit+0xf0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d162      	bne.n	800696c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068a6:	2300      	movs	r3, #0
 80068a8:	613b      	str	r3, [r7, #16]
 80068aa:	4b33      	ldr	r3, [pc, #204]	; (8006978 <HAL_UART_MspInit+0xf4>)
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	4a32      	ldr	r2, [pc, #200]	; (8006978 <HAL_UART_MspInit+0xf4>)
 80068b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b4:	6413      	str	r3, [r2, #64]	; 0x40
 80068b6:	4b30      	ldr	r3, [pc, #192]	; (8006978 <HAL_UART_MspInit+0xf4>)
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	4b2c      	ldr	r3, [pc, #176]	; (8006978 <HAL_UART_MspInit+0xf4>)
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	4a2b      	ldr	r2, [pc, #172]	; (8006978 <HAL_UART_MspInit+0xf4>)
 80068cc:	f043 0301 	orr.w	r3, r3, #1
 80068d0:	6313      	str	r3, [r2, #48]	; 0x30
 80068d2:	4b29      	ldr	r3, [pc, #164]	; (8006978 <HAL_UART_MspInit+0xf4>)
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80068de:	230c      	movs	r3, #12
 80068e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068e2:	2302      	movs	r3, #2
 80068e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068ea:	2303      	movs	r3, #3
 80068ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80068ee:	2307      	movs	r3, #7
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f2:	f107 0314 	add.w	r3, r7, #20
 80068f6:	4619      	mov	r1, r3
 80068f8:	4820      	ldr	r0, [pc, #128]	; (800697c <HAL_UART_MspInit+0xf8>)
 80068fa:	f7fb f861 	bl	80019c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80068fe:	4b20      	ldr	r3, [pc, #128]	; (8006980 <HAL_UART_MspInit+0xfc>)
 8006900:	4a20      	ldr	r2, [pc, #128]	; (8006984 <HAL_UART_MspInit+0x100>)
 8006902:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006904:	4b1e      	ldr	r3, [pc, #120]	; (8006980 <HAL_UART_MspInit+0xfc>)
 8006906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800690a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800690c:	4b1c      	ldr	r3, [pc, #112]	; (8006980 <HAL_UART_MspInit+0xfc>)
 800690e:	2200      	movs	r2, #0
 8006910:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006912:	4b1b      	ldr	r3, [pc, #108]	; (8006980 <HAL_UART_MspInit+0xfc>)
 8006914:	2200      	movs	r2, #0
 8006916:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006918:	4b19      	ldr	r3, [pc, #100]	; (8006980 <HAL_UART_MspInit+0xfc>)
 800691a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800691e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006920:	4b17      	ldr	r3, [pc, #92]	; (8006980 <HAL_UART_MspInit+0xfc>)
 8006922:	2200      	movs	r2, #0
 8006924:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006926:	4b16      	ldr	r3, [pc, #88]	; (8006980 <HAL_UART_MspInit+0xfc>)
 8006928:	2200      	movs	r2, #0
 800692a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800692c:	4b14      	ldr	r3, [pc, #80]	; (8006980 <HAL_UART_MspInit+0xfc>)
 800692e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006932:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006934:	4b12      	ldr	r3, [pc, #72]	; (8006980 <HAL_UART_MspInit+0xfc>)
 8006936:	2200      	movs	r2, #0
 8006938:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800693a:	4b11      	ldr	r3, [pc, #68]	; (8006980 <HAL_UART_MspInit+0xfc>)
 800693c:	2200      	movs	r2, #0
 800693e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006940:	480f      	ldr	r0, [pc, #60]	; (8006980 <HAL_UART_MspInit+0xfc>)
 8006942:	f7fa fcad 	bl	80012a0 <HAL_DMA_Init>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800694c:	f7ff fc30 	bl	80061b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a0b      	ldr	r2, [pc, #44]	; (8006980 <HAL_UART_MspInit+0xfc>)
 8006954:	635a      	str	r2, [r3, #52]	; 0x34
 8006956:	4a0a      	ldr	r2, [pc, #40]	; (8006980 <HAL_UART_MspInit+0xfc>)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800695c:	2200      	movs	r2, #0
 800695e:	2100      	movs	r1, #0
 8006960:	2026      	movs	r0, #38	; 0x26
 8006962:	f7fa fc66 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006966:	2026      	movs	r0, #38	; 0x26
 8006968:	f7fa fc7f 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800696c:	bf00      	nop
 800696e:	3728      	adds	r7, #40	; 0x28
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40004400 	.word	0x40004400
 8006978:	40023800 	.word	0x40023800
 800697c:	40020000 	.word	0x40020000
 8006980:	20000330 	.word	0x20000330
 8006984:	40026088 	.word	0x40026088

08006988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80069c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800698c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800698e:	e003      	b.n	8006998 <LoopCopyDataInit>

08006990 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006990:	4b0c      	ldr	r3, [pc, #48]	; (80069c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006992:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006994:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006996:	3104      	adds	r1, #4

08006998 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006998:	480b      	ldr	r0, [pc, #44]	; (80069c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800699c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800699e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80069a0:	d3f6      	bcc.n	8006990 <CopyDataInit>
  ldr  r2, =_sbss
 80069a2:	4a0b      	ldr	r2, [pc, #44]	; (80069d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80069a4:	e002      	b.n	80069ac <LoopFillZerobss>

080069a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80069a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80069a8:	f842 3b04 	str.w	r3, [r2], #4

080069ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80069ac:	4b09      	ldr	r3, [pc, #36]	; (80069d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80069ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80069b0:	d3f9      	bcc.n	80069a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80069b2:	f7ff fcb9 	bl	8006328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80069b6:	f000 f81b 	bl	80069f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80069ba:	f7ff f9fb 	bl	8005db4 <main>
  bx  lr    
 80069be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80069c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80069c4:	0800a7f0 	.word	0x0800a7f0
  ldr  r0, =_sdata
 80069c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80069cc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80069d0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80069d4:	200003d4 	.word	0x200003d4

080069d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80069d8:	e7fe      	b.n	80069d8 <ADC_IRQHandler>

080069da <atoi>:
 80069da:	220a      	movs	r2, #10
 80069dc:	2100      	movs	r1, #0
 80069de:	f001 bd45 	b.w	800846c <strtol>
	...

080069e4 <__errno>:
 80069e4:	4b01      	ldr	r3, [pc, #4]	; (80069ec <__errno+0x8>)
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	2000000c 	.word	0x2000000c

080069f0 <__libc_init_array>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	4e0d      	ldr	r6, [pc, #52]	; (8006a28 <__libc_init_array+0x38>)
 80069f4:	4c0d      	ldr	r4, [pc, #52]	; (8006a2c <__libc_init_array+0x3c>)
 80069f6:	1ba4      	subs	r4, r4, r6
 80069f8:	10a4      	asrs	r4, r4, #2
 80069fa:	2500      	movs	r5, #0
 80069fc:	42a5      	cmp	r5, r4
 80069fe:	d109      	bne.n	8006a14 <__libc_init_array+0x24>
 8006a00:	4e0b      	ldr	r6, [pc, #44]	; (8006a30 <__libc_init_array+0x40>)
 8006a02:	4c0c      	ldr	r4, [pc, #48]	; (8006a34 <__libc_init_array+0x44>)
 8006a04:	f003 fd6a 	bl	800a4dc <_init>
 8006a08:	1ba4      	subs	r4, r4, r6
 8006a0a:	10a4      	asrs	r4, r4, #2
 8006a0c:	2500      	movs	r5, #0
 8006a0e:	42a5      	cmp	r5, r4
 8006a10:	d105      	bne.n	8006a1e <__libc_init_array+0x2e>
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
 8006a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a18:	4798      	blx	r3
 8006a1a:	3501      	adds	r5, #1
 8006a1c:	e7ee      	b.n	80069fc <__libc_init_array+0xc>
 8006a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a22:	4798      	blx	r3
 8006a24:	3501      	adds	r5, #1
 8006a26:	e7f2      	b.n	8006a0e <__libc_init_array+0x1e>
 8006a28:	0800a7e8 	.word	0x0800a7e8
 8006a2c:	0800a7e8 	.word	0x0800a7e8
 8006a30:	0800a7e8 	.word	0x0800a7e8
 8006a34:	0800a7ec 	.word	0x0800a7ec

08006a38 <memset>:
 8006a38:	4402      	add	r2, r0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d100      	bne.n	8006a42 <memset+0xa>
 8006a40:	4770      	bx	lr
 8006a42:	f803 1b01 	strb.w	r1, [r3], #1
 8006a46:	e7f9      	b.n	8006a3c <memset+0x4>

08006a48 <__cvt>:
 8006a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	ec55 4b10 	vmov	r4, r5, d0
 8006a50:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006a52:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a56:	2d00      	cmp	r5, #0
 8006a58:	460e      	mov	r6, r1
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	bfb8      	it	lt
 8006a60:	4622      	movlt	r2, r4
 8006a62:	462b      	mov	r3, r5
 8006a64:	f027 0720 	bic.w	r7, r7, #32
 8006a68:	bfbb      	ittet	lt
 8006a6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a6e:	461d      	movlt	r5, r3
 8006a70:	2300      	movge	r3, #0
 8006a72:	232d      	movlt	r3, #45	; 0x2d
 8006a74:	bfb8      	it	lt
 8006a76:	4614      	movlt	r4, r2
 8006a78:	2f46      	cmp	r7, #70	; 0x46
 8006a7a:	700b      	strb	r3, [r1, #0]
 8006a7c:	d004      	beq.n	8006a88 <__cvt+0x40>
 8006a7e:	2f45      	cmp	r7, #69	; 0x45
 8006a80:	d100      	bne.n	8006a84 <__cvt+0x3c>
 8006a82:	3601      	adds	r6, #1
 8006a84:	2102      	movs	r1, #2
 8006a86:	e000      	b.n	8006a8a <__cvt+0x42>
 8006a88:	2103      	movs	r1, #3
 8006a8a:	ab03      	add	r3, sp, #12
 8006a8c:	9301      	str	r3, [sp, #4]
 8006a8e:	ab02      	add	r3, sp, #8
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	4632      	mov	r2, r6
 8006a94:	4653      	mov	r3, sl
 8006a96:	ec45 4b10 	vmov	d0, r4, r5
 8006a9a:	f001 fd89 	bl	80085b0 <_dtoa_r>
 8006a9e:	2f47      	cmp	r7, #71	; 0x47
 8006aa0:	4680      	mov	r8, r0
 8006aa2:	d102      	bne.n	8006aaa <__cvt+0x62>
 8006aa4:	f019 0f01 	tst.w	r9, #1
 8006aa8:	d026      	beq.n	8006af8 <__cvt+0xb0>
 8006aaa:	2f46      	cmp	r7, #70	; 0x46
 8006aac:	eb08 0906 	add.w	r9, r8, r6
 8006ab0:	d111      	bne.n	8006ad6 <__cvt+0x8e>
 8006ab2:	f898 3000 	ldrb.w	r3, [r8]
 8006ab6:	2b30      	cmp	r3, #48	; 0x30
 8006ab8:	d10a      	bne.n	8006ad0 <__cvt+0x88>
 8006aba:	2200      	movs	r2, #0
 8006abc:	2300      	movs	r3, #0
 8006abe:	4620      	mov	r0, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7fa f809 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ac6:	b918      	cbnz	r0, 8006ad0 <__cvt+0x88>
 8006ac8:	f1c6 0601 	rsb	r6, r6, #1
 8006acc:	f8ca 6000 	str.w	r6, [sl]
 8006ad0:	f8da 3000 	ldr.w	r3, [sl]
 8006ad4:	4499      	add	r9, r3
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4620      	mov	r0, r4
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7f9 fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ae2:	b938      	cbnz	r0, 8006af4 <__cvt+0xac>
 8006ae4:	2230      	movs	r2, #48	; 0x30
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	454b      	cmp	r3, r9
 8006aea:	d205      	bcs.n	8006af8 <__cvt+0xb0>
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	9103      	str	r1, [sp, #12]
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	e7f8      	b.n	8006ae6 <__cvt+0x9e>
 8006af4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006af8:	9b03      	ldr	r3, [sp, #12]
 8006afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006afc:	eba3 0308 	sub.w	r3, r3, r8
 8006b00:	4640      	mov	r0, r8
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	b004      	add	sp, #16
 8006b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b0a <__exponent>:
 8006b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	4604      	mov	r4, r0
 8006b10:	bfba      	itte	lt
 8006b12:	4249      	neglt	r1, r1
 8006b14:	232d      	movlt	r3, #45	; 0x2d
 8006b16:	232b      	movge	r3, #43	; 0x2b
 8006b18:	2909      	cmp	r1, #9
 8006b1a:	f804 2b02 	strb.w	r2, [r4], #2
 8006b1e:	7043      	strb	r3, [r0, #1]
 8006b20:	dd20      	ble.n	8006b64 <__exponent+0x5a>
 8006b22:	f10d 0307 	add.w	r3, sp, #7
 8006b26:	461f      	mov	r7, r3
 8006b28:	260a      	movs	r6, #10
 8006b2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b2e:	fb06 1115 	mls	r1, r6, r5, r1
 8006b32:	3130      	adds	r1, #48	; 0x30
 8006b34:	2d09      	cmp	r5, #9
 8006b36:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b3a:	f103 32ff 	add.w	r2, r3, #4294967295
 8006b3e:	4629      	mov	r1, r5
 8006b40:	dc09      	bgt.n	8006b56 <__exponent+0x4c>
 8006b42:	3130      	adds	r1, #48	; 0x30
 8006b44:	3b02      	subs	r3, #2
 8006b46:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b4a:	42bb      	cmp	r3, r7
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	d304      	bcc.n	8006b5a <__exponent+0x50>
 8006b50:	1a10      	subs	r0, r2, r0
 8006b52:	b003      	add	sp, #12
 8006b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b56:	4613      	mov	r3, r2
 8006b58:	e7e7      	b.n	8006b2a <__exponent+0x20>
 8006b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b5e:	f804 2b01 	strb.w	r2, [r4], #1
 8006b62:	e7f2      	b.n	8006b4a <__exponent+0x40>
 8006b64:	2330      	movs	r3, #48	; 0x30
 8006b66:	4419      	add	r1, r3
 8006b68:	7083      	strb	r3, [r0, #2]
 8006b6a:	1d02      	adds	r2, r0, #4
 8006b6c:	70c1      	strb	r1, [r0, #3]
 8006b6e:	e7ef      	b.n	8006b50 <__exponent+0x46>

08006b70 <_printf_float>:
 8006b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	b08d      	sub	sp, #52	; 0x34
 8006b76:	460c      	mov	r4, r1
 8006b78:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006b7c:	4616      	mov	r6, r2
 8006b7e:	461f      	mov	r7, r3
 8006b80:	4605      	mov	r5, r0
 8006b82:	f002 fdf9 	bl	8009778 <_localeconv_r>
 8006b86:	6803      	ldr	r3, [r0, #0]
 8006b88:	9304      	str	r3, [sp, #16]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7f9 fb28 	bl	80001e0 <strlen>
 8006b90:	2300      	movs	r3, #0
 8006b92:	930a      	str	r3, [sp, #40]	; 0x28
 8006b94:	f8d8 3000 	ldr.w	r3, [r8]
 8006b98:	9005      	str	r0, [sp, #20]
 8006b9a:	3307      	adds	r3, #7
 8006b9c:	f023 0307 	bic.w	r3, r3, #7
 8006ba0:	f103 0208 	add.w	r2, r3, #8
 8006ba4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ba8:	f8d4 b000 	ldr.w	fp, [r4]
 8006bac:	f8c8 2000 	str.w	r2, [r8]
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bb8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006bbc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bc0:	9307      	str	r3, [sp, #28]
 8006bc2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bca:	4ba7      	ldr	r3, [pc, #668]	; (8006e68 <_printf_float+0x2f8>)
 8006bcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd0:	f7f9 ffb4 	bl	8000b3c <__aeabi_dcmpun>
 8006bd4:	bb70      	cbnz	r0, 8006c34 <_printf_float+0xc4>
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	4ba3      	ldr	r3, [pc, #652]	; (8006e68 <_printf_float+0x2f8>)
 8006bdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be0:	f7f9 ff8e 	bl	8000b00 <__aeabi_dcmple>
 8006be4:	bb30      	cbnz	r0, 8006c34 <_printf_float+0xc4>
 8006be6:	2200      	movs	r2, #0
 8006be8:	2300      	movs	r3, #0
 8006bea:	4640      	mov	r0, r8
 8006bec:	4649      	mov	r1, r9
 8006bee:	f7f9 ff7d 	bl	8000aec <__aeabi_dcmplt>
 8006bf2:	b110      	cbz	r0, 8006bfa <_printf_float+0x8a>
 8006bf4:	232d      	movs	r3, #45	; 0x2d
 8006bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bfa:	4a9c      	ldr	r2, [pc, #624]	; (8006e6c <_printf_float+0x2fc>)
 8006bfc:	4b9c      	ldr	r3, [pc, #624]	; (8006e70 <_printf_float+0x300>)
 8006bfe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006c02:	bf8c      	ite	hi
 8006c04:	4690      	movhi	r8, r2
 8006c06:	4698      	movls	r8, r3
 8006c08:	2303      	movs	r3, #3
 8006c0a:	f02b 0204 	bic.w	r2, fp, #4
 8006c0e:	6123      	str	r3, [r4, #16]
 8006c10:	6022      	str	r2, [r4, #0]
 8006c12:	f04f 0900 	mov.w	r9, #0
 8006c16:	9700      	str	r7, [sp, #0]
 8006c18:	4633      	mov	r3, r6
 8006c1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 f9e6 	bl	8006ff0 <_printf_common>
 8006c24:	3001      	adds	r0, #1
 8006c26:	f040 808d 	bne.w	8006d44 <_printf_float+0x1d4>
 8006c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2e:	b00d      	add	sp, #52	; 0x34
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c34:	4642      	mov	r2, r8
 8006c36:	464b      	mov	r3, r9
 8006c38:	4640      	mov	r0, r8
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	f7f9 ff7e 	bl	8000b3c <__aeabi_dcmpun>
 8006c40:	b110      	cbz	r0, 8006c48 <_printf_float+0xd8>
 8006c42:	4a8c      	ldr	r2, [pc, #560]	; (8006e74 <_printf_float+0x304>)
 8006c44:	4b8c      	ldr	r3, [pc, #560]	; (8006e78 <_printf_float+0x308>)
 8006c46:	e7da      	b.n	8006bfe <_printf_float+0x8e>
 8006c48:	6861      	ldr	r1, [r4, #4]
 8006c4a:	1c4b      	adds	r3, r1, #1
 8006c4c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006c50:	a80a      	add	r0, sp, #40	; 0x28
 8006c52:	d13e      	bne.n	8006cd2 <_printf_float+0x162>
 8006c54:	2306      	movs	r3, #6
 8006c56:	6063      	str	r3, [r4, #4]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006c5e:	ab09      	add	r3, sp, #36	; 0x24
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	ec49 8b10 	vmov	d0, r8, r9
 8006c66:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c6a:	6022      	str	r2, [r4, #0]
 8006c6c:	f8cd a004 	str.w	sl, [sp, #4]
 8006c70:	6861      	ldr	r1, [r4, #4]
 8006c72:	4628      	mov	r0, r5
 8006c74:	f7ff fee8 	bl	8006a48 <__cvt>
 8006c78:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006c7c:	2b47      	cmp	r3, #71	; 0x47
 8006c7e:	4680      	mov	r8, r0
 8006c80:	d109      	bne.n	8006c96 <_printf_float+0x126>
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c84:	1cd8      	adds	r0, r3, #3
 8006c86:	db02      	blt.n	8006c8e <_printf_float+0x11e>
 8006c88:	6862      	ldr	r2, [r4, #4]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	dd47      	ble.n	8006d1e <_printf_float+0x1ae>
 8006c8e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c92:	fa5f fa8a 	uxtb.w	sl, sl
 8006c96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9c:	d824      	bhi.n	8006ce8 <_printf_float+0x178>
 8006c9e:	3901      	subs	r1, #1
 8006ca0:	4652      	mov	r2, sl
 8006ca2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ca6:	9109      	str	r1, [sp, #36]	; 0x24
 8006ca8:	f7ff ff2f 	bl	8006b0a <__exponent>
 8006cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cae:	1813      	adds	r3, r2, r0
 8006cb0:	2a01      	cmp	r2, #1
 8006cb2:	4681      	mov	r9, r0
 8006cb4:	6123      	str	r3, [r4, #16]
 8006cb6:	dc02      	bgt.n	8006cbe <_printf_float+0x14e>
 8006cb8:	6822      	ldr	r2, [r4, #0]
 8006cba:	07d1      	lsls	r1, r2, #31
 8006cbc:	d501      	bpl.n	8006cc2 <_printf_float+0x152>
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	6123      	str	r3, [r4, #16]
 8006cc2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0a5      	beq.n	8006c16 <_printf_float+0xa6>
 8006cca:	232d      	movs	r3, #45	; 0x2d
 8006ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cd0:	e7a1      	b.n	8006c16 <_printf_float+0xa6>
 8006cd2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006cd6:	f000 8177 	beq.w	8006fc8 <_printf_float+0x458>
 8006cda:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006cde:	d1bb      	bne.n	8006c58 <_printf_float+0xe8>
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	d1b9      	bne.n	8006c58 <_printf_float+0xe8>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e7b6      	b.n	8006c56 <_printf_float+0xe6>
 8006ce8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006cec:	d119      	bne.n	8006d22 <_printf_float+0x1b2>
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	6863      	ldr	r3, [r4, #4]
 8006cf2:	dd0c      	ble.n	8006d0e <_printf_float+0x19e>
 8006cf4:	6121      	str	r1, [r4, #16]
 8006cf6:	b913      	cbnz	r3, 8006cfe <_printf_float+0x18e>
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	07d2      	lsls	r2, r2, #31
 8006cfc:	d502      	bpl.n	8006d04 <_printf_float+0x194>
 8006cfe:	3301      	adds	r3, #1
 8006d00:	440b      	add	r3, r1
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d06:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d08:	f04f 0900 	mov.w	r9, #0
 8006d0c:	e7d9      	b.n	8006cc2 <_printf_float+0x152>
 8006d0e:	b913      	cbnz	r3, 8006d16 <_printf_float+0x1a6>
 8006d10:	6822      	ldr	r2, [r4, #0]
 8006d12:	07d0      	lsls	r0, r2, #31
 8006d14:	d501      	bpl.n	8006d1a <_printf_float+0x1aa>
 8006d16:	3302      	adds	r3, #2
 8006d18:	e7f3      	b.n	8006d02 <_printf_float+0x192>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e7f1      	b.n	8006d02 <_printf_float+0x192>
 8006d1e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006d22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d26:	4293      	cmp	r3, r2
 8006d28:	db05      	blt.n	8006d36 <_printf_float+0x1c6>
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	6123      	str	r3, [r4, #16]
 8006d2e:	07d1      	lsls	r1, r2, #31
 8006d30:	d5e8      	bpl.n	8006d04 <_printf_float+0x194>
 8006d32:	3301      	adds	r3, #1
 8006d34:	e7e5      	b.n	8006d02 <_printf_float+0x192>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfd4      	ite	le
 8006d3a:	f1c3 0302 	rsble	r3, r3, #2
 8006d3e:	2301      	movgt	r3, #1
 8006d40:	4413      	add	r3, r2
 8006d42:	e7de      	b.n	8006d02 <_printf_float+0x192>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	055a      	lsls	r2, r3, #21
 8006d48:	d407      	bmi.n	8006d5a <_printf_float+0x1ea>
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	d12b      	bne.n	8006db0 <_printf_float+0x240>
 8006d58:	e767      	b.n	8006c2a <_printf_float+0xba>
 8006d5a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006d5e:	f240 80dc 	bls.w	8006f1a <_printf_float+0x3aa>
 8006d62:	2200      	movs	r2, #0
 8006d64:	2300      	movs	r3, #0
 8006d66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d6a:	f7f9 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d033      	beq.n	8006dda <_printf_float+0x26a>
 8006d72:	2301      	movs	r3, #1
 8006d74:	4a41      	ldr	r2, [pc, #260]	; (8006e7c <_printf_float+0x30c>)
 8006d76:	4631      	mov	r1, r6
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b8      	blx	r7
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	f43f af54 	beq.w	8006c2a <_printf_float+0xba>
 8006d82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d86:	429a      	cmp	r2, r3
 8006d88:	db02      	blt.n	8006d90 <_printf_float+0x220>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	07d8      	lsls	r0, r3, #31
 8006d8e:	d50f      	bpl.n	8006db0 <_printf_float+0x240>
 8006d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d94:	4631      	mov	r1, r6
 8006d96:	4628      	mov	r0, r5
 8006d98:	47b8      	blx	r7
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	f43f af45 	beq.w	8006c2a <_printf_float+0xba>
 8006da0:	f04f 0800 	mov.w	r8, #0
 8006da4:	f104 091a 	add.w	r9, r4, #26
 8006da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006daa:	3b01      	subs	r3, #1
 8006dac:	4543      	cmp	r3, r8
 8006dae:	dc09      	bgt.n	8006dc4 <_printf_float+0x254>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	079b      	lsls	r3, r3, #30
 8006db4:	f100 8103 	bmi.w	8006fbe <_printf_float+0x44e>
 8006db8:	68e0      	ldr	r0, [r4, #12]
 8006dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dbc:	4298      	cmp	r0, r3
 8006dbe:	bfb8      	it	lt
 8006dc0:	4618      	movlt	r0, r3
 8006dc2:	e734      	b.n	8006c2e <_printf_float+0xbe>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	464a      	mov	r2, r9
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f af2b 	beq.w	8006c2a <_printf_float+0xba>
 8006dd4:	f108 0801 	add.w	r8, r8, #1
 8006dd8:	e7e6      	b.n	8006da8 <_printf_float+0x238>
 8006dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dc2b      	bgt.n	8006e38 <_printf_float+0x2c8>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <_printf_float+0x30c>)
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	f43f af1d 	beq.w	8006c2a <_printf_float+0xba>
 8006df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df2:	b923      	cbnz	r3, 8006dfe <_printf_float+0x28e>
 8006df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df6:	b913      	cbnz	r3, 8006dfe <_printf_float+0x28e>
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	07d9      	lsls	r1, r3, #31
 8006dfc:	d5d8      	bpl.n	8006db0 <_printf_float+0x240>
 8006dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	f43f af0e 	beq.w	8006c2a <_printf_float+0xba>
 8006e0e:	f04f 0900 	mov.w	r9, #0
 8006e12:	f104 0a1a 	add.w	sl, r4, #26
 8006e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e18:	425b      	negs	r3, r3
 8006e1a:	454b      	cmp	r3, r9
 8006e1c:	dc01      	bgt.n	8006e22 <_printf_float+0x2b2>
 8006e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e20:	e794      	b.n	8006d4c <_printf_float+0x1dc>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4652      	mov	r2, sl
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f43f aefc 	beq.w	8006c2a <_printf_float+0xba>
 8006e32:	f109 0901 	add.w	r9, r9, #1
 8006e36:	e7ee      	b.n	8006e16 <_printf_float+0x2a6>
 8006e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	bfa8      	it	ge
 8006e40:	461a      	movge	r2, r3
 8006e42:	2a00      	cmp	r2, #0
 8006e44:	4691      	mov	r9, r2
 8006e46:	dd07      	ble.n	8006e58 <_printf_float+0x2e8>
 8006e48:	4613      	mov	r3, r2
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f aee9 	beq.w	8006c2a <_printf_float+0xba>
 8006e58:	f104 031a 	add.w	r3, r4, #26
 8006e5c:	f04f 0b00 	mov.w	fp, #0
 8006e60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e64:	9306      	str	r3, [sp, #24]
 8006e66:	e015      	b.n	8006e94 <_printf_float+0x324>
 8006e68:	7fefffff 	.word	0x7fefffff
 8006e6c:	0800a530 	.word	0x0800a530
 8006e70:	0800a52c 	.word	0x0800a52c
 8006e74:	0800a538 	.word	0x0800a538
 8006e78:	0800a534 	.word	0x0800a534
 8006e7c:	0800a53c 	.word	0x0800a53c
 8006e80:	2301      	movs	r3, #1
 8006e82:	9a06      	ldr	r2, [sp, #24]
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b8      	blx	r7
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f43f aecd 	beq.w	8006c2a <_printf_float+0xba>
 8006e90:	f10b 0b01 	add.w	fp, fp, #1
 8006e94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e98:	ebaa 0309 	sub.w	r3, sl, r9
 8006e9c:	455b      	cmp	r3, fp
 8006e9e:	dcef      	bgt.n	8006e80 <_printf_float+0x310>
 8006ea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	44d0      	add	r8, sl
 8006ea8:	db15      	blt.n	8006ed6 <_printf_float+0x366>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	07da      	lsls	r2, r3, #31
 8006eae:	d412      	bmi.n	8006ed6 <_printf_float+0x366>
 8006eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eb4:	eba3 020a 	sub.w	r2, r3, sl
 8006eb8:	eba3 0a01 	sub.w	sl, r3, r1
 8006ebc:	4592      	cmp	sl, r2
 8006ebe:	bfa8      	it	ge
 8006ec0:	4692      	movge	sl, r2
 8006ec2:	f1ba 0f00 	cmp.w	sl, #0
 8006ec6:	dc0e      	bgt.n	8006ee6 <_printf_float+0x376>
 8006ec8:	f04f 0800 	mov.w	r8, #0
 8006ecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ed0:	f104 091a 	add.w	r9, r4, #26
 8006ed4:	e019      	b.n	8006f0a <_printf_float+0x39a>
 8006ed6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b8      	blx	r7
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d1e5      	bne.n	8006eb0 <_printf_float+0x340>
 8006ee4:	e6a1      	b.n	8006c2a <_printf_float+0xba>
 8006ee6:	4653      	mov	r3, sl
 8006ee8:	4642      	mov	r2, r8
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d1e9      	bne.n	8006ec8 <_printf_float+0x358>
 8006ef4:	e699      	b.n	8006c2a <_printf_float+0xba>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	464a      	mov	r2, r9
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	f43f ae92 	beq.w	8006c2a <_printf_float+0xba>
 8006f06:	f108 0801 	add.w	r8, r8, #1
 8006f0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f0e:	1a9b      	subs	r3, r3, r2
 8006f10:	eba3 030a 	sub.w	r3, r3, sl
 8006f14:	4543      	cmp	r3, r8
 8006f16:	dcee      	bgt.n	8006ef6 <_printf_float+0x386>
 8006f18:	e74a      	b.n	8006db0 <_printf_float+0x240>
 8006f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f1c:	2a01      	cmp	r2, #1
 8006f1e:	dc01      	bgt.n	8006f24 <_printf_float+0x3b4>
 8006f20:	07db      	lsls	r3, r3, #31
 8006f22:	d53a      	bpl.n	8006f9a <_printf_float+0x42a>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4642      	mov	r2, r8
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f43f ae7b 	beq.w	8006c2a <_printf_float+0xba>
 8006f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	f108 0801 	add.w	r8, r8, #1
 8006f44:	f43f ae71 	beq.w	8006c2a <_printf_float+0xba>
 8006f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006f50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f54:	2300      	movs	r3, #0
 8006f56:	f7f9 fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f5a:	b9c8      	cbnz	r0, 8006f90 <_printf_float+0x420>
 8006f5c:	4653      	mov	r3, sl
 8006f5e:	4642      	mov	r2, r8
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	d10e      	bne.n	8006f88 <_printf_float+0x418>
 8006f6a:	e65e      	b.n	8006c2a <_printf_float+0xba>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	4652      	mov	r2, sl
 8006f70:	4631      	mov	r1, r6
 8006f72:	4628      	mov	r0, r5
 8006f74:	47b8      	blx	r7
 8006f76:	3001      	adds	r0, #1
 8006f78:	f43f ae57 	beq.w	8006c2a <_printf_float+0xba>
 8006f7c:	f108 0801 	add.w	r8, r8, #1
 8006f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f82:	3b01      	subs	r3, #1
 8006f84:	4543      	cmp	r3, r8
 8006f86:	dcf1      	bgt.n	8006f6c <_printf_float+0x3fc>
 8006f88:	464b      	mov	r3, r9
 8006f8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f8e:	e6de      	b.n	8006d4e <_printf_float+0x1de>
 8006f90:	f04f 0800 	mov.w	r8, #0
 8006f94:	f104 0a1a 	add.w	sl, r4, #26
 8006f98:	e7f2      	b.n	8006f80 <_printf_float+0x410>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e7df      	b.n	8006f5e <_printf_float+0x3ee>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	464a      	mov	r2, r9
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b8      	blx	r7
 8006fa8:	3001      	adds	r0, #1
 8006faa:	f43f ae3e 	beq.w	8006c2a <_printf_float+0xba>
 8006fae:	f108 0801 	add.w	r8, r8, #1
 8006fb2:	68e3      	ldr	r3, [r4, #12]
 8006fb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fb6:	1a9b      	subs	r3, r3, r2
 8006fb8:	4543      	cmp	r3, r8
 8006fba:	dcf0      	bgt.n	8006f9e <_printf_float+0x42e>
 8006fbc:	e6fc      	b.n	8006db8 <_printf_float+0x248>
 8006fbe:	f04f 0800 	mov.w	r8, #0
 8006fc2:	f104 0919 	add.w	r9, r4, #25
 8006fc6:	e7f4      	b.n	8006fb2 <_printf_float+0x442>
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	f43f ae8b 	beq.w	8006ce4 <_printf_float+0x174>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006fd4:	ab09      	add	r3, sp, #36	; 0x24
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	ec49 8b10 	vmov	d0, r8, r9
 8006fdc:	6022      	str	r2, [r4, #0]
 8006fde:	f8cd a004 	str.w	sl, [sp, #4]
 8006fe2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f7ff fd2e 	bl	8006a48 <__cvt>
 8006fec:	4680      	mov	r8, r0
 8006fee:	e648      	b.n	8006c82 <_printf_float+0x112>

08006ff0 <_printf_common>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	4691      	mov	r9, r2
 8006ff6:	461f      	mov	r7, r3
 8006ff8:	688a      	ldr	r2, [r1, #8]
 8006ffa:	690b      	ldr	r3, [r1, #16]
 8006ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007000:	4293      	cmp	r3, r2
 8007002:	bfb8      	it	lt
 8007004:	4613      	movlt	r3, r2
 8007006:	f8c9 3000 	str.w	r3, [r9]
 800700a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800700e:	4606      	mov	r6, r0
 8007010:	460c      	mov	r4, r1
 8007012:	b112      	cbz	r2, 800701a <_printf_common+0x2a>
 8007014:	3301      	adds	r3, #1
 8007016:	f8c9 3000 	str.w	r3, [r9]
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	0699      	lsls	r1, r3, #26
 800701e:	bf42      	ittt	mi
 8007020:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007024:	3302      	addmi	r3, #2
 8007026:	f8c9 3000 	strmi.w	r3, [r9]
 800702a:	6825      	ldr	r5, [r4, #0]
 800702c:	f015 0506 	ands.w	r5, r5, #6
 8007030:	d107      	bne.n	8007042 <_printf_common+0x52>
 8007032:	f104 0a19 	add.w	sl, r4, #25
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	f8d9 2000 	ldr.w	r2, [r9]
 800703c:	1a9b      	subs	r3, r3, r2
 800703e:	42ab      	cmp	r3, r5
 8007040:	dc28      	bgt.n	8007094 <_printf_common+0xa4>
 8007042:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	3300      	adds	r3, #0
 800704a:	bf18      	it	ne
 800704c:	2301      	movne	r3, #1
 800704e:	0692      	lsls	r2, r2, #26
 8007050:	d42d      	bmi.n	80070ae <_printf_common+0xbe>
 8007052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007056:	4639      	mov	r1, r7
 8007058:	4630      	mov	r0, r6
 800705a:	47c0      	blx	r8
 800705c:	3001      	adds	r0, #1
 800705e:	d020      	beq.n	80070a2 <_printf_common+0xb2>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	68e5      	ldr	r5, [r4, #12]
 8007064:	f8d9 2000 	ldr.w	r2, [r9]
 8007068:	f003 0306 	and.w	r3, r3, #6
 800706c:	2b04      	cmp	r3, #4
 800706e:	bf08      	it	eq
 8007070:	1aad      	subeq	r5, r5, r2
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	6922      	ldr	r2, [r4, #16]
 8007076:	bf0c      	ite	eq
 8007078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800707c:	2500      	movne	r5, #0
 800707e:	4293      	cmp	r3, r2
 8007080:	bfc4      	itt	gt
 8007082:	1a9b      	subgt	r3, r3, r2
 8007084:	18ed      	addgt	r5, r5, r3
 8007086:	f04f 0900 	mov.w	r9, #0
 800708a:	341a      	adds	r4, #26
 800708c:	454d      	cmp	r5, r9
 800708e:	d11a      	bne.n	80070c6 <_printf_common+0xd6>
 8007090:	2000      	movs	r0, #0
 8007092:	e008      	b.n	80070a6 <_printf_common+0xb6>
 8007094:	2301      	movs	r3, #1
 8007096:	4652      	mov	r2, sl
 8007098:	4639      	mov	r1, r7
 800709a:	4630      	mov	r0, r6
 800709c:	47c0      	blx	r8
 800709e:	3001      	adds	r0, #1
 80070a0:	d103      	bne.n	80070aa <_printf_common+0xba>
 80070a2:	f04f 30ff 	mov.w	r0, #4294967295
 80070a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070aa:	3501      	adds	r5, #1
 80070ac:	e7c3      	b.n	8007036 <_printf_common+0x46>
 80070ae:	18e1      	adds	r1, r4, r3
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	2030      	movs	r0, #48	; 0x30
 80070b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070b8:	4422      	add	r2, r4
 80070ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070c2:	3302      	adds	r3, #2
 80070c4:	e7c5      	b.n	8007052 <_printf_common+0x62>
 80070c6:	2301      	movs	r3, #1
 80070c8:	4622      	mov	r2, r4
 80070ca:	4639      	mov	r1, r7
 80070cc:	4630      	mov	r0, r6
 80070ce:	47c0      	blx	r8
 80070d0:	3001      	adds	r0, #1
 80070d2:	d0e6      	beq.n	80070a2 <_printf_common+0xb2>
 80070d4:	f109 0901 	add.w	r9, r9, #1
 80070d8:	e7d8      	b.n	800708c <_printf_common+0x9c>
	...

080070dc <_printf_i>:
 80070dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80070e4:	460c      	mov	r4, r1
 80070e6:	7e09      	ldrb	r1, [r1, #24]
 80070e8:	b085      	sub	sp, #20
 80070ea:	296e      	cmp	r1, #110	; 0x6e
 80070ec:	4617      	mov	r7, r2
 80070ee:	4606      	mov	r6, r0
 80070f0:	4698      	mov	r8, r3
 80070f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070f4:	f000 80b3 	beq.w	800725e <_printf_i+0x182>
 80070f8:	d822      	bhi.n	8007140 <_printf_i+0x64>
 80070fa:	2963      	cmp	r1, #99	; 0x63
 80070fc:	d036      	beq.n	800716c <_printf_i+0x90>
 80070fe:	d80a      	bhi.n	8007116 <_printf_i+0x3a>
 8007100:	2900      	cmp	r1, #0
 8007102:	f000 80b9 	beq.w	8007278 <_printf_i+0x19c>
 8007106:	2958      	cmp	r1, #88	; 0x58
 8007108:	f000 8083 	beq.w	8007212 <_printf_i+0x136>
 800710c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007110:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007114:	e032      	b.n	800717c <_printf_i+0xa0>
 8007116:	2964      	cmp	r1, #100	; 0x64
 8007118:	d001      	beq.n	800711e <_printf_i+0x42>
 800711a:	2969      	cmp	r1, #105	; 0x69
 800711c:	d1f6      	bne.n	800710c <_printf_i+0x30>
 800711e:	6820      	ldr	r0, [r4, #0]
 8007120:	6813      	ldr	r3, [r2, #0]
 8007122:	0605      	lsls	r5, r0, #24
 8007124:	f103 0104 	add.w	r1, r3, #4
 8007128:	d52a      	bpl.n	8007180 <_printf_i+0xa4>
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6011      	str	r1, [r2, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	da03      	bge.n	800713a <_printf_i+0x5e>
 8007132:	222d      	movs	r2, #45	; 0x2d
 8007134:	425b      	negs	r3, r3
 8007136:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800713a:	486f      	ldr	r0, [pc, #444]	; (80072f8 <_printf_i+0x21c>)
 800713c:	220a      	movs	r2, #10
 800713e:	e039      	b.n	80071b4 <_printf_i+0xd8>
 8007140:	2973      	cmp	r1, #115	; 0x73
 8007142:	f000 809d 	beq.w	8007280 <_printf_i+0x1a4>
 8007146:	d808      	bhi.n	800715a <_printf_i+0x7e>
 8007148:	296f      	cmp	r1, #111	; 0x6f
 800714a:	d020      	beq.n	800718e <_printf_i+0xb2>
 800714c:	2970      	cmp	r1, #112	; 0x70
 800714e:	d1dd      	bne.n	800710c <_printf_i+0x30>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	f043 0320 	orr.w	r3, r3, #32
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	e003      	b.n	8007162 <_printf_i+0x86>
 800715a:	2975      	cmp	r1, #117	; 0x75
 800715c:	d017      	beq.n	800718e <_printf_i+0xb2>
 800715e:	2978      	cmp	r1, #120	; 0x78
 8007160:	d1d4      	bne.n	800710c <_printf_i+0x30>
 8007162:	2378      	movs	r3, #120	; 0x78
 8007164:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007168:	4864      	ldr	r0, [pc, #400]	; (80072fc <_printf_i+0x220>)
 800716a:	e055      	b.n	8007218 <_printf_i+0x13c>
 800716c:	6813      	ldr	r3, [r2, #0]
 800716e:	1d19      	adds	r1, r3, #4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6011      	str	r1, [r2, #0]
 8007174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800717c:	2301      	movs	r3, #1
 800717e:	e08c      	b.n	800729a <_printf_i+0x1be>
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6011      	str	r1, [r2, #0]
 8007184:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007188:	bf18      	it	ne
 800718a:	b21b      	sxthne	r3, r3
 800718c:	e7cf      	b.n	800712e <_printf_i+0x52>
 800718e:	6813      	ldr	r3, [r2, #0]
 8007190:	6825      	ldr	r5, [r4, #0]
 8007192:	1d18      	adds	r0, r3, #4
 8007194:	6010      	str	r0, [r2, #0]
 8007196:	0628      	lsls	r0, r5, #24
 8007198:	d501      	bpl.n	800719e <_printf_i+0xc2>
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	e002      	b.n	80071a4 <_printf_i+0xc8>
 800719e:	0668      	lsls	r0, r5, #25
 80071a0:	d5fb      	bpl.n	800719a <_printf_i+0xbe>
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	4854      	ldr	r0, [pc, #336]	; (80072f8 <_printf_i+0x21c>)
 80071a6:	296f      	cmp	r1, #111	; 0x6f
 80071a8:	bf14      	ite	ne
 80071aa:	220a      	movne	r2, #10
 80071ac:	2208      	moveq	r2, #8
 80071ae:	2100      	movs	r1, #0
 80071b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071b4:	6865      	ldr	r5, [r4, #4]
 80071b6:	60a5      	str	r5, [r4, #8]
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	f2c0 8095 	blt.w	80072e8 <_printf_i+0x20c>
 80071be:	6821      	ldr	r1, [r4, #0]
 80071c0:	f021 0104 	bic.w	r1, r1, #4
 80071c4:	6021      	str	r1, [r4, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d13d      	bne.n	8007246 <_printf_i+0x16a>
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	f040 808e 	bne.w	80072ec <_printf_i+0x210>
 80071d0:	4665      	mov	r5, ip
 80071d2:	2a08      	cmp	r2, #8
 80071d4:	d10b      	bne.n	80071ee <_printf_i+0x112>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	07db      	lsls	r3, r3, #31
 80071da:	d508      	bpl.n	80071ee <_printf_i+0x112>
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	6862      	ldr	r2, [r4, #4]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	bfde      	ittt	le
 80071e4:	2330      	movle	r3, #48	; 0x30
 80071e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071ee:	ebac 0305 	sub.w	r3, ip, r5
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	f8cd 8000 	str.w	r8, [sp]
 80071f8:	463b      	mov	r3, r7
 80071fa:	aa03      	add	r2, sp, #12
 80071fc:	4621      	mov	r1, r4
 80071fe:	4630      	mov	r0, r6
 8007200:	f7ff fef6 	bl	8006ff0 <_printf_common>
 8007204:	3001      	adds	r0, #1
 8007206:	d14d      	bne.n	80072a4 <_printf_i+0x1c8>
 8007208:	f04f 30ff 	mov.w	r0, #4294967295
 800720c:	b005      	add	sp, #20
 800720e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007212:	4839      	ldr	r0, [pc, #228]	; (80072f8 <_printf_i+0x21c>)
 8007214:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007218:	6813      	ldr	r3, [r2, #0]
 800721a:	6821      	ldr	r1, [r4, #0]
 800721c:	1d1d      	adds	r5, r3, #4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6015      	str	r5, [r2, #0]
 8007222:	060a      	lsls	r2, r1, #24
 8007224:	d50b      	bpl.n	800723e <_printf_i+0x162>
 8007226:	07ca      	lsls	r2, r1, #31
 8007228:	bf44      	itt	mi
 800722a:	f041 0120 	orrmi.w	r1, r1, #32
 800722e:	6021      	strmi	r1, [r4, #0]
 8007230:	b91b      	cbnz	r3, 800723a <_printf_i+0x15e>
 8007232:	6822      	ldr	r2, [r4, #0]
 8007234:	f022 0220 	bic.w	r2, r2, #32
 8007238:	6022      	str	r2, [r4, #0]
 800723a:	2210      	movs	r2, #16
 800723c:	e7b7      	b.n	80071ae <_printf_i+0xd2>
 800723e:	064d      	lsls	r5, r1, #25
 8007240:	bf48      	it	mi
 8007242:	b29b      	uxthmi	r3, r3
 8007244:	e7ef      	b.n	8007226 <_printf_i+0x14a>
 8007246:	4665      	mov	r5, ip
 8007248:	fbb3 f1f2 	udiv	r1, r3, r2
 800724c:	fb02 3311 	mls	r3, r2, r1, r3
 8007250:	5cc3      	ldrb	r3, [r0, r3]
 8007252:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007256:	460b      	mov	r3, r1
 8007258:	2900      	cmp	r1, #0
 800725a:	d1f5      	bne.n	8007248 <_printf_i+0x16c>
 800725c:	e7b9      	b.n	80071d2 <_printf_i+0xf6>
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	6825      	ldr	r5, [r4, #0]
 8007262:	6961      	ldr	r1, [r4, #20]
 8007264:	1d18      	adds	r0, r3, #4
 8007266:	6010      	str	r0, [r2, #0]
 8007268:	0628      	lsls	r0, r5, #24
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	d501      	bpl.n	8007272 <_printf_i+0x196>
 800726e:	6019      	str	r1, [r3, #0]
 8007270:	e002      	b.n	8007278 <_printf_i+0x19c>
 8007272:	066a      	lsls	r2, r5, #25
 8007274:	d5fb      	bpl.n	800726e <_printf_i+0x192>
 8007276:	8019      	strh	r1, [r3, #0]
 8007278:	2300      	movs	r3, #0
 800727a:	6123      	str	r3, [r4, #16]
 800727c:	4665      	mov	r5, ip
 800727e:	e7b9      	b.n	80071f4 <_printf_i+0x118>
 8007280:	6813      	ldr	r3, [r2, #0]
 8007282:	1d19      	adds	r1, r3, #4
 8007284:	6011      	str	r1, [r2, #0]
 8007286:	681d      	ldr	r5, [r3, #0]
 8007288:	6862      	ldr	r2, [r4, #4]
 800728a:	2100      	movs	r1, #0
 800728c:	4628      	mov	r0, r5
 800728e:	f7f8 ffaf 	bl	80001f0 <memchr>
 8007292:	b108      	cbz	r0, 8007298 <_printf_i+0x1bc>
 8007294:	1b40      	subs	r0, r0, r5
 8007296:	6060      	str	r0, [r4, #4]
 8007298:	6863      	ldr	r3, [r4, #4]
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	2300      	movs	r3, #0
 800729e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a2:	e7a7      	b.n	80071f4 <_printf_i+0x118>
 80072a4:	6923      	ldr	r3, [r4, #16]
 80072a6:	462a      	mov	r2, r5
 80072a8:	4639      	mov	r1, r7
 80072aa:	4630      	mov	r0, r6
 80072ac:	47c0      	blx	r8
 80072ae:	3001      	adds	r0, #1
 80072b0:	d0aa      	beq.n	8007208 <_printf_i+0x12c>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	079b      	lsls	r3, r3, #30
 80072b6:	d413      	bmi.n	80072e0 <_printf_i+0x204>
 80072b8:	68e0      	ldr	r0, [r4, #12]
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	4298      	cmp	r0, r3
 80072be:	bfb8      	it	lt
 80072c0:	4618      	movlt	r0, r3
 80072c2:	e7a3      	b.n	800720c <_printf_i+0x130>
 80072c4:	2301      	movs	r3, #1
 80072c6:	464a      	mov	r2, r9
 80072c8:	4639      	mov	r1, r7
 80072ca:	4630      	mov	r0, r6
 80072cc:	47c0      	blx	r8
 80072ce:	3001      	adds	r0, #1
 80072d0:	d09a      	beq.n	8007208 <_printf_i+0x12c>
 80072d2:	3501      	adds	r5, #1
 80072d4:	68e3      	ldr	r3, [r4, #12]
 80072d6:	9a03      	ldr	r2, [sp, #12]
 80072d8:	1a9b      	subs	r3, r3, r2
 80072da:	42ab      	cmp	r3, r5
 80072dc:	dcf2      	bgt.n	80072c4 <_printf_i+0x1e8>
 80072de:	e7eb      	b.n	80072b8 <_printf_i+0x1dc>
 80072e0:	2500      	movs	r5, #0
 80072e2:	f104 0919 	add.w	r9, r4, #25
 80072e6:	e7f5      	b.n	80072d4 <_printf_i+0x1f8>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1ac      	bne.n	8007246 <_printf_i+0x16a>
 80072ec:	7803      	ldrb	r3, [r0, #0]
 80072ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f6:	e76c      	b.n	80071d2 <_printf_i+0xf6>
 80072f8:	0800a53e 	.word	0x0800a53e
 80072fc:	0800a54f 	.word	0x0800a54f

08007300 <_scanf_float>:
 8007300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	469a      	mov	sl, r3
 8007306:	688b      	ldr	r3, [r1, #8]
 8007308:	4616      	mov	r6, r2
 800730a:	1e5a      	subs	r2, r3, #1
 800730c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007310:	b087      	sub	sp, #28
 8007312:	bf83      	ittte	hi
 8007314:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007318:	189b      	addhi	r3, r3, r2
 800731a:	9301      	strhi	r3, [sp, #4]
 800731c:	2300      	movls	r3, #0
 800731e:	bf86      	itte	hi
 8007320:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007324:	608b      	strhi	r3, [r1, #8]
 8007326:	9301      	strls	r3, [sp, #4]
 8007328:	680b      	ldr	r3, [r1, #0]
 800732a:	4688      	mov	r8, r1
 800732c:	f04f 0b00 	mov.w	fp, #0
 8007330:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007334:	f848 3b1c 	str.w	r3, [r8], #28
 8007338:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800733c:	4607      	mov	r7, r0
 800733e:	460c      	mov	r4, r1
 8007340:	4645      	mov	r5, r8
 8007342:	465a      	mov	r2, fp
 8007344:	46d9      	mov	r9, fp
 8007346:	f8cd b008 	str.w	fp, [sp, #8]
 800734a:	68a1      	ldr	r1, [r4, #8]
 800734c:	b181      	cbz	r1, 8007370 <_scanf_float+0x70>
 800734e:	6833      	ldr	r3, [r6, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b49      	cmp	r3, #73	; 0x49
 8007354:	d071      	beq.n	800743a <_scanf_float+0x13a>
 8007356:	d84d      	bhi.n	80073f4 <_scanf_float+0xf4>
 8007358:	2b39      	cmp	r3, #57	; 0x39
 800735a:	d840      	bhi.n	80073de <_scanf_float+0xde>
 800735c:	2b31      	cmp	r3, #49	; 0x31
 800735e:	f080 8088 	bcs.w	8007472 <_scanf_float+0x172>
 8007362:	2b2d      	cmp	r3, #45	; 0x2d
 8007364:	f000 8090 	beq.w	8007488 <_scanf_float+0x188>
 8007368:	d815      	bhi.n	8007396 <_scanf_float+0x96>
 800736a:	2b2b      	cmp	r3, #43	; 0x2b
 800736c:	f000 808c 	beq.w	8007488 <_scanf_float+0x188>
 8007370:	f1b9 0f00 	cmp.w	r9, #0
 8007374:	d003      	beq.n	800737e <_scanf_float+0x7e>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	3a01      	subs	r2, #1
 8007380:	2a01      	cmp	r2, #1
 8007382:	f200 80ea 	bhi.w	800755a <_scanf_float+0x25a>
 8007386:	4545      	cmp	r5, r8
 8007388:	f200 80dc 	bhi.w	8007544 <_scanf_float+0x244>
 800738c:	2601      	movs	r6, #1
 800738e:	4630      	mov	r0, r6
 8007390:	b007      	add	sp, #28
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	2b2e      	cmp	r3, #46	; 0x2e
 8007398:	f000 809f 	beq.w	80074da <_scanf_float+0x1da>
 800739c:	2b30      	cmp	r3, #48	; 0x30
 800739e:	d1e7      	bne.n	8007370 <_scanf_float+0x70>
 80073a0:	6820      	ldr	r0, [r4, #0]
 80073a2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80073a6:	d064      	beq.n	8007472 <_scanf_float+0x172>
 80073a8:	9b01      	ldr	r3, [sp, #4]
 80073aa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80073ae:	6020      	str	r0, [r4, #0]
 80073b0:	f109 0901 	add.w	r9, r9, #1
 80073b4:	b11b      	cbz	r3, 80073be <_scanf_float+0xbe>
 80073b6:	3b01      	subs	r3, #1
 80073b8:	3101      	adds	r1, #1
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	60a1      	str	r1, [r4, #8]
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	60a3      	str	r3, [r4, #8]
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	3301      	adds	r3, #1
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	6873      	ldr	r3, [r6, #4]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	6073      	str	r3, [r6, #4]
 80073d2:	f340 80ac 	ble.w	800752e <_scanf_float+0x22e>
 80073d6:	6833      	ldr	r3, [r6, #0]
 80073d8:	3301      	adds	r3, #1
 80073da:	6033      	str	r3, [r6, #0]
 80073dc:	e7b5      	b.n	800734a <_scanf_float+0x4a>
 80073de:	2b45      	cmp	r3, #69	; 0x45
 80073e0:	f000 8085 	beq.w	80074ee <_scanf_float+0x1ee>
 80073e4:	2b46      	cmp	r3, #70	; 0x46
 80073e6:	d06a      	beq.n	80074be <_scanf_float+0x1be>
 80073e8:	2b41      	cmp	r3, #65	; 0x41
 80073ea:	d1c1      	bne.n	8007370 <_scanf_float+0x70>
 80073ec:	2a01      	cmp	r2, #1
 80073ee:	d1bf      	bne.n	8007370 <_scanf_float+0x70>
 80073f0:	2202      	movs	r2, #2
 80073f2:	e046      	b.n	8007482 <_scanf_float+0x182>
 80073f4:	2b65      	cmp	r3, #101	; 0x65
 80073f6:	d07a      	beq.n	80074ee <_scanf_float+0x1ee>
 80073f8:	d818      	bhi.n	800742c <_scanf_float+0x12c>
 80073fa:	2b54      	cmp	r3, #84	; 0x54
 80073fc:	d066      	beq.n	80074cc <_scanf_float+0x1cc>
 80073fe:	d811      	bhi.n	8007424 <_scanf_float+0x124>
 8007400:	2b4e      	cmp	r3, #78	; 0x4e
 8007402:	d1b5      	bne.n	8007370 <_scanf_float+0x70>
 8007404:	2a00      	cmp	r2, #0
 8007406:	d146      	bne.n	8007496 <_scanf_float+0x196>
 8007408:	f1b9 0f00 	cmp.w	r9, #0
 800740c:	d145      	bne.n	800749a <_scanf_float+0x19a>
 800740e:	6821      	ldr	r1, [r4, #0]
 8007410:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007414:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007418:	d13f      	bne.n	800749a <_scanf_float+0x19a>
 800741a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800741e:	6021      	str	r1, [r4, #0]
 8007420:	2201      	movs	r2, #1
 8007422:	e02e      	b.n	8007482 <_scanf_float+0x182>
 8007424:	2b59      	cmp	r3, #89	; 0x59
 8007426:	d01e      	beq.n	8007466 <_scanf_float+0x166>
 8007428:	2b61      	cmp	r3, #97	; 0x61
 800742a:	e7de      	b.n	80073ea <_scanf_float+0xea>
 800742c:	2b6e      	cmp	r3, #110	; 0x6e
 800742e:	d0e9      	beq.n	8007404 <_scanf_float+0x104>
 8007430:	d815      	bhi.n	800745e <_scanf_float+0x15e>
 8007432:	2b66      	cmp	r3, #102	; 0x66
 8007434:	d043      	beq.n	80074be <_scanf_float+0x1be>
 8007436:	2b69      	cmp	r3, #105	; 0x69
 8007438:	d19a      	bne.n	8007370 <_scanf_float+0x70>
 800743a:	f1bb 0f00 	cmp.w	fp, #0
 800743e:	d138      	bne.n	80074b2 <_scanf_float+0x1b2>
 8007440:	f1b9 0f00 	cmp.w	r9, #0
 8007444:	d197      	bne.n	8007376 <_scanf_float+0x76>
 8007446:	6821      	ldr	r1, [r4, #0]
 8007448:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800744c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007450:	d195      	bne.n	800737e <_scanf_float+0x7e>
 8007452:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007456:	6021      	str	r1, [r4, #0]
 8007458:	f04f 0b01 	mov.w	fp, #1
 800745c:	e011      	b.n	8007482 <_scanf_float+0x182>
 800745e:	2b74      	cmp	r3, #116	; 0x74
 8007460:	d034      	beq.n	80074cc <_scanf_float+0x1cc>
 8007462:	2b79      	cmp	r3, #121	; 0x79
 8007464:	d184      	bne.n	8007370 <_scanf_float+0x70>
 8007466:	f1bb 0f07 	cmp.w	fp, #7
 800746a:	d181      	bne.n	8007370 <_scanf_float+0x70>
 800746c:	f04f 0b08 	mov.w	fp, #8
 8007470:	e007      	b.n	8007482 <_scanf_float+0x182>
 8007472:	eb12 0f0b 	cmn.w	r2, fp
 8007476:	f47f af7b 	bne.w	8007370 <_scanf_float+0x70>
 800747a:	6821      	ldr	r1, [r4, #0]
 800747c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007480:	6021      	str	r1, [r4, #0]
 8007482:	702b      	strb	r3, [r5, #0]
 8007484:	3501      	adds	r5, #1
 8007486:	e79a      	b.n	80073be <_scanf_float+0xbe>
 8007488:	6821      	ldr	r1, [r4, #0]
 800748a:	0608      	lsls	r0, r1, #24
 800748c:	f57f af70 	bpl.w	8007370 <_scanf_float+0x70>
 8007490:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007494:	e7f4      	b.n	8007480 <_scanf_float+0x180>
 8007496:	2a02      	cmp	r2, #2
 8007498:	d047      	beq.n	800752a <_scanf_float+0x22a>
 800749a:	f1bb 0f01 	cmp.w	fp, #1
 800749e:	d003      	beq.n	80074a8 <_scanf_float+0x1a8>
 80074a0:	f1bb 0f04 	cmp.w	fp, #4
 80074a4:	f47f af64 	bne.w	8007370 <_scanf_float+0x70>
 80074a8:	f10b 0b01 	add.w	fp, fp, #1
 80074ac:	fa5f fb8b 	uxtb.w	fp, fp
 80074b0:	e7e7      	b.n	8007482 <_scanf_float+0x182>
 80074b2:	f1bb 0f03 	cmp.w	fp, #3
 80074b6:	d0f7      	beq.n	80074a8 <_scanf_float+0x1a8>
 80074b8:	f1bb 0f05 	cmp.w	fp, #5
 80074bc:	e7f2      	b.n	80074a4 <_scanf_float+0x1a4>
 80074be:	f1bb 0f02 	cmp.w	fp, #2
 80074c2:	f47f af55 	bne.w	8007370 <_scanf_float+0x70>
 80074c6:	f04f 0b03 	mov.w	fp, #3
 80074ca:	e7da      	b.n	8007482 <_scanf_float+0x182>
 80074cc:	f1bb 0f06 	cmp.w	fp, #6
 80074d0:	f47f af4e 	bne.w	8007370 <_scanf_float+0x70>
 80074d4:	f04f 0b07 	mov.w	fp, #7
 80074d8:	e7d3      	b.n	8007482 <_scanf_float+0x182>
 80074da:	6821      	ldr	r1, [r4, #0]
 80074dc:	0588      	lsls	r0, r1, #22
 80074de:	f57f af47 	bpl.w	8007370 <_scanf_float+0x70>
 80074e2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80074e6:	6021      	str	r1, [r4, #0]
 80074e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80074ec:	e7c9      	b.n	8007482 <_scanf_float+0x182>
 80074ee:	6821      	ldr	r1, [r4, #0]
 80074f0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80074f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80074f8:	d006      	beq.n	8007508 <_scanf_float+0x208>
 80074fa:	0548      	lsls	r0, r1, #21
 80074fc:	f57f af38 	bpl.w	8007370 <_scanf_float+0x70>
 8007500:	f1b9 0f00 	cmp.w	r9, #0
 8007504:	f43f af3b 	beq.w	800737e <_scanf_float+0x7e>
 8007508:	0588      	lsls	r0, r1, #22
 800750a:	bf58      	it	pl
 800750c:	9802      	ldrpl	r0, [sp, #8]
 800750e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007512:	bf58      	it	pl
 8007514:	eba9 0000 	subpl.w	r0, r9, r0
 8007518:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800751c:	bf58      	it	pl
 800751e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007522:	6021      	str	r1, [r4, #0]
 8007524:	f04f 0900 	mov.w	r9, #0
 8007528:	e7ab      	b.n	8007482 <_scanf_float+0x182>
 800752a:	2203      	movs	r2, #3
 800752c:	e7a9      	b.n	8007482 <_scanf_float+0x182>
 800752e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007532:	9205      	str	r2, [sp, #20]
 8007534:	4631      	mov	r1, r6
 8007536:	4638      	mov	r0, r7
 8007538:	4798      	blx	r3
 800753a:	9a05      	ldr	r2, [sp, #20]
 800753c:	2800      	cmp	r0, #0
 800753e:	f43f af04 	beq.w	800734a <_scanf_float+0x4a>
 8007542:	e715      	b.n	8007370 <_scanf_float+0x70>
 8007544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007548:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800754c:	4632      	mov	r2, r6
 800754e:	4638      	mov	r0, r7
 8007550:	4798      	blx	r3
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	3b01      	subs	r3, #1
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	e715      	b.n	8007386 <_scanf_float+0x86>
 800755a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800755e:	2b06      	cmp	r3, #6
 8007560:	d80a      	bhi.n	8007578 <_scanf_float+0x278>
 8007562:	f1bb 0f02 	cmp.w	fp, #2
 8007566:	d968      	bls.n	800763a <_scanf_float+0x33a>
 8007568:	f1ab 0b03 	sub.w	fp, fp, #3
 800756c:	fa5f fb8b 	uxtb.w	fp, fp
 8007570:	eba5 0b0b 	sub.w	fp, r5, fp
 8007574:	455d      	cmp	r5, fp
 8007576:	d14b      	bne.n	8007610 <_scanf_float+0x310>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	05da      	lsls	r2, r3, #23
 800757c:	d51f      	bpl.n	80075be <_scanf_float+0x2be>
 800757e:	055b      	lsls	r3, r3, #21
 8007580:	d468      	bmi.n	8007654 <_scanf_float+0x354>
 8007582:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	2965      	cmp	r1, #101	; 0x65
 800758a:	f103 33ff 	add.w	r3, r3, #4294967295
 800758e:	f105 3bff 	add.w	fp, r5, #4294967295
 8007592:	6123      	str	r3, [r4, #16]
 8007594:	d00d      	beq.n	80075b2 <_scanf_float+0x2b2>
 8007596:	2945      	cmp	r1, #69	; 0x45
 8007598:	d00b      	beq.n	80075b2 <_scanf_float+0x2b2>
 800759a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800759e:	4632      	mov	r2, r6
 80075a0:	4638      	mov	r0, r7
 80075a2:	4798      	blx	r3
 80075a4:	6923      	ldr	r3, [r4, #16]
 80075a6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	f1a5 0b02 	sub.w	fp, r5, #2
 80075b0:	6123      	str	r3, [r4, #16]
 80075b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075b6:	4632      	mov	r2, r6
 80075b8:	4638      	mov	r0, r7
 80075ba:	4798      	blx	r3
 80075bc:	465d      	mov	r5, fp
 80075be:	6826      	ldr	r6, [r4, #0]
 80075c0:	f016 0610 	ands.w	r6, r6, #16
 80075c4:	d17a      	bne.n	80076bc <_scanf_float+0x3bc>
 80075c6:	702e      	strb	r6, [r5, #0]
 80075c8:	6823      	ldr	r3, [r4, #0]
 80075ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d2:	d142      	bne.n	800765a <_scanf_float+0x35a>
 80075d4:	9b02      	ldr	r3, [sp, #8]
 80075d6:	eba9 0303 	sub.w	r3, r9, r3
 80075da:	425a      	negs	r2, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d149      	bne.n	8007674 <_scanf_float+0x374>
 80075e0:	2200      	movs	r2, #0
 80075e2:	4641      	mov	r1, r8
 80075e4:	4638      	mov	r0, r7
 80075e6:	f000 fea3 	bl	8008330 <_strtod_r>
 80075ea:	6825      	ldr	r5, [r4, #0]
 80075ec:	f8da 3000 	ldr.w	r3, [sl]
 80075f0:	f015 0f02 	tst.w	r5, #2
 80075f4:	f103 0204 	add.w	r2, r3, #4
 80075f8:	ec59 8b10 	vmov	r8, r9, d0
 80075fc:	f8ca 2000 	str.w	r2, [sl]
 8007600:	d043      	beq.n	800768a <_scanf_float+0x38a>
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	e9c3 8900 	strd	r8, r9, [r3]
 8007608:	68e3      	ldr	r3, [r4, #12]
 800760a:	3301      	adds	r3, #1
 800760c:	60e3      	str	r3, [r4, #12]
 800760e:	e6be      	b.n	800738e <_scanf_float+0x8e>
 8007610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007614:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007618:	4632      	mov	r2, r6
 800761a:	4638      	mov	r0, r7
 800761c:	4798      	blx	r3
 800761e:	6923      	ldr	r3, [r4, #16]
 8007620:	3b01      	subs	r3, #1
 8007622:	6123      	str	r3, [r4, #16]
 8007624:	e7a6      	b.n	8007574 <_scanf_float+0x274>
 8007626:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800762a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800762e:	4632      	mov	r2, r6
 8007630:	4638      	mov	r0, r7
 8007632:	4798      	blx	r3
 8007634:	6923      	ldr	r3, [r4, #16]
 8007636:	3b01      	subs	r3, #1
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	4545      	cmp	r5, r8
 800763c:	d8f3      	bhi.n	8007626 <_scanf_float+0x326>
 800763e:	e6a5      	b.n	800738c <_scanf_float+0x8c>
 8007640:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007644:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007648:	4632      	mov	r2, r6
 800764a:	4638      	mov	r0, r7
 800764c:	4798      	blx	r3
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	3b01      	subs	r3, #1
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	4545      	cmp	r5, r8
 8007656:	d8f3      	bhi.n	8007640 <_scanf_float+0x340>
 8007658:	e698      	b.n	800738c <_scanf_float+0x8c>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0bf      	beq.n	80075e0 <_scanf_float+0x2e0>
 8007660:	9904      	ldr	r1, [sp, #16]
 8007662:	230a      	movs	r3, #10
 8007664:	4632      	mov	r2, r6
 8007666:	3101      	adds	r1, #1
 8007668:	4638      	mov	r0, r7
 800766a:	f000 feed 	bl	8008448 <_strtol_r>
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	9d04      	ldr	r5, [sp, #16]
 8007672:	1ac2      	subs	r2, r0, r3
 8007674:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007678:	429d      	cmp	r5, r3
 800767a:	bf28      	it	cs
 800767c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007680:	490f      	ldr	r1, [pc, #60]	; (80076c0 <_scanf_float+0x3c0>)
 8007682:	4628      	mov	r0, r5
 8007684:	f000 f824 	bl	80076d0 <siprintf>
 8007688:	e7aa      	b.n	80075e0 <_scanf_float+0x2e0>
 800768a:	f015 0504 	ands.w	r5, r5, #4
 800768e:	d1b8      	bne.n	8007602 <_scanf_float+0x302>
 8007690:	681f      	ldr	r7, [r3, #0]
 8007692:	ee10 2a10 	vmov	r2, s0
 8007696:	464b      	mov	r3, r9
 8007698:	ee10 0a10 	vmov	r0, s0
 800769c:	4649      	mov	r1, r9
 800769e:	f7f9 fa4d 	bl	8000b3c <__aeabi_dcmpun>
 80076a2:	b128      	cbz	r0, 80076b0 <_scanf_float+0x3b0>
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 f80d 	bl	80076c4 <nanf>
 80076aa:	ed87 0a00 	vstr	s0, [r7]
 80076ae:	e7ab      	b.n	8007608 <_scanf_float+0x308>
 80076b0:	4640      	mov	r0, r8
 80076b2:	4649      	mov	r1, r9
 80076b4:	f7f9 faa0 	bl	8000bf8 <__aeabi_d2f>
 80076b8:	6038      	str	r0, [r7, #0]
 80076ba:	e7a5      	b.n	8007608 <_scanf_float+0x308>
 80076bc:	2600      	movs	r6, #0
 80076be:	e666      	b.n	800738e <_scanf_float+0x8e>
 80076c0:	0800a560 	.word	0x0800a560

080076c4 <nanf>:
 80076c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80076cc <nanf+0x8>
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	7fc00000 	.word	0x7fc00000

080076d0 <siprintf>:
 80076d0:	b40e      	push	{r1, r2, r3}
 80076d2:	b500      	push	{lr}
 80076d4:	b09c      	sub	sp, #112	; 0x70
 80076d6:	ab1d      	add	r3, sp, #116	; 0x74
 80076d8:	9002      	str	r0, [sp, #8]
 80076da:	9006      	str	r0, [sp, #24]
 80076dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076e0:	4809      	ldr	r0, [pc, #36]	; (8007708 <siprintf+0x38>)
 80076e2:	9107      	str	r1, [sp, #28]
 80076e4:	9104      	str	r1, [sp, #16]
 80076e6:	4909      	ldr	r1, [pc, #36]	; (800770c <siprintf+0x3c>)
 80076e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ec:	9105      	str	r1, [sp, #20]
 80076ee:	6800      	ldr	r0, [r0, #0]
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	a902      	add	r1, sp, #8
 80076f4:	f002 fd82 	bl	800a1fc <_svfiprintf_r>
 80076f8:	9b02      	ldr	r3, [sp, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	b01c      	add	sp, #112	; 0x70
 8007700:	f85d eb04 	ldr.w	lr, [sp], #4
 8007704:	b003      	add	sp, #12
 8007706:	4770      	bx	lr
 8007708:	2000000c 	.word	0x2000000c
 800770c:	ffff0208 	.word	0xffff0208

08007710 <sulp>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	4604      	mov	r4, r0
 8007714:	460d      	mov	r5, r1
 8007716:	ec45 4b10 	vmov	d0, r4, r5
 800771a:	4616      	mov	r6, r2
 800771c:	f002 fb2a 	bl	8009d74 <__ulp>
 8007720:	ec51 0b10 	vmov	r0, r1, d0
 8007724:	b17e      	cbz	r6, 8007746 <sulp+0x36>
 8007726:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800772a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800772e:	2b00      	cmp	r3, #0
 8007730:	dd09      	ble.n	8007746 <sulp+0x36>
 8007732:	051b      	lsls	r3, r3, #20
 8007734:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007738:	2400      	movs	r4, #0
 800773a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800773e:	4622      	mov	r2, r4
 8007740:	462b      	mov	r3, r5
 8007742:	f7f8 ff61 	bl	8000608 <__aeabi_dmul>
 8007746:	bd70      	pop	{r4, r5, r6, pc}

08007748 <_strtod_l>:
 8007748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800774c:	461f      	mov	r7, r3
 800774e:	b0a1      	sub	sp, #132	; 0x84
 8007750:	2300      	movs	r3, #0
 8007752:	4681      	mov	r9, r0
 8007754:	4638      	mov	r0, r7
 8007756:	460e      	mov	r6, r1
 8007758:	9217      	str	r2, [sp, #92]	; 0x5c
 800775a:	931c      	str	r3, [sp, #112]	; 0x70
 800775c:	f002 f809 	bl	8009772 <__localeconv_l>
 8007760:	4680      	mov	r8, r0
 8007762:	6800      	ldr	r0, [r0, #0]
 8007764:	f7f8 fd3c 	bl	80001e0 <strlen>
 8007768:	f04f 0a00 	mov.w	sl, #0
 800776c:	4604      	mov	r4, r0
 800776e:	f04f 0b00 	mov.w	fp, #0
 8007772:	961b      	str	r6, [sp, #108]	; 0x6c
 8007774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007776:	781a      	ldrb	r2, [r3, #0]
 8007778:	2a0d      	cmp	r2, #13
 800777a:	d832      	bhi.n	80077e2 <_strtod_l+0x9a>
 800777c:	2a09      	cmp	r2, #9
 800777e:	d236      	bcs.n	80077ee <_strtod_l+0xa6>
 8007780:	2a00      	cmp	r2, #0
 8007782:	d03e      	beq.n	8007802 <_strtod_l+0xba>
 8007784:	2300      	movs	r3, #0
 8007786:	930d      	str	r3, [sp, #52]	; 0x34
 8007788:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800778a:	782b      	ldrb	r3, [r5, #0]
 800778c:	2b30      	cmp	r3, #48	; 0x30
 800778e:	f040 80ac 	bne.w	80078ea <_strtod_l+0x1a2>
 8007792:	786b      	ldrb	r3, [r5, #1]
 8007794:	2b58      	cmp	r3, #88	; 0x58
 8007796:	d001      	beq.n	800779c <_strtod_l+0x54>
 8007798:	2b78      	cmp	r3, #120	; 0x78
 800779a:	d167      	bne.n	800786c <_strtod_l+0x124>
 800779c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800779e:	9301      	str	r3, [sp, #4]
 80077a0:	ab1c      	add	r3, sp, #112	; 0x70
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	9702      	str	r7, [sp, #8]
 80077a6:	ab1d      	add	r3, sp, #116	; 0x74
 80077a8:	4a88      	ldr	r2, [pc, #544]	; (80079cc <_strtod_l+0x284>)
 80077aa:	a91b      	add	r1, sp, #108	; 0x6c
 80077ac:	4648      	mov	r0, r9
 80077ae:	f001 fd06 	bl	80091be <__gethex>
 80077b2:	f010 0407 	ands.w	r4, r0, #7
 80077b6:	4606      	mov	r6, r0
 80077b8:	d005      	beq.n	80077c6 <_strtod_l+0x7e>
 80077ba:	2c06      	cmp	r4, #6
 80077bc:	d12b      	bne.n	8007816 <_strtod_l+0xce>
 80077be:	3501      	adds	r5, #1
 80077c0:	2300      	movs	r3, #0
 80077c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80077c4:	930d      	str	r3, [sp, #52]	; 0x34
 80077c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f040 859a 	bne.w	8008302 <_strtod_l+0xbba>
 80077ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077d0:	b1e3      	cbz	r3, 800780c <_strtod_l+0xc4>
 80077d2:	4652      	mov	r2, sl
 80077d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80077d8:	ec43 2b10 	vmov	d0, r2, r3
 80077dc:	b021      	add	sp, #132	; 0x84
 80077de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e2:	2a2b      	cmp	r2, #43	; 0x2b
 80077e4:	d015      	beq.n	8007812 <_strtod_l+0xca>
 80077e6:	2a2d      	cmp	r2, #45	; 0x2d
 80077e8:	d004      	beq.n	80077f4 <_strtod_l+0xac>
 80077ea:	2a20      	cmp	r2, #32
 80077ec:	d1ca      	bne.n	8007784 <_strtod_l+0x3c>
 80077ee:	3301      	adds	r3, #1
 80077f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80077f2:	e7bf      	b.n	8007774 <_strtod_l+0x2c>
 80077f4:	2201      	movs	r2, #1
 80077f6:	920d      	str	r2, [sp, #52]	; 0x34
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80077fc:	785b      	ldrb	r3, [r3, #1]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1c2      	bne.n	8007788 <_strtod_l+0x40>
 8007802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007804:	961b      	str	r6, [sp, #108]	; 0x6c
 8007806:	2b00      	cmp	r3, #0
 8007808:	f040 8579 	bne.w	80082fe <_strtod_l+0xbb6>
 800780c:	4652      	mov	r2, sl
 800780e:	465b      	mov	r3, fp
 8007810:	e7e2      	b.n	80077d8 <_strtod_l+0x90>
 8007812:	2200      	movs	r2, #0
 8007814:	e7ef      	b.n	80077f6 <_strtod_l+0xae>
 8007816:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007818:	b13a      	cbz	r2, 800782a <_strtod_l+0xe2>
 800781a:	2135      	movs	r1, #53	; 0x35
 800781c:	a81e      	add	r0, sp, #120	; 0x78
 800781e:	f002 fba1 	bl	8009f64 <__copybits>
 8007822:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007824:	4648      	mov	r0, r9
 8007826:	f002 f80e 	bl	8009846 <_Bfree>
 800782a:	3c01      	subs	r4, #1
 800782c:	2c04      	cmp	r4, #4
 800782e:	d806      	bhi.n	800783e <_strtod_l+0xf6>
 8007830:	e8df f004 	tbb	[pc, r4]
 8007834:	1714030a 	.word	0x1714030a
 8007838:	0a          	.byte	0x0a
 8007839:	00          	.byte	0x00
 800783a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800783e:	0730      	lsls	r0, r6, #28
 8007840:	d5c1      	bpl.n	80077c6 <_strtod_l+0x7e>
 8007842:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007846:	e7be      	b.n	80077c6 <_strtod_l+0x7e>
 8007848:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800784c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800784e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007852:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007856:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800785a:	e7f0      	b.n	800783e <_strtod_l+0xf6>
 800785c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80079d0 <_strtod_l+0x288>
 8007860:	e7ed      	b.n	800783e <_strtod_l+0xf6>
 8007862:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007866:	f04f 3aff 	mov.w	sl, #4294967295
 800786a:	e7e8      	b.n	800783e <_strtod_l+0xf6>
 800786c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	921b      	str	r2, [sp, #108]	; 0x6c
 8007872:	785b      	ldrb	r3, [r3, #1]
 8007874:	2b30      	cmp	r3, #48	; 0x30
 8007876:	d0f9      	beq.n	800786c <_strtod_l+0x124>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0a4      	beq.n	80077c6 <_strtod_l+0x7e>
 800787c:	2301      	movs	r3, #1
 800787e:	2500      	movs	r5, #0
 8007880:	9306      	str	r3, [sp, #24]
 8007882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007884:	9308      	str	r3, [sp, #32]
 8007886:	9507      	str	r5, [sp, #28]
 8007888:	9505      	str	r5, [sp, #20]
 800788a:	220a      	movs	r2, #10
 800788c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800788e:	7807      	ldrb	r7, [r0, #0]
 8007890:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007894:	b2d9      	uxtb	r1, r3
 8007896:	2909      	cmp	r1, #9
 8007898:	d929      	bls.n	80078ee <_strtod_l+0x1a6>
 800789a:	4622      	mov	r2, r4
 800789c:	f8d8 1000 	ldr.w	r1, [r8]
 80078a0:	f002 fdb4 	bl	800a40c <strncmp>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	d031      	beq.n	800790c <_strtod_l+0x1c4>
 80078a8:	2000      	movs	r0, #0
 80078aa:	9c05      	ldr	r4, [sp, #20]
 80078ac:	9004      	str	r0, [sp, #16]
 80078ae:	463b      	mov	r3, r7
 80078b0:	4602      	mov	r2, r0
 80078b2:	2b65      	cmp	r3, #101	; 0x65
 80078b4:	d001      	beq.n	80078ba <_strtod_l+0x172>
 80078b6:	2b45      	cmp	r3, #69	; 0x45
 80078b8:	d114      	bne.n	80078e4 <_strtod_l+0x19c>
 80078ba:	b924      	cbnz	r4, 80078c6 <_strtod_l+0x17e>
 80078bc:	b910      	cbnz	r0, 80078c4 <_strtod_l+0x17c>
 80078be:	9b06      	ldr	r3, [sp, #24]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d09e      	beq.n	8007802 <_strtod_l+0xba>
 80078c4:	2400      	movs	r4, #0
 80078c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80078c8:	1c73      	adds	r3, r6, #1
 80078ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80078cc:	7873      	ldrb	r3, [r6, #1]
 80078ce:	2b2b      	cmp	r3, #43	; 0x2b
 80078d0:	d078      	beq.n	80079c4 <_strtod_l+0x27c>
 80078d2:	2b2d      	cmp	r3, #45	; 0x2d
 80078d4:	d070      	beq.n	80079b8 <_strtod_l+0x270>
 80078d6:	f04f 0c00 	mov.w	ip, #0
 80078da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80078de:	2f09      	cmp	r7, #9
 80078e0:	d97c      	bls.n	80079dc <_strtod_l+0x294>
 80078e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80078e4:	f04f 0e00 	mov.w	lr, #0
 80078e8:	e09a      	b.n	8007a20 <_strtod_l+0x2d8>
 80078ea:	2300      	movs	r3, #0
 80078ec:	e7c7      	b.n	800787e <_strtod_l+0x136>
 80078ee:	9905      	ldr	r1, [sp, #20]
 80078f0:	2908      	cmp	r1, #8
 80078f2:	bfdd      	ittte	le
 80078f4:	9907      	ldrle	r1, [sp, #28]
 80078f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80078fa:	9307      	strle	r3, [sp, #28]
 80078fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007900:	9b05      	ldr	r3, [sp, #20]
 8007902:	3001      	adds	r0, #1
 8007904:	3301      	adds	r3, #1
 8007906:	9305      	str	r3, [sp, #20]
 8007908:	901b      	str	r0, [sp, #108]	; 0x6c
 800790a:	e7bf      	b.n	800788c <_strtod_l+0x144>
 800790c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800790e:	191a      	adds	r2, r3, r4
 8007910:	921b      	str	r2, [sp, #108]	; 0x6c
 8007912:	9a05      	ldr	r2, [sp, #20]
 8007914:	5d1b      	ldrb	r3, [r3, r4]
 8007916:	2a00      	cmp	r2, #0
 8007918:	d037      	beq.n	800798a <_strtod_l+0x242>
 800791a:	9c05      	ldr	r4, [sp, #20]
 800791c:	4602      	mov	r2, r0
 800791e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007922:	2909      	cmp	r1, #9
 8007924:	d913      	bls.n	800794e <_strtod_l+0x206>
 8007926:	2101      	movs	r1, #1
 8007928:	9104      	str	r1, [sp, #16]
 800792a:	e7c2      	b.n	80078b2 <_strtod_l+0x16a>
 800792c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	921b      	str	r2, [sp, #108]	; 0x6c
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	3001      	adds	r0, #1
 8007936:	2b30      	cmp	r3, #48	; 0x30
 8007938:	d0f8      	beq.n	800792c <_strtod_l+0x1e4>
 800793a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800793e:	2a08      	cmp	r2, #8
 8007940:	f200 84e4 	bhi.w	800830c <_strtod_l+0xbc4>
 8007944:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007946:	9208      	str	r2, [sp, #32]
 8007948:	4602      	mov	r2, r0
 800794a:	2000      	movs	r0, #0
 800794c:	4604      	mov	r4, r0
 800794e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007952:	f100 0101 	add.w	r1, r0, #1
 8007956:	d012      	beq.n	800797e <_strtod_l+0x236>
 8007958:	440a      	add	r2, r1
 800795a:	eb00 0c04 	add.w	ip, r0, r4
 800795e:	4621      	mov	r1, r4
 8007960:	270a      	movs	r7, #10
 8007962:	458c      	cmp	ip, r1
 8007964:	d113      	bne.n	800798e <_strtod_l+0x246>
 8007966:	1821      	adds	r1, r4, r0
 8007968:	2908      	cmp	r1, #8
 800796a:	f104 0401 	add.w	r4, r4, #1
 800796e:	4404      	add	r4, r0
 8007970:	dc19      	bgt.n	80079a6 <_strtod_l+0x25e>
 8007972:	9b07      	ldr	r3, [sp, #28]
 8007974:	210a      	movs	r1, #10
 8007976:	fb01 e303 	mla	r3, r1, r3, lr
 800797a:	9307      	str	r3, [sp, #28]
 800797c:	2100      	movs	r1, #0
 800797e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007980:	1c58      	adds	r0, r3, #1
 8007982:	901b      	str	r0, [sp, #108]	; 0x6c
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	4608      	mov	r0, r1
 8007988:	e7c9      	b.n	800791e <_strtod_l+0x1d6>
 800798a:	9805      	ldr	r0, [sp, #20]
 800798c:	e7d3      	b.n	8007936 <_strtod_l+0x1ee>
 800798e:	2908      	cmp	r1, #8
 8007990:	f101 0101 	add.w	r1, r1, #1
 8007994:	dc03      	bgt.n	800799e <_strtod_l+0x256>
 8007996:	9b07      	ldr	r3, [sp, #28]
 8007998:	437b      	muls	r3, r7
 800799a:	9307      	str	r3, [sp, #28]
 800799c:	e7e1      	b.n	8007962 <_strtod_l+0x21a>
 800799e:	2910      	cmp	r1, #16
 80079a0:	bfd8      	it	le
 80079a2:	437d      	mulle	r5, r7
 80079a4:	e7dd      	b.n	8007962 <_strtod_l+0x21a>
 80079a6:	2c10      	cmp	r4, #16
 80079a8:	bfdc      	itt	le
 80079aa:	210a      	movle	r1, #10
 80079ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80079b0:	e7e4      	b.n	800797c <_strtod_l+0x234>
 80079b2:	2301      	movs	r3, #1
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	e781      	b.n	80078bc <_strtod_l+0x174>
 80079b8:	f04f 0c01 	mov.w	ip, #1
 80079bc:	1cb3      	adds	r3, r6, #2
 80079be:	931b      	str	r3, [sp, #108]	; 0x6c
 80079c0:	78b3      	ldrb	r3, [r6, #2]
 80079c2:	e78a      	b.n	80078da <_strtod_l+0x192>
 80079c4:	f04f 0c00 	mov.w	ip, #0
 80079c8:	e7f8      	b.n	80079bc <_strtod_l+0x274>
 80079ca:	bf00      	nop
 80079cc:	0800a568 	.word	0x0800a568
 80079d0:	7ff00000 	.word	0x7ff00000
 80079d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079d6:	1c5f      	adds	r7, r3, #1
 80079d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b30      	cmp	r3, #48	; 0x30
 80079de:	d0f9      	beq.n	80079d4 <_strtod_l+0x28c>
 80079e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80079e4:	2f08      	cmp	r7, #8
 80079e6:	f63f af7d 	bhi.w	80078e4 <_strtod_l+0x19c>
 80079ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80079ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079f0:	930a      	str	r3, [sp, #40]	; 0x28
 80079f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079f4:	1c5f      	adds	r7, r3, #1
 80079f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80079f8:	785b      	ldrb	r3, [r3, #1]
 80079fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80079fe:	f1b8 0f09 	cmp.w	r8, #9
 8007a02:	d937      	bls.n	8007a74 <_strtod_l+0x32c>
 8007a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a06:	1a7f      	subs	r7, r7, r1
 8007a08:	2f08      	cmp	r7, #8
 8007a0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007a0e:	dc37      	bgt.n	8007a80 <_strtod_l+0x338>
 8007a10:	45be      	cmp	lr, r7
 8007a12:	bfa8      	it	ge
 8007a14:	46be      	movge	lr, r7
 8007a16:	f1bc 0f00 	cmp.w	ip, #0
 8007a1a:	d001      	beq.n	8007a20 <_strtod_l+0x2d8>
 8007a1c:	f1ce 0e00 	rsb	lr, lr, #0
 8007a20:	2c00      	cmp	r4, #0
 8007a22:	d151      	bne.n	8007ac8 <_strtod_l+0x380>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f47f aece 	bne.w	80077c6 <_strtod_l+0x7e>
 8007a2a:	9a06      	ldr	r2, [sp, #24]
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	f47f aeca 	bne.w	80077c6 <_strtod_l+0x7e>
 8007a32:	9a04      	ldr	r2, [sp, #16]
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	f47f aee4 	bne.w	8007802 <_strtod_l+0xba>
 8007a3a:	2b4e      	cmp	r3, #78	; 0x4e
 8007a3c:	d027      	beq.n	8007a8e <_strtod_l+0x346>
 8007a3e:	dc21      	bgt.n	8007a84 <_strtod_l+0x33c>
 8007a40:	2b49      	cmp	r3, #73	; 0x49
 8007a42:	f47f aede 	bne.w	8007802 <_strtod_l+0xba>
 8007a46:	49a0      	ldr	r1, [pc, #640]	; (8007cc8 <_strtod_l+0x580>)
 8007a48:	a81b      	add	r0, sp, #108	; 0x6c
 8007a4a:	f001 fdeb 	bl	8009624 <__match>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f43f aed7 	beq.w	8007802 <_strtod_l+0xba>
 8007a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a56:	499d      	ldr	r1, [pc, #628]	; (8007ccc <_strtod_l+0x584>)
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	a81b      	add	r0, sp, #108	; 0x6c
 8007a5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a5e:	f001 fde1 	bl	8009624 <__match>
 8007a62:	b910      	cbnz	r0, 8007a6a <_strtod_l+0x322>
 8007a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a66:	3301      	adds	r3, #1
 8007a68:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a6a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007ce0 <_strtod_l+0x598>
 8007a6e:	f04f 0a00 	mov.w	sl, #0
 8007a72:	e6a8      	b.n	80077c6 <_strtod_l+0x7e>
 8007a74:	210a      	movs	r1, #10
 8007a76:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007a7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007a7e:	e7b8      	b.n	80079f2 <_strtod_l+0x2aa>
 8007a80:	46be      	mov	lr, r7
 8007a82:	e7c8      	b.n	8007a16 <_strtod_l+0x2ce>
 8007a84:	2b69      	cmp	r3, #105	; 0x69
 8007a86:	d0de      	beq.n	8007a46 <_strtod_l+0x2fe>
 8007a88:	2b6e      	cmp	r3, #110	; 0x6e
 8007a8a:	f47f aeba 	bne.w	8007802 <_strtod_l+0xba>
 8007a8e:	4990      	ldr	r1, [pc, #576]	; (8007cd0 <_strtod_l+0x588>)
 8007a90:	a81b      	add	r0, sp, #108	; 0x6c
 8007a92:	f001 fdc7 	bl	8009624 <__match>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f43f aeb3 	beq.w	8007802 <_strtod_l+0xba>
 8007a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b28      	cmp	r3, #40	; 0x28
 8007aa2:	d10e      	bne.n	8007ac2 <_strtod_l+0x37a>
 8007aa4:	aa1e      	add	r2, sp, #120	; 0x78
 8007aa6:	498b      	ldr	r1, [pc, #556]	; (8007cd4 <_strtod_l+0x58c>)
 8007aa8:	a81b      	add	r0, sp, #108	; 0x6c
 8007aaa:	f001 fdcf 	bl	800964c <__hexnan>
 8007aae:	2805      	cmp	r0, #5
 8007ab0:	d107      	bne.n	8007ac2 <_strtod_l+0x37a>
 8007ab2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ab4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007ab8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007abc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ac0:	e681      	b.n	80077c6 <_strtod_l+0x7e>
 8007ac2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007ce8 <_strtod_l+0x5a0>
 8007ac6:	e7d2      	b.n	8007a6e <_strtod_l+0x326>
 8007ac8:	ebae 0302 	sub.w	r3, lr, r2
 8007acc:	9306      	str	r3, [sp, #24]
 8007ace:	9b05      	ldr	r3, [sp, #20]
 8007ad0:	9807      	ldr	r0, [sp, #28]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf08      	it	eq
 8007ad6:	4623      	moveq	r3, r4
 8007ad8:	2c10      	cmp	r4, #16
 8007ada:	9305      	str	r3, [sp, #20]
 8007adc:	46a0      	mov	r8, r4
 8007ade:	bfa8      	it	ge
 8007ae0:	f04f 0810 	movge.w	r8, #16
 8007ae4:	f7f8 fd16 	bl	8000514 <__aeabi_ui2d>
 8007ae8:	2c09      	cmp	r4, #9
 8007aea:	4682      	mov	sl, r0
 8007aec:	468b      	mov	fp, r1
 8007aee:	dc13      	bgt.n	8007b18 <_strtod_l+0x3d0>
 8007af0:	9b06      	ldr	r3, [sp, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f43f ae67 	beq.w	80077c6 <_strtod_l+0x7e>
 8007af8:	9b06      	ldr	r3, [sp, #24]
 8007afa:	dd7a      	ble.n	8007bf2 <_strtod_l+0x4aa>
 8007afc:	2b16      	cmp	r3, #22
 8007afe:	dc61      	bgt.n	8007bc4 <_strtod_l+0x47c>
 8007b00:	4a75      	ldr	r2, [pc, #468]	; (8007cd8 <_strtod_l+0x590>)
 8007b02:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007b06:	e9de 0100 	ldrd	r0, r1, [lr]
 8007b0a:	4652      	mov	r2, sl
 8007b0c:	465b      	mov	r3, fp
 8007b0e:	f7f8 fd7b 	bl	8000608 <__aeabi_dmul>
 8007b12:	4682      	mov	sl, r0
 8007b14:	468b      	mov	fp, r1
 8007b16:	e656      	b.n	80077c6 <_strtod_l+0x7e>
 8007b18:	4b6f      	ldr	r3, [pc, #444]	; (8007cd8 <_strtod_l+0x590>)
 8007b1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007b1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007b22:	f7f8 fd71 	bl	8000608 <__aeabi_dmul>
 8007b26:	4606      	mov	r6, r0
 8007b28:	4628      	mov	r0, r5
 8007b2a:	460f      	mov	r7, r1
 8007b2c:	f7f8 fcf2 	bl	8000514 <__aeabi_ui2d>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4630      	mov	r0, r6
 8007b36:	4639      	mov	r1, r7
 8007b38:	f7f8 fbb0 	bl	800029c <__adddf3>
 8007b3c:	2c0f      	cmp	r4, #15
 8007b3e:	4682      	mov	sl, r0
 8007b40:	468b      	mov	fp, r1
 8007b42:	ddd5      	ble.n	8007af0 <_strtod_l+0x3a8>
 8007b44:	9b06      	ldr	r3, [sp, #24]
 8007b46:	eba4 0808 	sub.w	r8, r4, r8
 8007b4a:	4498      	add	r8, r3
 8007b4c:	f1b8 0f00 	cmp.w	r8, #0
 8007b50:	f340 8096 	ble.w	8007c80 <_strtod_l+0x538>
 8007b54:	f018 030f 	ands.w	r3, r8, #15
 8007b58:	d00a      	beq.n	8007b70 <_strtod_l+0x428>
 8007b5a:	495f      	ldr	r1, [pc, #380]	; (8007cd8 <_strtod_l+0x590>)
 8007b5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b60:	4652      	mov	r2, sl
 8007b62:	465b      	mov	r3, fp
 8007b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b68:	f7f8 fd4e 	bl	8000608 <__aeabi_dmul>
 8007b6c:	4682      	mov	sl, r0
 8007b6e:	468b      	mov	fp, r1
 8007b70:	f038 080f 	bics.w	r8, r8, #15
 8007b74:	d073      	beq.n	8007c5e <_strtod_l+0x516>
 8007b76:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007b7a:	dd47      	ble.n	8007c0c <_strtod_l+0x4c4>
 8007b7c:	2400      	movs	r4, #0
 8007b7e:	46a0      	mov	r8, r4
 8007b80:	9407      	str	r4, [sp, #28]
 8007b82:	9405      	str	r4, [sp, #20]
 8007b84:	2322      	movs	r3, #34	; 0x22
 8007b86:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007ce0 <_strtod_l+0x598>
 8007b8a:	f8c9 3000 	str.w	r3, [r9]
 8007b8e:	f04f 0a00 	mov.w	sl, #0
 8007b92:	9b07      	ldr	r3, [sp, #28]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f43f ae16 	beq.w	80077c6 <_strtod_l+0x7e>
 8007b9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b9c:	4648      	mov	r0, r9
 8007b9e:	f001 fe52 	bl	8009846 <_Bfree>
 8007ba2:	9905      	ldr	r1, [sp, #20]
 8007ba4:	4648      	mov	r0, r9
 8007ba6:	f001 fe4e 	bl	8009846 <_Bfree>
 8007baa:	4641      	mov	r1, r8
 8007bac:	4648      	mov	r0, r9
 8007bae:	f001 fe4a 	bl	8009846 <_Bfree>
 8007bb2:	9907      	ldr	r1, [sp, #28]
 8007bb4:	4648      	mov	r0, r9
 8007bb6:	f001 fe46 	bl	8009846 <_Bfree>
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4648      	mov	r0, r9
 8007bbe:	f001 fe42 	bl	8009846 <_Bfree>
 8007bc2:	e600      	b.n	80077c6 <_strtod_l+0x7e>
 8007bc4:	9a06      	ldr	r2, [sp, #24]
 8007bc6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	dbba      	blt.n	8007b44 <_strtod_l+0x3fc>
 8007bce:	4d42      	ldr	r5, [pc, #264]	; (8007cd8 <_strtod_l+0x590>)
 8007bd0:	f1c4 040f 	rsb	r4, r4, #15
 8007bd4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007bd8:	4652      	mov	r2, sl
 8007bda:	465b      	mov	r3, fp
 8007bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007be0:	f7f8 fd12 	bl	8000608 <__aeabi_dmul>
 8007be4:	9b06      	ldr	r3, [sp, #24]
 8007be6:	1b1c      	subs	r4, r3, r4
 8007be8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007bec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bf0:	e78d      	b.n	8007b0e <_strtod_l+0x3c6>
 8007bf2:	f113 0f16 	cmn.w	r3, #22
 8007bf6:	dba5      	blt.n	8007b44 <_strtod_l+0x3fc>
 8007bf8:	4a37      	ldr	r2, [pc, #220]	; (8007cd8 <_strtod_l+0x590>)
 8007bfa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007bfe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007c02:	4650      	mov	r0, sl
 8007c04:	4659      	mov	r1, fp
 8007c06:	f7f8 fe29 	bl	800085c <__aeabi_ddiv>
 8007c0a:	e782      	b.n	8007b12 <_strtod_l+0x3ca>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4e33      	ldr	r6, [pc, #204]	; (8007cdc <_strtod_l+0x594>)
 8007c10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007c14:	4650      	mov	r0, sl
 8007c16:	4659      	mov	r1, fp
 8007c18:	461d      	mov	r5, r3
 8007c1a:	f1b8 0f01 	cmp.w	r8, #1
 8007c1e:	dc21      	bgt.n	8007c64 <_strtod_l+0x51c>
 8007c20:	b10b      	cbz	r3, 8007c26 <_strtod_l+0x4de>
 8007c22:	4682      	mov	sl, r0
 8007c24:	468b      	mov	fp, r1
 8007c26:	4b2d      	ldr	r3, [pc, #180]	; (8007cdc <_strtod_l+0x594>)
 8007c28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007c2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007c30:	4652      	mov	r2, sl
 8007c32:	465b      	mov	r3, fp
 8007c34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007c38:	f7f8 fce6 	bl	8000608 <__aeabi_dmul>
 8007c3c:	4b28      	ldr	r3, [pc, #160]	; (8007ce0 <_strtod_l+0x598>)
 8007c3e:	460a      	mov	r2, r1
 8007c40:	400b      	ands	r3, r1
 8007c42:	4928      	ldr	r1, [pc, #160]	; (8007ce4 <_strtod_l+0x59c>)
 8007c44:	428b      	cmp	r3, r1
 8007c46:	4682      	mov	sl, r0
 8007c48:	d898      	bhi.n	8007b7c <_strtod_l+0x434>
 8007c4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c4e:	428b      	cmp	r3, r1
 8007c50:	bf86      	itte	hi
 8007c52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007cec <_strtod_l+0x5a4>
 8007c56:	f04f 3aff 	movhi.w	sl, #4294967295
 8007c5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9304      	str	r3, [sp, #16]
 8007c62:	e077      	b.n	8007d54 <_strtod_l+0x60c>
 8007c64:	f018 0f01 	tst.w	r8, #1
 8007c68:	d006      	beq.n	8007c78 <_strtod_l+0x530>
 8007c6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f7f8 fcc9 	bl	8000608 <__aeabi_dmul>
 8007c76:	2301      	movs	r3, #1
 8007c78:	3501      	adds	r5, #1
 8007c7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007c7e:	e7cc      	b.n	8007c1a <_strtod_l+0x4d2>
 8007c80:	d0ed      	beq.n	8007c5e <_strtod_l+0x516>
 8007c82:	f1c8 0800 	rsb	r8, r8, #0
 8007c86:	f018 020f 	ands.w	r2, r8, #15
 8007c8a:	d00a      	beq.n	8007ca2 <_strtod_l+0x55a>
 8007c8c:	4b12      	ldr	r3, [pc, #72]	; (8007cd8 <_strtod_l+0x590>)
 8007c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c92:	4650      	mov	r0, sl
 8007c94:	4659      	mov	r1, fp
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	f7f8 fddf 	bl	800085c <__aeabi_ddiv>
 8007c9e:	4682      	mov	sl, r0
 8007ca0:	468b      	mov	fp, r1
 8007ca2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007ca6:	d0da      	beq.n	8007c5e <_strtod_l+0x516>
 8007ca8:	f1b8 0f1f 	cmp.w	r8, #31
 8007cac:	dd20      	ble.n	8007cf0 <_strtod_l+0x5a8>
 8007cae:	2400      	movs	r4, #0
 8007cb0:	46a0      	mov	r8, r4
 8007cb2:	9407      	str	r4, [sp, #28]
 8007cb4:	9405      	str	r4, [sp, #20]
 8007cb6:	2322      	movs	r3, #34	; 0x22
 8007cb8:	f04f 0a00 	mov.w	sl, #0
 8007cbc:	f04f 0b00 	mov.w	fp, #0
 8007cc0:	f8c9 3000 	str.w	r3, [r9]
 8007cc4:	e765      	b.n	8007b92 <_strtod_l+0x44a>
 8007cc6:	bf00      	nop
 8007cc8:	0800a531 	.word	0x0800a531
 8007ccc:	0800a5bb 	.word	0x0800a5bb
 8007cd0:	0800a539 	.word	0x0800a539
 8007cd4:	0800a57c 	.word	0x0800a57c
 8007cd8:	0800a5f8 	.word	0x0800a5f8
 8007cdc:	0800a5d0 	.word	0x0800a5d0
 8007ce0:	7ff00000 	.word	0x7ff00000
 8007ce4:	7ca00000 	.word	0x7ca00000
 8007ce8:	fff80000 	.word	0xfff80000
 8007cec:	7fefffff 	.word	0x7fefffff
 8007cf0:	f018 0310 	ands.w	r3, r8, #16
 8007cf4:	bf18      	it	ne
 8007cf6:	236a      	movne	r3, #106	; 0x6a
 8007cf8:	4da0      	ldr	r5, [pc, #640]	; (8007f7c <_strtod_l+0x834>)
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	4659      	mov	r1, fp
 8007d00:	2300      	movs	r3, #0
 8007d02:	f1b8 0f00 	cmp.w	r8, #0
 8007d06:	f300 810a 	bgt.w	8007f1e <_strtod_l+0x7d6>
 8007d0a:	b10b      	cbz	r3, 8007d10 <_strtod_l+0x5c8>
 8007d0c:	4682      	mov	sl, r0
 8007d0e:	468b      	mov	fp, r1
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	b1bb      	cbz	r3, 8007d44 <_strtod_l+0x5fc>
 8007d14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007d18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	4659      	mov	r1, fp
 8007d20:	dd10      	ble.n	8007d44 <_strtod_l+0x5fc>
 8007d22:	2b1f      	cmp	r3, #31
 8007d24:	f340 8107 	ble.w	8007f36 <_strtod_l+0x7ee>
 8007d28:	2b34      	cmp	r3, #52	; 0x34
 8007d2a:	bfde      	ittt	le
 8007d2c:	3b20      	suble	r3, #32
 8007d2e:	f04f 32ff 	movle.w	r2, #4294967295
 8007d32:	fa02 f303 	lslle.w	r3, r2, r3
 8007d36:	f04f 0a00 	mov.w	sl, #0
 8007d3a:	bfcc      	ite	gt
 8007d3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007d40:	ea03 0b01 	andle.w	fp, r3, r1
 8007d44:	2200      	movs	r2, #0
 8007d46:	2300      	movs	r3, #0
 8007d48:	4650      	mov	r0, sl
 8007d4a:	4659      	mov	r1, fp
 8007d4c:	f7f8 fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d1ac      	bne.n	8007cae <_strtod_l+0x566>
 8007d54:	9b07      	ldr	r3, [sp, #28]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	9a05      	ldr	r2, [sp, #20]
 8007d5a:	9908      	ldr	r1, [sp, #32]
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	4648      	mov	r0, r9
 8007d60:	f001 fdc3 	bl	80098ea <__s2b>
 8007d64:	9007      	str	r0, [sp, #28]
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f43f af08 	beq.w	8007b7c <_strtod_l+0x434>
 8007d6c:	9a06      	ldr	r2, [sp, #24]
 8007d6e:	9b06      	ldr	r3, [sp, #24]
 8007d70:	2a00      	cmp	r2, #0
 8007d72:	f1c3 0300 	rsb	r3, r3, #0
 8007d76:	bfa8      	it	ge
 8007d78:	2300      	movge	r3, #0
 8007d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8007d7c:	2400      	movs	r4, #0
 8007d7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007d82:	9316      	str	r3, [sp, #88]	; 0x58
 8007d84:	46a0      	mov	r8, r4
 8007d86:	9b07      	ldr	r3, [sp, #28]
 8007d88:	4648      	mov	r0, r9
 8007d8a:	6859      	ldr	r1, [r3, #4]
 8007d8c:	f001 fd27 	bl	80097de <_Balloc>
 8007d90:	9005      	str	r0, [sp, #20]
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f43f aef6 	beq.w	8007b84 <_strtod_l+0x43c>
 8007d98:	9b07      	ldr	r3, [sp, #28]
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	3202      	adds	r2, #2
 8007d9e:	f103 010c 	add.w	r1, r3, #12
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	300c      	adds	r0, #12
 8007da6:	f001 fd0f 	bl	80097c8 <memcpy>
 8007daa:	aa1e      	add	r2, sp, #120	; 0x78
 8007dac:	a91d      	add	r1, sp, #116	; 0x74
 8007dae:	ec4b ab10 	vmov	d0, sl, fp
 8007db2:	4648      	mov	r0, r9
 8007db4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007db8:	f002 f852 	bl	8009e60 <__d2b>
 8007dbc:	901c      	str	r0, [sp, #112]	; 0x70
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f aee0 	beq.w	8007b84 <_strtod_l+0x43c>
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	4648      	mov	r0, r9
 8007dc8:	f001 fe1b 	bl	8009a02 <__i2b>
 8007dcc:	4680      	mov	r8, r0
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f aed8 	beq.w	8007b84 <_strtod_l+0x43c>
 8007dd4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007dd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007dd8:	2e00      	cmp	r6, #0
 8007dda:	bfab      	itete	ge
 8007ddc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007dde:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007de0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007de2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007de4:	bfac      	ite	ge
 8007de6:	18f7      	addge	r7, r6, r3
 8007de8:	1b9d      	sublt	r5, r3, r6
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	1af6      	subs	r6, r6, r3
 8007dee:	4416      	add	r6, r2
 8007df0:	4b63      	ldr	r3, [pc, #396]	; (8007f80 <_strtod_l+0x838>)
 8007df2:	3e01      	subs	r6, #1
 8007df4:	429e      	cmp	r6, r3
 8007df6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007dfa:	f280 80af 	bge.w	8007f5c <_strtod_l+0x814>
 8007dfe:	1b9b      	subs	r3, r3, r6
 8007e00:	2b1f      	cmp	r3, #31
 8007e02:	eba2 0203 	sub.w	r2, r2, r3
 8007e06:	f04f 0101 	mov.w	r1, #1
 8007e0a:	f300 809b 	bgt.w	8007f44 <_strtod_l+0x7fc>
 8007e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e12:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e14:	2300      	movs	r3, #0
 8007e16:	930a      	str	r3, [sp, #40]	; 0x28
 8007e18:	18be      	adds	r6, r7, r2
 8007e1a:	9b04      	ldr	r3, [sp, #16]
 8007e1c:	42b7      	cmp	r7, r6
 8007e1e:	4415      	add	r5, r2
 8007e20:	441d      	add	r5, r3
 8007e22:	463b      	mov	r3, r7
 8007e24:	bfa8      	it	ge
 8007e26:	4633      	movge	r3, r6
 8007e28:	42ab      	cmp	r3, r5
 8007e2a:	bfa8      	it	ge
 8007e2c:	462b      	movge	r3, r5
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	bfc2      	ittt	gt
 8007e32:	1af6      	subgt	r6, r6, r3
 8007e34:	1aed      	subgt	r5, r5, r3
 8007e36:	1aff      	subgt	r7, r7, r3
 8007e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e3a:	b1bb      	cbz	r3, 8007e6c <_strtod_l+0x724>
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	461a      	mov	r2, r3
 8007e40:	4648      	mov	r0, r9
 8007e42:	f001 fe7d 	bl	8009b40 <__pow5mult>
 8007e46:	4680      	mov	r8, r0
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f43f ae9b 	beq.w	8007b84 <_strtod_l+0x43c>
 8007e4e:	4601      	mov	r1, r0
 8007e50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e52:	4648      	mov	r0, r9
 8007e54:	f001 fdde 	bl	8009a14 <__multiply>
 8007e58:	900c      	str	r0, [sp, #48]	; 0x30
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	f43f ae92 	beq.w	8007b84 <_strtod_l+0x43c>
 8007e60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e62:	4648      	mov	r0, r9
 8007e64:	f001 fcef 	bl	8009846 <_Bfree>
 8007e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e6a:	931c      	str	r3, [sp, #112]	; 0x70
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	dc7a      	bgt.n	8007f66 <_strtod_l+0x81e>
 8007e70:	9b06      	ldr	r3, [sp, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	dd08      	ble.n	8007e88 <_strtod_l+0x740>
 8007e76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e78:	9905      	ldr	r1, [sp, #20]
 8007e7a:	4648      	mov	r0, r9
 8007e7c:	f001 fe60 	bl	8009b40 <__pow5mult>
 8007e80:	9005      	str	r0, [sp, #20]
 8007e82:	2800      	cmp	r0, #0
 8007e84:	f43f ae7e 	beq.w	8007b84 <_strtod_l+0x43c>
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	dd08      	ble.n	8007e9e <_strtod_l+0x756>
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	9905      	ldr	r1, [sp, #20]
 8007e90:	4648      	mov	r0, r9
 8007e92:	f001 fea3 	bl	8009bdc <__lshift>
 8007e96:	9005      	str	r0, [sp, #20]
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	f43f ae73 	beq.w	8007b84 <_strtod_l+0x43c>
 8007e9e:	2f00      	cmp	r7, #0
 8007ea0:	dd08      	ble.n	8007eb4 <_strtod_l+0x76c>
 8007ea2:	4641      	mov	r1, r8
 8007ea4:	463a      	mov	r2, r7
 8007ea6:	4648      	mov	r0, r9
 8007ea8:	f001 fe98 	bl	8009bdc <__lshift>
 8007eac:	4680      	mov	r8, r0
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f43f ae68 	beq.w	8007b84 <_strtod_l+0x43c>
 8007eb4:	9a05      	ldr	r2, [sp, #20]
 8007eb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007eb8:	4648      	mov	r0, r9
 8007eba:	f001 fefd 	bl	8009cb8 <__mdiff>
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f43f ae5f 	beq.w	8007b84 <_strtod_l+0x43c>
 8007ec6:	68c3      	ldr	r3, [r0, #12]
 8007ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60c3      	str	r3, [r0, #12]
 8007ece:	4641      	mov	r1, r8
 8007ed0:	f001 fed8 	bl	8009c84 <__mcmp>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	da55      	bge.n	8007f84 <_strtod_l+0x83c>
 8007ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eda:	b9e3      	cbnz	r3, 8007f16 <_strtod_l+0x7ce>
 8007edc:	f1ba 0f00 	cmp.w	sl, #0
 8007ee0:	d119      	bne.n	8007f16 <_strtod_l+0x7ce>
 8007ee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ee6:	b9b3      	cbnz	r3, 8007f16 <_strtod_l+0x7ce>
 8007ee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007eec:	0d1b      	lsrs	r3, r3, #20
 8007eee:	051b      	lsls	r3, r3, #20
 8007ef0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ef4:	d90f      	bls.n	8007f16 <_strtod_l+0x7ce>
 8007ef6:	6963      	ldr	r3, [r4, #20]
 8007ef8:	b913      	cbnz	r3, 8007f00 <_strtod_l+0x7b8>
 8007efa:	6923      	ldr	r3, [r4, #16]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	dd0a      	ble.n	8007f16 <_strtod_l+0x7ce>
 8007f00:	4621      	mov	r1, r4
 8007f02:	2201      	movs	r2, #1
 8007f04:	4648      	mov	r0, r9
 8007f06:	f001 fe69 	bl	8009bdc <__lshift>
 8007f0a:	4641      	mov	r1, r8
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	f001 feb9 	bl	8009c84 <__mcmp>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	dc67      	bgt.n	8007fe6 <_strtod_l+0x89e>
 8007f16:	9b04      	ldr	r3, [sp, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d171      	bne.n	8008000 <_strtod_l+0x8b8>
 8007f1c:	e63d      	b.n	8007b9a <_strtod_l+0x452>
 8007f1e:	f018 0f01 	tst.w	r8, #1
 8007f22:	d004      	beq.n	8007f2e <_strtod_l+0x7e6>
 8007f24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f32:	3508      	adds	r5, #8
 8007f34:	e6e5      	b.n	8007d02 <_strtod_l+0x5ba>
 8007f36:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	ea03 0a0a 	and.w	sl, r3, sl
 8007f42:	e6ff      	b.n	8007d44 <_strtod_l+0x5fc>
 8007f44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007f48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007f4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007f50:	36e2      	adds	r6, #226	; 0xe2
 8007f52:	fa01 f306 	lsl.w	r3, r1, r6
 8007f56:	930a      	str	r3, [sp, #40]	; 0x28
 8007f58:	910f      	str	r1, [sp, #60]	; 0x3c
 8007f5a:	e75d      	b.n	8007e18 <_strtod_l+0x6d0>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f60:	2301      	movs	r3, #1
 8007f62:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f64:	e758      	b.n	8007e18 <_strtod_l+0x6d0>
 8007f66:	4632      	mov	r2, r6
 8007f68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f6a:	4648      	mov	r0, r9
 8007f6c:	f001 fe36 	bl	8009bdc <__lshift>
 8007f70:	901c      	str	r0, [sp, #112]	; 0x70
 8007f72:	2800      	cmp	r0, #0
 8007f74:	f47f af7c 	bne.w	8007e70 <_strtod_l+0x728>
 8007f78:	e604      	b.n	8007b84 <_strtod_l+0x43c>
 8007f7a:	bf00      	nop
 8007f7c:	0800a590 	.word	0x0800a590
 8007f80:	fffffc02 	.word	0xfffffc02
 8007f84:	465d      	mov	r5, fp
 8007f86:	f040 8086 	bne.w	8008096 <_strtod_l+0x94e>
 8007f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f90:	b32a      	cbz	r2, 8007fde <_strtod_l+0x896>
 8007f92:	4aaf      	ldr	r2, [pc, #700]	; (8008250 <_strtod_l+0xb08>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d153      	bne.n	8008040 <_strtod_l+0x8f8>
 8007f98:	9b04      	ldr	r3, [sp, #16]
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	b1d3      	cbz	r3, 8007fd4 <_strtod_l+0x88c>
 8007f9e:	4aad      	ldr	r2, [pc, #692]	; (8008254 <_strtod_l+0xb0c>)
 8007fa0:	402a      	ands	r2, r5
 8007fa2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8007faa:	d816      	bhi.n	8007fda <_strtod_l+0x892>
 8007fac:	0d12      	lsrs	r2, r2, #20
 8007fae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb6:	4298      	cmp	r0, r3
 8007fb8:	d142      	bne.n	8008040 <_strtod_l+0x8f8>
 8007fba:	4ba7      	ldr	r3, [pc, #668]	; (8008258 <_strtod_l+0xb10>)
 8007fbc:	429d      	cmp	r5, r3
 8007fbe:	d102      	bne.n	8007fc6 <_strtod_l+0x87e>
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	f43f addf 	beq.w	8007b84 <_strtod_l+0x43c>
 8007fc6:	4ba3      	ldr	r3, [pc, #652]	; (8008254 <_strtod_l+0xb0c>)
 8007fc8:	402b      	ands	r3, r5
 8007fca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007fce:	f04f 0a00 	mov.w	sl, #0
 8007fd2:	e7a0      	b.n	8007f16 <_strtod_l+0x7ce>
 8007fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd8:	e7ed      	b.n	8007fb6 <_strtod_l+0x86e>
 8007fda:	460b      	mov	r3, r1
 8007fdc:	e7eb      	b.n	8007fb6 <_strtod_l+0x86e>
 8007fde:	bb7b      	cbnz	r3, 8008040 <_strtod_l+0x8f8>
 8007fe0:	f1ba 0f00 	cmp.w	sl, #0
 8007fe4:	d12c      	bne.n	8008040 <_strtod_l+0x8f8>
 8007fe6:	9904      	ldr	r1, [sp, #16]
 8007fe8:	4a9a      	ldr	r2, [pc, #616]	; (8008254 <_strtod_l+0xb0c>)
 8007fea:	465b      	mov	r3, fp
 8007fec:	b1f1      	cbz	r1, 800802c <_strtod_l+0x8e4>
 8007fee:	ea02 010b 	and.w	r1, r2, fp
 8007ff2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ff6:	dc19      	bgt.n	800802c <_strtod_l+0x8e4>
 8007ff8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ffc:	f77f ae5b 	ble.w	8007cb6 <_strtod_l+0x56e>
 8008000:	4a96      	ldr	r2, [pc, #600]	; (800825c <_strtod_l+0xb14>)
 8008002:	2300      	movs	r3, #0
 8008004:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008008:	4650      	mov	r0, sl
 800800a:	4659      	mov	r1, fp
 800800c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008010:	f7f8 fafa 	bl	8000608 <__aeabi_dmul>
 8008014:	4682      	mov	sl, r0
 8008016:	468b      	mov	fp, r1
 8008018:	2900      	cmp	r1, #0
 800801a:	f47f adbe 	bne.w	8007b9a <_strtod_l+0x452>
 800801e:	2800      	cmp	r0, #0
 8008020:	f47f adbb 	bne.w	8007b9a <_strtod_l+0x452>
 8008024:	2322      	movs	r3, #34	; 0x22
 8008026:	f8c9 3000 	str.w	r3, [r9]
 800802a:	e5b6      	b.n	8007b9a <_strtod_l+0x452>
 800802c:	4013      	ands	r3, r2
 800802e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008032:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008036:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800803a:	f04f 3aff 	mov.w	sl, #4294967295
 800803e:	e76a      	b.n	8007f16 <_strtod_l+0x7ce>
 8008040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008042:	b193      	cbz	r3, 800806a <_strtod_l+0x922>
 8008044:	422b      	tst	r3, r5
 8008046:	f43f af66 	beq.w	8007f16 <_strtod_l+0x7ce>
 800804a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800804c:	9a04      	ldr	r2, [sp, #16]
 800804e:	4650      	mov	r0, sl
 8008050:	4659      	mov	r1, fp
 8008052:	b173      	cbz	r3, 8008072 <_strtod_l+0x92a>
 8008054:	f7ff fb5c 	bl	8007710 <sulp>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008060:	f7f8 f91c 	bl	800029c <__adddf3>
 8008064:	4682      	mov	sl, r0
 8008066:	468b      	mov	fp, r1
 8008068:	e755      	b.n	8007f16 <_strtod_l+0x7ce>
 800806a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800806c:	ea13 0f0a 	tst.w	r3, sl
 8008070:	e7e9      	b.n	8008046 <_strtod_l+0x8fe>
 8008072:	f7ff fb4d 	bl	8007710 <sulp>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800807e:	f7f8 f90b 	bl	8000298 <__aeabi_dsub>
 8008082:	2200      	movs	r2, #0
 8008084:	2300      	movs	r3, #0
 8008086:	4682      	mov	sl, r0
 8008088:	468b      	mov	fp, r1
 800808a:	f7f8 fd25 	bl	8000ad8 <__aeabi_dcmpeq>
 800808e:	2800      	cmp	r0, #0
 8008090:	f47f ae11 	bne.w	8007cb6 <_strtod_l+0x56e>
 8008094:	e73f      	b.n	8007f16 <_strtod_l+0x7ce>
 8008096:	4641      	mov	r1, r8
 8008098:	4620      	mov	r0, r4
 800809a:	f001 ff30 	bl	8009efe <__ratio>
 800809e:	ec57 6b10 	vmov	r6, r7, d0
 80080a2:	2200      	movs	r2, #0
 80080a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080a8:	ee10 0a10 	vmov	r0, s0
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 fd27 	bl	8000b00 <__aeabi_dcmple>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d077      	beq.n	80081a6 <_strtod_l+0xa5e>
 80080b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d04a      	beq.n	8008152 <_strtod_l+0xa0a>
 80080bc:	4b68      	ldr	r3, [pc, #416]	; (8008260 <_strtod_l+0xb18>)
 80080be:	2200      	movs	r2, #0
 80080c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80080c4:	4f66      	ldr	r7, [pc, #408]	; (8008260 <_strtod_l+0xb18>)
 80080c6:	2600      	movs	r6, #0
 80080c8:	4b62      	ldr	r3, [pc, #392]	; (8008254 <_strtod_l+0xb0c>)
 80080ca:	402b      	ands	r3, r5
 80080cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80080ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080d0:	4b64      	ldr	r3, [pc, #400]	; (8008264 <_strtod_l+0xb1c>)
 80080d2:	429a      	cmp	r2, r3
 80080d4:	f040 80ce 	bne.w	8008274 <_strtod_l+0xb2c>
 80080d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80080e4:	ec4b ab10 	vmov	d0, sl, fp
 80080e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80080ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80080f0:	f001 fe40 	bl	8009d74 <__ulp>
 80080f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080f8:	ec53 2b10 	vmov	r2, r3, d0
 80080fc:	f7f8 fa84 	bl	8000608 <__aeabi_dmul>
 8008100:	4652      	mov	r2, sl
 8008102:	465b      	mov	r3, fp
 8008104:	f7f8 f8ca 	bl	800029c <__adddf3>
 8008108:	460b      	mov	r3, r1
 800810a:	4952      	ldr	r1, [pc, #328]	; (8008254 <_strtod_l+0xb0c>)
 800810c:	4a56      	ldr	r2, [pc, #344]	; (8008268 <_strtod_l+0xb20>)
 800810e:	4019      	ands	r1, r3
 8008110:	4291      	cmp	r1, r2
 8008112:	4682      	mov	sl, r0
 8008114:	d95b      	bls.n	80081ce <_strtod_l+0xa86>
 8008116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008118:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800811c:	4293      	cmp	r3, r2
 800811e:	d103      	bne.n	8008128 <_strtod_l+0x9e0>
 8008120:	9b08      	ldr	r3, [sp, #32]
 8008122:	3301      	adds	r3, #1
 8008124:	f43f ad2e 	beq.w	8007b84 <_strtod_l+0x43c>
 8008128:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008258 <_strtod_l+0xb10>
 800812c:	f04f 3aff 	mov.w	sl, #4294967295
 8008130:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008132:	4648      	mov	r0, r9
 8008134:	f001 fb87 	bl	8009846 <_Bfree>
 8008138:	9905      	ldr	r1, [sp, #20]
 800813a:	4648      	mov	r0, r9
 800813c:	f001 fb83 	bl	8009846 <_Bfree>
 8008140:	4641      	mov	r1, r8
 8008142:	4648      	mov	r0, r9
 8008144:	f001 fb7f 	bl	8009846 <_Bfree>
 8008148:	4621      	mov	r1, r4
 800814a:	4648      	mov	r0, r9
 800814c:	f001 fb7b 	bl	8009846 <_Bfree>
 8008150:	e619      	b.n	8007d86 <_strtod_l+0x63e>
 8008152:	f1ba 0f00 	cmp.w	sl, #0
 8008156:	d11a      	bne.n	800818e <_strtod_l+0xa46>
 8008158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800815c:	b9eb      	cbnz	r3, 800819a <_strtod_l+0xa52>
 800815e:	2200      	movs	r2, #0
 8008160:	4b3f      	ldr	r3, [pc, #252]	; (8008260 <_strtod_l+0xb18>)
 8008162:	4630      	mov	r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	f7f8 fcc1 	bl	8000aec <__aeabi_dcmplt>
 800816a:	b9c8      	cbnz	r0, 80081a0 <_strtod_l+0xa58>
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	2200      	movs	r2, #0
 8008172:	4b3e      	ldr	r3, [pc, #248]	; (800826c <_strtod_l+0xb24>)
 8008174:	f7f8 fa48 	bl	8000608 <__aeabi_dmul>
 8008178:	4606      	mov	r6, r0
 800817a:	460f      	mov	r7, r1
 800817c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008180:	9618      	str	r6, [sp, #96]	; 0x60
 8008182:	9319      	str	r3, [sp, #100]	; 0x64
 8008184:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008188:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800818c:	e79c      	b.n	80080c8 <_strtod_l+0x980>
 800818e:	f1ba 0f01 	cmp.w	sl, #1
 8008192:	d102      	bne.n	800819a <_strtod_l+0xa52>
 8008194:	2d00      	cmp	r5, #0
 8008196:	f43f ad8e 	beq.w	8007cb6 <_strtod_l+0x56e>
 800819a:	2200      	movs	r2, #0
 800819c:	4b34      	ldr	r3, [pc, #208]	; (8008270 <_strtod_l+0xb28>)
 800819e:	e78f      	b.n	80080c0 <_strtod_l+0x978>
 80081a0:	2600      	movs	r6, #0
 80081a2:	4f32      	ldr	r7, [pc, #200]	; (800826c <_strtod_l+0xb24>)
 80081a4:	e7ea      	b.n	800817c <_strtod_l+0xa34>
 80081a6:	4b31      	ldr	r3, [pc, #196]	; (800826c <_strtod_l+0xb24>)
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	2200      	movs	r2, #0
 80081ae:	f7f8 fa2b 	bl	8000608 <__aeabi_dmul>
 80081b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081b4:	4606      	mov	r6, r0
 80081b6:	460f      	mov	r7, r1
 80081b8:	b933      	cbnz	r3, 80081c8 <_strtod_l+0xa80>
 80081ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081be:	9010      	str	r0, [sp, #64]	; 0x40
 80081c0:	9311      	str	r3, [sp, #68]	; 0x44
 80081c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081c6:	e7df      	b.n	8008188 <_strtod_l+0xa40>
 80081c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80081cc:	e7f9      	b.n	80081c2 <_strtod_l+0xa7a>
 80081ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80081d2:	9b04      	ldr	r3, [sp, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1ab      	bne.n	8008130 <_strtod_l+0x9e8>
 80081d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081dc:	0d1b      	lsrs	r3, r3, #20
 80081de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081e0:	051b      	lsls	r3, r3, #20
 80081e2:	429a      	cmp	r2, r3
 80081e4:	465d      	mov	r5, fp
 80081e6:	d1a3      	bne.n	8008130 <_strtod_l+0x9e8>
 80081e8:	4639      	mov	r1, r7
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7f8 fcbc 	bl	8000b68 <__aeabi_d2iz>
 80081f0:	f7f8 f9a0 	bl	8000534 <__aeabi_i2d>
 80081f4:	460b      	mov	r3, r1
 80081f6:	4602      	mov	r2, r0
 80081f8:	4639      	mov	r1, r7
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7f8 f84c 	bl	8000298 <__aeabi_dsub>
 8008200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008202:	4606      	mov	r6, r0
 8008204:	460f      	mov	r7, r1
 8008206:	b933      	cbnz	r3, 8008216 <_strtod_l+0xace>
 8008208:	f1ba 0f00 	cmp.w	sl, #0
 800820c:	d103      	bne.n	8008216 <_strtod_l+0xace>
 800820e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008212:	2d00      	cmp	r5, #0
 8008214:	d06d      	beq.n	80082f2 <_strtod_l+0xbaa>
 8008216:	a30a      	add	r3, pc, #40	; (adr r3, 8008240 <_strtod_l+0xaf8>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	4630      	mov	r0, r6
 800821e:	4639      	mov	r1, r7
 8008220:	f7f8 fc64 	bl	8000aec <__aeabi_dcmplt>
 8008224:	2800      	cmp	r0, #0
 8008226:	f47f acb8 	bne.w	8007b9a <_strtod_l+0x452>
 800822a:	a307      	add	r3, pc, #28	; (adr r3, 8008248 <_strtod_l+0xb00>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	4630      	mov	r0, r6
 8008232:	4639      	mov	r1, r7
 8008234:	f7f8 fc78 	bl	8000b28 <__aeabi_dcmpgt>
 8008238:	2800      	cmp	r0, #0
 800823a:	f43f af79 	beq.w	8008130 <_strtod_l+0x9e8>
 800823e:	e4ac      	b.n	8007b9a <_strtod_l+0x452>
 8008240:	94a03595 	.word	0x94a03595
 8008244:	3fdfffff 	.word	0x3fdfffff
 8008248:	35afe535 	.word	0x35afe535
 800824c:	3fe00000 	.word	0x3fe00000
 8008250:	000fffff 	.word	0x000fffff
 8008254:	7ff00000 	.word	0x7ff00000
 8008258:	7fefffff 	.word	0x7fefffff
 800825c:	39500000 	.word	0x39500000
 8008260:	3ff00000 	.word	0x3ff00000
 8008264:	7fe00000 	.word	0x7fe00000
 8008268:	7c9fffff 	.word	0x7c9fffff
 800826c:	3fe00000 	.word	0x3fe00000
 8008270:	bff00000 	.word	0xbff00000
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	b333      	cbz	r3, 80082c6 <_strtod_l+0xb7e>
 8008278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800827a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800827e:	d822      	bhi.n	80082c6 <_strtod_l+0xb7e>
 8008280:	a327      	add	r3, pc, #156	; (adr r3, 8008320 <_strtod_l+0xbd8>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	4630      	mov	r0, r6
 8008288:	4639      	mov	r1, r7
 800828a:	f7f8 fc39 	bl	8000b00 <__aeabi_dcmple>
 800828e:	b1a0      	cbz	r0, 80082ba <_strtod_l+0xb72>
 8008290:	4639      	mov	r1, r7
 8008292:	4630      	mov	r0, r6
 8008294:	f7f8 fc90 	bl	8000bb8 <__aeabi_d2uiz>
 8008298:	2800      	cmp	r0, #0
 800829a:	bf08      	it	eq
 800829c:	2001      	moveq	r0, #1
 800829e:	f7f8 f939 	bl	8000514 <__aeabi_ui2d>
 80082a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082a4:	4606      	mov	r6, r0
 80082a6:	460f      	mov	r7, r1
 80082a8:	bb03      	cbnz	r3, 80082ec <_strtod_l+0xba4>
 80082aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082ae:	9012      	str	r0, [sp, #72]	; 0x48
 80082b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80082b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80082b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80082ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80082c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80082ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80082ce:	f001 fd51 	bl	8009d74 <__ulp>
 80082d2:	4650      	mov	r0, sl
 80082d4:	ec53 2b10 	vmov	r2, r3, d0
 80082d8:	4659      	mov	r1, fp
 80082da:	f7f8 f995 	bl	8000608 <__aeabi_dmul>
 80082de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082e2:	f7f7 ffdb 	bl	800029c <__adddf3>
 80082e6:	4682      	mov	sl, r0
 80082e8:	468b      	mov	fp, r1
 80082ea:	e772      	b.n	80081d2 <_strtod_l+0xa8a>
 80082ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80082f0:	e7df      	b.n	80082b2 <_strtod_l+0xb6a>
 80082f2:	a30d      	add	r3, pc, #52	; (adr r3, 8008328 <_strtod_l+0xbe0>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f8 fbf8 	bl	8000aec <__aeabi_dcmplt>
 80082fc:	e79c      	b.n	8008238 <_strtod_l+0xaf0>
 80082fe:	2300      	movs	r3, #0
 8008300:	930d      	str	r3, [sp, #52]	; 0x34
 8008302:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	f7ff ba61 	b.w	80077ce <_strtod_l+0x86>
 800830c:	2b65      	cmp	r3, #101	; 0x65
 800830e:	f04f 0200 	mov.w	r2, #0
 8008312:	f43f ab4e 	beq.w	80079b2 <_strtod_l+0x26a>
 8008316:	2101      	movs	r1, #1
 8008318:	4614      	mov	r4, r2
 800831a:	9104      	str	r1, [sp, #16]
 800831c:	f7ff bacb 	b.w	80078b6 <_strtod_l+0x16e>
 8008320:	ffc00000 	.word	0xffc00000
 8008324:	41dfffff 	.word	0x41dfffff
 8008328:	94a03595 	.word	0x94a03595
 800832c:	3fcfffff 	.word	0x3fcfffff

08008330 <_strtod_r>:
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <_strtod_r+0x18>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	b410      	push	{r4}
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	4c04      	ldr	r4, [pc, #16]	; (800834c <_strtod_r+0x1c>)
 800833a:	2b00      	cmp	r3, #0
 800833c:	bf08      	it	eq
 800833e:	4623      	moveq	r3, r4
 8008340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008344:	f7ff ba00 	b.w	8007748 <_strtod_l>
 8008348:	2000000c 	.word	0x2000000c
 800834c:	20000070 	.word	0x20000070

08008350 <_strtol_l.isra.0>:
 8008350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008354:	4680      	mov	r8, r0
 8008356:	4689      	mov	r9, r1
 8008358:	4692      	mov	sl, r2
 800835a:	461e      	mov	r6, r3
 800835c:	460f      	mov	r7, r1
 800835e:	463d      	mov	r5, r7
 8008360:	9808      	ldr	r0, [sp, #32]
 8008362:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008366:	f001 fa01 	bl	800976c <__locale_ctype_ptr_l>
 800836a:	4420      	add	r0, r4
 800836c:	7843      	ldrb	r3, [r0, #1]
 800836e:	f013 0308 	ands.w	r3, r3, #8
 8008372:	d132      	bne.n	80083da <_strtol_l.isra.0+0x8a>
 8008374:	2c2d      	cmp	r4, #45	; 0x2d
 8008376:	d132      	bne.n	80083de <_strtol_l.isra.0+0x8e>
 8008378:	787c      	ldrb	r4, [r7, #1]
 800837a:	1cbd      	adds	r5, r7, #2
 800837c:	2201      	movs	r2, #1
 800837e:	2e00      	cmp	r6, #0
 8008380:	d05d      	beq.n	800843e <_strtol_l.isra.0+0xee>
 8008382:	2e10      	cmp	r6, #16
 8008384:	d109      	bne.n	800839a <_strtol_l.isra.0+0x4a>
 8008386:	2c30      	cmp	r4, #48	; 0x30
 8008388:	d107      	bne.n	800839a <_strtol_l.isra.0+0x4a>
 800838a:	782b      	ldrb	r3, [r5, #0]
 800838c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008390:	2b58      	cmp	r3, #88	; 0x58
 8008392:	d14f      	bne.n	8008434 <_strtol_l.isra.0+0xe4>
 8008394:	786c      	ldrb	r4, [r5, #1]
 8008396:	2610      	movs	r6, #16
 8008398:	3502      	adds	r5, #2
 800839a:	2a00      	cmp	r2, #0
 800839c:	bf14      	ite	ne
 800839e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80083a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80083a6:	2700      	movs	r7, #0
 80083a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80083ac:	4638      	mov	r0, r7
 80083ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80083b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80083b6:	2b09      	cmp	r3, #9
 80083b8:	d817      	bhi.n	80083ea <_strtol_l.isra.0+0x9a>
 80083ba:	461c      	mov	r4, r3
 80083bc:	42a6      	cmp	r6, r4
 80083be:	dd23      	ble.n	8008408 <_strtol_l.isra.0+0xb8>
 80083c0:	1c7b      	adds	r3, r7, #1
 80083c2:	d007      	beq.n	80083d4 <_strtol_l.isra.0+0x84>
 80083c4:	4584      	cmp	ip, r0
 80083c6:	d31c      	bcc.n	8008402 <_strtol_l.isra.0+0xb2>
 80083c8:	d101      	bne.n	80083ce <_strtol_l.isra.0+0x7e>
 80083ca:	45a6      	cmp	lr, r4
 80083cc:	db19      	blt.n	8008402 <_strtol_l.isra.0+0xb2>
 80083ce:	fb00 4006 	mla	r0, r0, r6, r4
 80083d2:	2701      	movs	r7, #1
 80083d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083d8:	e7eb      	b.n	80083b2 <_strtol_l.isra.0+0x62>
 80083da:	462f      	mov	r7, r5
 80083dc:	e7bf      	b.n	800835e <_strtol_l.isra.0+0xe>
 80083de:	2c2b      	cmp	r4, #43	; 0x2b
 80083e0:	bf04      	itt	eq
 80083e2:	1cbd      	addeq	r5, r7, #2
 80083e4:	787c      	ldrbeq	r4, [r7, #1]
 80083e6:	461a      	mov	r2, r3
 80083e8:	e7c9      	b.n	800837e <_strtol_l.isra.0+0x2e>
 80083ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80083ee:	2b19      	cmp	r3, #25
 80083f0:	d801      	bhi.n	80083f6 <_strtol_l.isra.0+0xa6>
 80083f2:	3c37      	subs	r4, #55	; 0x37
 80083f4:	e7e2      	b.n	80083bc <_strtol_l.isra.0+0x6c>
 80083f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80083fa:	2b19      	cmp	r3, #25
 80083fc:	d804      	bhi.n	8008408 <_strtol_l.isra.0+0xb8>
 80083fe:	3c57      	subs	r4, #87	; 0x57
 8008400:	e7dc      	b.n	80083bc <_strtol_l.isra.0+0x6c>
 8008402:	f04f 37ff 	mov.w	r7, #4294967295
 8008406:	e7e5      	b.n	80083d4 <_strtol_l.isra.0+0x84>
 8008408:	1c7b      	adds	r3, r7, #1
 800840a:	d108      	bne.n	800841e <_strtol_l.isra.0+0xce>
 800840c:	2322      	movs	r3, #34	; 0x22
 800840e:	f8c8 3000 	str.w	r3, [r8]
 8008412:	4608      	mov	r0, r1
 8008414:	f1ba 0f00 	cmp.w	sl, #0
 8008418:	d107      	bne.n	800842a <_strtol_l.isra.0+0xda>
 800841a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800841e:	b102      	cbz	r2, 8008422 <_strtol_l.isra.0+0xd2>
 8008420:	4240      	negs	r0, r0
 8008422:	f1ba 0f00 	cmp.w	sl, #0
 8008426:	d0f8      	beq.n	800841a <_strtol_l.isra.0+0xca>
 8008428:	b10f      	cbz	r7, 800842e <_strtol_l.isra.0+0xde>
 800842a:	f105 39ff 	add.w	r9, r5, #4294967295
 800842e:	f8ca 9000 	str.w	r9, [sl]
 8008432:	e7f2      	b.n	800841a <_strtol_l.isra.0+0xca>
 8008434:	2430      	movs	r4, #48	; 0x30
 8008436:	2e00      	cmp	r6, #0
 8008438:	d1af      	bne.n	800839a <_strtol_l.isra.0+0x4a>
 800843a:	2608      	movs	r6, #8
 800843c:	e7ad      	b.n	800839a <_strtol_l.isra.0+0x4a>
 800843e:	2c30      	cmp	r4, #48	; 0x30
 8008440:	d0a3      	beq.n	800838a <_strtol_l.isra.0+0x3a>
 8008442:	260a      	movs	r6, #10
 8008444:	e7a9      	b.n	800839a <_strtol_l.isra.0+0x4a>
	...

08008448 <_strtol_r>:
 8008448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800844a:	4c06      	ldr	r4, [pc, #24]	; (8008464 <_strtol_r+0x1c>)
 800844c:	4d06      	ldr	r5, [pc, #24]	; (8008468 <_strtol_r+0x20>)
 800844e:	6824      	ldr	r4, [r4, #0]
 8008450:	6a24      	ldr	r4, [r4, #32]
 8008452:	2c00      	cmp	r4, #0
 8008454:	bf08      	it	eq
 8008456:	462c      	moveq	r4, r5
 8008458:	9400      	str	r4, [sp, #0]
 800845a:	f7ff ff79 	bl	8008350 <_strtol_l.isra.0>
 800845e:	b003      	add	sp, #12
 8008460:	bd30      	pop	{r4, r5, pc}
 8008462:	bf00      	nop
 8008464:	2000000c 	.word	0x2000000c
 8008468:	20000070 	.word	0x20000070

0800846c <strtol>:
 800846c:	4b08      	ldr	r3, [pc, #32]	; (8008490 <strtol+0x24>)
 800846e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008470:	681c      	ldr	r4, [r3, #0]
 8008472:	4d08      	ldr	r5, [pc, #32]	; (8008494 <strtol+0x28>)
 8008474:	6a23      	ldr	r3, [r4, #32]
 8008476:	2b00      	cmp	r3, #0
 8008478:	bf08      	it	eq
 800847a:	462b      	moveq	r3, r5
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4613      	mov	r3, r2
 8008480:	460a      	mov	r2, r1
 8008482:	4601      	mov	r1, r0
 8008484:	4620      	mov	r0, r4
 8008486:	f7ff ff63 	bl	8008350 <_strtol_l.isra.0>
 800848a:	b003      	add	sp, #12
 800848c:	bd30      	pop	{r4, r5, pc}
 800848e:	bf00      	nop
 8008490:	2000000c 	.word	0x2000000c
 8008494:	20000070 	.word	0x20000070

08008498 <quorem>:
 8008498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	6903      	ldr	r3, [r0, #16]
 800849e:	690c      	ldr	r4, [r1, #16]
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	4680      	mov	r8, r0
 80084a4:	f2c0 8082 	blt.w	80085ac <quorem+0x114>
 80084a8:	3c01      	subs	r4, #1
 80084aa:	f101 0714 	add.w	r7, r1, #20
 80084ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80084b2:	f100 0614 	add.w	r6, r0, #20
 80084b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80084ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80084be:	eb06 030c 	add.w	r3, r6, ip
 80084c2:	3501      	adds	r5, #1
 80084c4:	eb07 090c 	add.w	r9, r7, ip
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80084ce:	b395      	cbz	r5, 8008536 <quorem+0x9e>
 80084d0:	f04f 0a00 	mov.w	sl, #0
 80084d4:	4638      	mov	r0, r7
 80084d6:	46b6      	mov	lr, r6
 80084d8:	46d3      	mov	fp, sl
 80084da:	f850 2b04 	ldr.w	r2, [r0], #4
 80084de:	b293      	uxth	r3, r2
 80084e0:	fb05 a303 	mla	r3, r5, r3, sl
 80084e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	ebab 0303 	sub.w	r3, fp, r3
 80084ee:	0c12      	lsrs	r2, r2, #16
 80084f0:	f8de b000 	ldr.w	fp, [lr]
 80084f4:	fb05 a202 	mla	r2, r5, r2, sl
 80084f8:	fa13 f38b 	uxtah	r3, r3, fp
 80084fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008500:	fa1f fb82 	uxth.w	fp, r2
 8008504:	f8de 2000 	ldr.w	r2, [lr]
 8008508:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800850c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008510:	b29b      	uxth	r3, r3
 8008512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008516:	4581      	cmp	r9, r0
 8008518:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800851c:	f84e 3b04 	str.w	r3, [lr], #4
 8008520:	d2db      	bcs.n	80084da <quorem+0x42>
 8008522:	f856 300c 	ldr.w	r3, [r6, ip]
 8008526:	b933      	cbnz	r3, 8008536 <quorem+0x9e>
 8008528:	9b01      	ldr	r3, [sp, #4]
 800852a:	3b04      	subs	r3, #4
 800852c:	429e      	cmp	r6, r3
 800852e:	461a      	mov	r2, r3
 8008530:	d330      	bcc.n	8008594 <quorem+0xfc>
 8008532:	f8c8 4010 	str.w	r4, [r8, #16]
 8008536:	4640      	mov	r0, r8
 8008538:	f001 fba4 	bl	8009c84 <__mcmp>
 800853c:	2800      	cmp	r0, #0
 800853e:	db25      	blt.n	800858c <quorem+0xf4>
 8008540:	3501      	adds	r5, #1
 8008542:	4630      	mov	r0, r6
 8008544:	f04f 0c00 	mov.w	ip, #0
 8008548:	f857 2b04 	ldr.w	r2, [r7], #4
 800854c:	f8d0 e000 	ldr.w	lr, [r0]
 8008550:	b293      	uxth	r3, r2
 8008552:	ebac 0303 	sub.w	r3, ip, r3
 8008556:	0c12      	lsrs	r2, r2, #16
 8008558:	fa13 f38e 	uxtah	r3, r3, lr
 800855c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008564:	b29b      	uxth	r3, r3
 8008566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800856a:	45b9      	cmp	r9, r7
 800856c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008570:	f840 3b04 	str.w	r3, [r0], #4
 8008574:	d2e8      	bcs.n	8008548 <quorem+0xb0>
 8008576:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800857a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800857e:	b92a      	cbnz	r2, 800858c <quorem+0xf4>
 8008580:	3b04      	subs	r3, #4
 8008582:	429e      	cmp	r6, r3
 8008584:	461a      	mov	r2, r3
 8008586:	d30b      	bcc.n	80085a0 <quorem+0x108>
 8008588:	f8c8 4010 	str.w	r4, [r8, #16]
 800858c:	4628      	mov	r0, r5
 800858e:	b003      	add	sp, #12
 8008590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	3b04      	subs	r3, #4
 8008598:	2a00      	cmp	r2, #0
 800859a:	d1ca      	bne.n	8008532 <quorem+0x9a>
 800859c:	3c01      	subs	r4, #1
 800859e:	e7c5      	b.n	800852c <quorem+0x94>
 80085a0:	6812      	ldr	r2, [r2, #0]
 80085a2:	3b04      	subs	r3, #4
 80085a4:	2a00      	cmp	r2, #0
 80085a6:	d1ef      	bne.n	8008588 <quorem+0xf0>
 80085a8:	3c01      	subs	r4, #1
 80085aa:	e7ea      	b.n	8008582 <quorem+0xea>
 80085ac:	2000      	movs	r0, #0
 80085ae:	e7ee      	b.n	800858e <quorem+0xf6>

080085b0 <_dtoa_r>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	ec57 6b10 	vmov	r6, r7, d0
 80085b8:	b097      	sub	sp, #92	; 0x5c
 80085ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085bc:	9106      	str	r1, [sp, #24]
 80085be:	4604      	mov	r4, r0
 80085c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80085c2:	9312      	str	r3, [sp, #72]	; 0x48
 80085c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085c8:	e9cd 6700 	strd	r6, r7, [sp]
 80085cc:	b93d      	cbnz	r5, 80085de <_dtoa_r+0x2e>
 80085ce:	2010      	movs	r0, #16
 80085d0:	f001 f8e0 	bl	8009794 <malloc>
 80085d4:	6260      	str	r0, [r4, #36]	; 0x24
 80085d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085da:	6005      	str	r5, [r0, #0]
 80085dc:	60c5      	str	r5, [r0, #12]
 80085de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	b151      	cbz	r1, 80085fa <_dtoa_r+0x4a>
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	604a      	str	r2, [r1, #4]
 80085e8:	2301      	movs	r3, #1
 80085ea:	4093      	lsls	r3, r2
 80085ec:	608b      	str	r3, [r1, #8]
 80085ee:	4620      	mov	r0, r4
 80085f0:	f001 f929 	bl	8009846 <_Bfree>
 80085f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	1e3b      	subs	r3, r7, #0
 80085fc:	bfbb      	ittet	lt
 80085fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008602:	9301      	strlt	r3, [sp, #4]
 8008604:	2300      	movge	r3, #0
 8008606:	2201      	movlt	r2, #1
 8008608:	bfac      	ite	ge
 800860a:	f8c8 3000 	strge.w	r3, [r8]
 800860e:	f8c8 2000 	strlt.w	r2, [r8]
 8008612:	4baf      	ldr	r3, [pc, #700]	; (80088d0 <_dtoa_r+0x320>)
 8008614:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008618:	ea33 0308 	bics.w	r3, r3, r8
 800861c:	d114      	bne.n	8008648 <_dtoa_r+0x98>
 800861e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008620:	f242 730f 	movw	r3, #9999	; 0x270f
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	9b00      	ldr	r3, [sp, #0]
 8008628:	b923      	cbnz	r3, 8008634 <_dtoa_r+0x84>
 800862a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800862e:	2800      	cmp	r0, #0
 8008630:	f000 8542 	beq.w	80090b8 <_dtoa_r+0xb08>
 8008634:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008636:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80088e4 <_dtoa_r+0x334>
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 8544 	beq.w	80090c8 <_dtoa_r+0xb18>
 8008640:	f10b 0303 	add.w	r3, fp, #3
 8008644:	f000 bd3e 	b.w	80090c4 <_dtoa_r+0xb14>
 8008648:	e9dd 6700 	ldrd	r6, r7, [sp]
 800864c:	2200      	movs	r2, #0
 800864e:	2300      	movs	r3, #0
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	f7f8 fa40 	bl	8000ad8 <__aeabi_dcmpeq>
 8008658:	4681      	mov	r9, r0
 800865a:	b168      	cbz	r0, 8008678 <_dtoa_r+0xc8>
 800865c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800865e:	2301      	movs	r3, #1
 8008660:	6013      	str	r3, [r2, #0]
 8008662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8524 	beq.w	80090b2 <_dtoa_r+0xb02>
 800866a:	4b9a      	ldr	r3, [pc, #616]	; (80088d4 <_dtoa_r+0x324>)
 800866c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800866e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008672:	6013      	str	r3, [r2, #0]
 8008674:	f000 bd28 	b.w	80090c8 <_dtoa_r+0xb18>
 8008678:	aa14      	add	r2, sp, #80	; 0x50
 800867a:	a915      	add	r1, sp, #84	; 0x54
 800867c:	ec47 6b10 	vmov	d0, r6, r7
 8008680:	4620      	mov	r0, r4
 8008682:	f001 fbed 	bl	8009e60 <__d2b>
 8008686:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800868a:	9004      	str	r0, [sp, #16]
 800868c:	2d00      	cmp	r5, #0
 800868e:	d07c      	beq.n	800878a <_dtoa_r+0x1da>
 8008690:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008694:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008698:	46b2      	mov	sl, r6
 800869a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800869e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80086a6:	2200      	movs	r2, #0
 80086a8:	4b8b      	ldr	r3, [pc, #556]	; (80088d8 <_dtoa_r+0x328>)
 80086aa:	4650      	mov	r0, sl
 80086ac:	4659      	mov	r1, fp
 80086ae:	f7f7 fdf3 	bl	8000298 <__aeabi_dsub>
 80086b2:	a381      	add	r3, pc, #516	; (adr r3, 80088b8 <_dtoa_r+0x308>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f7f7 ffa6 	bl	8000608 <__aeabi_dmul>
 80086bc:	a380      	add	r3, pc, #512	; (adr r3, 80088c0 <_dtoa_r+0x310>)
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f7f7 fdeb 	bl	800029c <__adddf3>
 80086c6:	4606      	mov	r6, r0
 80086c8:	4628      	mov	r0, r5
 80086ca:	460f      	mov	r7, r1
 80086cc:	f7f7 ff32 	bl	8000534 <__aeabi_i2d>
 80086d0:	a37d      	add	r3, pc, #500	; (adr r3, 80088c8 <_dtoa_r+0x318>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 ff97 	bl	8000608 <__aeabi_dmul>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4630      	mov	r0, r6
 80086e0:	4639      	mov	r1, r7
 80086e2:	f7f7 fddb 	bl	800029c <__adddf3>
 80086e6:	4606      	mov	r6, r0
 80086e8:	460f      	mov	r7, r1
 80086ea:	f7f8 fa3d 	bl	8000b68 <__aeabi_d2iz>
 80086ee:	2200      	movs	r2, #0
 80086f0:	4682      	mov	sl, r0
 80086f2:	2300      	movs	r3, #0
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f8 f9f8 	bl	8000aec <__aeabi_dcmplt>
 80086fc:	b148      	cbz	r0, 8008712 <_dtoa_r+0x162>
 80086fe:	4650      	mov	r0, sl
 8008700:	f7f7 ff18 	bl	8000534 <__aeabi_i2d>
 8008704:	4632      	mov	r2, r6
 8008706:	463b      	mov	r3, r7
 8008708:	f7f8 f9e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800870c:	b908      	cbnz	r0, 8008712 <_dtoa_r+0x162>
 800870e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008712:	f1ba 0f16 	cmp.w	sl, #22
 8008716:	d859      	bhi.n	80087cc <_dtoa_r+0x21c>
 8008718:	4970      	ldr	r1, [pc, #448]	; (80088dc <_dtoa_r+0x32c>)
 800871a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800871e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008726:	f7f8 f9ff 	bl	8000b28 <__aeabi_dcmpgt>
 800872a:	2800      	cmp	r0, #0
 800872c:	d050      	beq.n	80087d0 <_dtoa_r+0x220>
 800872e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008732:	2300      	movs	r3, #0
 8008734:	930f      	str	r3, [sp, #60]	; 0x3c
 8008736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008738:	1b5d      	subs	r5, r3, r5
 800873a:	f1b5 0801 	subs.w	r8, r5, #1
 800873e:	bf49      	itett	mi
 8008740:	f1c5 0301 	rsbmi	r3, r5, #1
 8008744:	2300      	movpl	r3, #0
 8008746:	9305      	strmi	r3, [sp, #20]
 8008748:	f04f 0800 	movmi.w	r8, #0
 800874c:	bf58      	it	pl
 800874e:	9305      	strpl	r3, [sp, #20]
 8008750:	f1ba 0f00 	cmp.w	sl, #0
 8008754:	db3e      	blt.n	80087d4 <_dtoa_r+0x224>
 8008756:	2300      	movs	r3, #0
 8008758:	44d0      	add	r8, sl
 800875a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800875e:	9307      	str	r3, [sp, #28]
 8008760:	9b06      	ldr	r3, [sp, #24]
 8008762:	2b09      	cmp	r3, #9
 8008764:	f200 8090 	bhi.w	8008888 <_dtoa_r+0x2d8>
 8008768:	2b05      	cmp	r3, #5
 800876a:	bfc4      	itt	gt
 800876c:	3b04      	subgt	r3, #4
 800876e:	9306      	strgt	r3, [sp, #24]
 8008770:	9b06      	ldr	r3, [sp, #24]
 8008772:	f1a3 0302 	sub.w	r3, r3, #2
 8008776:	bfcc      	ite	gt
 8008778:	2500      	movgt	r5, #0
 800877a:	2501      	movle	r5, #1
 800877c:	2b03      	cmp	r3, #3
 800877e:	f200 808f 	bhi.w	80088a0 <_dtoa_r+0x2f0>
 8008782:	e8df f003 	tbb	[pc, r3]
 8008786:	7f7d      	.short	0x7f7d
 8008788:	7131      	.short	0x7131
 800878a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800878e:	441d      	add	r5, r3
 8008790:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008794:	2820      	cmp	r0, #32
 8008796:	dd13      	ble.n	80087c0 <_dtoa_r+0x210>
 8008798:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800879c:	9b00      	ldr	r3, [sp, #0]
 800879e:	fa08 f800 	lsl.w	r8, r8, r0
 80087a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80087a6:	fa23 f000 	lsr.w	r0, r3, r0
 80087aa:	ea48 0000 	orr.w	r0, r8, r0
 80087ae:	f7f7 feb1 	bl	8000514 <__aeabi_ui2d>
 80087b2:	2301      	movs	r3, #1
 80087b4:	4682      	mov	sl, r0
 80087b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80087ba:	3d01      	subs	r5, #1
 80087bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80087be:	e772      	b.n	80086a6 <_dtoa_r+0xf6>
 80087c0:	9b00      	ldr	r3, [sp, #0]
 80087c2:	f1c0 0020 	rsb	r0, r0, #32
 80087c6:	fa03 f000 	lsl.w	r0, r3, r0
 80087ca:	e7f0      	b.n	80087ae <_dtoa_r+0x1fe>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e7b1      	b.n	8008734 <_dtoa_r+0x184>
 80087d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80087d2:	e7b0      	b.n	8008736 <_dtoa_r+0x186>
 80087d4:	9b05      	ldr	r3, [sp, #20]
 80087d6:	eba3 030a 	sub.w	r3, r3, sl
 80087da:	9305      	str	r3, [sp, #20]
 80087dc:	f1ca 0300 	rsb	r3, sl, #0
 80087e0:	9307      	str	r3, [sp, #28]
 80087e2:	2300      	movs	r3, #0
 80087e4:	930e      	str	r3, [sp, #56]	; 0x38
 80087e6:	e7bb      	b.n	8008760 <_dtoa_r+0x1b0>
 80087e8:	2301      	movs	r3, #1
 80087ea:	930a      	str	r3, [sp, #40]	; 0x28
 80087ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dd59      	ble.n	80088a6 <_dtoa_r+0x2f6>
 80087f2:	9302      	str	r3, [sp, #8]
 80087f4:	4699      	mov	r9, r3
 80087f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087f8:	2200      	movs	r2, #0
 80087fa:	6072      	str	r2, [r6, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	f102 0014 	add.w	r0, r2, #20
 8008802:	4298      	cmp	r0, r3
 8008804:	6871      	ldr	r1, [r6, #4]
 8008806:	d953      	bls.n	80088b0 <_dtoa_r+0x300>
 8008808:	4620      	mov	r0, r4
 800880a:	f000 ffe8 	bl	80097de <_Balloc>
 800880e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008810:	6030      	str	r0, [r6, #0]
 8008812:	f1b9 0f0e 	cmp.w	r9, #14
 8008816:	f8d3 b000 	ldr.w	fp, [r3]
 800881a:	f200 80e6 	bhi.w	80089ea <_dtoa_r+0x43a>
 800881e:	2d00      	cmp	r5, #0
 8008820:	f000 80e3 	beq.w	80089ea <_dtoa_r+0x43a>
 8008824:	ed9d 7b00 	vldr	d7, [sp]
 8008828:	f1ba 0f00 	cmp.w	sl, #0
 800882c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008830:	dd74      	ble.n	800891c <_dtoa_r+0x36c>
 8008832:	4a2a      	ldr	r2, [pc, #168]	; (80088dc <_dtoa_r+0x32c>)
 8008834:	f00a 030f 	and.w	r3, sl, #15
 8008838:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800883c:	ed93 7b00 	vldr	d7, [r3]
 8008840:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008844:	06f0      	lsls	r0, r6, #27
 8008846:	ed8d 7b08 	vstr	d7, [sp, #32]
 800884a:	d565      	bpl.n	8008918 <_dtoa_r+0x368>
 800884c:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <_dtoa_r+0x330>)
 800884e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008852:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008856:	f7f8 f801 	bl	800085c <__aeabi_ddiv>
 800885a:	e9cd 0100 	strd	r0, r1, [sp]
 800885e:	f006 060f 	and.w	r6, r6, #15
 8008862:	2503      	movs	r5, #3
 8008864:	4f1e      	ldr	r7, [pc, #120]	; (80088e0 <_dtoa_r+0x330>)
 8008866:	e04c      	b.n	8008902 <_dtoa_r+0x352>
 8008868:	2301      	movs	r3, #1
 800886a:	930a      	str	r3, [sp, #40]	; 0x28
 800886c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800886e:	4453      	add	r3, sl
 8008870:	f103 0901 	add.w	r9, r3, #1
 8008874:	9302      	str	r3, [sp, #8]
 8008876:	464b      	mov	r3, r9
 8008878:	2b01      	cmp	r3, #1
 800887a:	bfb8      	it	lt
 800887c:	2301      	movlt	r3, #1
 800887e:	e7ba      	b.n	80087f6 <_dtoa_r+0x246>
 8008880:	2300      	movs	r3, #0
 8008882:	e7b2      	b.n	80087ea <_dtoa_r+0x23a>
 8008884:	2300      	movs	r3, #0
 8008886:	e7f0      	b.n	800886a <_dtoa_r+0x2ba>
 8008888:	2501      	movs	r5, #1
 800888a:	2300      	movs	r3, #0
 800888c:	9306      	str	r3, [sp, #24]
 800888e:	950a      	str	r5, [sp, #40]	; 0x28
 8008890:	f04f 33ff 	mov.w	r3, #4294967295
 8008894:	9302      	str	r3, [sp, #8]
 8008896:	4699      	mov	r9, r3
 8008898:	2200      	movs	r2, #0
 800889a:	2312      	movs	r3, #18
 800889c:	920b      	str	r2, [sp, #44]	; 0x2c
 800889e:	e7aa      	b.n	80087f6 <_dtoa_r+0x246>
 80088a0:	2301      	movs	r3, #1
 80088a2:	930a      	str	r3, [sp, #40]	; 0x28
 80088a4:	e7f4      	b.n	8008890 <_dtoa_r+0x2e0>
 80088a6:	2301      	movs	r3, #1
 80088a8:	9302      	str	r3, [sp, #8]
 80088aa:	4699      	mov	r9, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	e7f5      	b.n	800889c <_dtoa_r+0x2ec>
 80088b0:	3101      	adds	r1, #1
 80088b2:	6071      	str	r1, [r6, #4]
 80088b4:	0052      	lsls	r2, r2, #1
 80088b6:	e7a2      	b.n	80087fe <_dtoa_r+0x24e>
 80088b8:	636f4361 	.word	0x636f4361
 80088bc:	3fd287a7 	.word	0x3fd287a7
 80088c0:	8b60c8b3 	.word	0x8b60c8b3
 80088c4:	3fc68a28 	.word	0x3fc68a28
 80088c8:	509f79fb 	.word	0x509f79fb
 80088cc:	3fd34413 	.word	0x3fd34413
 80088d0:	7ff00000 	.word	0x7ff00000
 80088d4:	0800a53d 	.word	0x0800a53d
 80088d8:	3ff80000 	.word	0x3ff80000
 80088dc:	0800a5f8 	.word	0x0800a5f8
 80088e0:	0800a5d0 	.word	0x0800a5d0
 80088e4:	0800a5c1 	.word	0x0800a5c1
 80088e8:	07f1      	lsls	r1, r6, #31
 80088ea:	d508      	bpl.n	80088fe <_dtoa_r+0x34e>
 80088ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f4:	f7f7 fe88 	bl	8000608 <__aeabi_dmul>
 80088f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088fc:	3501      	adds	r5, #1
 80088fe:	1076      	asrs	r6, r6, #1
 8008900:	3708      	adds	r7, #8
 8008902:	2e00      	cmp	r6, #0
 8008904:	d1f0      	bne.n	80088e8 <_dtoa_r+0x338>
 8008906:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800890a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800890e:	f7f7 ffa5 	bl	800085c <__aeabi_ddiv>
 8008912:	e9cd 0100 	strd	r0, r1, [sp]
 8008916:	e01a      	b.n	800894e <_dtoa_r+0x39e>
 8008918:	2502      	movs	r5, #2
 800891a:	e7a3      	b.n	8008864 <_dtoa_r+0x2b4>
 800891c:	f000 80a0 	beq.w	8008a60 <_dtoa_r+0x4b0>
 8008920:	f1ca 0600 	rsb	r6, sl, #0
 8008924:	4b9f      	ldr	r3, [pc, #636]	; (8008ba4 <_dtoa_r+0x5f4>)
 8008926:	4fa0      	ldr	r7, [pc, #640]	; (8008ba8 <_dtoa_r+0x5f8>)
 8008928:	f006 020f 	and.w	r2, r6, #15
 800892c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008938:	f7f7 fe66 	bl	8000608 <__aeabi_dmul>
 800893c:	e9cd 0100 	strd	r0, r1, [sp]
 8008940:	1136      	asrs	r6, r6, #4
 8008942:	2300      	movs	r3, #0
 8008944:	2502      	movs	r5, #2
 8008946:	2e00      	cmp	r6, #0
 8008948:	d17f      	bne.n	8008a4a <_dtoa_r+0x49a>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e1      	bne.n	8008912 <_dtoa_r+0x362>
 800894e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 8087 	beq.w	8008a64 <_dtoa_r+0x4b4>
 8008956:	e9dd 6700 	ldrd	r6, r7, [sp]
 800895a:	2200      	movs	r2, #0
 800895c:	4b93      	ldr	r3, [pc, #588]	; (8008bac <_dtoa_r+0x5fc>)
 800895e:	4630      	mov	r0, r6
 8008960:	4639      	mov	r1, r7
 8008962:	f7f8 f8c3 	bl	8000aec <__aeabi_dcmplt>
 8008966:	2800      	cmp	r0, #0
 8008968:	d07c      	beq.n	8008a64 <_dtoa_r+0x4b4>
 800896a:	f1b9 0f00 	cmp.w	r9, #0
 800896e:	d079      	beq.n	8008a64 <_dtoa_r+0x4b4>
 8008970:	9b02      	ldr	r3, [sp, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	dd35      	ble.n	80089e2 <_dtoa_r+0x432>
 8008976:	f10a 33ff 	add.w	r3, sl, #4294967295
 800897a:	9308      	str	r3, [sp, #32]
 800897c:	4639      	mov	r1, r7
 800897e:	2200      	movs	r2, #0
 8008980:	4b8b      	ldr	r3, [pc, #556]	; (8008bb0 <_dtoa_r+0x600>)
 8008982:	4630      	mov	r0, r6
 8008984:	f7f7 fe40 	bl	8000608 <__aeabi_dmul>
 8008988:	e9cd 0100 	strd	r0, r1, [sp]
 800898c:	9f02      	ldr	r7, [sp, #8]
 800898e:	3501      	adds	r5, #1
 8008990:	4628      	mov	r0, r5
 8008992:	f7f7 fdcf 	bl	8000534 <__aeabi_i2d>
 8008996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800899a:	f7f7 fe35 	bl	8000608 <__aeabi_dmul>
 800899e:	2200      	movs	r2, #0
 80089a0:	4b84      	ldr	r3, [pc, #528]	; (8008bb4 <_dtoa_r+0x604>)
 80089a2:	f7f7 fc7b 	bl	800029c <__adddf3>
 80089a6:	4605      	mov	r5, r0
 80089a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80089ac:	2f00      	cmp	r7, #0
 80089ae:	d15d      	bne.n	8008a6c <_dtoa_r+0x4bc>
 80089b0:	2200      	movs	r2, #0
 80089b2:	4b81      	ldr	r3, [pc, #516]	; (8008bb8 <_dtoa_r+0x608>)
 80089b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089b8:	f7f7 fc6e 	bl	8000298 <__aeabi_dsub>
 80089bc:	462a      	mov	r2, r5
 80089be:	4633      	mov	r3, r6
 80089c0:	e9cd 0100 	strd	r0, r1, [sp]
 80089c4:	f7f8 f8b0 	bl	8000b28 <__aeabi_dcmpgt>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f040 8288 	bne.w	8008ede <_dtoa_r+0x92e>
 80089ce:	462a      	mov	r2, r5
 80089d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80089d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089d8:	f7f8 f888 	bl	8000aec <__aeabi_dcmplt>
 80089dc:	2800      	cmp	r0, #0
 80089de:	f040 827c 	bne.w	8008eda <_dtoa_r+0x92a>
 80089e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089e6:	e9cd 2300 	strd	r2, r3, [sp]
 80089ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f2c0 8150 	blt.w	8008c92 <_dtoa_r+0x6e2>
 80089f2:	f1ba 0f0e 	cmp.w	sl, #14
 80089f6:	f300 814c 	bgt.w	8008c92 <_dtoa_r+0x6e2>
 80089fa:	4b6a      	ldr	r3, [pc, #424]	; (8008ba4 <_dtoa_r+0x5f4>)
 80089fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a00:	ed93 7b00 	vldr	d7, [r3]
 8008a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a0c:	f280 80d8 	bge.w	8008bc0 <_dtoa_r+0x610>
 8008a10:	f1b9 0f00 	cmp.w	r9, #0
 8008a14:	f300 80d4 	bgt.w	8008bc0 <_dtoa_r+0x610>
 8008a18:	f040 825e 	bne.w	8008ed8 <_dtoa_r+0x928>
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4b66      	ldr	r3, [pc, #408]	; (8008bb8 <_dtoa_r+0x608>)
 8008a20:	ec51 0b17 	vmov	r0, r1, d7
 8008a24:	f7f7 fdf0 	bl	8000608 <__aeabi_dmul>
 8008a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a2c:	f7f8 f872 	bl	8000b14 <__aeabi_dcmpge>
 8008a30:	464f      	mov	r7, r9
 8008a32:	464e      	mov	r6, r9
 8008a34:	2800      	cmp	r0, #0
 8008a36:	f040 8234 	bne.w	8008ea2 <_dtoa_r+0x8f2>
 8008a3a:	2331      	movs	r3, #49	; 0x31
 8008a3c:	f10b 0501 	add.w	r5, fp, #1
 8008a40:	f88b 3000 	strb.w	r3, [fp]
 8008a44:	f10a 0a01 	add.w	sl, sl, #1
 8008a48:	e22f      	b.n	8008eaa <_dtoa_r+0x8fa>
 8008a4a:	07f2      	lsls	r2, r6, #31
 8008a4c:	d505      	bpl.n	8008a5a <_dtoa_r+0x4aa>
 8008a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a52:	f7f7 fdd9 	bl	8000608 <__aeabi_dmul>
 8008a56:	3501      	adds	r5, #1
 8008a58:	2301      	movs	r3, #1
 8008a5a:	1076      	asrs	r6, r6, #1
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	e772      	b.n	8008946 <_dtoa_r+0x396>
 8008a60:	2502      	movs	r5, #2
 8008a62:	e774      	b.n	800894e <_dtoa_r+0x39e>
 8008a64:	f8cd a020 	str.w	sl, [sp, #32]
 8008a68:	464f      	mov	r7, r9
 8008a6a:	e791      	b.n	8008990 <_dtoa_r+0x3e0>
 8008a6c:	4b4d      	ldr	r3, [pc, #308]	; (8008ba4 <_dtoa_r+0x5f4>)
 8008a6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d047      	beq.n	8008b0c <_dtoa_r+0x55c>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	2000      	movs	r0, #0
 8008a82:	494e      	ldr	r1, [pc, #312]	; (8008bbc <_dtoa_r+0x60c>)
 8008a84:	f7f7 feea 	bl	800085c <__aeabi_ddiv>
 8008a88:	462a      	mov	r2, r5
 8008a8a:	4633      	mov	r3, r6
 8008a8c:	f7f7 fc04 	bl	8000298 <__aeabi_dsub>
 8008a90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008a94:	465d      	mov	r5, fp
 8008a96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a9a:	f7f8 f865 	bl	8000b68 <__aeabi_d2iz>
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	f7f7 fd48 	bl	8000534 <__aeabi_i2d>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008aac:	f7f7 fbf4 	bl	8000298 <__aeabi_dsub>
 8008ab0:	3630      	adds	r6, #48	; 0x30
 8008ab2:	f805 6b01 	strb.w	r6, [r5], #1
 8008ab6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008aba:	e9cd 0100 	strd	r0, r1, [sp]
 8008abe:	f7f8 f815 	bl	8000aec <__aeabi_dcmplt>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d163      	bne.n	8008b8e <_dtoa_r+0x5de>
 8008ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aca:	2000      	movs	r0, #0
 8008acc:	4937      	ldr	r1, [pc, #220]	; (8008bac <_dtoa_r+0x5fc>)
 8008ace:	f7f7 fbe3 	bl	8000298 <__aeabi_dsub>
 8008ad2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ad6:	f7f8 f809 	bl	8000aec <__aeabi_dcmplt>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	f040 80b7 	bne.w	8008c4e <_dtoa_r+0x69e>
 8008ae0:	eba5 030b 	sub.w	r3, r5, fp
 8008ae4:	429f      	cmp	r7, r3
 8008ae6:	f77f af7c 	ble.w	80089e2 <_dtoa_r+0x432>
 8008aea:	2200      	movs	r2, #0
 8008aec:	4b30      	ldr	r3, [pc, #192]	; (8008bb0 <_dtoa_r+0x600>)
 8008aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008af2:	f7f7 fd89 	bl	8000608 <__aeabi_dmul>
 8008af6:	2200      	movs	r2, #0
 8008af8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008afc:	4b2c      	ldr	r3, [pc, #176]	; (8008bb0 <_dtoa_r+0x600>)
 8008afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b02:	f7f7 fd81 	bl	8000608 <__aeabi_dmul>
 8008b06:	e9cd 0100 	strd	r0, r1, [sp]
 8008b0a:	e7c4      	b.n	8008a96 <_dtoa_r+0x4e6>
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	4633      	mov	r3, r6
 8008b10:	f7f7 fd7a 	bl	8000608 <__aeabi_dmul>
 8008b14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b18:	eb0b 0507 	add.w	r5, fp, r7
 8008b1c:	465e      	mov	r6, fp
 8008b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b22:	f7f8 f821 	bl	8000b68 <__aeabi_d2iz>
 8008b26:	4607      	mov	r7, r0
 8008b28:	f7f7 fd04 	bl	8000534 <__aeabi_i2d>
 8008b2c:	3730      	adds	r7, #48	; 0x30
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b36:	f7f7 fbaf 	bl	8000298 <__aeabi_dsub>
 8008b3a:	f806 7b01 	strb.w	r7, [r6], #1
 8008b3e:	42ae      	cmp	r6, r5
 8008b40:	e9cd 0100 	strd	r0, r1, [sp]
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	d126      	bne.n	8008b98 <_dtoa_r+0x5e8>
 8008b4a:	4b1c      	ldr	r3, [pc, #112]	; (8008bbc <_dtoa_r+0x60c>)
 8008b4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b50:	f7f7 fba4 	bl	800029c <__adddf3>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b5c:	f7f7 ffe4 	bl	8000b28 <__aeabi_dcmpgt>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d174      	bne.n	8008c4e <_dtoa_r+0x69e>
 8008b64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b68:	2000      	movs	r0, #0
 8008b6a:	4914      	ldr	r1, [pc, #80]	; (8008bbc <_dtoa_r+0x60c>)
 8008b6c:	f7f7 fb94 	bl	8000298 <__aeabi_dsub>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b78:	f7f7 ffb8 	bl	8000aec <__aeabi_dcmplt>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	f43f af30 	beq.w	80089e2 <_dtoa_r+0x432>
 8008b82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b86:	2b30      	cmp	r3, #48	; 0x30
 8008b88:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b8c:	d002      	beq.n	8008b94 <_dtoa_r+0x5e4>
 8008b8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008b92:	e04a      	b.n	8008c2a <_dtoa_r+0x67a>
 8008b94:	4615      	mov	r5, r2
 8008b96:	e7f4      	b.n	8008b82 <_dtoa_r+0x5d2>
 8008b98:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <_dtoa_r+0x600>)
 8008b9a:	f7f7 fd35 	bl	8000608 <__aeabi_dmul>
 8008b9e:	e9cd 0100 	strd	r0, r1, [sp]
 8008ba2:	e7bc      	b.n	8008b1e <_dtoa_r+0x56e>
 8008ba4:	0800a5f8 	.word	0x0800a5f8
 8008ba8:	0800a5d0 	.word	0x0800a5d0
 8008bac:	3ff00000 	.word	0x3ff00000
 8008bb0:	40240000 	.word	0x40240000
 8008bb4:	401c0000 	.word	0x401c0000
 8008bb8:	40140000 	.word	0x40140000
 8008bbc:	3fe00000 	.word	0x3fe00000
 8008bc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008bc4:	465d      	mov	r5, fp
 8008bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bca:	4630      	mov	r0, r6
 8008bcc:	4639      	mov	r1, r7
 8008bce:	f7f7 fe45 	bl	800085c <__aeabi_ddiv>
 8008bd2:	f7f7 ffc9 	bl	8000b68 <__aeabi_d2iz>
 8008bd6:	4680      	mov	r8, r0
 8008bd8:	f7f7 fcac 	bl	8000534 <__aeabi_i2d>
 8008bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008be0:	f7f7 fd12 	bl	8000608 <__aeabi_dmul>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008bf0:	f7f7 fb52 	bl	8000298 <__aeabi_dsub>
 8008bf4:	f805 6b01 	strb.w	r6, [r5], #1
 8008bf8:	eba5 060b 	sub.w	r6, r5, fp
 8008bfc:	45b1      	cmp	r9, r6
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	d139      	bne.n	8008c78 <_dtoa_r+0x6c8>
 8008c04:	f7f7 fb4a 	bl	800029c <__adddf3>
 8008c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	460f      	mov	r7, r1
 8008c10:	f7f7 ff8a 	bl	8000b28 <__aeabi_dcmpgt>
 8008c14:	b9c8      	cbnz	r0, 8008c4a <_dtoa_r+0x69a>
 8008c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	f7f7 ff5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c22:	b110      	cbz	r0, 8008c2a <_dtoa_r+0x67a>
 8008c24:	f018 0f01 	tst.w	r8, #1
 8008c28:	d10f      	bne.n	8008c4a <_dtoa_r+0x69a>
 8008c2a:	9904      	ldr	r1, [sp, #16]
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 fe0a 	bl	8009846 <_Bfree>
 8008c32:	2300      	movs	r3, #0
 8008c34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c36:	702b      	strb	r3, [r5, #0]
 8008c38:	f10a 0301 	add.w	r3, sl, #1
 8008c3c:	6013      	str	r3, [r2, #0]
 8008c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 8241 	beq.w	80090c8 <_dtoa_r+0xb18>
 8008c46:	601d      	str	r5, [r3, #0]
 8008c48:	e23e      	b.n	80090c8 <_dtoa_r+0xb18>
 8008c4a:	f8cd a020 	str.w	sl, [sp, #32]
 8008c4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c52:	2a39      	cmp	r2, #57	; 0x39
 8008c54:	f105 33ff 	add.w	r3, r5, #4294967295
 8008c58:	d108      	bne.n	8008c6c <_dtoa_r+0x6bc>
 8008c5a:	459b      	cmp	fp, r3
 8008c5c:	d10a      	bne.n	8008c74 <_dtoa_r+0x6c4>
 8008c5e:	9b08      	ldr	r3, [sp, #32]
 8008c60:	3301      	adds	r3, #1
 8008c62:	9308      	str	r3, [sp, #32]
 8008c64:	2330      	movs	r3, #48	; 0x30
 8008c66:	f88b 3000 	strb.w	r3, [fp]
 8008c6a:	465b      	mov	r3, fp
 8008c6c:	781a      	ldrb	r2, [r3, #0]
 8008c6e:	3201      	adds	r2, #1
 8008c70:	701a      	strb	r2, [r3, #0]
 8008c72:	e78c      	b.n	8008b8e <_dtoa_r+0x5de>
 8008c74:	461d      	mov	r5, r3
 8008c76:	e7ea      	b.n	8008c4e <_dtoa_r+0x69e>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4b9b      	ldr	r3, [pc, #620]	; (8008ee8 <_dtoa_r+0x938>)
 8008c7c:	f7f7 fcc4 	bl	8000608 <__aeabi_dmul>
 8008c80:	2200      	movs	r2, #0
 8008c82:	2300      	movs	r3, #0
 8008c84:	4606      	mov	r6, r0
 8008c86:	460f      	mov	r7, r1
 8008c88:	f7f7 ff26 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d09a      	beq.n	8008bc6 <_dtoa_r+0x616>
 8008c90:	e7cb      	b.n	8008c2a <_dtoa_r+0x67a>
 8008c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c94:	2a00      	cmp	r2, #0
 8008c96:	f000 808b 	beq.w	8008db0 <_dtoa_r+0x800>
 8008c9a:	9a06      	ldr	r2, [sp, #24]
 8008c9c:	2a01      	cmp	r2, #1
 8008c9e:	dc6e      	bgt.n	8008d7e <_dtoa_r+0x7ce>
 8008ca0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ca2:	2a00      	cmp	r2, #0
 8008ca4:	d067      	beq.n	8008d76 <_dtoa_r+0x7c6>
 8008ca6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008caa:	9f07      	ldr	r7, [sp, #28]
 8008cac:	9d05      	ldr	r5, [sp, #20]
 8008cae:	9a05      	ldr	r2, [sp, #20]
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	441a      	add	r2, r3
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	9205      	str	r2, [sp, #20]
 8008cb8:	4498      	add	r8, r3
 8008cba:	f000 fea2 	bl	8009a02 <__i2b>
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	2d00      	cmp	r5, #0
 8008cc2:	dd0c      	ble.n	8008cde <_dtoa_r+0x72e>
 8008cc4:	f1b8 0f00 	cmp.w	r8, #0
 8008cc8:	dd09      	ble.n	8008cde <_dtoa_r+0x72e>
 8008cca:	4545      	cmp	r5, r8
 8008ccc:	9a05      	ldr	r2, [sp, #20]
 8008cce:	462b      	mov	r3, r5
 8008cd0:	bfa8      	it	ge
 8008cd2:	4643      	movge	r3, r8
 8008cd4:	1ad2      	subs	r2, r2, r3
 8008cd6:	9205      	str	r2, [sp, #20]
 8008cd8:	1aed      	subs	r5, r5, r3
 8008cda:	eba8 0803 	sub.w	r8, r8, r3
 8008cde:	9b07      	ldr	r3, [sp, #28]
 8008ce0:	b1eb      	cbz	r3, 8008d1e <_dtoa_r+0x76e>
 8008ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d067      	beq.n	8008db8 <_dtoa_r+0x808>
 8008ce8:	b18f      	cbz	r7, 8008d0e <_dtoa_r+0x75e>
 8008cea:	4631      	mov	r1, r6
 8008cec:	463a      	mov	r2, r7
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 ff26 	bl	8009b40 <__pow5mult>
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fe8a 	bl	8009a14 <__multiply>
 8008d00:	9904      	ldr	r1, [sp, #16]
 8008d02:	9008      	str	r0, [sp, #32]
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fd9e 	bl	8009846 <_Bfree>
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	9304      	str	r3, [sp, #16]
 8008d0e:	9b07      	ldr	r3, [sp, #28]
 8008d10:	1bda      	subs	r2, r3, r7
 8008d12:	d004      	beq.n	8008d1e <_dtoa_r+0x76e>
 8008d14:	9904      	ldr	r1, [sp, #16]
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 ff12 	bl	8009b40 <__pow5mult>
 8008d1c:	9004      	str	r0, [sp, #16]
 8008d1e:	2101      	movs	r1, #1
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fe6e 	bl	8009a02 <__i2b>
 8008d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d28:	4607      	mov	r7, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 81d0 	beq.w	80090d0 <_dtoa_r+0xb20>
 8008d30:	461a      	mov	r2, r3
 8008d32:	4601      	mov	r1, r0
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 ff03 	bl	8009b40 <__pow5mult>
 8008d3a:	9b06      	ldr	r3, [sp, #24]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	4607      	mov	r7, r0
 8008d40:	dc40      	bgt.n	8008dc4 <_dtoa_r+0x814>
 8008d42:	9b00      	ldr	r3, [sp, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d139      	bne.n	8008dbc <_dtoa_r+0x80c>
 8008d48:	9b01      	ldr	r3, [sp, #4]
 8008d4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d136      	bne.n	8008dc0 <_dtoa_r+0x810>
 8008d52:	9b01      	ldr	r3, [sp, #4]
 8008d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d58:	0d1b      	lsrs	r3, r3, #20
 8008d5a:	051b      	lsls	r3, r3, #20
 8008d5c:	b12b      	cbz	r3, 8008d6a <_dtoa_r+0x7ba>
 8008d5e:	9b05      	ldr	r3, [sp, #20]
 8008d60:	3301      	adds	r3, #1
 8008d62:	9305      	str	r3, [sp, #20]
 8008d64:	f108 0801 	add.w	r8, r8, #1
 8008d68:	2301      	movs	r3, #1
 8008d6a:	9307      	str	r3, [sp, #28]
 8008d6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d12a      	bne.n	8008dc8 <_dtoa_r+0x818>
 8008d72:	2001      	movs	r0, #1
 8008d74:	e030      	b.n	8008dd8 <_dtoa_r+0x828>
 8008d76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d7c:	e795      	b.n	8008caa <_dtoa_r+0x6fa>
 8008d7e:	9b07      	ldr	r3, [sp, #28]
 8008d80:	f109 37ff 	add.w	r7, r9, #4294967295
 8008d84:	42bb      	cmp	r3, r7
 8008d86:	bfbf      	itttt	lt
 8008d88:	9b07      	ldrlt	r3, [sp, #28]
 8008d8a:	9707      	strlt	r7, [sp, #28]
 8008d8c:	1afa      	sublt	r2, r7, r3
 8008d8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008d90:	bfbb      	ittet	lt
 8008d92:	189b      	addlt	r3, r3, r2
 8008d94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008d96:	1bdf      	subge	r7, r3, r7
 8008d98:	2700      	movlt	r7, #0
 8008d9a:	f1b9 0f00 	cmp.w	r9, #0
 8008d9e:	bfb5      	itete	lt
 8008da0:	9b05      	ldrlt	r3, [sp, #20]
 8008da2:	9d05      	ldrge	r5, [sp, #20]
 8008da4:	eba3 0509 	sublt.w	r5, r3, r9
 8008da8:	464b      	movge	r3, r9
 8008daa:	bfb8      	it	lt
 8008dac:	2300      	movlt	r3, #0
 8008dae:	e77e      	b.n	8008cae <_dtoa_r+0x6fe>
 8008db0:	9f07      	ldr	r7, [sp, #28]
 8008db2:	9d05      	ldr	r5, [sp, #20]
 8008db4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008db6:	e783      	b.n	8008cc0 <_dtoa_r+0x710>
 8008db8:	9a07      	ldr	r2, [sp, #28]
 8008dba:	e7ab      	b.n	8008d14 <_dtoa_r+0x764>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e7d4      	b.n	8008d6a <_dtoa_r+0x7ba>
 8008dc0:	9b00      	ldr	r3, [sp, #0]
 8008dc2:	e7d2      	b.n	8008d6a <_dtoa_r+0x7ba>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9307      	str	r3, [sp, #28]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008dce:	6918      	ldr	r0, [r3, #16]
 8008dd0:	f000 fdc9 	bl	8009966 <__hi0bits>
 8008dd4:	f1c0 0020 	rsb	r0, r0, #32
 8008dd8:	4440      	add	r0, r8
 8008dda:	f010 001f 	ands.w	r0, r0, #31
 8008dde:	d047      	beq.n	8008e70 <_dtoa_r+0x8c0>
 8008de0:	f1c0 0320 	rsb	r3, r0, #32
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	dd3b      	ble.n	8008e60 <_dtoa_r+0x8b0>
 8008de8:	9b05      	ldr	r3, [sp, #20]
 8008dea:	f1c0 001c 	rsb	r0, r0, #28
 8008dee:	4403      	add	r3, r0
 8008df0:	9305      	str	r3, [sp, #20]
 8008df2:	4405      	add	r5, r0
 8008df4:	4480      	add	r8, r0
 8008df6:	9b05      	ldr	r3, [sp, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dd05      	ble.n	8008e08 <_dtoa_r+0x858>
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	9904      	ldr	r1, [sp, #16]
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 feeb 	bl	8009bdc <__lshift>
 8008e06:	9004      	str	r0, [sp, #16]
 8008e08:	f1b8 0f00 	cmp.w	r8, #0
 8008e0c:	dd05      	ble.n	8008e1a <_dtoa_r+0x86a>
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4642      	mov	r2, r8
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 fee2 	bl	8009bdc <__lshift>
 8008e18:	4607      	mov	r7, r0
 8008e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e1c:	b353      	cbz	r3, 8008e74 <_dtoa_r+0x8c4>
 8008e1e:	4639      	mov	r1, r7
 8008e20:	9804      	ldr	r0, [sp, #16]
 8008e22:	f000 ff2f 	bl	8009c84 <__mcmp>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	da24      	bge.n	8008e74 <_dtoa_r+0x8c4>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	220a      	movs	r2, #10
 8008e2e:	9904      	ldr	r1, [sp, #16]
 8008e30:	4620      	mov	r0, r4
 8008e32:	f000 fd1f 	bl	8009874 <__multadd>
 8008e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e38:	9004      	str	r0, [sp, #16]
 8008e3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 814d 	beq.w	80090de <_dtoa_r+0xb2e>
 8008e44:	2300      	movs	r3, #0
 8008e46:	4631      	mov	r1, r6
 8008e48:	220a      	movs	r2, #10
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 fd12 	bl	8009874 <__multadd>
 8008e50:	9b02      	ldr	r3, [sp, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	4606      	mov	r6, r0
 8008e56:	dc4f      	bgt.n	8008ef8 <_dtoa_r+0x948>
 8008e58:	9b06      	ldr	r3, [sp, #24]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	dd4c      	ble.n	8008ef8 <_dtoa_r+0x948>
 8008e5e:	e011      	b.n	8008e84 <_dtoa_r+0x8d4>
 8008e60:	d0c9      	beq.n	8008df6 <_dtoa_r+0x846>
 8008e62:	9a05      	ldr	r2, [sp, #20]
 8008e64:	331c      	adds	r3, #28
 8008e66:	441a      	add	r2, r3
 8008e68:	9205      	str	r2, [sp, #20]
 8008e6a:	441d      	add	r5, r3
 8008e6c:	4498      	add	r8, r3
 8008e6e:	e7c2      	b.n	8008df6 <_dtoa_r+0x846>
 8008e70:	4603      	mov	r3, r0
 8008e72:	e7f6      	b.n	8008e62 <_dtoa_r+0x8b2>
 8008e74:	f1b9 0f00 	cmp.w	r9, #0
 8008e78:	dc38      	bgt.n	8008eec <_dtoa_r+0x93c>
 8008e7a:	9b06      	ldr	r3, [sp, #24]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	dd35      	ble.n	8008eec <_dtoa_r+0x93c>
 8008e80:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e84:	9b02      	ldr	r3, [sp, #8]
 8008e86:	b963      	cbnz	r3, 8008ea2 <_dtoa_r+0x8f2>
 8008e88:	4639      	mov	r1, r7
 8008e8a:	2205      	movs	r2, #5
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	f000 fcf1 	bl	8009874 <__multadd>
 8008e92:	4601      	mov	r1, r0
 8008e94:	4607      	mov	r7, r0
 8008e96:	9804      	ldr	r0, [sp, #16]
 8008e98:	f000 fef4 	bl	8009c84 <__mcmp>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	f73f adcc 	bgt.w	8008a3a <_dtoa_r+0x48a>
 8008ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ea4:	465d      	mov	r5, fp
 8008ea6:	ea6f 0a03 	mvn.w	sl, r3
 8008eaa:	f04f 0900 	mov.w	r9, #0
 8008eae:	4639      	mov	r1, r7
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 fcc8 	bl	8009846 <_Bfree>
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	f43f aeb7 	beq.w	8008c2a <_dtoa_r+0x67a>
 8008ebc:	f1b9 0f00 	cmp.w	r9, #0
 8008ec0:	d005      	beq.n	8008ece <_dtoa_r+0x91e>
 8008ec2:	45b1      	cmp	r9, r6
 8008ec4:	d003      	beq.n	8008ece <_dtoa_r+0x91e>
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f000 fcbc 	bl	8009846 <_Bfree>
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f000 fcb8 	bl	8009846 <_Bfree>
 8008ed6:	e6a8      	b.n	8008c2a <_dtoa_r+0x67a>
 8008ed8:	2700      	movs	r7, #0
 8008eda:	463e      	mov	r6, r7
 8008edc:	e7e1      	b.n	8008ea2 <_dtoa_r+0x8f2>
 8008ede:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008ee2:	463e      	mov	r6, r7
 8008ee4:	e5a9      	b.n	8008a3a <_dtoa_r+0x48a>
 8008ee6:	bf00      	nop
 8008ee8:	40240000 	.word	0x40240000
 8008eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eee:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 80fa 	beq.w	80090ec <_dtoa_r+0xb3c>
 8008ef8:	2d00      	cmp	r5, #0
 8008efa:	dd05      	ble.n	8008f08 <_dtoa_r+0x958>
 8008efc:	4631      	mov	r1, r6
 8008efe:	462a      	mov	r2, r5
 8008f00:	4620      	mov	r0, r4
 8008f02:	f000 fe6b 	bl	8009bdc <__lshift>
 8008f06:	4606      	mov	r6, r0
 8008f08:	9b07      	ldr	r3, [sp, #28]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d04c      	beq.n	8008fa8 <_dtoa_r+0x9f8>
 8008f0e:	6871      	ldr	r1, [r6, #4]
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fc64 	bl	80097de <_Balloc>
 8008f16:	6932      	ldr	r2, [r6, #16]
 8008f18:	3202      	adds	r2, #2
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	0092      	lsls	r2, r2, #2
 8008f1e:	f106 010c 	add.w	r1, r6, #12
 8008f22:	300c      	adds	r0, #12
 8008f24:	f000 fc50 	bl	80097c8 <memcpy>
 8008f28:	2201      	movs	r2, #1
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fe55 	bl	8009bdc <__lshift>
 8008f32:	9b00      	ldr	r3, [sp, #0]
 8008f34:	f8cd b014 	str.w	fp, [sp, #20]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	46b1      	mov	r9, r6
 8008f3e:	9307      	str	r3, [sp, #28]
 8008f40:	4606      	mov	r6, r0
 8008f42:	4639      	mov	r1, r7
 8008f44:	9804      	ldr	r0, [sp, #16]
 8008f46:	f7ff faa7 	bl	8008498 <quorem>
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008f52:	9804      	ldr	r0, [sp, #16]
 8008f54:	f000 fe96 	bl	8009c84 <__mcmp>
 8008f58:	4632      	mov	r2, r6
 8008f5a:	9000      	str	r0, [sp, #0]
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f000 feaa 	bl	8009cb8 <__mdiff>
 8008f64:	68c3      	ldr	r3, [r0, #12]
 8008f66:	4602      	mov	r2, r0
 8008f68:	bb03      	cbnz	r3, 8008fac <_dtoa_r+0x9fc>
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	9008      	str	r0, [sp, #32]
 8008f6e:	9804      	ldr	r0, [sp, #16]
 8008f70:	f000 fe88 	bl	8009c84 <__mcmp>
 8008f74:	9a08      	ldr	r2, [sp, #32]
 8008f76:	4603      	mov	r3, r0
 8008f78:	4611      	mov	r1, r2
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	9308      	str	r3, [sp, #32]
 8008f7e:	f000 fc62 	bl	8009846 <_Bfree>
 8008f82:	9b08      	ldr	r3, [sp, #32]
 8008f84:	b9a3      	cbnz	r3, 8008fb0 <_dtoa_r+0xa00>
 8008f86:	9a06      	ldr	r2, [sp, #24]
 8008f88:	b992      	cbnz	r2, 8008fb0 <_dtoa_r+0xa00>
 8008f8a:	9a07      	ldr	r2, [sp, #28]
 8008f8c:	b982      	cbnz	r2, 8008fb0 <_dtoa_r+0xa00>
 8008f8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f92:	d029      	beq.n	8008fe8 <_dtoa_r+0xa38>
 8008f94:	9b00      	ldr	r3, [sp, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dd01      	ble.n	8008f9e <_dtoa_r+0x9ee>
 8008f9a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008f9e:	9b05      	ldr	r3, [sp, #20]
 8008fa0:	1c5d      	adds	r5, r3, #1
 8008fa2:	f883 8000 	strb.w	r8, [r3]
 8008fa6:	e782      	b.n	8008eae <_dtoa_r+0x8fe>
 8008fa8:	4630      	mov	r0, r6
 8008faa:	e7c2      	b.n	8008f32 <_dtoa_r+0x982>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e7e3      	b.n	8008f78 <_dtoa_r+0x9c8>
 8008fb0:	9a00      	ldr	r2, [sp, #0]
 8008fb2:	2a00      	cmp	r2, #0
 8008fb4:	db04      	blt.n	8008fc0 <_dtoa_r+0xa10>
 8008fb6:	d125      	bne.n	8009004 <_dtoa_r+0xa54>
 8008fb8:	9a06      	ldr	r2, [sp, #24]
 8008fba:	bb1a      	cbnz	r2, 8009004 <_dtoa_r+0xa54>
 8008fbc:	9a07      	ldr	r2, [sp, #28]
 8008fbe:	bb0a      	cbnz	r2, 8009004 <_dtoa_r+0xa54>
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	ddec      	ble.n	8008f9e <_dtoa_r+0x9ee>
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	9904      	ldr	r1, [sp, #16]
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f000 fe07 	bl	8009bdc <__lshift>
 8008fce:	4639      	mov	r1, r7
 8008fd0:	9004      	str	r0, [sp, #16]
 8008fd2:	f000 fe57 	bl	8009c84 <__mcmp>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	dc03      	bgt.n	8008fe2 <_dtoa_r+0xa32>
 8008fda:	d1e0      	bne.n	8008f9e <_dtoa_r+0x9ee>
 8008fdc:	f018 0f01 	tst.w	r8, #1
 8008fe0:	d0dd      	beq.n	8008f9e <_dtoa_r+0x9ee>
 8008fe2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008fe6:	d1d8      	bne.n	8008f9a <_dtoa_r+0x9ea>
 8008fe8:	9b05      	ldr	r3, [sp, #20]
 8008fea:	9a05      	ldr	r2, [sp, #20]
 8008fec:	1c5d      	adds	r5, r3, #1
 8008fee:	2339      	movs	r3, #57	; 0x39
 8008ff0:	7013      	strb	r3, [r2, #0]
 8008ff2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ff6:	2b39      	cmp	r3, #57	; 0x39
 8008ff8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008ffc:	d04f      	beq.n	800909e <_dtoa_r+0xaee>
 8008ffe:	3301      	adds	r3, #1
 8009000:	7013      	strb	r3, [r2, #0]
 8009002:	e754      	b.n	8008eae <_dtoa_r+0x8fe>
 8009004:	9a05      	ldr	r2, [sp, #20]
 8009006:	2b00      	cmp	r3, #0
 8009008:	f102 0501 	add.w	r5, r2, #1
 800900c:	dd06      	ble.n	800901c <_dtoa_r+0xa6c>
 800900e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009012:	d0e9      	beq.n	8008fe8 <_dtoa_r+0xa38>
 8009014:	f108 0801 	add.w	r8, r8, #1
 8009018:	9b05      	ldr	r3, [sp, #20]
 800901a:	e7c2      	b.n	8008fa2 <_dtoa_r+0x9f2>
 800901c:	9a02      	ldr	r2, [sp, #8]
 800901e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009022:	eba5 030b 	sub.w	r3, r5, fp
 8009026:	4293      	cmp	r3, r2
 8009028:	d021      	beq.n	800906e <_dtoa_r+0xabe>
 800902a:	2300      	movs	r3, #0
 800902c:	220a      	movs	r2, #10
 800902e:	9904      	ldr	r1, [sp, #16]
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fc1f 	bl	8009874 <__multadd>
 8009036:	45b1      	cmp	r9, r6
 8009038:	9004      	str	r0, [sp, #16]
 800903a:	f04f 0300 	mov.w	r3, #0
 800903e:	f04f 020a 	mov.w	r2, #10
 8009042:	4649      	mov	r1, r9
 8009044:	4620      	mov	r0, r4
 8009046:	d105      	bne.n	8009054 <_dtoa_r+0xaa4>
 8009048:	f000 fc14 	bl	8009874 <__multadd>
 800904c:	4681      	mov	r9, r0
 800904e:	4606      	mov	r6, r0
 8009050:	9505      	str	r5, [sp, #20]
 8009052:	e776      	b.n	8008f42 <_dtoa_r+0x992>
 8009054:	f000 fc0e 	bl	8009874 <__multadd>
 8009058:	4631      	mov	r1, r6
 800905a:	4681      	mov	r9, r0
 800905c:	2300      	movs	r3, #0
 800905e:	220a      	movs	r2, #10
 8009060:	4620      	mov	r0, r4
 8009062:	f000 fc07 	bl	8009874 <__multadd>
 8009066:	4606      	mov	r6, r0
 8009068:	e7f2      	b.n	8009050 <_dtoa_r+0xaa0>
 800906a:	f04f 0900 	mov.w	r9, #0
 800906e:	2201      	movs	r2, #1
 8009070:	9904      	ldr	r1, [sp, #16]
 8009072:	4620      	mov	r0, r4
 8009074:	f000 fdb2 	bl	8009bdc <__lshift>
 8009078:	4639      	mov	r1, r7
 800907a:	9004      	str	r0, [sp, #16]
 800907c:	f000 fe02 	bl	8009c84 <__mcmp>
 8009080:	2800      	cmp	r0, #0
 8009082:	dcb6      	bgt.n	8008ff2 <_dtoa_r+0xa42>
 8009084:	d102      	bne.n	800908c <_dtoa_r+0xadc>
 8009086:	f018 0f01 	tst.w	r8, #1
 800908a:	d1b2      	bne.n	8008ff2 <_dtoa_r+0xa42>
 800908c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009090:	2b30      	cmp	r3, #48	; 0x30
 8009092:	f105 32ff 	add.w	r2, r5, #4294967295
 8009096:	f47f af0a 	bne.w	8008eae <_dtoa_r+0x8fe>
 800909a:	4615      	mov	r5, r2
 800909c:	e7f6      	b.n	800908c <_dtoa_r+0xadc>
 800909e:	4593      	cmp	fp, r2
 80090a0:	d105      	bne.n	80090ae <_dtoa_r+0xafe>
 80090a2:	2331      	movs	r3, #49	; 0x31
 80090a4:	f10a 0a01 	add.w	sl, sl, #1
 80090a8:	f88b 3000 	strb.w	r3, [fp]
 80090ac:	e6ff      	b.n	8008eae <_dtoa_r+0x8fe>
 80090ae:	4615      	mov	r5, r2
 80090b0:	e79f      	b.n	8008ff2 <_dtoa_r+0xa42>
 80090b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009118 <_dtoa_r+0xb68>
 80090b6:	e007      	b.n	80090c8 <_dtoa_r+0xb18>
 80090b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800911c <_dtoa_r+0xb6c>
 80090be:	b11b      	cbz	r3, 80090c8 <_dtoa_r+0xb18>
 80090c0:	f10b 0308 	add.w	r3, fp, #8
 80090c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	4658      	mov	r0, fp
 80090ca:	b017      	add	sp, #92	; 0x5c
 80090cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d0:	9b06      	ldr	r3, [sp, #24]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	f77f ae35 	ble.w	8008d42 <_dtoa_r+0x792>
 80090d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090da:	9307      	str	r3, [sp, #28]
 80090dc:	e649      	b.n	8008d72 <_dtoa_r+0x7c2>
 80090de:	9b02      	ldr	r3, [sp, #8]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dc03      	bgt.n	80090ec <_dtoa_r+0xb3c>
 80090e4:	9b06      	ldr	r3, [sp, #24]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	f73f aecc 	bgt.w	8008e84 <_dtoa_r+0x8d4>
 80090ec:	465d      	mov	r5, fp
 80090ee:	4639      	mov	r1, r7
 80090f0:	9804      	ldr	r0, [sp, #16]
 80090f2:	f7ff f9d1 	bl	8008498 <quorem>
 80090f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80090fa:	f805 8b01 	strb.w	r8, [r5], #1
 80090fe:	9a02      	ldr	r2, [sp, #8]
 8009100:	eba5 030b 	sub.w	r3, r5, fp
 8009104:	429a      	cmp	r2, r3
 8009106:	ddb0      	ble.n	800906a <_dtoa_r+0xaba>
 8009108:	2300      	movs	r3, #0
 800910a:	220a      	movs	r2, #10
 800910c:	9904      	ldr	r1, [sp, #16]
 800910e:	4620      	mov	r0, r4
 8009110:	f000 fbb0 	bl	8009874 <__multadd>
 8009114:	9004      	str	r0, [sp, #16]
 8009116:	e7ea      	b.n	80090ee <_dtoa_r+0xb3e>
 8009118:	0800a53c 	.word	0x0800a53c
 800911c:	0800a5b8 	.word	0x0800a5b8

08009120 <rshift>:
 8009120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009122:	6906      	ldr	r6, [r0, #16]
 8009124:	114b      	asrs	r3, r1, #5
 8009126:	429e      	cmp	r6, r3
 8009128:	f100 0414 	add.w	r4, r0, #20
 800912c:	dd30      	ble.n	8009190 <rshift+0x70>
 800912e:	f011 011f 	ands.w	r1, r1, #31
 8009132:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009136:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800913a:	d108      	bne.n	800914e <rshift+0x2e>
 800913c:	4621      	mov	r1, r4
 800913e:	42b2      	cmp	r2, r6
 8009140:	460b      	mov	r3, r1
 8009142:	d211      	bcs.n	8009168 <rshift+0x48>
 8009144:	f852 3b04 	ldr.w	r3, [r2], #4
 8009148:	f841 3b04 	str.w	r3, [r1], #4
 800914c:	e7f7      	b.n	800913e <rshift+0x1e>
 800914e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009152:	f1c1 0c20 	rsb	ip, r1, #32
 8009156:	40cd      	lsrs	r5, r1
 8009158:	3204      	adds	r2, #4
 800915a:	4623      	mov	r3, r4
 800915c:	42b2      	cmp	r2, r6
 800915e:	4617      	mov	r7, r2
 8009160:	d30c      	bcc.n	800917c <rshift+0x5c>
 8009162:	601d      	str	r5, [r3, #0]
 8009164:	b105      	cbz	r5, 8009168 <rshift+0x48>
 8009166:	3304      	adds	r3, #4
 8009168:	1b1a      	subs	r2, r3, r4
 800916a:	42a3      	cmp	r3, r4
 800916c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009170:	bf08      	it	eq
 8009172:	2300      	moveq	r3, #0
 8009174:	6102      	str	r2, [r0, #16]
 8009176:	bf08      	it	eq
 8009178:	6143      	streq	r3, [r0, #20]
 800917a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800917c:	683f      	ldr	r7, [r7, #0]
 800917e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009182:	433d      	orrs	r5, r7
 8009184:	f843 5b04 	str.w	r5, [r3], #4
 8009188:	f852 5b04 	ldr.w	r5, [r2], #4
 800918c:	40cd      	lsrs	r5, r1
 800918e:	e7e5      	b.n	800915c <rshift+0x3c>
 8009190:	4623      	mov	r3, r4
 8009192:	e7e9      	b.n	8009168 <rshift+0x48>

08009194 <__hexdig_fun>:
 8009194:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009198:	2b09      	cmp	r3, #9
 800919a:	d802      	bhi.n	80091a2 <__hexdig_fun+0xe>
 800919c:	3820      	subs	r0, #32
 800919e:	b2c0      	uxtb	r0, r0
 80091a0:	4770      	bx	lr
 80091a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80091a6:	2b05      	cmp	r3, #5
 80091a8:	d801      	bhi.n	80091ae <__hexdig_fun+0x1a>
 80091aa:	3847      	subs	r0, #71	; 0x47
 80091ac:	e7f7      	b.n	800919e <__hexdig_fun+0xa>
 80091ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80091b2:	2b05      	cmp	r3, #5
 80091b4:	d801      	bhi.n	80091ba <__hexdig_fun+0x26>
 80091b6:	3827      	subs	r0, #39	; 0x27
 80091b8:	e7f1      	b.n	800919e <__hexdig_fun+0xa>
 80091ba:	2000      	movs	r0, #0
 80091bc:	4770      	bx	lr

080091be <__gethex>:
 80091be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c2:	b08b      	sub	sp, #44	; 0x2c
 80091c4:	468a      	mov	sl, r1
 80091c6:	9002      	str	r0, [sp, #8]
 80091c8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80091ca:	9306      	str	r3, [sp, #24]
 80091cc:	4690      	mov	r8, r2
 80091ce:	f000 fad0 	bl	8009772 <__localeconv_l>
 80091d2:	6803      	ldr	r3, [r0, #0]
 80091d4:	9303      	str	r3, [sp, #12]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f7 f802 	bl	80001e0 <strlen>
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	9001      	str	r0, [sp, #4]
 80091e0:	4403      	add	r3, r0
 80091e2:	f04f 0b00 	mov.w	fp, #0
 80091e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80091ea:	9307      	str	r3, [sp, #28]
 80091ec:	f8da 3000 	ldr.w	r3, [sl]
 80091f0:	3302      	adds	r3, #2
 80091f2:	461f      	mov	r7, r3
 80091f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80091f8:	2830      	cmp	r0, #48	; 0x30
 80091fa:	d06c      	beq.n	80092d6 <__gethex+0x118>
 80091fc:	f7ff ffca 	bl	8009194 <__hexdig_fun>
 8009200:	4604      	mov	r4, r0
 8009202:	2800      	cmp	r0, #0
 8009204:	d16a      	bne.n	80092dc <__gethex+0x11e>
 8009206:	9a01      	ldr	r2, [sp, #4]
 8009208:	9903      	ldr	r1, [sp, #12]
 800920a:	4638      	mov	r0, r7
 800920c:	f001 f8fe 	bl	800a40c <strncmp>
 8009210:	2800      	cmp	r0, #0
 8009212:	d166      	bne.n	80092e2 <__gethex+0x124>
 8009214:	9b01      	ldr	r3, [sp, #4]
 8009216:	5cf8      	ldrb	r0, [r7, r3]
 8009218:	18fe      	adds	r6, r7, r3
 800921a:	f7ff ffbb 	bl	8009194 <__hexdig_fun>
 800921e:	2800      	cmp	r0, #0
 8009220:	d062      	beq.n	80092e8 <__gethex+0x12a>
 8009222:	4633      	mov	r3, r6
 8009224:	7818      	ldrb	r0, [r3, #0]
 8009226:	2830      	cmp	r0, #48	; 0x30
 8009228:	461f      	mov	r7, r3
 800922a:	f103 0301 	add.w	r3, r3, #1
 800922e:	d0f9      	beq.n	8009224 <__gethex+0x66>
 8009230:	f7ff ffb0 	bl	8009194 <__hexdig_fun>
 8009234:	fab0 f580 	clz	r5, r0
 8009238:	096d      	lsrs	r5, r5, #5
 800923a:	4634      	mov	r4, r6
 800923c:	f04f 0b01 	mov.w	fp, #1
 8009240:	463a      	mov	r2, r7
 8009242:	4616      	mov	r6, r2
 8009244:	3201      	adds	r2, #1
 8009246:	7830      	ldrb	r0, [r6, #0]
 8009248:	f7ff ffa4 	bl	8009194 <__hexdig_fun>
 800924c:	2800      	cmp	r0, #0
 800924e:	d1f8      	bne.n	8009242 <__gethex+0x84>
 8009250:	9a01      	ldr	r2, [sp, #4]
 8009252:	9903      	ldr	r1, [sp, #12]
 8009254:	4630      	mov	r0, r6
 8009256:	f001 f8d9 	bl	800a40c <strncmp>
 800925a:	b950      	cbnz	r0, 8009272 <__gethex+0xb4>
 800925c:	b954      	cbnz	r4, 8009274 <__gethex+0xb6>
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	18f4      	adds	r4, r6, r3
 8009262:	4622      	mov	r2, r4
 8009264:	4616      	mov	r6, r2
 8009266:	3201      	adds	r2, #1
 8009268:	7830      	ldrb	r0, [r6, #0]
 800926a:	f7ff ff93 	bl	8009194 <__hexdig_fun>
 800926e:	2800      	cmp	r0, #0
 8009270:	d1f8      	bne.n	8009264 <__gethex+0xa6>
 8009272:	b10c      	cbz	r4, 8009278 <__gethex+0xba>
 8009274:	1ba4      	subs	r4, r4, r6
 8009276:	00a4      	lsls	r4, r4, #2
 8009278:	7833      	ldrb	r3, [r6, #0]
 800927a:	2b50      	cmp	r3, #80	; 0x50
 800927c:	d001      	beq.n	8009282 <__gethex+0xc4>
 800927e:	2b70      	cmp	r3, #112	; 0x70
 8009280:	d140      	bne.n	8009304 <__gethex+0x146>
 8009282:	7873      	ldrb	r3, [r6, #1]
 8009284:	2b2b      	cmp	r3, #43	; 0x2b
 8009286:	d031      	beq.n	80092ec <__gethex+0x12e>
 8009288:	2b2d      	cmp	r3, #45	; 0x2d
 800928a:	d033      	beq.n	80092f4 <__gethex+0x136>
 800928c:	1c71      	adds	r1, r6, #1
 800928e:	f04f 0900 	mov.w	r9, #0
 8009292:	7808      	ldrb	r0, [r1, #0]
 8009294:	f7ff ff7e 	bl	8009194 <__hexdig_fun>
 8009298:	1e43      	subs	r3, r0, #1
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b18      	cmp	r3, #24
 800929e:	d831      	bhi.n	8009304 <__gethex+0x146>
 80092a0:	f1a0 0210 	sub.w	r2, r0, #16
 80092a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092a8:	f7ff ff74 	bl	8009194 <__hexdig_fun>
 80092ac:	1e43      	subs	r3, r0, #1
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b18      	cmp	r3, #24
 80092b2:	d922      	bls.n	80092fa <__gethex+0x13c>
 80092b4:	f1b9 0f00 	cmp.w	r9, #0
 80092b8:	d000      	beq.n	80092bc <__gethex+0xfe>
 80092ba:	4252      	negs	r2, r2
 80092bc:	4414      	add	r4, r2
 80092be:	f8ca 1000 	str.w	r1, [sl]
 80092c2:	b30d      	cbz	r5, 8009308 <__gethex+0x14a>
 80092c4:	f1bb 0f00 	cmp.w	fp, #0
 80092c8:	bf0c      	ite	eq
 80092ca:	2706      	moveq	r7, #6
 80092cc:	2700      	movne	r7, #0
 80092ce:	4638      	mov	r0, r7
 80092d0:	b00b      	add	sp, #44	; 0x2c
 80092d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d6:	f10b 0b01 	add.w	fp, fp, #1
 80092da:	e78a      	b.n	80091f2 <__gethex+0x34>
 80092dc:	2500      	movs	r5, #0
 80092de:	462c      	mov	r4, r5
 80092e0:	e7ae      	b.n	8009240 <__gethex+0x82>
 80092e2:	463e      	mov	r6, r7
 80092e4:	2501      	movs	r5, #1
 80092e6:	e7c7      	b.n	8009278 <__gethex+0xba>
 80092e8:	4604      	mov	r4, r0
 80092ea:	e7fb      	b.n	80092e4 <__gethex+0x126>
 80092ec:	f04f 0900 	mov.w	r9, #0
 80092f0:	1cb1      	adds	r1, r6, #2
 80092f2:	e7ce      	b.n	8009292 <__gethex+0xd4>
 80092f4:	f04f 0901 	mov.w	r9, #1
 80092f8:	e7fa      	b.n	80092f0 <__gethex+0x132>
 80092fa:	230a      	movs	r3, #10
 80092fc:	fb03 0202 	mla	r2, r3, r2, r0
 8009300:	3a10      	subs	r2, #16
 8009302:	e7cf      	b.n	80092a4 <__gethex+0xe6>
 8009304:	4631      	mov	r1, r6
 8009306:	e7da      	b.n	80092be <__gethex+0x100>
 8009308:	1bf3      	subs	r3, r6, r7
 800930a:	3b01      	subs	r3, #1
 800930c:	4629      	mov	r1, r5
 800930e:	2b07      	cmp	r3, #7
 8009310:	dc49      	bgt.n	80093a6 <__gethex+0x1e8>
 8009312:	9802      	ldr	r0, [sp, #8]
 8009314:	f000 fa63 	bl	80097de <_Balloc>
 8009318:	9b01      	ldr	r3, [sp, #4]
 800931a:	f100 0914 	add.w	r9, r0, #20
 800931e:	f04f 0b00 	mov.w	fp, #0
 8009322:	f1c3 0301 	rsb	r3, r3, #1
 8009326:	4605      	mov	r5, r0
 8009328:	f8cd 9010 	str.w	r9, [sp, #16]
 800932c:	46da      	mov	sl, fp
 800932e:	9308      	str	r3, [sp, #32]
 8009330:	42b7      	cmp	r7, r6
 8009332:	d33b      	bcc.n	80093ac <__gethex+0x1ee>
 8009334:	9804      	ldr	r0, [sp, #16]
 8009336:	f840 ab04 	str.w	sl, [r0], #4
 800933a:	eba0 0009 	sub.w	r0, r0, r9
 800933e:	1080      	asrs	r0, r0, #2
 8009340:	6128      	str	r0, [r5, #16]
 8009342:	0147      	lsls	r7, r0, #5
 8009344:	4650      	mov	r0, sl
 8009346:	f000 fb0e 	bl	8009966 <__hi0bits>
 800934a:	f8d8 6000 	ldr.w	r6, [r8]
 800934e:	1a3f      	subs	r7, r7, r0
 8009350:	42b7      	cmp	r7, r6
 8009352:	dd64      	ble.n	800941e <__gethex+0x260>
 8009354:	1bbf      	subs	r7, r7, r6
 8009356:	4639      	mov	r1, r7
 8009358:	4628      	mov	r0, r5
 800935a:	f000 fe1d 	bl	8009f98 <__any_on>
 800935e:	4682      	mov	sl, r0
 8009360:	b178      	cbz	r0, 8009382 <__gethex+0x1c4>
 8009362:	1e7b      	subs	r3, r7, #1
 8009364:	1159      	asrs	r1, r3, #5
 8009366:	f003 021f 	and.w	r2, r3, #31
 800936a:	f04f 0a01 	mov.w	sl, #1
 800936e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009372:	fa0a f202 	lsl.w	r2, sl, r2
 8009376:	420a      	tst	r2, r1
 8009378:	d003      	beq.n	8009382 <__gethex+0x1c4>
 800937a:	4553      	cmp	r3, sl
 800937c:	dc46      	bgt.n	800940c <__gethex+0x24e>
 800937e:	f04f 0a02 	mov.w	sl, #2
 8009382:	4639      	mov	r1, r7
 8009384:	4628      	mov	r0, r5
 8009386:	f7ff fecb 	bl	8009120 <rshift>
 800938a:	443c      	add	r4, r7
 800938c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009390:	42a3      	cmp	r3, r4
 8009392:	da52      	bge.n	800943a <__gethex+0x27c>
 8009394:	4629      	mov	r1, r5
 8009396:	9802      	ldr	r0, [sp, #8]
 8009398:	f000 fa55 	bl	8009846 <_Bfree>
 800939c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800939e:	2300      	movs	r3, #0
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	27a3      	movs	r7, #163	; 0xa3
 80093a4:	e793      	b.n	80092ce <__gethex+0x110>
 80093a6:	3101      	adds	r1, #1
 80093a8:	105b      	asrs	r3, r3, #1
 80093aa:	e7b0      	b.n	800930e <__gethex+0x150>
 80093ac:	1e73      	subs	r3, r6, #1
 80093ae:	9305      	str	r3, [sp, #20]
 80093b0:	9a07      	ldr	r2, [sp, #28]
 80093b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d018      	beq.n	80093ec <__gethex+0x22e>
 80093ba:	f1bb 0f20 	cmp.w	fp, #32
 80093be:	d107      	bne.n	80093d0 <__gethex+0x212>
 80093c0:	9b04      	ldr	r3, [sp, #16]
 80093c2:	f8c3 a000 	str.w	sl, [r3]
 80093c6:	3304      	adds	r3, #4
 80093c8:	f04f 0a00 	mov.w	sl, #0
 80093cc:	9304      	str	r3, [sp, #16]
 80093ce:	46d3      	mov	fp, sl
 80093d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80093d4:	f7ff fede 	bl	8009194 <__hexdig_fun>
 80093d8:	f000 000f 	and.w	r0, r0, #15
 80093dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80093e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80093e4:	f10b 0b04 	add.w	fp, fp, #4
 80093e8:	9b05      	ldr	r3, [sp, #20]
 80093ea:	e00d      	b.n	8009408 <__gethex+0x24a>
 80093ec:	9b05      	ldr	r3, [sp, #20]
 80093ee:	9a08      	ldr	r2, [sp, #32]
 80093f0:	4413      	add	r3, r2
 80093f2:	42bb      	cmp	r3, r7
 80093f4:	d3e1      	bcc.n	80093ba <__gethex+0x1fc>
 80093f6:	4618      	mov	r0, r3
 80093f8:	9a01      	ldr	r2, [sp, #4]
 80093fa:	9903      	ldr	r1, [sp, #12]
 80093fc:	9309      	str	r3, [sp, #36]	; 0x24
 80093fe:	f001 f805 	bl	800a40c <strncmp>
 8009402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009404:	2800      	cmp	r0, #0
 8009406:	d1d8      	bne.n	80093ba <__gethex+0x1fc>
 8009408:	461e      	mov	r6, r3
 800940a:	e791      	b.n	8009330 <__gethex+0x172>
 800940c:	1eb9      	subs	r1, r7, #2
 800940e:	4628      	mov	r0, r5
 8009410:	f000 fdc2 	bl	8009f98 <__any_on>
 8009414:	2800      	cmp	r0, #0
 8009416:	d0b2      	beq.n	800937e <__gethex+0x1c0>
 8009418:	f04f 0a03 	mov.w	sl, #3
 800941c:	e7b1      	b.n	8009382 <__gethex+0x1c4>
 800941e:	da09      	bge.n	8009434 <__gethex+0x276>
 8009420:	1bf7      	subs	r7, r6, r7
 8009422:	4629      	mov	r1, r5
 8009424:	463a      	mov	r2, r7
 8009426:	9802      	ldr	r0, [sp, #8]
 8009428:	f000 fbd8 	bl	8009bdc <__lshift>
 800942c:	1be4      	subs	r4, r4, r7
 800942e:	4605      	mov	r5, r0
 8009430:	f100 0914 	add.w	r9, r0, #20
 8009434:	f04f 0a00 	mov.w	sl, #0
 8009438:	e7a8      	b.n	800938c <__gethex+0x1ce>
 800943a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800943e:	42a0      	cmp	r0, r4
 8009440:	dd6a      	ble.n	8009518 <__gethex+0x35a>
 8009442:	1b04      	subs	r4, r0, r4
 8009444:	42a6      	cmp	r6, r4
 8009446:	dc2e      	bgt.n	80094a6 <__gethex+0x2e8>
 8009448:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d022      	beq.n	8009496 <__gethex+0x2d8>
 8009450:	2b03      	cmp	r3, #3
 8009452:	d024      	beq.n	800949e <__gethex+0x2e0>
 8009454:	2b01      	cmp	r3, #1
 8009456:	d115      	bne.n	8009484 <__gethex+0x2c6>
 8009458:	42a6      	cmp	r6, r4
 800945a:	d113      	bne.n	8009484 <__gethex+0x2c6>
 800945c:	2e01      	cmp	r6, #1
 800945e:	dc0b      	bgt.n	8009478 <__gethex+0x2ba>
 8009460:	9a06      	ldr	r2, [sp, #24]
 8009462:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	2301      	movs	r3, #1
 800946a:	612b      	str	r3, [r5, #16]
 800946c:	f8c9 3000 	str.w	r3, [r9]
 8009470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009472:	2762      	movs	r7, #98	; 0x62
 8009474:	601d      	str	r5, [r3, #0]
 8009476:	e72a      	b.n	80092ce <__gethex+0x110>
 8009478:	1e71      	subs	r1, r6, #1
 800947a:	4628      	mov	r0, r5
 800947c:	f000 fd8c 	bl	8009f98 <__any_on>
 8009480:	2800      	cmp	r0, #0
 8009482:	d1ed      	bne.n	8009460 <__gethex+0x2a2>
 8009484:	4629      	mov	r1, r5
 8009486:	9802      	ldr	r0, [sp, #8]
 8009488:	f000 f9dd 	bl	8009846 <_Bfree>
 800948c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800948e:	2300      	movs	r3, #0
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	2750      	movs	r7, #80	; 0x50
 8009494:	e71b      	b.n	80092ce <__gethex+0x110>
 8009496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0e1      	beq.n	8009460 <__gethex+0x2a2>
 800949c:	e7f2      	b.n	8009484 <__gethex+0x2c6>
 800949e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1dd      	bne.n	8009460 <__gethex+0x2a2>
 80094a4:	e7ee      	b.n	8009484 <__gethex+0x2c6>
 80094a6:	1e67      	subs	r7, r4, #1
 80094a8:	f1ba 0f00 	cmp.w	sl, #0
 80094ac:	d131      	bne.n	8009512 <__gethex+0x354>
 80094ae:	b127      	cbz	r7, 80094ba <__gethex+0x2fc>
 80094b0:	4639      	mov	r1, r7
 80094b2:	4628      	mov	r0, r5
 80094b4:	f000 fd70 	bl	8009f98 <__any_on>
 80094b8:	4682      	mov	sl, r0
 80094ba:	117a      	asrs	r2, r7, #5
 80094bc:	2301      	movs	r3, #1
 80094be:	f007 071f 	and.w	r7, r7, #31
 80094c2:	fa03 f707 	lsl.w	r7, r3, r7
 80094c6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80094ca:	4621      	mov	r1, r4
 80094cc:	421f      	tst	r7, r3
 80094ce:	4628      	mov	r0, r5
 80094d0:	bf18      	it	ne
 80094d2:	f04a 0a02 	orrne.w	sl, sl, #2
 80094d6:	1b36      	subs	r6, r6, r4
 80094d8:	f7ff fe22 	bl	8009120 <rshift>
 80094dc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80094e0:	2702      	movs	r7, #2
 80094e2:	f1ba 0f00 	cmp.w	sl, #0
 80094e6:	d048      	beq.n	800957a <__gethex+0x3bc>
 80094e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d015      	beq.n	800951c <__gethex+0x35e>
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d017      	beq.n	8009524 <__gethex+0x366>
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d109      	bne.n	800950c <__gethex+0x34e>
 80094f8:	f01a 0f02 	tst.w	sl, #2
 80094fc:	d006      	beq.n	800950c <__gethex+0x34e>
 80094fe:	f8d9 3000 	ldr.w	r3, [r9]
 8009502:	ea4a 0a03 	orr.w	sl, sl, r3
 8009506:	f01a 0f01 	tst.w	sl, #1
 800950a:	d10e      	bne.n	800952a <__gethex+0x36c>
 800950c:	f047 0710 	orr.w	r7, r7, #16
 8009510:	e033      	b.n	800957a <__gethex+0x3bc>
 8009512:	f04f 0a01 	mov.w	sl, #1
 8009516:	e7d0      	b.n	80094ba <__gethex+0x2fc>
 8009518:	2701      	movs	r7, #1
 800951a:	e7e2      	b.n	80094e2 <__gethex+0x324>
 800951c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800951e:	f1c3 0301 	rsb	r3, r3, #1
 8009522:	9315      	str	r3, [sp, #84]	; 0x54
 8009524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0f0      	beq.n	800950c <__gethex+0x34e>
 800952a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800952e:	f105 0314 	add.w	r3, r5, #20
 8009532:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009536:	eb03 010a 	add.w	r1, r3, sl
 800953a:	f04f 0c00 	mov.w	ip, #0
 800953e:	4618      	mov	r0, r3
 8009540:	f853 2b04 	ldr.w	r2, [r3], #4
 8009544:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009548:	d01c      	beq.n	8009584 <__gethex+0x3c6>
 800954a:	3201      	adds	r2, #1
 800954c:	6002      	str	r2, [r0, #0]
 800954e:	2f02      	cmp	r7, #2
 8009550:	f105 0314 	add.w	r3, r5, #20
 8009554:	d138      	bne.n	80095c8 <__gethex+0x40a>
 8009556:	f8d8 2000 	ldr.w	r2, [r8]
 800955a:	3a01      	subs	r2, #1
 800955c:	42b2      	cmp	r2, r6
 800955e:	d10a      	bne.n	8009576 <__gethex+0x3b8>
 8009560:	1171      	asrs	r1, r6, #5
 8009562:	2201      	movs	r2, #1
 8009564:	f006 061f 	and.w	r6, r6, #31
 8009568:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800956c:	fa02 f606 	lsl.w	r6, r2, r6
 8009570:	421e      	tst	r6, r3
 8009572:	bf18      	it	ne
 8009574:	4617      	movne	r7, r2
 8009576:	f047 0720 	orr.w	r7, r7, #32
 800957a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800957c:	601d      	str	r5, [r3, #0]
 800957e:	9b06      	ldr	r3, [sp, #24]
 8009580:	601c      	str	r4, [r3, #0]
 8009582:	e6a4      	b.n	80092ce <__gethex+0x110>
 8009584:	4299      	cmp	r1, r3
 8009586:	f843 cc04 	str.w	ip, [r3, #-4]
 800958a:	d8d8      	bhi.n	800953e <__gethex+0x380>
 800958c:	68ab      	ldr	r3, [r5, #8]
 800958e:	4599      	cmp	r9, r3
 8009590:	db12      	blt.n	80095b8 <__gethex+0x3fa>
 8009592:	6869      	ldr	r1, [r5, #4]
 8009594:	9802      	ldr	r0, [sp, #8]
 8009596:	3101      	adds	r1, #1
 8009598:	f000 f921 	bl	80097de <_Balloc>
 800959c:	692a      	ldr	r2, [r5, #16]
 800959e:	3202      	adds	r2, #2
 80095a0:	f105 010c 	add.w	r1, r5, #12
 80095a4:	4683      	mov	fp, r0
 80095a6:	0092      	lsls	r2, r2, #2
 80095a8:	300c      	adds	r0, #12
 80095aa:	f000 f90d 	bl	80097c8 <memcpy>
 80095ae:	4629      	mov	r1, r5
 80095b0:	9802      	ldr	r0, [sp, #8]
 80095b2:	f000 f948 	bl	8009846 <_Bfree>
 80095b6:	465d      	mov	r5, fp
 80095b8:	692b      	ldr	r3, [r5, #16]
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80095c0:	612a      	str	r2, [r5, #16]
 80095c2:	2201      	movs	r2, #1
 80095c4:	615a      	str	r2, [r3, #20]
 80095c6:	e7c2      	b.n	800954e <__gethex+0x390>
 80095c8:	692a      	ldr	r2, [r5, #16]
 80095ca:	454a      	cmp	r2, r9
 80095cc:	dd0b      	ble.n	80095e6 <__gethex+0x428>
 80095ce:	2101      	movs	r1, #1
 80095d0:	4628      	mov	r0, r5
 80095d2:	f7ff fda5 	bl	8009120 <rshift>
 80095d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095da:	3401      	adds	r4, #1
 80095dc:	42a3      	cmp	r3, r4
 80095de:	f6ff aed9 	blt.w	8009394 <__gethex+0x1d6>
 80095e2:	2701      	movs	r7, #1
 80095e4:	e7c7      	b.n	8009576 <__gethex+0x3b8>
 80095e6:	f016 061f 	ands.w	r6, r6, #31
 80095ea:	d0fa      	beq.n	80095e2 <__gethex+0x424>
 80095ec:	449a      	add	sl, r3
 80095ee:	f1c6 0620 	rsb	r6, r6, #32
 80095f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80095f6:	f000 f9b6 	bl	8009966 <__hi0bits>
 80095fa:	42b0      	cmp	r0, r6
 80095fc:	dbe7      	blt.n	80095ce <__gethex+0x410>
 80095fe:	e7f0      	b.n	80095e2 <__gethex+0x424>

08009600 <L_shift>:
 8009600:	f1c2 0208 	rsb	r2, r2, #8
 8009604:	0092      	lsls	r2, r2, #2
 8009606:	b570      	push	{r4, r5, r6, lr}
 8009608:	f1c2 0620 	rsb	r6, r2, #32
 800960c:	6843      	ldr	r3, [r0, #4]
 800960e:	6804      	ldr	r4, [r0, #0]
 8009610:	fa03 f506 	lsl.w	r5, r3, r6
 8009614:	432c      	orrs	r4, r5
 8009616:	40d3      	lsrs	r3, r2
 8009618:	6004      	str	r4, [r0, #0]
 800961a:	f840 3f04 	str.w	r3, [r0, #4]!
 800961e:	4288      	cmp	r0, r1
 8009620:	d3f4      	bcc.n	800960c <L_shift+0xc>
 8009622:	bd70      	pop	{r4, r5, r6, pc}

08009624 <__match>:
 8009624:	b530      	push	{r4, r5, lr}
 8009626:	6803      	ldr	r3, [r0, #0]
 8009628:	3301      	adds	r3, #1
 800962a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800962e:	b914      	cbnz	r4, 8009636 <__match+0x12>
 8009630:	6003      	str	r3, [r0, #0]
 8009632:	2001      	movs	r0, #1
 8009634:	bd30      	pop	{r4, r5, pc}
 8009636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800963a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800963e:	2d19      	cmp	r5, #25
 8009640:	bf98      	it	ls
 8009642:	3220      	addls	r2, #32
 8009644:	42a2      	cmp	r2, r4
 8009646:	d0f0      	beq.n	800962a <__match+0x6>
 8009648:	2000      	movs	r0, #0
 800964a:	e7f3      	b.n	8009634 <__match+0x10>

0800964c <__hexnan>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	680b      	ldr	r3, [r1, #0]
 8009652:	6801      	ldr	r1, [r0, #0]
 8009654:	115f      	asrs	r7, r3, #5
 8009656:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800965a:	f013 031f 	ands.w	r3, r3, #31
 800965e:	b087      	sub	sp, #28
 8009660:	bf18      	it	ne
 8009662:	3704      	addne	r7, #4
 8009664:	2500      	movs	r5, #0
 8009666:	1f3e      	subs	r6, r7, #4
 8009668:	4682      	mov	sl, r0
 800966a:	4690      	mov	r8, r2
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	f847 5c04 	str.w	r5, [r7, #-4]
 8009672:	46b1      	mov	r9, r6
 8009674:	4634      	mov	r4, r6
 8009676:	9502      	str	r5, [sp, #8]
 8009678:	46ab      	mov	fp, r5
 800967a:	784a      	ldrb	r2, [r1, #1]
 800967c:	1c4b      	adds	r3, r1, #1
 800967e:	9303      	str	r3, [sp, #12]
 8009680:	b342      	cbz	r2, 80096d4 <__hexnan+0x88>
 8009682:	4610      	mov	r0, r2
 8009684:	9105      	str	r1, [sp, #20]
 8009686:	9204      	str	r2, [sp, #16]
 8009688:	f7ff fd84 	bl	8009194 <__hexdig_fun>
 800968c:	2800      	cmp	r0, #0
 800968e:	d143      	bne.n	8009718 <__hexnan+0xcc>
 8009690:	9a04      	ldr	r2, [sp, #16]
 8009692:	9905      	ldr	r1, [sp, #20]
 8009694:	2a20      	cmp	r2, #32
 8009696:	d818      	bhi.n	80096ca <__hexnan+0x7e>
 8009698:	9b02      	ldr	r3, [sp, #8]
 800969a:	459b      	cmp	fp, r3
 800969c:	dd13      	ble.n	80096c6 <__hexnan+0x7a>
 800969e:	454c      	cmp	r4, r9
 80096a0:	d206      	bcs.n	80096b0 <__hexnan+0x64>
 80096a2:	2d07      	cmp	r5, #7
 80096a4:	dc04      	bgt.n	80096b0 <__hexnan+0x64>
 80096a6:	462a      	mov	r2, r5
 80096a8:	4649      	mov	r1, r9
 80096aa:	4620      	mov	r0, r4
 80096ac:	f7ff ffa8 	bl	8009600 <L_shift>
 80096b0:	4544      	cmp	r4, r8
 80096b2:	d944      	bls.n	800973e <__hexnan+0xf2>
 80096b4:	2300      	movs	r3, #0
 80096b6:	f1a4 0904 	sub.w	r9, r4, #4
 80096ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80096be:	f8cd b008 	str.w	fp, [sp, #8]
 80096c2:	464c      	mov	r4, r9
 80096c4:	461d      	mov	r5, r3
 80096c6:	9903      	ldr	r1, [sp, #12]
 80096c8:	e7d7      	b.n	800967a <__hexnan+0x2e>
 80096ca:	2a29      	cmp	r2, #41	; 0x29
 80096cc:	d14a      	bne.n	8009764 <__hexnan+0x118>
 80096ce:	3102      	adds	r1, #2
 80096d0:	f8ca 1000 	str.w	r1, [sl]
 80096d4:	f1bb 0f00 	cmp.w	fp, #0
 80096d8:	d044      	beq.n	8009764 <__hexnan+0x118>
 80096da:	454c      	cmp	r4, r9
 80096dc:	d206      	bcs.n	80096ec <__hexnan+0xa0>
 80096de:	2d07      	cmp	r5, #7
 80096e0:	dc04      	bgt.n	80096ec <__hexnan+0xa0>
 80096e2:	462a      	mov	r2, r5
 80096e4:	4649      	mov	r1, r9
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7ff ff8a 	bl	8009600 <L_shift>
 80096ec:	4544      	cmp	r4, r8
 80096ee:	d928      	bls.n	8009742 <__hexnan+0xf6>
 80096f0:	4643      	mov	r3, r8
 80096f2:	f854 2b04 	ldr.w	r2, [r4], #4
 80096f6:	f843 2b04 	str.w	r2, [r3], #4
 80096fa:	42a6      	cmp	r6, r4
 80096fc:	d2f9      	bcs.n	80096f2 <__hexnan+0xa6>
 80096fe:	2200      	movs	r2, #0
 8009700:	f843 2b04 	str.w	r2, [r3], #4
 8009704:	429e      	cmp	r6, r3
 8009706:	d2fb      	bcs.n	8009700 <__hexnan+0xb4>
 8009708:	6833      	ldr	r3, [r6, #0]
 800970a:	b91b      	cbnz	r3, 8009714 <__hexnan+0xc8>
 800970c:	4546      	cmp	r6, r8
 800970e:	d127      	bne.n	8009760 <__hexnan+0x114>
 8009710:	2301      	movs	r3, #1
 8009712:	6033      	str	r3, [r6, #0]
 8009714:	2005      	movs	r0, #5
 8009716:	e026      	b.n	8009766 <__hexnan+0x11a>
 8009718:	3501      	adds	r5, #1
 800971a:	2d08      	cmp	r5, #8
 800971c:	f10b 0b01 	add.w	fp, fp, #1
 8009720:	dd06      	ble.n	8009730 <__hexnan+0xe4>
 8009722:	4544      	cmp	r4, r8
 8009724:	d9cf      	bls.n	80096c6 <__hexnan+0x7a>
 8009726:	2300      	movs	r3, #0
 8009728:	f844 3c04 	str.w	r3, [r4, #-4]
 800972c:	2501      	movs	r5, #1
 800972e:	3c04      	subs	r4, #4
 8009730:	6822      	ldr	r2, [r4, #0]
 8009732:	f000 000f 	and.w	r0, r0, #15
 8009736:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800973a:	6020      	str	r0, [r4, #0]
 800973c:	e7c3      	b.n	80096c6 <__hexnan+0x7a>
 800973e:	2508      	movs	r5, #8
 8009740:	e7c1      	b.n	80096c6 <__hexnan+0x7a>
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0df      	beq.n	8009708 <__hexnan+0xbc>
 8009748:	f04f 32ff 	mov.w	r2, #4294967295
 800974c:	f1c3 0320 	rsb	r3, r3, #32
 8009750:	fa22 f303 	lsr.w	r3, r2, r3
 8009754:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009758:	401a      	ands	r2, r3
 800975a:	f847 2c04 	str.w	r2, [r7, #-4]
 800975e:	e7d3      	b.n	8009708 <__hexnan+0xbc>
 8009760:	3e04      	subs	r6, #4
 8009762:	e7d1      	b.n	8009708 <__hexnan+0xbc>
 8009764:	2004      	movs	r0, #4
 8009766:	b007      	add	sp, #28
 8009768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800976c <__locale_ctype_ptr_l>:
 800976c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009770:	4770      	bx	lr

08009772 <__localeconv_l>:
 8009772:	30f0      	adds	r0, #240	; 0xf0
 8009774:	4770      	bx	lr
	...

08009778 <_localeconv_r>:
 8009778:	4b04      	ldr	r3, [pc, #16]	; (800978c <_localeconv_r+0x14>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6a18      	ldr	r0, [r3, #32]
 800977e:	4b04      	ldr	r3, [pc, #16]	; (8009790 <_localeconv_r+0x18>)
 8009780:	2800      	cmp	r0, #0
 8009782:	bf08      	it	eq
 8009784:	4618      	moveq	r0, r3
 8009786:	30f0      	adds	r0, #240	; 0xf0
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	2000000c 	.word	0x2000000c
 8009790:	20000070 	.word	0x20000070

08009794 <malloc>:
 8009794:	4b02      	ldr	r3, [pc, #8]	; (80097a0 <malloc+0xc>)
 8009796:	4601      	mov	r1, r0
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	f000 bc7b 	b.w	800a094 <_malloc_r>
 800979e:	bf00      	nop
 80097a0:	2000000c 	.word	0x2000000c

080097a4 <__ascii_mbtowc>:
 80097a4:	b082      	sub	sp, #8
 80097a6:	b901      	cbnz	r1, 80097aa <__ascii_mbtowc+0x6>
 80097a8:	a901      	add	r1, sp, #4
 80097aa:	b142      	cbz	r2, 80097be <__ascii_mbtowc+0x1a>
 80097ac:	b14b      	cbz	r3, 80097c2 <__ascii_mbtowc+0x1e>
 80097ae:	7813      	ldrb	r3, [r2, #0]
 80097b0:	600b      	str	r3, [r1, #0]
 80097b2:	7812      	ldrb	r2, [r2, #0]
 80097b4:	1c10      	adds	r0, r2, #0
 80097b6:	bf18      	it	ne
 80097b8:	2001      	movne	r0, #1
 80097ba:	b002      	add	sp, #8
 80097bc:	4770      	bx	lr
 80097be:	4610      	mov	r0, r2
 80097c0:	e7fb      	b.n	80097ba <__ascii_mbtowc+0x16>
 80097c2:	f06f 0001 	mvn.w	r0, #1
 80097c6:	e7f8      	b.n	80097ba <__ascii_mbtowc+0x16>

080097c8 <memcpy>:
 80097c8:	b510      	push	{r4, lr}
 80097ca:	1e43      	subs	r3, r0, #1
 80097cc:	440a      	add	r2, r1
 80097ce:	4291      	cmp	r1, r2
 80097d0:	d100      	bne.n	80097d4 <memcpy+0xc>
 80097d2:	bd10      	pop	{r4, pc}
 80097d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097dc:	e7f7      	b.n	80097ce <memcpy+0x6>

080097de <_Balloc>:
 80097de:	b570      	push	{r4, r5, r6, lr}
 80097e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097e2:	4604      	mov	r4, r0
 80097e4:	460e      	mov	r6, r1
 80097e6:	b93d      	cbnz	r5, 80097f8 <_Balloc+0x1a>
 80097e8:	2010      	movs	r0, #16
 80097ea:	f7ff ffd3 	bl	8009794 <malloc>
 80097ee:	6260      	str	r0, [r4, #36]	; 0x24
 80097f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097f4:	6005      	str	r5, [r0, #0]
 80097f6:	60c5      	str	r5, [r0, #12]
 80097f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097fa:	68eb      	ldr	r3, [r5, #12]
 80097fc:	b183      	cbz	r3, 8009820 <_Balloc+0x42>
 80097fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009806:	b9b8      	cbnz	r0, 8009838 <_Balloc+0x5a>
 8009808:	2101      	movs	r1, #1
 800980a:	fa01 f506 	lsl.w	r5, r1, r6
 800980e:	1d6a      	adds	r2, r5, #5
 8009810:	0092      	lsls	r2, r2, #2
 8009812:	4620      	mov	r0, r4
 8009814:	f000 fbe1 	bl	8009fda <_calloc_r>
 8009818:	b160      	cbz	r0, 8009834 <_Balloc+0x56>
 800981a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800981e:	e00e      	b.n	800983e <_Balloc+0x60>
 8009820:	2221      	movs	r2, #33	; 0x21
 8009822:	2104      	movs	r1, #4
 8009824:	4620      	mov	r0, r4
 8009826:	f000 fbd8 	bl	8009fda <_calloc_r>
 800982a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800982c:	60e8      	str	r0, [r5, #12]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e4      	bne.n	80097fe <_Balloc+0x20>
 8009834:	2000      	movs	r0, #0
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	6802      	ldr	r2, [r0, #0]
 800983a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800983e:	2300      	movs	r3, #0
 8009840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009844:	e7f7      	b.n	8009836 <_Balloc+0x58>

08009846 <_Bfree>:
 8009846:	b570      	push	{r4, r5, r6, lr}
 8009848:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800984a:	4606      	mov	r6, r0
 800984c:	460d      	mov	r5, r1
 800984e:	b93c      	cbnz	r4, 8009860 <_Bfree+0x1a>
 8009850:	2010      	movs	r0, #16
 8009852:	f7ff ff9f 	bl	8009794 <malloc>
 8009856:	6270      	str	r0, [r6, #36]	; 0x24
 8009858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800985c:	6004      	str	r4, [r0, #0]
 800985e:	60c4      	str	r4, [r0, #12]
 8009860:	b13d      	cbz	r5, 8009872 <_Bfree+0x2c>
 8009862:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009864:	686a      	ldr	r2, [r5, #4]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800986c:	6029      	str	r1, [r5, #0]
 800986e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009872:	bd70      	pop	{r4, r5, r6, pc}

08009874 <__multadd>:
 8009874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009878:	690d      	ldr	r5, [r1, #16]
 800987a:	461f      	mov	r7, r3
 800987c:	4606      	mov	r6, r0
 800987e:	460c      	mov	r4, r1
 8009880:	f101 0c14 	add.w	ip, r1, #20
 8009884:	2300      	movs	r3, #0
 8009886:	f8dc 0000 	ldr.w	r0, [ip]
 800988a:	b281      	uxth	r1, r0
 800988c:	fb02 7101 	mla	r1, r2, r1, r7
 8009890:	0c0f      	lsrs	r7, r1, #16
 8009892:	0c00      	lsrs	r0, r0, #16
 8009894:	fb02 7000 	mla	r0, r2, r0, r7
 8009898:	b289      	uxth	r1, r1
 800989a:	3301      	adds	r3, #1
 800989c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80098a0:	429d      	cmp	r5, r3
 80098a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80098a6:	f84c 1b04 	str.w	r1, [ip], #4
 80098aa:	dcec      	bgt.n	8009886 <__multadd+0x12>
 80098ac:	b1d7      	cbz	r7, 80098e4 <__multadd+0x70>
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	42ab      	cmp	r3, r5
 80098b2:	dc12      	bgt.n	80098da <__multadd+0x66>
 80098b4:	6861      	ldr	r1, [r4, #4]
 80098b6:	4630      	mov	r0, r6
 80098b8:	3101      	adds	r1, #1
 80098ba:	f7ff ff90 	bl	80097de <_Balloc>
 80098be:	6922      	ldr	r2, [r4, #16]
 80098c0:	3202      	adds	r2, #2
 80098c2:	f104 010c 	add.w	r1, r4, #12
 80098c6:	4680      	mov	r8, r0
 80098c8:	0092      	lsls	r2, r2, #2
 80098ca:	300c      	adds	r0, #12
 80098cc:	f7ff ff7c 	bl	80097c8 <memcpy>
 80098d0:	4621      	mov	r1, r4
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ffb7 	bl	8009846 <_Bfree>
 80098d8:	4644      	mov	r4, r8
 80098da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098de:	3501      	adds	r5, #1
 80098e0:	615f      	str	r7, [r3, #20]
 80098e2:	6125      	str	r5, [r4, #16]
 80098e4:	4620      	mov	r0, r4
 80098e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080098ea <__s2b>:
 80098ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098ee:	460c      	mov	r4, r1
 80098f0:	4615      	mov	r5, r2
 80098f2:	461f      	mov	r7, r3
 80098f4:	2209      	movs	r2, #9
 80098f6:	3308      	adds	r3, #8
 80098f8:	4606      	mov	r6, r0
 80098fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80098fe:	2100      	movs	r1, #0
 8009900:	2201      	movs	r2, #1
 8009902:	429a      	cmp	r2, r3
 8009904:	db20      	blt.n	8009948 <__s2b+0x5e>
 8009906:	4630      	mov	r0, r6
 8009908:	f7ff ff69 	bl	80097de <_Balloc>
 800990c:	9b08      	ldr	r3, [sp, #32]
 800990e:	6143      	str	r3, [r0, #20]
 8009910:	2d09      	cmp	r5, #9
 8009912:	f04f 0301 	mov.w	r3, #1
 8009916:	6103      	str	r3, [r0, #16]
 8009918:	dd19      	ble.n	800994e <__s2b+0x64>
 800991a:	f104 0809 	add.w	r8, r4, #9
 800991e:	46c1      	mov	r9, r8
 8009920:	442c      	add	r4, r5
 8009922:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009926:	4601      	mov	r1, r0
 8009928:	3b30      	subs	r3, #48	; 0x30
 800992a:	220a      	movs	r2, #10
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff ffa1 	bl	8009874 <__multadd>
 8009932:	45a1      	cmp	r9, r4
 8009934:	d1f5      	bne.n	8009922 <__s2b+0x38>
 8009936:	eb08 0405 	add.w	r4, r8, r5
 800993a:	3c08      	subs	r4, #8
 800993c:	1b2d      	subs	r5, r5, r4
 800993e:	1963      	adds	r3, r4, r5
 8009940:	42bb      	cmp	r3, r7
 8009942:	db07      	blt.n	8009954 <__s2b+0x6a>
 8009944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009948:	0052      	lsls	r2, r2, #1
 800994a:	3101      	adds	r1, #1
 800994c:	e7d9      	b.n	8009902 <__s2b+0x18>
 800994e:	340a      	adds	r4, #10
 8009950:	2509      	movs	r5, #9
 8009952:	e7f3      	b.n	800993c <__s2b+0x52>
 8009954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009958:	4601      	mov	r1, r0
 800995a:	3b30      	subs	r3, #48	; 0x30
 800995c:	220a      	movs	r2, #10
 800995e:	4630      	mov	r0, r6
 8009960:	f7ff ff88 	bl	8009874 <__multadd>
 8009964:	e7eb      	b.n	800993e <__s2b+0x54>

08009966 <__hi0bits>:
 8009966:	0c02      	lsrs	r2, r0, #16
 8009968:	0412      	lsls	r2, r2, #16
 800996a:	4603      	mov	r3, r0
 800996c:	b9b2      	cbnz	r2, 800999c <__hi0bits+0x36>
 800996e:	0403      	lsls	r3, r0, #16
 8009970:	2010      	movs	r0, #16
 8009972:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009976:	bf04      	itt	eq
 8009978:	021b      	lsleq	r3, r3, #8
 800997a:	3008      	addeq	r0, #8
 800997c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009980:	bf04      	itt	eq
 8009982:	011b      	lsleq	r3, r3, #4
 8009984:	3004      	addeq	r0, #4
 8009986:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800998a:	bf04      	itt	eq
 800998c:	009b      	lsleq	r3, r3, #2
 800998e:	3002      	addeq	r0, #2
 8009990:	2b00      	cmp	r3, #0
 8009992:	db06      	blt.n	80099a2 <__hi0bits+0x3c>
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	d503      	bpl.n	80099a0 <__hi0bits+0x3a>
 8009998:	3001      	adds	r0, #1
 800999a:	4770      	bx	lr
 800999c:	2000      	movs	r0, #0
 800999e:	e7e8      	b.n	8009972 <__hi0bits+0xc>
 80099a0:	2020      	movs	r0, #32
 80099a2:	4770      	bx	lr

080099a4 <__lo0bits>:
 80099a4:	6803      	ldr	r3, [r0, #0]
 80099a6:	f013 0207 	ands.w	r2, r3, #7
 80099aa:	4601      	mov	r1, r0
 80099ac:	d00b      	beq.n	80099c6 <__lo0bits+0x22>
 80099ae:	07da      	lsls	r2, r3, #31
 80099b0:	d423      	bmi.n	80099fa <__lo0bits+0x56>
 80099b2:	0798      	lsls	r0, r3, #30
 80099b4:	bf49      	itett	mi
 80099b6:	085b      	lsrmi	r3, r3, #1
 80099b8:	089b      	lsrpl	r3, r3, #2
 80099ba:	2001      	movmi	r0, #1
 80099bc:	600b      	strmi	r3, [r1, #0]
 80099be:	bf5c      	itt	pl
 80099c0:	600b      	strpl	r3, [r1, #0]
 80099c2:	2002      	movpl	r0, #2
 80099c4:	4770      	bx	lr
 80099c6:	b298      	uxth	r0, r3
 80099c8:	b9a8      	cbnz	r0, 80099f6 <__lo0bits+0x52>
 80099ca:	0c1b      	lsrs	r3, r3, #16
 80099cc:	2010      	movs	r0, #16
 80099ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80099d2:	bf04      	itt	eq
 80099d4:	0a1b      	lsreq	r3, r3, #8
 80099d6:	3008      	addeq	r0, #8
 80099d8:	071a      	lsls	r2, r3, #28
 80099da:	bf04      	itt	eq
 80099dc:	091b      	lsreq	r3, r3, #4
 80099de:	3004      	addeq	r0, #4
 80099e0:	079a      	lsls	r2, r3, #30
 80099e2:	bf04      	itt	eq
 80099e4:	089b      	lsreq	r3, r3, #2
 80099e6:	3002      	addeq	r0, #2
 80099e8:	07da      	lsls	r2, r3, #31
 80099ea:	d402      	bmi.n	80099f2 <__lo0bits+0x4e>
 80099ec:	085b      	lsrs	r3, r3, #1
 80099ee:	d006      	beq.n	80099fe <__lo0bits+0x5a>
 80099f0:	3001      	adds	r0, #1
 80099f2:	600b      	str	r3, [r1, #0]
 80099f4:	4770      	bx	lr
 80099f6:	4610      	mov	r0, r2
 80099f8:	e7e9      	b.n	80099ce <__lo0bits+0x2a>
 80099fa:	2000      	movs	r0, #0
 80099fc:	4770      	bx	lr
 80099fe:	2020      	movs	r0, #32
 8009a00:	4770      	bx	lr

08009a02 <__i2b>:
 8009a02:	b510      	push	{r4, lr}
 8009a04:	460c      	mov	r4, r1
 8009a06:	2101      	movs	r1, #1
 8009a08:	f7ff fee9 	bl	80097de <_Balloc>
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	6144      	str	r4, [r0, #20]
 8009a10:	6102      	str	r2, [r0, #16]
 8009a12:	bd10      	pop	{r4, pc}

08009a14 <__multiply>:
 8009a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	4614      	mov	r4, r2
 8009a1a:	690a      	ldr	r2, [r1, #16]
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	bfb8      	it	lt
 8009a22:	460b      	movlt	r3, r1
 8009a24:	4688      	mov	r8, r1
 8009a26:	bfbc      	itt	lt
 8009a28:	46a0      	movlt	r8, r4
 8009a2a:	461c      	movlt	r4, r3
 8009a2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a30:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a3c:	eb07 0609 	add.w	r6, r7, r9
 8009a40:	42b3      	cmp	r3, r6
 8009a42:	bfb8      	it	lt
 8009a44:	3101      	addlt	r1, #1
 8009a46:	f7ff feca 	bl	80097de <_Balloc>
 8009a4a:	f100 0514 	add.w	r5, r0, #20
 8009a4e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009a52:	462b      	mov	r3, r5
 8009a54:	2200      	movs	r2, #0
 8009a56:	4573      	cmp	r3, lr
 8009a58:	d316      	bcc.n	8009a88 <__multiply+0x74>
 8009a5a:	f104 0214 	add.w	r2, r4, #20
 8009a5e:	f108 0114 	add.w	r1, r8, #20
 8009a62:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009a66:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	9b00      	ldr	r3, [sp, #0]
 8009a6e:	9201      	str	r2, [sp, #4]
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d80c      	bhi.n	8009a8e <__multiply+0x7a>
 8009a74:	2e00      	cmp	r6, #0
 8009a76:	dd03      	ble.n	8009a80 <__multiply+0x6c>
 8009a78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d05d      	beq.n	8009b3c <__multiply+0x128>
 8009a80:	6106      	str	r6, [r0, #16]
 8009a82:	b003      	add	sp, #12
 8009a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a88:	f843 2b04 	str.w	r2, [r3], #4
 8009a8c:	e7e3      	b.n	8009a56 <__multiply+0x42>
 8009a8e:	f8b2 b000 	ldrh.w	fp, [r2]
 8009a92:	f1bb 0f00 	cmp.w	fp, #0
 8009a96:	d023      	beq.n	8009ae0 <__multiply+0xcc>
 8009a98:	4689      	mov	r9, r1
 8009a9a:	46ac      	mov	ip, r5
 8009a9c:	f04f 0800 	mov.w	r8, #0
 8009aa0:	f859 4b04 	ldr.w	r4, [r9], #4
 8009aa4:	f8dc a000 	ldr.w	sl, [ip]
 8009aa8:	b2a3      	uxth	r3, r4
 8009aaa:	fa1f fa8a 	uxth.w	sl, sl
 8009aae:	fb0b a303 	mla	r3, fp, r3, sl
 8009ab2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ab6:	f8dc 4000 	ldr.w	r4, [ip]
 8009aba:	4443      	add	r3, r8
 8009abc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ac0:	fb0b 840a 	mla	r4, fp, sl, r8
 8009ac4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009ac8:	46e2      	mov	sl, ip
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ad0:	454f      	cmp	r7, r9
 8009ad2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ad6:	f84a 3b04 	str.w	r3, [sl], #4
 8009ada:	d82b      	bhi.n	8009b34 <__multiply+0x120>
 8009adc:	f8cc 8004 	str.w	r8, [ip, #4]
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009ae6:	3204      	adds	r2, #4
 8009ae8:	f1ba 0f00 	cmp.w	sl, #0
 8009aec:	d020      	beq.n	8009b30 <__multiply+0x11c>
 8009aee:	682b      	ldr	r3, [r5, #0]
 8009af0:	4689      	mov	r9, r1
 8009af2:	46a8      	mov	r8, r5
 8009af4:	f04f 0b00 	mov.w	fp, #0
 8009af8:	f8b9 c000 	ldrh.w	ip, [r9]
 8009afc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009b00:	fb0a 440c 	mla	r4, sl, ip, r4
 8009b04:	445c      	add	r4, fp
 8009b06:	46c4      	mov	ip, r8
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009b0e:	f84c 3b04 	str.w	r3, [ip], #4
 8009b12:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b16:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009b1a:	0c1b      	lsrs	r3, r3, #16
 8009b1c:	fb0a b303 	mla	r3, sl, r3, fp
 8009b20:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009b24:	454f      	cmp	r7, r9
 8009b26:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009b2a:	d805      	bhi.n	8009b38 <__multiply+0x124>
 8009b2c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009b30:	3504      	adds	r5, #4
 8009b32:	e79b      	b.n	8009a6c <__multiply+0x58>
 8009b34:	46d4      	mov	ip, sl
 8009b36:	e7b3      	b.n	8009aa0 <__multiply+0x8c>
 8009b38:	46e0      	mov	r8, ip
 8009b3a:	e7dd      	b.n	8009af8 <__multiply+0xe4>
 8009b3c:	3e01      	subs	r6, #1
 8009b3e:	e799      	b.n	8009a74 <__multiply+0x60>

08009b40 <__pow5mult>:
 8009b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b44:	4615      	mov	r5, r2
 8009b46:	f012 0203 	ands.w	r2, r2, #3
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	d007      	beq.n	8009b60 <__pow5mult+0x20>
 8009b50:	3a01      	subs	r2, #1
 8009b52:	4c21      	ldr	r4, [pc, #132]	; (8009bd8 <__pow5mult+0x98>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b5a:	f7ff fe8b 	bl	8009874 <__multadd>
 8009b5e:	4607      	mov	r7, r0
 8009b60:	10ad      	asrs	r5, r5, #2
 8009b62:	d035      	beq.n	8009bd0 <__pow5mult+0x90>
 8009b64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b66:	b93c      	cbnz	r4, 8009b78 <__pow5mult+0x38>
 8009b68:	2010      	movs	r0, #16
 8009b6a:	f7ff fe13 	bl	8009794 <malloc>
 8009b6e:	6270      	str	r0, [r6, #36]	; 0x24
 8009b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b74:	6004      	str	r4, [r0, #0]
 8009b76:	60c4      	str	r4, [r0, #12]
 8009b78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b80:	b94c      	cbnz	r4, 8009b96 <__pow5mult+0x56>
 8009b82:	f240 2171 	movw	r1, #625	; 0x271
 8009b86:	4630      	mov	r0, r6
 8009b88:	f7ff ff3b 	bl	8009a02 <__i2b>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b92:	4604      	mov	r4, r0
 8009b94:	6003      	str	r3, [r0, #0]
 8009b96:	f04f 0800 	mov.w	r8, #0
 8009b9a:	07eb      	lsls	r3, r5, #31
 8009b9c:	d50a      	bpl.n	8009bb4 <__pow5mult+0x74>
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f7ff ff36 	bl	8009a14 <__multiply>
 8009ba8:	4639      	mov	r1, r7
 8009baa:	4681      	mov	r9, r0
 8009bac:	4630      	mov	r0, r6
 8009bae:	f7ff fe4a 	bl	8009846 <_Bfree>
 8009bb2:	464f      	mov	r7, r9
 8009bb4:	106d      	asrs	r5, r5, #1
 8009bb6:	d00b      	beq.n	8009bd0 <__pow5mult+0x90>
 8009bb8:	6820      	ldr	r0, [r4, #0]
 8009bba:	b938      	cbnz	r0, 8009bcc <__pow5mult+0x8c>
 8009bbc:	4622      	mov	r2, r4
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7ff ff27 	bl	8009a14 <__multiply>
 8009bc6:	6020      	str	r0, [r4, #0]
 8009bc8:	f8c0 8000 	str.w	r8, [r0]
 8009bcc:	4604      	mov	r4, r0
 8009bce:	e7e4      	b.n	8009b9a <__pow5mult+0x5a>
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd6:	bf00      	nop
 8009bd8:	0800a6c0 	.word	0x0800a6c0

08009bdc <__lshift>:
 8009bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	460c      	mov	r4, r1
 8009be2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	6849      	ldr	r1, [r1, #4]
 8009bea:	eb0a 0903 	add.w	r9, sl, r3
 8009bee:	68a3      	ldr	r3, [r4, #8]
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	4616      	mov	r6, r2
 8009bf4:	f109 0501 	add.w	r5, r9, #1
 8009bf8:	42ab      	cmp	r3, r5
 8009bfa:	db32      	blt.n	8009c62 <__lshift+0x86>
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7ff fdee 	bl	80097de <_Balloc>
 8009c02:	2300      	movs	r3, #0
 8009c04:	4680      	mov	r8, r0
 8009c06:	f100 0114 	add.w	r1, r0, #20
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	4553      	cmp	r3, sl
 8009c0e:	db2b      	blt.n	8009c68 <__lshift+0x8c>
 8009c10:	6920      	ldr	r0, [r4, #16]
 8009c12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c16:	f104 0314 	add.w	r3, r4, #20
 8009c1a:	f016 021f 	ands.w	r2, r6, #31
 8009c1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c26:	d025      	beq.n	8009c74 <__lshift+0x98>
 8009c28:	f1c2 0e20 	rsb	lr, r2, #32
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	681e      	ldr	r6, [r3, #0]
 8009c30:	468a      	mov	sl, r1
 8009c32:	4096      	lsls	r6, r2
 8009c34:	4330      	orrs	r0, r6
 8009c36:	f84a 0b04 	str.w	r0, [sl], #4
 8009c3a:	f853 0b04 	ldr.w	r0, [r3], #4
 8009c3e:	459c      	cmp	ip, r3
 8009c40:	fa20 f00e 	lsr.w	r0, r0, lr
 8009c44:	d814      	bhi.n	8009c70 <__lshift+0x94>
 8009c46:	6048      	str	r0, [r1, #4]
 8009c48:	b108      	cbz	r0, 8009c4e <__lshift+0x72>
 8009c4a:	f109 0502 	add.w	r5, r9, #2
 8009c4e:	3d01      	subs	r5, #1
 8009c50:	4638      	mov	r0, r7
 8009c52:	f8c8 5010 	str.w	r5, [r8, #16]
 8009c56:	4621      	mov	r1, r4
 8009c58:	f7ff fdf5 	bl	8009846 <_Bfree>
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c62:	3101      	adds	r1, #1
 8009c64:	005b      	lsls	r3, r3, #1
 8009c66:	e7c7      	b.n	8009bf8 <__lshift+0x1c>
 8009c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	e7cd      	b.n	8009c0c <__lshift+0x30>
 8009c70:	4651      	mov	r1, sl
 8009c72:	e7dc      	b.n	8009c2e <__lshift+0x52>
 8009c74:	3904      	subs	r1, #4
 8009c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c7e:	459c      	cmp	ip, r3
 8009c80:	d8f9      	bhi.n	8009c76 <__lshift+0x9a>
 8009c82:	e7e4      	b.n	8009c4e <__lshift+0x72>

08009c84 <__mcmp>:
 8009c84:	6903      	ldr	r3, [r0, #16]
 8009c86:	690a      	ldr	r2, [r1, #16]
 8009c88:	1a9b      	subs	r3, r3, r2
 8009c8a:	b530      	push	{r4, r5, lr}
 8009c8c:	d10c      	bne.n	8009ca8 <__mcmp+0x24>
 8009c8e:	0092      	lsls	r2, r2, #2
 8009c90:	3014      	adds	r0, #20
 8009c92:	3114      	adds	r1, #20
 8009c94:	1884      	adds	r4, r0, r2
 8009c96:	4411      	add	r1, r2
 8009c98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ca0:	4295      	cmp	r5, r2
 8009ca2:	d003      	beq.n	8009cac <__mcmp+0x28>
 8009ca4:	d305      	bcc.n	8009cb2 <__mcmp+0x2e>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4618      	mov	r0, r3
 8009caa:	bd30      	pop	{r4, r5, pc}
 8009cac:	42a0      	cmp	r0, r4
 8009cae:	d3f3      	bcc.n	8009c98 <__mcmp+0x14>
 8009cb0:	e7fa      	b.n	8009ca8 <__mcmp+0x24>
 8009cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb6:	e7f7      	b.n	8009ca8 <__mcmp+0x24>

08009cb8 <__mdiff>:
 8009cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	460d      	mov	r5, r1
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	f7ff ffdd 	bl	8009c84 <__mcmp>
 8009cca:	1e06      	subs	r6, r0, #0
 8009ccc:	d108      	bne.n	8009ce0 <__mdiff+0x28>
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	f7ff fd84 	bl	80097de <_Balloc>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce0:	bfa4      	itt	ge
 8009ce2:	4623      	movge	r3, r4
 8009ce4:	462c      	movge	r4, r5
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	6861      	ldr	r1, [r4, #4]
 8009cea:	bfa6      	itte	ge
 8009cec:	461d      	movge	r5, r3
 8009cee:	2600      	movge	r6, #0
 8009cf0:	2601      	movlt	r6, #1
 8009cf2:	f7ff fd74 	bl	80097de <_Balloc>
 8009cf6:	692b      	ldr	r3, [r5, #16]
 8009cf8:	60c6      	str	r6, [r0, #12]
 8009cfa:	6926      	ldr	r6, [r4, #16]
 8009cfc:	f105 0914 	add.w	r9, r5, #20
 8009d00:	f104 0214 	add.w	r2, r4, #20
 8009d04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009d08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009d0c:	f100 0514 	add.w	r5, r0, #20
 8009d10:	f04f 0e00 	mov.w	lr, #0
 8009d14:	f852 ab04 	ldr.w	sl, [r2], #4
 8009d18:	f859 4b04 	ldr.w	r4, [r9], #4
 8009d1c:	fa1e f18a 	uxtah	r1, lr, sl
 8009d20:	b2a3      	uxth	r3, r4
 8009d22:	1ac9      	subs	r1, r1, r3
 8009d24:	0c23      	lsrs	r3, r4, #16
 8009d26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009d2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d2e:	b289      	uxth	r1, r1
 8009d30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009d34:	45c8      	cmp	r8, r9
 8009d36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009d3a:	4694      	mov	ip, r2
 8009d3c:	f845 3b04 	str.w	r3, [r5], #4
 8009d40:	d8e8      	bhi.n	8009d14 <__mdiff+0x5c>
 8009d42:	45bc      	cmp	ip, r7
 8009d44:	d304      	bcc.n	8009d50 <__mdiff+0x98>
 8009d46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009d4a:	b183      	cbz	r3, 8009d6e <__mdiff+0xb6>
 8009d4c:	6106      	str	r6, [r0, #16]
 8009d4e:	e7c5      	b.n	8009cdc <__mdiff+0x24>
 8009d50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d54:	fa1e f381 	uxtah	r3, lr, r1
 8009d58:	141a      	asrs	r2, r3, #16
 8009d5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009d68:	f845 3b04 	str.w	r3, [r5], #4
 8009d6c:	e7e9      	b.n	8009d42 <__mdiff+0x8a>
 8009d6e:	3e01      	subs	r6, #1
 8009d70:	e7e9      	b.n	8009d46 <__mdiff+0x8e>
	...

08009d74 <__ulp>:
 8009d74:	4b12      	ldr	r3, [pc, #72]	; (8009dc0 <__ulp+0x4c>)
 8009d76:	ee10 2a90 	vmov	r2, s1
 8009d7a:	401a      	ands	r2, r3
 8009d7c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	dd04      	ble.n	8009d8e <__ulp+0x1a>
 8009d84:	2000      	movs	r0, #0
 8009d86:	4619      	mov	r1, r3
 8009d88:	ec41 0b10 	vmov	d0, r0, r1
 8009d8c:	4770      	bx	lr
 8009d8e:	425b      	negs	r3, r3
 8009d90:	151b      	asrs	r3, r3, #20
 8009d92:	2b13      	cmp	r3, #19
 8009d94:	f04f 0000 	mov.w	r0, #0
 8009d98:	f04f 0100 	mov.w	r1, #0
 8009d9c:	dc04      	bgt.n	8009da8 <__ulp+0x34>
 8009d9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009da2:	fa42 f103 	asr.w	r1, r2, r3
 8009da6:	e7ef      	b.n	8009d88 <__ulp+0x14>
 8009da8:	3b14      	subs	r3, #20
 8009daa:	2b1e      	cmp	r3, #30
 8009dac:	f04f 0201 	mov.w	r2, #1
 8009db0:	bfda      	itte	le
 8009db2:	f1c3 031f 	rsble	r3, r3, #31
 8009db6:	fa02 f303 	lslle.w	r3, r2, r3
 8009dba:	4613      	movgt	r3, r2
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	e7e3      	b.n	8009d88 <__ulp+0x14>
 8009dc0:	7ff00000 	.word	0x7ff00000

08009dc4 <__b2d>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	6905      	ldr	r5, [r0, #16]
 8009dc8:	f100 0714 	add.w	r7, r0, #20
 8009dcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009dd0:	1f2e      	subs	r6, r5, #4
 8009dd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f7ff fdc5 	bl	8009966 <__hi0bits>
 8009ddc:	f1c0 0320 	rsb	r3, r0, #32
 8009de0:	280a      	cmp	r0, #10
 8009de2:	600b      	str	r3, [r1, #0]
 8009de4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009e5c <__b2d+0x98>
 8009de8:	dc14      	bgt.n	8009e14 <__b2d+0x50>
 8009dea:	f1c0 0e0b 	rsb	lr, r0, #11
 8009dee:	fa24 f10e 	lsr.w	r1, r4, lr
 8009df2:	42b7      	cmp	r7, r6
 8009df4:	ea41 030c 	orr.w	r3, r1, ip
 8009df8:	bf34      	ite	cc
 8009dfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009dfe:	2100      	movcs	r1, #0
 8009e00:	3015      	adds	r0, #21
 8009e02:	fa04 f000 	lsl.w	r0, r4, r0
 8009e06:	fa21 f10e 	lsr.w	r1, r1, lr
 8009e0a:	ea40 0201 	orr.w	r2, r0, r1
 8009e0e:	ec43 2b10 	vmov	d0, r2, r3
 8009e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e14:	42b7      	cmp	r7, r6
 8009e16:	bf3a      	itte	cc
 8009e18:	f1a5 0608 	subcc.w	r6, r5, #8
 8009e1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009e20:	2100      	movcs	r1, #0
 8009e22:	380b      	subs	r0, #11
 8009e24:	d015      	beq.n	8009e52 <__b2d+0x8e>
 8009e26:	4084      	lsls	r4, r0
 8009e28:	f1c0 0520 	rsb	r5, r0, #32
 8009e2c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009e30:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009e34:	42be      	cmp	r6, r7
 8009e36:	fa21 fc05 	lsr.w	ip, r1, r5
 8009e3a:	ea44 030c 	orr.w	r3, r4, ip
 8009e3e:	bf8c      	ite	hi
 8009e40:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009e44:	2400      	movls	r4, #0
 8009e46:	fa01 f000 	lsl.w	r0, r1, r0
 8009e4a:	40ec      	lsrs	r4, r5
 8009e4c:	ea40 0204 	orr.w	r2, r0, r4
 8009e50:	e7dd      	b.n	8009e0e <__b2d+0x4a>
 8009e52:	ea44 030c 	orr.w	r3, r4, ip
 8009e56:	460a      	mov	r2, r1
 8009e58:	e7d9      	b.n	8009e0e <__b2d+0x4a>
 8009e5a:	bf00      	nop
 8009e5c:	3ff00000 	.word	0x3ff00000

08009e60 <__d2b>:
 8009e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e64:	460e      	mov	r6, r1
 8009e66:	2101      	movs	r1, #1
 8009e68:	ec59 8b10 	vmov	r8, r9, d0
 8009e6c:	4615      	mov	r5, r2
 8009e6e:	f7ff fcb6 	bl	80097de <_Balloc>
 8009e72:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009e76:	4607      	mov	r7, r0
 8009e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e7c:	bb34      	cbnz	r4, 8009ecc <__d2b+0x6c>
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	f1b8 0300 	subs.w	r3, r8, #0
 8009e84:	d027      	beq.n	8009ed6 <__d2b+0x76>
 8009e86:	a802      	add	r0, sp, #8
 8009e88:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009e8c:	f7ff fd8a 	bl	80099a4 <__lo0bits>
 8009e90:	9900      	ldr	r1, [sp, #0]
 8009e92:	b1f0      	cbz	r0, 8009ed2 <__d2b+0x72>
 8009e94:	9a01      	ldr	r2, [sp, #4]
 8009e96:	f1c0 0320 	rsb	r3, r0, #32
 8009e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9e:	430b      	orrs	r3, r1
 8009ea0:	40c2      	lsrs	r2, r0
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	9201      	str	r2, [sp, #4]
 8009ea6:	9b01      	ldr	r3, [sp, #4]
 8009ea8:	61bb      	str	r3, [r7, #24]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	bf14      	ite	ne
 8009eae:	2102      	movne	r1, #2
 8009eb0:	2101      	moveq	r1, #1
 8009eb2:	6139      	str	r1, [r7, #16]
 8009eb4:	b1c4      	cbz	r4, 8009ee8 <__d2b+0x88>
 8009eb6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009eba:	4404      	add	r4, r0
 8009ebc:	6034      	str	r4, [r6, #0]
 8009ebe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ec2:	6028      	str	r0, [r5, #0]
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	b003      	add	sp, #12
 8009ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed0:	e7d5      	b.n	8009e7e <__d2b+0x1e>
 8009ed2:	6179      	str	r1, [r7, #20]
 8009ed4:	e7e7      	b.n	8009ea6 <__d2b+0x46>
 8009ed6:	a801      	add	r0, sp, #4
 8009ed8:	f7ff fd64 	bl	80099a4 <__lo0bits>
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	6139      	str	r1, [r7, #16]
 8009ee4:	3020      	adds	r0, #32
 8009ee6:	e7e5      	b.n	8009eb4 <__d2b+0x54>
 8009ee8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009eec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ef0:	6030      	str	r0, [r6, #0]
 8009ef2:	6918      	ldr	r0, [r3, #16]
 8009ef4:	f7ff fd37 	bl	8009966 <__hi0bits>
 8009ef8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009efc:	e7e1      	b.n	8009ec2 <__d2b+0x62>

08009efe <__ratio>:
 8009efe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f02:	4688      	mov	r8, r1
 8009f04:	4669      	mov	r1, sp
 8009f06:	4681      	mov	r9, r0
 8009f08:	f7ff ff5c 	bl	8009dc4 <__b2d>
 8009f0c:	a901      	add	r1, sp, #4
 8009f0e:	4640      	mov	r0, r8
 8009f10:	ec57 6b10 	vmov	r6, r7, d0
 8009f14:	f7ff ff56 	bl	8009dc4 <__b2d>
 8009f18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009f20:	eba3 0c02 	sub.w	ip, r3, r2
 8009f24:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009f28:	1a9b      	subs	r3, r3, r2
 8009f2a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009f2e:	ec5b ab10 	vmov	sl, fp, d0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bfce      	itee	gt
 8009f36:	463a      	movgt	r2, r7
 8009f38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f3c:	465a      	movle	r2, fp
 8009f3e:	4659      	mov	r1, fp
 8009f40:	463d      	mov	r5, r7
 8009f42:	bfd4      	ite	le
 8009f44:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009f48:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	ee10 2a10 	vmov	r2, s0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4629      	mov	r1, r5
 8009f56:	f7f6 fc81 	bl	800085c <__aeabi_ddiv>
 8009f5a:	ec41 0b10 	vmov	d0, r0, r1
 8009f5e:	b003      	add	sp, #12
 8009f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f64 <__copybits>:
 8009f64:	3901      	subs	r1, #1
 8009f66:	b510      	push	{r4, lr}
 8009f68:	1149      	asrs	r1, r1, #5
 8009f6a:	6914      	ldr	r4, [r2, #16]
 8009f6c:	3101      	adds	r1, #1
 8009f6e:	f102 0314 	add.w	r3, r2, #20
 8009f72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	d303      	bcc.n	8009f88 <__copybits+0x24>
 8009f80:	2300      	movs	r3, #0
 8009f82:	428a      	cmp	r2, r1
 8009f84:	d305      	bcc.n	8009f92 <__copybits+0x2e>
 8009f86:	bd10      	pop	{r4, pc}
 8009f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8c:	f840 2b04 	str.w	r2, [r0], #4
 8009f90:	e7f3      	b.n	8009f7a <__copybits+0x16>
 8009f92:	f842 3b04 	str.w	r3, [r2], #4
 8009f96:	e7f4      	b.n	8009f82 <__copybits+0x1e>

08009f98 <__any_on>:
 8009f98:	f100 0214 	add.w	r2, r0, #20
 8009f9c:	6900      	ldr	r0, [r0, #16]
 8009f9e:	114b      	asrs	r3, r1, #5
 8009fa0:	4298      	cmp	r0, r3
 8009fa2:	b510      	push	{r4, lr}
 8009fa4:	db11      	blt.n	8009fca <__any_on+0x32>
 8009fa6:	dd0a      	ble.n	8009fbe <__any_on+0x26>
 8009fa8:	f011 011f 	ands.w	r1, r1, #31
 8009fac:	d007      	beq.n	8009fbe <__any_on+0x26>
 8009fae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009fb2:	fa24 f001 	lsr.w	r0, r4, r1
 8009fb6:	fa00 f101 	lsl.w	r1, r0, r1
 8009fba:	428c      	cmp	r4, r1
 8009fbc:	d10b      	bne.n	8009fd6 <__any_on+0x3e>
 8009fbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d803      	bhi.n	8009fce <__any_on+0x36>
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	bd10      	pop	{r4, pc}
 8009fca:	4603      	mov	r3, r0
 8009fcc:	e7f7      	b.n	8009fbe <__any_on+0x26>
 8009fce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009fd2:	2900      	cmp	r1, #0
 8009fd4:	d0f5      	beq.n	8009fc2 <__any_on+0x2a>
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	e7f6      	b.n	8009fc8 <__any_on+0x30>

08009fda <_calloc_r>:
 8009fda:	b538      	push	{r3, r4, r5, lr}
 8009fdc:	fb02 f401 	mul.w	r4, r2, r1
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	f000 f857 	bl	800a094 <_malloc_r>
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	b118      	cbz	r0, 8009ff2 <_calloc_r+0x18>
 8009fea:	4622      	mov	r2, r4
 8009fec:	2100      	movs	r1, #0
 8009fee:	f7fc fd23 	bl	8006a38 <memset>
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
	...

08009ff8 <_free_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	d045      	beq.n	800a08c <_free_r+0x94>
 800a000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a004:	1f0c      	subs	r4, r1, #4
 800a006:	2b00      	cmp	r3, #0
 800a008:	bfb8      	it	lt
 800a00a:	18e4      	addlt	r4, r4, r3
 800a00c:	f000 fa36 	bl	800a47c <__malloc_lock>
 800a010:	4a1f      	ldr	r2, [pc, #124]	; (800a090 <_free_r+0x98>)
 800a012:	6813      	ldr	r3, [r2, #0]
 800a014:	4610      	mov	r0, r2
 800a016:	b933      	cbnz	r3, 800a026 <_free_r+0x2e>
 800a018:	6063      	str	r3, [r4, #4]
 800a01a:	6014      	str	r4, [r2, #0]
 800a01c:	4628      	mov	r0, r5
 800a01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a022:	f000 ba2c 	b.w	800a47e <__malloc_unlock>
 800a026:	42a3      	cmp	r3, r4
 800a028:	d90c      	bls.n	800a044 <_free_r+0x4c>
 800a02a:	6821      	ldr	r1, [r4, #0]
 800a02c:	1862      	adds	r2, r4, r1
 800a02e:	4293      	cmp	r3, r2
 800a030:	bf04      	itt	eq
 800a032:	681a      	ldreq	r2, [r3, #0]
 800a034:	685b      	ldreq	r3, [r3, #4]
 800a036:	6063      	str	r3, [r4, #4]
 800a038:	bf04      	itt	eq
 800a03a:	1852      	addeq	r2, r2, r1
 800a03c:	6022      	streq	r2, [r4, #0]
 800a03e:	6004      	str	r4, [r0, #0]
 800a040:	e7ec      	b.n	800a01c <_free_r+0x24>
 800a042:	4613      	mov	r3, r2
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	b10a      	cbz	r2, 800a04c <_free_r+0x54>
 800a048:	42a2      	cmp	r2, r4
 800a04a:	d9fa      	bls.n	800a042 <_free_r+0x4a>
 800a04c:	6819      	ldr	r1, [r3, #0]
 800a04e:	1858      	adds	r0, r3, r1
 800a050:	42a0      	cmp	r0, r4
 800a052:	d10b      	bne.n	800a06c <_free_r+0x74>
 800a054:	6820      	ldr	r0, [r4, #0]
 800a056:	4401      	add	r1, r0
 800a058:	1858      	adds	r0, r3, r1
 800a05a:	4282      	cmp	r2, r0
 800a05c:	6019      	str	r1, [r3, #0]
 800a05e:	d1dd      	bne.n	800a01c <_free_r+0x24>
 800a060:	6810      	ldr	r0, [r2, #0]
 800a062:	6852      	ldr	r2, [r2, #4]
 800a064:	605a      	str	r2, [r3, #4]
 800a066:	4401      	add	r1, r0
 800a068:	6019      	str	r1, [r3, #0]
 800a06a:	e7d7      	b.n	800a01c <_free_r+0x24>
 800a06c:	d902      	bls.n	800a074 <_free_r+0x7c>
 800a06e:	230c      	movs	r3, #12
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	e7d3      	b.n	800a01c <_free_r+0x24>
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	1821      	adds	r1, r4, r0
 800a078:	428a      	cmp	r2, r1
 800a07a:	bf04      	itt	eq
 800a07c:	6811      	ldreq	r1, [r2, #0]
 800a07e:	6852      	ldreq	r2, [r2, #4]
 800a080:	6062      	str	r2, [r4, #4]
 800a082:	bf04      	itt	eq
 800a084:	1809      	addeq	r1, r1, r0
 800a086:	6021      	streq	r1, [r4, #0]
 800a088:	605c      	str	r4, [r3, #4]
 800a08a:	e7c7      	b.n	800a01c <_free_r+0x24>
 800a08c:	bd38      	pop	{r3, r4, r5, pc}
 800a08e:	bf00      	nop
 800a090:	20000200 	.word	0x20000200

0800a094 <_malloc_r>:
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	1ccd      	adds	r5, r1, #3
 800a098:	f025 0503 	bic.w	r5, r5, #3
 800a09c:	3508      	adds	r5, #8
 800a09e:	2d0c      	cmp	r5, #12
 800a0a0:	bf38      	it	cc
 800a0a2:	250c      	movcc	r5, #12
 800a0a4:	2d00      	cmp	r5, #0
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	db01      	blt.n	800a0ae <_malloc_r+0x1a>
 800a0aa:	42a9      	cmp	r1, r5
 800a0ac:	d903      	bls.n	800a0b6 <_malloc_r+0x22>
 800a0ae:	230c      	movs	r3, #12
 800a0b0:	6033      	str	r3, [r6, #0]
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	bd70      	pop	{r4, r5, r6, pc}
 800a0b6:	f000 f9e1 	bl	800a47c <__malloc_lock>
 800a0ba:	4a21      	ldr	r2, [pc, #132]	; (800a140 <_malloc_r+0xac>)
 800a0bc:	6814      	ldr	r4, [r2, #0]
 800a0be:	4621      	mov	r1, r4
 800a0c0:	b991      	cbnz	r1, 800a0e8 <_malloc_r+0x54>
 800a0c2:	4c20      	ldr	r4, [pc, #128]	; (800a144 <_malloc_r+0xb0>)
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	b91b      	cbnz	r3, 800a0d0 <_malloc_r+0x3c>
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f000 f98f 	bl	800a3ec <_sbrk_r>
 800a0ce:	6020      	str	r0, [r4, #0]
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f000 f98a 	bl	800a3ec <_sbrk_r>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d124      	bne.n	800a126 <_malloc_r+0x92>
 800a0dc:	230c      	movs	r3, #12
 800a0de:	6033      	str	r3, [r6, #0]
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f000 f9cc 	bl	800a47e <__malloc_unlock>
 800a0e6:	e7e4      	b.n	800a0b2 <_malloc_r+0x1e>
 800a0e8:	680b      	ldr	r3, [r1, #0]
 800a0ea:	1b5b      	subs	r3, r3, r5
 800a0ec:	d418      	bmi.n	800a120 <_malloc_r+0x8c>
 800a0ee:	2b0b      	cmp	r3, #11
 800a0f0:	d90f      	bls.n	800a112 <_malloc_r+0x7e>
 800a0f2:	600b      	str	r3, [r1, #0]
 800a0f4:	50cd      	str	r5, [r1, r3]
 800a0f6:	18cc      	adds	r4, r1, r3
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f000 f9c0 	bl	800a47e <__malloc_unlock>
 800a0fe:	f104 000b 	add.w	r0, r4, #11
 800a102:	1d23      	adds	r3, r4, #4
 800a104:	f020 0007 	bic.w	r0, r0, #7
 800a108:	1ac3      	subs	r3, r0, r3
 800a10a:	d0d3      	beq.n	800a0b4 <_malloc_r+0x20>
 800a10c:	425a      	negs	r2, r3
 800a10e:	50e2      	str	r2, [r4, r3]
 800a110:	e7d0      	b.n	800a0b4 <_malloc_r+0x20>
 800a112:	428c      	cmp	r4, r1
 800a114:	684b      	ldr	r3, [r1, #4]
 800a116:	bf16      	itet	ne
 800a118:	6063      	strne	r3, [r4, #4]
 800a11a:	6013      	streq	r3, [r2, #0]
 800a11c:	460c      	movne	r4, r1
 800a11e:	e7eb      	b.n	800a0f8 <_malloc_r+0x64>
 800a120:	460c      	mov	r4, r1
 800a122:	6849      	ldr	r1, [r1, #4]
 800a124:	e7cc      	b.n	800a0c0 <_malloc_r+0x2c>
 800a126:	1cc4      	adds	r4, r0, #3
 800a128:	f024 0403 	bic.w	r4, r4, #3
 800a12c:	42a0      	cmp	r0, r4
 800a12e:	d005      	beq.n	800a13c <_malloc_r+0xa8>
 800a130:	1a21      	subs	r1, r4, r0
 800a132:	4630      	mov	r0, r6
 800a134:	f000 f95a 	bl	800a3ec <_sbrk_r>
 800a138:	3001      	adds	r0, #1
 800a13a:	d0cf      	beq.n	800a0dc <_malloc_r+0x48>
 800a13c:	6025      	str	r5, [r4, #0]
 800a13e:	e7db      	b.n	800a0f8 <_malloc_r+0x64>
 800a140:	20000200 	.word	0x20000200
 800a144:	20000204 	.word	0x20000204

0800a148 <__ssputs_r>:
 800a148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a14c:	688e      	ldr	r6, [r1, #8]
 800a14e:	429e      	cmp	r6, r3
 800a150:	4682      	mov	sl, r0
 800a152:	460c      	mov	r4, r1
 800a154:	4690      	mov	r8, r2
 800a156:	4699      	mov	r9, r3
 800a158:	d837      	bhi.n	800a1ca <__ssputs_r+0x82>
 800a15a:	898a      	ldrh	r2, [r1, #12]
 800a15c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a160:	d031      	beq.n	800a1c6 <__ssputs_r+0x7e>
 800a162:	6825      	ldr	r5, [r4, #0]
 800a164:	6909      	ldr	r1, [r1, #16]
 800a166:	1a6f      	subs	r7, r5, r1
 800a168:	6965      	ldr	r5, [r4, #20]
 800a16a:	2302      	movs	r3, #2
 800a16c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a170:	fb95 f5f3 	sdiv	r5, r5, r3
 800a174:	f109 0301 	add.w	r3, r9, #1
 800a178:	443b      	add	r3, r7
 800a17a:	429d      	cmp	r5, r3
 800a17c:	bf38      	it	cc
 800a17e:	461d      	movcc	r5, r3
 800a180:	0553      	lsls	r3, r2, #21
 800a182:	d530      	bpl.n	800a1e6 <__ssputs_r+0x9e>
 800a184:	4629      	mov	r1, r5
 800a186:	f7ff ff85 	bl	800a094 <_malloc_r>
 800a18a:	4606      	mov	r6, r0
 800a18c:	b950      	cbnz	r0, 800a1a4 <__ssputs_r+0x5c>
 800a18e:	230c      	movs	r3, #12
 800a190:	f8ca 3000 	str.w	r3, [sl]
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a4:	463a      	mov	r2, r7
 800a1a6:	6921      	ldr	r1, [r4, #16]
 800a1a8:	f7ff fb0e 	bl	80097c8 <memcpy>
 800a1ac:	89a3      	ldrh	r3, [r4, #12]
 800a1ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b6:	81a3      	strh	r3, [r4, #12]
 800a1b8:	6126      	str	r6, [r4, #16]
 800a1ba:	6165      	str	r5, [r4, #20]
 800a1bc:	443e      	add	r6, r7
 800a1be:	1bed      	subs	r5, r5, r7
 800a1c0:	6026      	str	r6, [r4, #0]
 800a1c2:	60a5      	str	r5, [r4, #8]
 800a1c4:	464e      	mov	r6, r9
 800a1c6:	454e      	cmp	r6, r9
 800a1c8:	d900      	bls.n	800a1cc <__ssputs_r+0x84>
 800a1ca:	464e      	mov	r6, r9
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	4641      	mov	r1, r8
 800a1d0:	6820      	ldr	r0, [r4, #0]
 800a1d2:	f000 f93a 	bl	800a44a <memmove>
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	1b9b      	subs	r3, r3, r6
 800a1da:	60a3      	str	r3, [r4, #8]
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	441e      	add	r6, r3
 800a1e0:	6026      	str	r6, [r4, #0]
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	e7dc      	b.n	800a1a0 <__ssputs_r+0x58>
 800a1e6:	462a      	mov	r2, r5
 800a1e8:	f000 f94a 	bl	800a480 <_realloc_r>
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d1e2      	bne.n	800a1b8 <__ssputs_r+0x70>
 800a1f2:	6921      	ldr	r1, [r4, #16]
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	f7ff feff 	bl	8009ff8 <_free_r>
 800a1fa:	e7c8      	b.n	800a18e <__ssputs_r+0x46>

0800a1fc <_svfiprintf_r>:
 800a1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a200:	461d      	mov	r5, r3
 800a202:	898b      	ldrh	r3, [r1, #12]
 800a204:	061f      	lsls	r7, r3, #24
 800a206:	b09d      	sub	sp, #116	; 0x74
 800a208:	4680      	mov	r8, r0
 800a20a:	460c      	mov	r4, r1
 800a20c:	4616      	mov	r6, r2
 800a20e:	d50f      	bpl.n	800a230 <_svfiprintf_r+0x34>
 800a210:	690b      	ldr	r3, [r1, #16]
 800a212:	b96b      	cbnz	r3, 800a230 <_svfiprintf_r+0x34>
 800a214:	2140      	movs	r1, #64	; 0x40
 800a216:	f7ff ff3d 	bl	800a094 <_malloc_r>
 800a21a:	6020      	str	r0, [r4, #0]
 800a21c:	6120      	str	r0, [r4, #16]
 800a21e:	b928      	cbnz	r0, 800a22c <_svfiprintf_r+0x30>
 800a220:	230c      	movs	r3, #12
 800a222:	f8c8 3000 	str.w	r3, [r8]
 800a226:	f04f 30ff 	mov.w	r0, #4294967295
 800a22a:	e0c8      	b.n	800a3be <_svfiprintf_r+0x1c2>
 800a22c:	2340      	movs	r3, #64	; 0x40
 800a22e:	6163      	str	r3, [r4, #20]
 800a230:	2300      	movs	r3, #0
 800a232:	9309      	str	r3, [sp, #36]	; 0x24
 800a234:	2320      	movs	r3, #32
 800a236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a23a:	2330      	movs	r3, #48	; 0x30
 800a23c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a240:	9503      	str	r5, [sp, #12]
 800a242:	f04f 0b01 	mov.w	fp, #1
 800a246:	4637      	mov	r7, r6
 800a248:	463d      	mov	r5, r7
 800a24a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a24e:	b10b      	cbz	r3, 800a254 <_svfiprintf_r+0x58>
 800a250:	2b25      	cmp	r3, #37	; 0x25
 800a252:	d13e      	bne.n	800a2d2 <_svfiprintf_r+0xd6>
 800a254:	ebb7 0a06 	subs.w	sl, r7, r6
 800a258:	d00b      	beq.n	800a272 <_svfiprintf_r+0x76>
 800a25a:	4653      	mov	r3, sl
 800a25c:	4632      	mov	r2, r6
 800a25e:	4621      	mov	r1, r4
 800a260:	4640      	mov	r0, r8
 800a262:	f7ff ff71 	bl	800a148 <__ssputs_r>
 800a266:	3001      	adds	r0, #1
 800a268:	f000 80a4 	beq.w	800a3b4 <_svfiprintf_r+0x1b8>
 800a26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26e:	4453      	add	r3, sl
 800a270:	9309      	str	r3, [sp, #36]	; 0x24
 800a272:	783b      	ldrb	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 809d 	beq.w	800a3b4 <_svfiprintf_r+0x1b8>
 800a27a:	2300      	movs	r3, #0
 800a27c:	f04f 32ff 	mov.w	r2, #4294967295
 800a280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	9307      	str	r3, [sp, #28]
 800a288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a28c:	931a      	str	r3, [sp, #104]	; 0x68
 800a28e:	462f      	mov	r7, r5
 800a290:	2205      	movs	r2, #5
 800a292:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a296:	4850      	ldr	r0, [pc, #320]	; (800a3d8 <_svfiprintf_r+0x1dc>)
 800a298:	f7f5 ffaa 	bl	80001f0 <memchr>
 800a29c:	9b04      	ldr	r3, [sp, #16]
 800a29e:	b9d0      	cbnz	r0, 800a2d6 <_svfiprintf_r+0xda>
 800a2a0:	06d9      	lsls	r1, r3, #27
 800a2a2:	bf44      	itt	mi
 800a2a4:	2220      	movmi	r2, #32
 800a2a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2aa:	071a      	lsls	r2, r3, #28
 800a2ac:	bf44      	itt	mi
 800a2ae:	222b      	movmi	r2, #43	; 0x2b
 800a2b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2b4:	782a      	ldrb	r2, [r5, #0]
 800a2b6:	2a2a      	cmp	r2, #42	; 0x2a
 800a2b8:	d015      	beq.n	800a2e6 <_svfiprintf_r+0xea>
 800a2ba:	9a07      	ldr	r2, [sp, #28]
 800a2bc:	462f      	mov	r7, r5
 800a2be:	2000      	movs	r0, #0
 800a2c0:	250a      	movs	r5, #10
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2c8:	3b30      	subs	r3, #48	; 0x30
 800a2ca:	2b09      	cmp	r3, #9
 800a2cc:	d94d      	bls.n	800a36a <_svfiprintf_r+0x16e>
 800a2ce:	b1b8      	cbz	r0, 800a300 <_svfiprintf_r+0x104>
 800a2d0:	e00f      	b.n	800a2f2 <_svfiprintf_r+0xf6>
 800a2d2:	462f      	mov	r7, r5
 800a2d4:	e7b8      	b.n	800a248 <_svfiprintf_r+0x4c>
 800a2d6:	4a40      	ldr	r2, [pc, #256]	; (800a3d8 <_svfiprintf_r+0x1dc>)
 800a2d8:	1a80      	subs	r0, r0, r2
 800a2da:	fa0b f000 	lsl.w	r0, fp, r0
 800a2de:	4318      	orrs	r0, r3
 800a2e0:	9004      	str	r0, [sp, #16]
 800a2e2:	463d      	mov	r5, r7
 800a2e4:	e7d3      	b.n	800a28e <_svfiprintf_r+0x92>
 800a2e6:	9a03      	ldr	r2, [sp, #12]
 800a2e8:	1d11      	adds	r1, r2, #4
 800a2ea:	6812      	ldr	r2, [r2, #0]
 800a2ec:	9103      	str	r1, [sp, #12]
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	db01      	blt.n	800a2f6 <_svfiprintf_r+0xfa>
 800a2f2:	9207      	str	r2, [sp, #28]
 800a2f4:	e004      	b.n	800a300 <_svfiprintf_r+0x104>
 800a2f6:	4252      	negs	r2, r2
 800a2f8:	f043 0302 	orr.w	r3, r3, #2
 800a2fc:	9207      	str	r2, [sp, #28]
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	783b      	ldrb	r3, [r7, #0]
 800a302:	2b2e      	cmp	r3, #46	; 0x2e
 800a304:	d10c      	bne.n	800a320 <_svfiprintf_r+0x124>
 800a306:	787b      	ldrb	r3, [r7, #1]
 800a308:	2b2a      	cmp	r3, #42	; 0x2a
 800a30a:	d133      	bne.n	800a374 <_svfiprintf_r+0x178>
 800a30c:	9b03      	ldr	r3, [sp, #12]
 800a30e:	1d1a      	adds	r2, r3, #4
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	9203      	str	r2, [sp, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	bfb8      	it	lt
 800a318:	f04f 33ff 	movlt.w	r3, #4294967295
 800a31c:	3702      	adds	r7, #2
 800a31e:	9305      	str	r3, [sp, #20]
 800a320:	4d2e      	ldr	r5, [pc, #184]	; (800a3dc <_svfiprintf_r+0x1e0>)
 800a322:	7839      	ldrb	r1, [r7, #0]
 800a324:	2203      	movs	r2, #3
 800a326:	4628      	mov	r0, r5
 800a328:	f7f5 ff62 	bl	80001f0 <memchr>
 800a32c:	b138      	cbz	r0, 800a33e <_svfiprintf_r+0x142>
 800a32e:	2340      	movs	r3, #64	; 0x40
 800a330:	1b40      	subs	r0, r0, r5
 800a332:	fa03 f000 	lsl.w	r0, r3, r0
 800a336:	9b04      	ldr	r3, [sp, #16]
 800a338:	4303      	orrs	r3, r0
 800a33a:	3701      	adds	r7, #1
 800a33c:	9304      	str	r3, [sp, #16]
 800a33e:	7839      	ldrb	r1, [r7, #0]
 800a340:	4827      	ldr	r0, [pc, #156]	; (800a3e0 <_svfiprintf_r+0x1e4>)
 800a342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a346:	2206      	movs	r2, #6
 800a348:	1c7e      	adds	r6, r7, #1
 800a34a:	f7f5 ff51 	bl	80001f0 <memchr>
 800a34e:	2800      	cmp	r0, #0
 800a350:	d038      	beq.n	800a3c4 <_svfiprintf_r+0x1c8>
 800a352:	4b24      	ldr	r3, [pc, #144]	; (800a3e4 <_svfiprintf_r+0x1e8>)
 800a354:	bb13      	cbnz	r3, 800a39c <_svfiprintf_r+0x1a0>
 800a356:	9b03      	ldr	r3, [sp, #12]
 800a358:	3307      	adds	r3, #7
 800a35a:	f023 0307 	bic.w	r3, r3, #7
 800a35e:	3308      	adds	r3, #8
 800a360:	9303      	str	r3, [sp, #12]
 800a362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a364:	444b      	add	r3, r9
 800a366:	9309      	str	r3, [sp, #36]	; 0x24
 800a368:	e76d      	b.n	800a246 <_svfiprintf_r+0x4a>
 800a36a:	fb05 3202 	mla	r2, r5, r2, r3
 800a36e:	2001      	movs	r0, #1
 800a370:	460f      	mov	r7, r1
 800a372:	e7a6      	b.n	800a2c2 <_svfiprintf_r+0xc6>
 800a374:	2300      	movs	r3, #0
 800a376:	3701      	adds	r7, #1
 800a378:	9305      	str	r3, [sp, #20]
 800a37a:	4619      	mov	r1, r3
 800a37c:	250a      	movs	r5, #10
 800a37e:	4638      	mov	r0, r7
 800a380:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a384:	3a30      	subs	r2, #48	; 0x30
 800a386:	2a09      	cmp	r2, #9
 800a388:	d903      	bls.n	800a392 <_svfiprintf_r+0x196>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d0c8      	beq.n	800a320 <_svfiprintf_r+0x124>
 800a38e:	9105      	str	r1, [sp, #20]
 800a390:	e7c6      	b.n	800a320 <_svfiprintf_r+0x124>
 800a392:	fb05 2101 	mla	r1, r5, r1, r2
 800a396:	2301      	movs	r3, #1
 800a398:	4607      	mov	r7, r0
 800a39a:	e7f0      	b.n	800a37e <_svfiprintf_r+0x182>
 800a39c:	ab03      	add	r3, sp, #12
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <_svfiprintf_r+0x1ec>)
 800a3a4:	a904      	add	r1, sp, #16
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	f7fc fbe2 	bl	8006b70 <_printf_float>
 800a3ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a3b0:	4681      	mov	r9, r0
 800a3b2:	d1d6      	bne.n	800a362 <_svfiprintf_r+0x166>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	065b      	lsls	r3, r3, #25
 800a3b8:	f53f af35 	bmi.w	800a226 <_svfiprintf_r+0x2a>
 800a3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3be:	b01d      	add	sp, #116	; 0x74
 800a3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c4:	ab03      	add	r3, sp, #12
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	4b07      	ldr	r3, [pc, #28]	; (800a3e8 <_svfiprintf_r+0x1ec>)
 800a3cc:	a904      	add	r1, sp, #16
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	f7fc fe84 	bl	80070dc <_printf_i>
 800a3d4:	e7ea      	b.n	800a3ac <_svfiprintf_r+0x1b0>
 800a3d6:	bf00      	nop
 800a3d8:	0800a6cc 	.word	0x0800a6cc
 800a3dc:	0800a6d2 	.word	0x0800a6d2
 800a3e0:	0800a6d6 	.word	0x0800a6d6
 800a3e4:	08006b71 	.word	0x08006b71
 800a3e8:	0800a149 	.word	0x0800a149

0800a3ec <_sbrk_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4c06      	ldr	r4, [pc, #24]	; (800a408 <_sbrk_r+0x1c>)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	f7fb ff6a 	bl	80062d0 <_sbrk>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	d102      	bne.n	800a406 <_sbrk_r+0x1a>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	b103      	cbz	r3, 800a406 <_sbrk_r+0x1a>
 800a404:	602b      	str	r3, [r5, #0]
 800a406:	bd38      	pop	{r3, r4, r5, pc}
 800a408:	200003d0 	.word	0x200003d0

0800a40c <strncmp>:
 800a40c:	b510      	push	{r4, lr}
 800a40e:	b16a      	cbz	r2, 800a42c <strncmp+0x20>
 800a410:	3901      	subs	r1, #1
 800a412:	1884      	adds	r4, r0, r2
 800a414:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a418:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d103      	bne.n	800a428 <strncmp+0x1c>
 800a420:	42a0      	cmp	r0, r4
 800a422:	d001      	beq.n	800a428 <strncmp+0x1c>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1f5      	bne.n	800a414 <strncmp+0x8>
 800a428:	1a98      	subs	r0, r3, r2
 800a42a:	bd10      	pop	{r4, pc}
 800a42c:	4610      	mov	r0, r2
 800a42e:	e7fc      	b.n	800a42a <strncmp+0x1e>

0800a430 <__ascii_wctomb>:
 800a430:	b149      	cbz	r1, 800a446 <__ascii_wctomb+0x16>
 800a432:	2aff      	cmp	r2, #255	; 0xff
 800a434:	bf85      	ittet	hi
 800a436:	238a      	movhi	r3, #138	; 0x8a
 800a438:	6003      	strhi	r3, [r0, #0]
 800a43a:	700a      	strbls	r2, [r1, #0]
 800a43c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a440:	bf98      	it	ls
 800a442:	2001      	movls	r0, #1
 800a444:	4770      	bx	lr
 800a446:	4608      	mov	r0, r1
 800a448:	4770      	bx	lr

0800a44a <memmove>:
 800a44a:	4288      	cmp	r0, r1
 800a44c:	b510      	push	{r4, lr}
 800a44e:	eb01 0302 	add.w	r3, r1, r2
 800a452:	d807      	bhi.n	800a464 <memmove+0x1a>
 800a454:	1e42      	subs	r2, r0, #1
 800a456:	4299      	cmp	r1, r3
 800a458:	d00a      	beq.n	800a470 <memmove+0x26>
 800a45a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a45e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a462:	e7f8      	b.n	800a456 <memmove+0xc>
 800a464:	4283      	cmp	r3, r0
 800a466:	d9f5      	bls.n	800a454 <memmove+0xa>
 800a468:	1881      	adds	r1, r0, r2
 800a46a:	1ad2      	subs	r2, r2, r3
 800a46c:	42d3      	cmn	r3, r2
 800a46e:	d100      	bne.n	800a472 <memmove+0x28>
 800a470:	bd10      	pop	{r4, pc}
 800a472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a476:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a47a:	e7f7      	b.n	800a46c <memmove+0x22>

0800a47c <__malloc_lock>:
 800a47c:	4770      	bx	lr

0800a47e <__malloc_unlock>:
 800a47e:	4770      	bx	lr

0800a480 <_realloc_r>:
 800a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a482:	4607      	mov	r7, r0
 800a484:	4614      	mov	r4, r2
 800a486:	460e      	mov	r6, r1
 800a488:	b921      	cbnz	r1, 800a494 <_realloc_r+0x14>
 800a48a:	4611      	mov	r1, r2
 800a48c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a490:	f7ff be00 	b.w	800a094 <_malloc_r>
 800a494:	b922      	cbnz	r2, 800a4a0 <_realloc_r+0x20>
 800a496:	f7ff fdaf 	bl	8009ff8 <_free_r>
 800a49a:	4625      	mov	r5, r4
 800a49c:	4628      	mov	r0, r5
 800a49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a0:	f000 f814 	bl	800a4cc <_malloc_usable_size_r>
 800a4a4:	42a0      	cmp	r0, r4
 800a4a6:	d20f      	bcs.n	800a4c8 <_realloc_r+0x48>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	f7ff fdf2 	bl	800a094 <_malloc_r>
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d0f2      	beq.n	800a49c <_realloc_r+0x1c>
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	4622      	mov	r2, r4
 800a4ba:	f7ff f985 	bl	80097c8 <memcpy>
 800a4be:	4631      	mov	r1, r6
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	f7ff fd99 	bl	8009ff8 <_free_r>
 800a4c6:	e7e9      	b.n	800a49c <_realloc_r+0x1c>
 800a4c8:	4635      	mov	r5, r6
 800a4ca:	e7e7      	b.n	800a49c <_realloc_r+0x1c>

0800a4cc <_malloc_usable_size_r>:
 800a4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d0:	1f18      	subs	r0, r3, #4
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	bfbc      	itt	lt
 800a4d6:	580b      	ldrlt	r3, [r1, r0]
 800a4d8:	18c0      	addlt	r0, r0, r3
 800a4da:	4770      	bx	lr

0800a4dc <_init>:
 800a4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4de:	bf00      	nop
 800a4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4e2:	bc08      	pop	{r3}
 800a4e4:	469e      	mov	lr, r3
 800a4e6:	4770      	bx	lr

0800a4e8 <_fini>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	bf00      	nop
 800a4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ee:	bc08      	pop	{r3}
 800a4f0:	469e      	mov	lr, r3
 800a4f2:	4770      	bx	lr
