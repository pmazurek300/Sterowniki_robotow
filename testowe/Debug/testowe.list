
testowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000905c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08009200  08009200  00019200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e0  080094e0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080094e0  080094e0  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e8  080094e8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094ec  080094ec  000194ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080094f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001dc  080096cc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  080096cc  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd6b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f0b  00000000  00000000  0002cf77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b28  00000000  00000000  0002fac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016dc4  00000000  00000000  000305f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a24d  00000000  00000000  000473b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d1e3  00000000  00000000  00051601  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de7e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f70  00000000  00000000  000de860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091e4 	.word	0x080091e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080091e4 	.word	0x080091e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f92b 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f003 fff8 	bl	8004fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f943 	bl	8001286 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f90b 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	20000204 	.word	0x20000204

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000204 	.word	0x20000204

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff feda 	bl	8001064 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e099      	b.n	80013f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012dc:	e00f      	b.n	80012fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012de:	f7ff fec1 	bl	8001064 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d908      	bls.n	80012fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e078      	b.n	80013f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e8      	bne.n	80012de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_DMA_Init+0x158>)
 8001318:	4013      	ands	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800132a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2b04      	cmp	r3, #4
 8001356:	d107      	bne.n	8001368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4313      	orrs	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f023 0307 	bic.w	r3, r3, #7
 800137e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4313      	orrs	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	2b04      	cmp	r3, #4
 8001390:	d117      	bne.n	80013c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fa91 	bl	80018cc <DMA_CheckFifoParam>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013be:	2301      	movs	r3, #1
 80013c0:	e016      	b.n	80013f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fa48 	bl	8001860 <DMA_CalcBaseAndBitshift>
 80013d0:	4603      	mov	r3, r0
 80013d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	223f      	movs	r2, #63	; 0x3f
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	f010803f 	.word	0xf010803f

080013fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Start_IT+0x26>
 800141e:	2302      	movs	r3, #2
 8001420:	e040      	b.n	80014a4 <HAL_DMA_Start_IT+0xa8>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12f      	bne.n	8001496 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2202      	movs	r2, #2
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f9da 	bl	8001804 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	223f      	movs	r2, #63	; 0x3f
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0216 	orr.w	r2, r2, #22
 800146a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e005      	b.n	80014a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800149e:	2302      	movs	r3, #2
 80014a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d004      	beq.n	80014ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00c      	b.n	80014e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2205      	movs	r2, #5
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_DMA_IRQHandler+0x258>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a92      	ldr	r2, [pc, #584]	; (800174c <HAL_DMA_IRQHandler+0x25c>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0a9b      	lsrs	r3, r3, #10
 8001508:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	2208      	movs	r2, #8
 800151c:	409a      	lsls	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01a      	beq.n	800155c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0204 	bic.w	r2, r2, #4
 8001542:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	2208      	movs	r2, #8
 800154a:	409a      	lsls	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	2201      	movs	r2, #1
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d012      	beq.n	8001592 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2201      	movs	r2, #1
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	f043 0202 	orr.w	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001596:	2204      	movs	r2, #4
 8001598:	409a      	lsls	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d012      	beq.n	80015c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2204      	movs	r2, #4
 80015b6:	409a      	lsls	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	f043 0204 	orr.w	r2, r3, #4
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2210      	movs	r2, #16
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d043      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d03c      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	2210      	movs	r2, #16
 80015ec:	409a      	lsls	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d018      	beq.n	8001632 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	d024      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
 800161e:	e01f      	b.n	8001660 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01b      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
 8001630:	e016      	b.n	8001660 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0208 	bic.w	r2, r2, #8
 800164e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001664:	2220      	movs	r2, #32
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 808e 	beq.w	800178e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8086 	beq.w	800178e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	2220      	movs	r2, #32
 8001688:	409a      	lsls	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b05      	cmp	r3, #5
 8001698:	d136      	bne.n	8001708 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0216 	bic.w	r2, r2, #22
 80016a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <HAL_DMA_IRQHandler+0x1da>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0208 	bic.w	r2, r2, #8
 80016d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	223f      	movs	r2, #63	; 0x3f
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d07d      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
        }
        return;
 8001706:	e078      	b.n	80017fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01c      	beq.n	8001750 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d108      	bne.n	8001736 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	2b00      	cmp	r3, #0
 800172a:	d030      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
 8001734:	e02b      	b.n	800178e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d027      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4798      	blx	r3
 8001746:	e022      	b.n	800178e <HAL_DMA_IRQHandler+0x29e>
 8001748:	20000008 	.word	0x20000008
 800174c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10f      	bne.n	800177e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0210 	bic.w	r2, r2, #16
 800176c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	2b00      	cmp	r3, #0
 8001794:	d032      	beq.n	80017fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d022      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2205      	movs	r2, #5
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d307      	bcc.n	80017d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f2      	bne.n	80017ba <HAL_DMA_IRQHandler+0x2ca>
 80017d4:	e000      	b.n	80017d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
 80017f8:	e000      	b.n	80017fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80017fa:	bf00      	nop
    }
  }
}
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop

08001804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001820:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d108      	bne.n	8001844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001842:	e007      	b.n	8001854 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3b10      	subs	r3, #16
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <DMA_CalcBaseAndBitshift+0x68>)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d909      	bls.n	80018a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	1d1a      	adds	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	659a      	str	r2, [r3, #88]	; 0x58
 80018a0:	e007      	b.n	80018b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	aaaaaaab 	.word	0xaaaaaaab
 80018c8:	08009208 	.word	0x08009208

080018cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d11f      	bne.n	8001926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d855      	bhi.n	8001998 <DMA_CheckFifoParam+0xcc>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <DMA_CheckFifoParam+0x28>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001917 	.word	0x08001917
 80018fc:	08001905 	.word	0x08001905
 8001900:	08001999 	.word	0x08001999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d045      	beq.n	800199c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001914:	e042      	b.n	800199c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800191e:	d13f      	bne.n	80019a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001924:	e03c      	b.n	80019a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192e:	d121      	bne.n	8001974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d836      	bhi.n	80019a4 <DMA_CheckFifoParam+0xd8>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <DMA_CheckFifoParam+0x70>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001953 	.word	0x08001953
 8001944:	0800194d 	.word	0x0800194d
 8001948:	08001965 	.word	0x08001965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
      break;
 8001950:	e02f      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d024      	beq.n	80019a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001962:	e021      	b.n	80019a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800196c:	d11e      	bne.n	80019ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001972:	e01b      	b.n	80019ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d902      	bls.n	8001980 <DMA_CheckFifoParam+0xb4>
 800197a:	2b03      	cmp	r3, #3
 800197c:	d003      	beq.n	8001986 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800197e:	e018      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
      break;
 8001984:	e015      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
      break;
 8001996:	e00b      	b.n	80019b0 <DMA_CheckFifoParam+0xe4>
      break;
 8001998:	bf00      	nop
 800199a:	e00a      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 800199c:	bf00      	nop
 800199e:	e008      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a0:	bf00      	nop
 80019a2:	e006      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a4:	bf00      	nop
 80019a6:	e004      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a8:	bf00      	nop
 80019aa:	e002      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80019ac:	bf00      	nop
 80019ae:	e000      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019b0:	bf00      	nop
    }
  } 
  
  return status; 
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e159      	b.n	8001c90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8148 	bne.w	8001c8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d00b      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0e:	2b11      	cmp	r3, #17
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0xfc>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a2 	beq.w	8001c8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a55      	ldr	r2, [pc, #340]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b62:	4a51      	ldr	r2, [pc, #324]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_GPIO_Init+0x2ec>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x202>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x1fe>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <HAL_GPIO_Init+0x2f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x1f6>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a44      	ldr	r2, [pc, #272]	; (8001cbc <HAL_GPIO_Init+0x2fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x1f2>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd4:	4934      	ldr	r1, [pc, #208]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f aea2 	bls.w	80019dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3724      	adds	r7, #36	; 0x24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e25b      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d075      	beq.n	8001e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d16:	4ba3      	ldr	r3, [pc, #652]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d00c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4ba0      	ldr	r3, [pc, #640]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d112      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2e:	4b9d      	ldr	r3, [pc, #628]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3a:	d10b      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4b99      	ldr	r3, [pc, #612]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d05b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x108>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d157      	bne.n	8001e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e236      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x74>
 8001d5e:	4b91      	ldr	r3, [pc, #580]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a90      	ldr	r2, [pc, #576]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a8a      	ldr	r2, [pc, #552]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a87      	ldr	r2, [pc, #540]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d90:	4b84      	ldr	r3, [pc, #528]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a83      	ldr	r2, [pc, #524]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b81      	ldr	r3, [pc, #516]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a80      	ldr	r2, [pc, #512]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff f958 	bl	8001064 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff f954 	bl	8001064 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1fb      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xc0>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f944 	bl	8001064 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff f940 	bl	8001064 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1e7      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0xe8>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d063      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0e:	4b65      	ldr	r3, [pc, #404]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d11c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1bb      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4952      	ldr	r1, [pc, #328]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	e03a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_RCC_OscConfig+0x2b0>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f8f9 	bl	8001064 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff f8f5 	bl	8001064 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e19c      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4940      	ldr	r1, [pc, #256]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_OscConfig+0x2b0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f8d8 	bl	8001064 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff f8d4 	bl	8001064 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e17b      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d030      	beq.n	8001f44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_RCC_OscConfig+0x2b4>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f8b8 	bl	8001064 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7ff f8b4 	bl	8001064 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e15b      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x200>
 8001f16:	e015      	b.n	8001f44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x2b4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f8a1 	bl	8001064 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff f89d 	bl	8001064 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e144      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a0 	beq.w	8002092 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x2b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d121      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_RCC_OscConfig+0x2b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_RCC_OscConfig+0x2b8>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7ff f863 	bl	8001064 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e011      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2ce>
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	42470000 	.word	0x42470000
 8001fac:	42470e80 	.word	0x42470e80
 8001fb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb4:	f7ff f856 	bl	8001064 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0fd      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc6:	4b81      	ldr	r3, [pc, #516]	; (80021cc <HAL_RCC_OscConfig+0x4d4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
 8001fda:	4b7d      	ldr	r3, [pc, #500]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a7c      	ldr	r2, [pc, #496]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe6:	e01c      	b.n	8002022 <HAL_RCC_OscConfig+0x32a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_OscConfig+0x312>
 8001ff0:	4b77      	ldr	r3, [pc, #476]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a76      	ldr	r2, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffc:	4b74      	ldr	r3, [pc, #464]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a73      	ldr	r2, [pc, #460]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	e00b      	b.n	8002022 <HAL_RCC_OscConfig+0x32a>
 800200a:	4b71      	ldr	r3, [pc, #452]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	4a70      	ldr	r2, [pc, #448]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6713      	str	r3, [r2, #112]	; 0x70
 8002016:	4b6e      	ldr	r3, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a6d      	ldr	r2, [pc, #436]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 800201c:	f023 0304 	bic.w	r3, r3, #4
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d015      	beq.n	8002056 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7ff f81b 	bl	8001064 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7ff f817 	bl	8001064 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0bc      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	4b61      	ldr	r3, [pc, #388]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ee      	beq.n	8002032 <HAL_RCC_OscConfig+0x33a>
 8002054:	e014      	b.n	8002080 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7ff f805 	bl	8001064 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff f801 	bl	8001064 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0a6      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	4b56      	ldr	r3, [pc, #344]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ee      	bne.n	800205e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d105      	bne.n	8002092 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002086:	4b52      	ldr	r3, [pc, #328]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a51      	ldr	r2, [pc, #324]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8092 	beq.w	80021c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d05c      	beq.n	8002162 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d141      	bne.n	8002134 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b48      	ldr	r3, [pc, #288]	; (80021d4 <HAL_RCC_OscConfig+0x4dc>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7fe ffd5 	bl	8001064 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020be:	f7fe ffd1 	bl	8001064 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e078      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d0:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f0      	bne.n	80020be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	019b      	lsls	r3, r3, #6
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	3b01      	subs	r3, #1
 80020f6:	041b      	lsls	r3, r3, #16
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	061b      	lsls	r3, r3, #24
 8002100:	4933      	ldr	r1, [pc, #204]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_RCC_OscConfig+0x4dc>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe ffaa 	bl	8001064 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002114:	f7fe ffa6 	bl	8001064 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e04d      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x41c>
 8002132:	e045      	b.n	80021c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x4dc>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7fe ff93 	bl	8001064 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe ff8f 	bl	8001064 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e036      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x44a>
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e029      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_RCC_OscConfig+0x4d8>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	429a      	cmp	r2, r3
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d115      	bne.n	80021bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002196:	4013      	ands	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219c:	4293      	cmp	r3, r2
 800219e:	d10d      	bne.n	80021bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d106      	bne.n	80021bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40007000 	.word	0x40007000
 80021d0:	40023800 	.word	0x40023800
 80021d4:	42470060 	.word	0x42470060

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0cc      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ec:	4b68      	ldr	r3, [pc, #416]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d90c      	bls.n	8002214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fa:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002202:	4b63      	ldr	r3, [pc, #396]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0b8      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800222c:	4b59      	ldr	r3, [pc, #356]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a58      	ldr	r2, [pc, #352]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002236:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002244:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a52      	ldr	r2, [pc, #328]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800224e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	494d      	ldr	r1, [pc, #308]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d044      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d119      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e07f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d003      	beq.n	8002296 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002292:	2b03      	cmp	r3, #3
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e067      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f023 0203 	bic.w	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4934      	ldr	r1, [pc, #208]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fecc 	bl	8001064 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe fec8 	bl	8001064 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e04f      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 020c 	and.w	r2, r3, #12
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1eb      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d20c      	bcs.n	8002320 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e032      	b.n	8002386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4916      	ldr	r1, [pc, #88]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d009      	beq.n	800235e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	490e      	ldr	r1, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800235e:	f000 f821 	bl	80023a4 <HAL_RCC_GetSysClockFreq>
 8002362:	4601      	mov	r1, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	fa21 f303 	lsr.w	r3, r1, r3
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fe2c 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023c00 	.word	0x40023c00
 8002394:	40023800 	.word	0x40023800
 8002398:	08009210 	.word	0x08009210
 800239c:	20000008 	.word	0x20000008
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d007      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x32>
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d008      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x38>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 80b4 	bne.w	8002538 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023d0:	4b5e      	ldr	r3, [pc, #376]	; (800254c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023d2:	60bb      	str	r3, [r7, #8]
       break;
 80023d4:	e0b3      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023d6:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80023d8:	60bb      	str	r3, [r7, #8]
      break;
 80023da:	e0b0      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023dc:	4b5a      	ldr	r3, [pc, #360]	; (8002548 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e6:	4b58      	ldr	r3, [pc, #352]	; (8002548 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d04a      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f2:	4b55      	ldr	r3, [pc, #340]	; (8002548 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	f04f 0400 	mov.w	r4, #0
 80023fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	ea03 0501 	and.w	r5, r3, r1
 8002408:	ea04 0602 	and.w	r6, r4, r2
 800240c:	4629      	mov	r1, r5
 800240e:	4632      	mov	r2, r6
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	f04f 0400 	mov.w	r4, #0
 8002418:	0154      	lsls	r4, r2, #5
 800241a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800241e:	014b      	lsls	r3, r1, #5
 8002420:	4619      	mov	r1, r3
 8002422:	4622      	mov	r2, r4
 8002424:	1b49      	subs	r1, r1, r5
 8002426:	eb62 0206 	sbc.w	r2, r2, r6
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f04f 0400 	mov.w	r4, #0
 8002432:	0194      	lsls	r4, r2, #6
 8002434:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002438:	018b      	lsls	r3, r1, #6
 800243a:	1a5b      	subs	r3, r3, r1
 800243c:	eb64 0402 	sbc.w	r4, r4, r2
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	00e2      	lsls	r2, r4, #3
 800244a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800244e:	00d9      	lsls	r1, r3, #3
 8002450:	460b      	mov	r3, r1
 8002452:	4614      	mov	r4, r2
 8002454:	195b      	adds	r3, r3, r5
 8002456:	eb44 0406 	adc.w	r4, r4, r6
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	0262      	lsls	r2, r4, #9
 8002464:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002468:	0259      	lsls	r1, r3, #9
 800246a:	460b      	mov	r3, r1
 800246c:	4614      	mov	r4, r2
 800246e:	4618      	mov	r0, r3
 8002470:	4621      	mov	r1, r4
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f04f 0400 	mov.w	r4, #0
 8002478:	461a      	mov	r2, r3
 800247a:	4623      	mov	r3, r4
 800247c:	f7fe fc0c 	bl	8000c98 <__aeabi_uldivmod>
 8002480:	4603      	mov	r3, r0
 8002482:	460c      	mov	r4, r1
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e049      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	099b      	lsrs	r3, r3, #6
 800248e:	f04f 0400 	mov.w	r4, #0
 8002492:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	ea03 0501 	and.w	r5, r3, r1
 800249e:	ea04 0602 	and.w	r6, r4, r2
 80024a2:	4629      	mov	r1, r5
 80024a4:	4632      	mov	r2, r6
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	f04f 0400 	mov.w	r4, #0
 80024ae:	0154      	lsls	r4, r2, #5
 80024b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024b4:	014b      	lsls	r3, r1, #5
 80024b6:	4619      	mov	r1, r3
 80024b8:	4622      	mov	r2, r4
 80024ba:	1b49      	subs	r1, r1, r5
 80024bc:	eb62 0206 	sbc.w	r2, r2, r6
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	f04f 0400 	mov.w	r4, #0
 80024c8:	0194      	lsls	r4, r2, #6
 80024ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024ce:	018b      	lsls	r3, r1, #6
 80024d0:	1a5b      	subs	r3, r3, r1
 80024d2:	eb64 0402 	sbc.w	r4, r4, r2
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	00e2      	lsls	r2, r4, #3
 80024e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024e4:	00d9      	lsls	r1, r3, #3
 80024e6:	460b      	mov	r3, r1
 80024e8:	4614      	mov	r4, r2
 80024ea:	195b      	adds	r3, r3, r5
 80024ec:	eb44 0406 	adc.w	r4, r4, r6
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	02a2      	lsls	r2, r4, #10
 80024fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024fe:	0299      	lsls	r1, r3, #10
 8002500:	460b      	mov	r3, r1
 8002502:	4614      	mov	r4, r2
 8002504:	4618      	mov	r0, r3
 8002506:	4621      	mov	r1, r4
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f04f 0400 	mov.w	r4, #0
 800250e:	461a      	mov	r2, r3
 8002510:	4623      	mov	r3, r4
 8002512:	f7fe fbc1 	bl	8000c98 <__aeabi_uldivmod>
 8002516:	4603      	mov	r3, r0
 8002518:	460c      	mov	r4, r1
 800251a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800251c:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	0c1b      	lsrs	r3, r3, #16
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	3301      	adds	r3, #1
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	fbb2 f3f3 	udiv	r3, r2, r3
 8002534:	60bb      	str	r3, [r7, #8]
      break;
 8002536:	e002      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800253a:	60bb      	str	r3, [r7, #8]
      break;
 800253c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253e:	68bb      	ldr	r3, [r7, #8]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002548:	40023800 	.word	0x40023800
 800254c:	00f42400 	.word	0x00f42400
 8002550:	007a1200 	.word	0x007a1200

08002554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_RCC_GetHCLKFreq+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000008 	.word	0x20000008

0800256c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002570:	f7ff fff0 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002574:	4601      	mov	r1, r0
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0a9b      	lsrs	r3, r3, #10
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4a03      	ldr	r2, [pc, #12]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	08009220 	.word	0x08009220

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002598:	f7ff ffdc 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 800259c:	4601      	mov	r1, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0b5b      	lsrs	r3, r3, #13
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4a03      	ldr	r2, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08009220 	.word	0x08009220

080025bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e01d      	b.n	800260a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f002 fed8 	bl	8005398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2202      	movs	r2, #2
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3304      	adds	r3, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4610      	mov	r0, r2
 80025fc:	f000 fc9e 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d007      	beq.n	8002644 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e01d      	b.n	80026a8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f815 	bl	80026b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	4619      	mov	r1, r3
 8002698:	4610      	mov	r0, r2
 800269a:	f000 fc4f 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2201      	movs	r2, #1
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fff4 	bl	80036c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a10      	ldr	r2, [pc, #64]	; (8002724 <HAL_TIM_PWM_Start+0x60>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d107      	bne.n	80026f6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b06      	cmp	r3, #6
 8002706:	d007      	beq.n	8002718 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40010000 	.word	0x40010000

08002728 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e01d      	b.n	8002776 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f815 	bl	800277e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3304      	adds	r3, #4
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f000 fbe8 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2201      	movs	r2, #1
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 ff8d 	bl	80036c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d007      	beq.n	80027cc <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d841      	bhi.n	800286c <HAL_TIM_IC_Start_IT+0x94>
 80027e8:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <HAL_TIM_IC_Start_IT+0x18>)
 80027ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ee:	bf00      	nop
 80027f0:	08002825 	.word	0x08002825
 80027f4:	0800286d 	.word	0x0800286d
 80027f8:	0800286d 	.word	0x0800286d
 80027fc:	0800286d 	.word	0x0800286d
 8002800:	08002837 	.word	0x08002837
 8002804:	0800286d 	.word	0x0800286d
 8002808:	0800286d 	.word	0x0800286d
 800280c:	0800286d 	.word	0x0800286d
 8002810:	08002849 	.word	0x08002849
 8002814:	0800286d 	.word	0x0800286d
 8002818:	0800286d 	.word	0x0800286d
 800281c:	0800286d 	.word	0x0800286d
 8002820:	0800285b 	.word	0x0800285b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0202 	orr.w	r2, r2, #2
 8002832:	60da      	str	r2, [r3, #12]
      break;
 8002834:	e01b      	b.n	800286e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0204 	orr.w	r2, r2, #4
 8002844:	60da      	str	r2, [r3, #12]
      break;
 8002846:	e012      	b.n	800286e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	60da      	str	r2, [r3, #12]
      break;
 8002858:	e009      	b.n	800286e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0210 	orr.w	r2, r2, #16
 8002868:	60da      	str	r2, [r3, #12]
      break;
 800286a:	e000      	b.n	800286e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800286c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2201      	movs	r2, #1
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 ff24 	bl	80036c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d007      	beq.n	800289e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d122      	bne.n	8002904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d11b      	bne.n	8002904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0202 	mvn.w	r2, #2
 80028d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f002 f920 	bl	8004b30 <HAL_TIM_IC_CaptureCallback>
 80028f0:	e005      	b.n	80028fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fb03 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fb0a 	bl	8002f12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d122      	bne.n	8002958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b04      	cmp	r3, #4
 800291e:	d11b      	bne.n	8002958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0204 	mvn.w	r2, #4
 8002928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2202      	movs	r2, #2
 800292e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f002 f8f6 	bl	8004b30 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fad9 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fae0 	bl	8002f12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d122      	bne.n	80029ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b08      	cmp	r3, #8
 8002972:	d11b      	bne.n	80029ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0208 	mvn.w	r2, #8
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f002 f8cc 	bl	8004b30 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 faaf 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fab6 	bl	8002f12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d122      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d11b      	bne.n	8002a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0210 	mvn.w	r2, #16
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2208      	movs	r2, #8
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f002 f8a2 	bl	8004b30 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa85 	bl	8002efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fa8c 	bl	8002f12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d10e      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0201 	mvn.w	r2, #1
 8002a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa5f 	bl	8002eea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	d10e      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d107      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fed4 	bl	8003800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d107      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fa51 	bl	8002f26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d10e      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d107      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0220 	mvn.w	r2, #32
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fe9e 	bl	80037ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e08a      	b.n	8002be8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d11b      	bne.n	8002b20 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f000 fc2c 	bl	8003354 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 020c 	bic.w	r2, r2, #12
 8002b0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6999      	ldr	r1, [r3, #24]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	619a      	str	r2, [r3, #24]
 8002b1e:	e05a      	b.n	8002bd6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d11c      	bne.n	8002b60 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6819      	ldr	r1, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f000 fca4 	bl	8003482 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6999      	ldr	r1, [r3, #24]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	021a      	lsls	r2, r3, #8
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	e03a      	b.n	8002bd6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11b      	bne.n	8002b9e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f000 fcf1 	bl	800355c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69da      	ldr	r2, [r3, #28]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 020c 	bic.w	r2, r2, #12
 8002b88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69d9      	ldr	r1, [r3, #28]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	61da      	str	r2, [r3, #28]
 8002b9c:	e01b      	b.n	8002bd6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f000 fd11 	bl	80035d4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bc0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	021a      	lsls	r2, r3, #8
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e0b4      	b.n	8002d74 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	f200 809f 	bhi.w	8002d60 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c5d 	.word	0x08002c5d
 8002c2c:	08002d61 	.word	0x08002d61
 8002c30:	08002d61 	.word	0x08002d61
 8002c34:	08002d61 	.word	0x08002d61
 8002c38:	08002c9d 	.word	0x08002c9d
 8002c3c:	08002d61 	.word	0x08002d61
 8002c40:	08002d61 	.word	0x08002d61
 8002c44:	08002d61 	.word	0x08002d61
 8002c48:	08002cdf 	.word	0x08002cdf
 8002c4c:	08002d61 	.word	0x08002d61
 8002c50:	08002d61 	.word	0x08002d61
 8002c54:	08002d61 	.word	0x08002d61
 8002c58:	08002d1f 	.word	0x08002d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f9ea 	bl	800303c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0208 	orr.w	r2, r2, #8
 8002c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0204 	bic.w	r2, r2, #4
 8002c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6999      	ldr	r1, [r3, #24]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	619a      	str	r2, [r3, #24]
      break;
 8002c9a:	e062      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fa30 	bl	8003108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6999      	ldr	r1, [r3, #24]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	021a      	lsls	r2, r3, #8
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]
      break;
 8002cdc:	e041      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fa7b 	bl	80031e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0208 	orr.w	r2, r2, #8
 8002cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0204 	bic.w	r2, r2, #4
 8002d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69d9      	ldr	r1, [r3, #28]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	61da      	str	r2, [r3, #28]
      break;
 8002d1c:	e021      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fac5 	bl	80032b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69d9      	ldr	r1, [r3, #28]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	021a      	lsls	r2, r3, #8
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	61da      	str	r2, [r3, #28]
      break;
 8002d5e:	e000      	b.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002d60:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_TIM_ConfigClockSource+0x18>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e0a6      	b.n	8002ee2 <HAL_TIM_ConfigClockSource+0x166>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b40      	cmp	r3, #64	; 0x40
 8002dca:	d067      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0x120>
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d80b      	bhi.n	8002de8 <HAL_TIM_ConfigClockSource+0x6c>
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d073      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0x140>
 8002dd4:	2b10      	cmp	r3, #16
 8002dd6:	d802      	bhi.n	8002dde <HAL_TIM_ConfigClockSource+0x62>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d06f      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ddc:	e078      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	d06c      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0x140>
 8002de2:	2b30      	cmp	r3, #48	; 0x30
 8002de4:	d06a      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002de6:	e073      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002de8:	2b70      	cmp	r3, #112	; 0x70
 8002dea:	d00d      	beq.n	8002e08 <HAL_TIM_ConfigClockSource+0x8c>
 8002dec:	2b70      	cmp	r3, #112	; 0x70
 8002dee:	d804      	bhi.n	8002dfa <HAL_TIM_ConfigClockSource+0x7e>
 8002df0:	2b50      	cmp	r3, #80	; 0x50
 8002df2:	d033      	beq.n	8002e5c <HAL_TIM_ConfigClockSource+0xe0>
 8002df4:	2b60      	cmp	r3, #96	; 0x60
 8002df6:	d041      	beq.n	8002e7c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002df8:	e06a      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	d066      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x152>
 8002e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e04:	d017      	beq.n	8002e36 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002e06:	e063      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f000 fc34 	bl	8003684 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e2a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	609a      	str	r2, [r3, #8]
      break;
 8002e34:	e04c      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f000 fc1d 	bl	8003684 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e58:	609a      	str	r2, [r3, #8]
      break;
 8002e5a:	e039      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f000 fadb 	bl	8003424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2150      	movs	r1, #80	; 0x50
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fbea 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 8002e7a:	e029      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f000 fb37 	bl	80034fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2160      	movs	r1, #96	; 0x60
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fbda 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 8002e9a:	e019      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f000 fabb 	bl	8003424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2140      	movs	r1, #64	; 0x40
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fbca 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 8002eba:	e009      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f000 fbc1 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e000      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a34      	ldr	r2, [pc, #208]	; (8003020 <TIM_Base_SetConfig+0xe4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00f      	beq.n	8002f74 <TIM_Base_SetConfig+0x38>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d00b      	beq.n	8002f74 <TIM_Base_SetConfig+0x38>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a31      	ldr	r2, [pc, #196]	; (8003024 <TIM_Base_SetConfig+0xe8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <TIM_Base_SetConfig+0x38>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a30      	ldr	r2, [pc, #192]	; (8003028 <TIM_Base_SetConfig+0xec>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_Base_SetConfig+0x38>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a2f      	ldr	r2, [pc, #188]	; (800302c <TIM_Base_SetConfig+0xf0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d108      	bne.n	8002f86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a25      	ldr	r2, [pc, #148]	; (8003020 <TIM_Base_SetConfig+0xe4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01b      	beq.n	8002fc6 <TIM_Base_SetConfig+0x8a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d017      	beq.n	8002fc6 <TIM_Base_SetConfig+0x8a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <TIM_Base_SetConfig+0xe8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <TIM_Base_SetConfig+0x8a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a21      	ldr	r2, [pc, #132]	; (8003028 <TIM_Base_SetConfig+0xec>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00f      	beq.n	8002fc6 <TIM_Base_SetConfig+0x8a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a20      	ldr	r2, [pc, #128]	; (800302c <TIM_Base_SetConfig+0xf0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00b      	beq.n	8002fc6 <TIM_Base_SetConfig+0x8a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <TIM_Base_SetConfig+0xf4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_Base_SetConfig+0x8a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <TIM_Base_SetConfig+0xf8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_Base_SetConfig+0x8a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <TIM_Base_SetConfig+0xfc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a08      	ldr	r2, [pc, #32]	; (8003020 <TIM_Base_SetConfig+0xe4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d103      	bne.n	800300c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	615a      	str	r2, [r3, #20]
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40010000 	.word	0x40010000
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800
 800302c:	40000c00 	.word	0x40000c00
 8003030:	40014000 	.word	0x40014000
 8003034:	40014400 	.word	0x40014400
 8003038:	40014800 	.word	0x40014800

0800303c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f023 0201 	bic.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f023 0302 	bic.w	r3, r3, #2
 8003084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <TIM_OC1_SetConfig+0xc8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d10c      	bne.n	80030b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0308 	bic.w	r3, r3, #8
 800309e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a13      	ldr	r2, [pc, #76]	; (8003104 <TIM_OC1_SetConfig+0xc8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d111      	bne.n	80030de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	621a      	str	r2, [r3, #32]
}
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40010000 	.word	0x40010000

08003108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f023 0210 	bic.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f023 0320 	bic.w	r3, r3, #32
 8003152:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <TIM_OC2_SetConfig+0xd4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10d      	bne.n	8003184 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800316e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003182:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <TIM_OC2_SetConfig+0xd4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d113      	bne.n	80031b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800319a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	621a      	str	r2, [r3, #32]
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40010000 	.word	0x40010000

080031e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <TIM_OC3_SetConfig+0xd0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10d      	bne.n	800325a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a14      	ldr	r2, [pc, #80]	; (80032b0 <TIM_OC3_SetConfig+0xd0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d113      	bne.n	800328a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	621a      	str	r2, [r3, #32]
}
 80032a4:	bf00      	nop
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40010000 	.word	0x40010000

080032b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	031b      	lsls	r3, r3, #12
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a10      	ldr	r2, [pc, #64]	; (8003350 <TIM_OC4_SetConfig+0x9c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d109      	bne.n	8003328 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800331a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	621a      	str	r2, [r3, #32]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010000 	.word	0x40010000

08003354 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <TIM_TI1_SetConfig+0xbc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <TIM_TI1_SetConfig+0x56>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003388:	d00f      	beq.n	80033aa <TIM_TI1_SetConfig+0x56>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4a21      	ldr	r2, [pc, #132]	; (8003414 <TIM_TI1_SetConfig+0xc0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00b      	beq.n	80033aa <TIM_TI1_SetConfig+0x56>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a20      	ldr	r2, [pc, #128]	; (8003418 <TIM_TI1_SetConfig+0xc4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <TIM_TI1_SetConfig+0x56>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a1f      	ldr	r2, [pc, #124]	; (800341c <TIM_TI1_SetConfig+0xc8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_TI1_SetConfig+0x56>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <TIM_TI1_SetConfig+0xcc>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <TIM_TI1_SetConfig+0x5a>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <TIM_TI1_SetConfig+0x5c>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e003      	b.n	80033ce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f023 030a 	bic.w	r3, r3, #10
 80033e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f003 030a 	and.w	r3, r3, #10
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000
 8003414:	40000400 	.word	0x40000400
 8003418:	40000800 	.word	0x40000800
 800341c:	40000c00 	.word	0x40000c00
 8003420:	40014000 	.word	0x40014000

08003424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f023 0201 	bic.w	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f023 030a 	bic.w	r3, r3, #10
 8003460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003482:	b480      	push	{r7}
 8003484:	b087      	sub	sp, #28
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f023 0210 	bic.w	r2, r3, #16
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	031b      	lsls	r3, r3, #12
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	621a      	str	r2, [r3, #32]
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f023 0210 	bic.w	r2, r3, #16
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003526:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	031b      	lsls	r3, r3, #12
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003538:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	621a      	str	r2, [r3, #32]
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
 8003568:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f023 0303 	bic.w	r3, r3, #3
 8003588:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003598:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80035ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003612:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	031b      	lsls	r3, r3, #12
 8003618:	b29b      	uxth	r3, r3
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003626:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	031b      	lsls	r3, r3, #12
 800362c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	f043 0307 	orr.w	r3, r3, #7
 8003670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800369e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	021a      	lsls	r2, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	2201      	movs	r2, #1
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1a      	ldr	r2, [r3, #32]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	401a      	ands	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003724:	2302      	movs	r3, #2
 8003726:	e050      	b.n	80037ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d018      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d013      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10c      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40000400 	.word	0x40000400
 80037e0:	40000800 	.word	0x40000800
 80037e4:	40000c00 	.word	0x40000c00
 80037e8:	40014000 	.word	0x40014000

080037ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e03f      	b.n	80038a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f001 fea6 	bl	800558c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	; 0x24
 8003844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fc6d 	bl	8004138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800386c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800387c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800388c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b088      	sub	sp, #32
 80038b2:	af02      	add	r7, sp, #8
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	603b      	str	r3, [r7, #0]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	f040 8083 	bne.w	80039d6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_UART_Transmit+0x2e>
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e07b      	b.n	80039d8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Transmit+0x40>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e074      	b.n	80039d8 <HAL_UART_Transmit+0x12a>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2221      	movs	r2, #33	; 0x21
 8003900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003904:	f7fd fbae 	bl	8001064 <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800391e:	e042      	b.n	80039a6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003936:	d122      	bne.n	800397e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fa76 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e042      	b.n	80039d8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003964:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3302      	adds	r3, #2
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	e017      	b.n	80039a6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3301      	adds	r3, #1
 800397a:	60bb      	str	r3, [r7, #8]
 800397c:	e013      	b.n	80039a6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2200      	movs	r2, #0
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fa53 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e01f      	b.n	80039d8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	60ba      	str	r2, [r7, #8]
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1b7      	bne.n	8003920 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2200      	movs	r2, #0
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa3a 	bl	8003e34 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e006      	b.n	80039d8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e000      	b.n	80039d8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
  }
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d166      	bne.n	8003ac8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_UART_Receive_DMA+0x26>
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e05f      	b.n	8003aca <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Receive_DMA+0x38>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e058      	b.n	8003aca <HAL_UART_Receive_DMA+0xea>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2222      	movs	r2, #34	; 0x22
 8003a36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <HAL_UART_Receive_DMA+0xf4>)
 8003a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	4a24      	ldr	r2, [pc, #144]	; (8003ad8 <HAL_UART_Receive_DMA+0xf8>)
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	4a23      	ldr	r2, [pc, #140]	; (8003adc <HAL_UART_Receive_DMA+0xfc>)
 8003a50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	2200      	movs	r2, #0
 8003a58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003a5a:	f107 0308 	add.w	r3, r7, #8
 8003a5e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	f7fd fcc3 	bl	80013fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08003d1d 	.word	0x08003d1d
 8003ad8:	08003d85 	.word	0x08003d85
 8003adc:	08003da1 	.word	0x08003da1

08003ae0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10d      	bne.n	8003b32 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_UART_IRQHandler+0x52>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa82 	bl	8004034 <UART_Receive_IT>
      return;
 8003b30:	e0d1      	b.n	8003cd6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80b0 	beq.w	8003c9a <HAL_UART_IRQHandler+0x1ba>
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <HAL_UART_IRQHandler+0x70>
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80a5 	beq.w	8003c9a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_UART_IRQHandler+0x90>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	f043 0201 	orr.w	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_UART_IRQHandler+0xb0>
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	f043 0202 	orr.w	r2, r3, #2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_UART_IRQHandler+0xd0>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00f      	beq.n	8003bda <HAL_UART_IRQHandler+0xfa>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <HAL_UART_IRQHandler+0xee>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d005      	beq.n	8003bda <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	f043 0208 	orr.w	r2, r3, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d078      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_UART_IRQHandler+0x11c>
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa1c 	bl	8004034 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	bf0c      	ite	eq
 8003c0a:	2301      	moveq	r3, #1
 8003c0c:	2300      	movne	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <HAL_UART_IRQHandler+0x144>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d031      	beq.n	8003c88 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f965 	bl	8003ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d123      	bne.n	8003c80 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c46:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <HAL_UART_IRQHandler+0x1fc>)
 8003c56:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fc25 	bl	80014ac <HAL_DMA_Abort_IT>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d016      	beq.n	8003c96 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c72:	4610      	mov	r0, r2
 8003c74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c76:	e00e      	b.n	8003c96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f845 	bl	8003d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7e:	e00a      	b.n	8003c96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f841 	bl	8003d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c86:	e006      	b.n	8003c96 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f83d 	bl	8003d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c94:	e01e      	b.n	8003cd4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c96:	bf00      	nop
    return;
 8003c98:	e01c      	b.n	8003cd4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x1d6>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f952 	bl	8003f58 <UART_Transmit_IT>
    return;
 8003cb4:	e00f      	b.n	8003cd6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x1f6>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f99a 	bl	8004004 <UART_EndTransmit_IT>
    return;
 8003cd0:	bf00      	nop
 8003cd2:	e000      	b.n	8003cd6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003cd4:	bf00      	nop
  }
}
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	08003f31 	.word	0x08003f31

08003ce0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11e      	bne.n	8003d76 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d4c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 ff3e 	bl	8004bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff ffae 	bl	8003cf4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	2b80      	cmp	r3, #128	; 0x80
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b21      	cmp	r3, #33	; 0x21
 8003dd2:	d108      	bne.n	8003de6 <UART_DMAError+0x46>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003de0:	68b8      	ldr	r0, [r7, #8]
 8003de2:	f000 f871 	bl	8003ec8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b40      	cmp	r3, #64	; 0x40
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b22      	cmp	r3, #34	; 0x22
 8003e06:	d108      	bne.n	8003e1a <UART_DMAError+0x7a>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2200      	movs	r2, #0
 8003e12:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e14:	68b8      	ldr	r0, [r7, #8]
 8003e16:	f000 f86d 	bl	8003ef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	f043 0210 	orr.w	r2, r3, #16
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e26:	68b8      	ldr	r0, [r7, #8]
 8003e28:	f7ff ff6e 	bl	8003d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e44:	e02c      	b.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d028      	beq.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e54:	f7fd f906 	bl	8001064 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d21d      	bcs.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e72:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e00f      	b.n	8003ec0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d0c3      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ede:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fedc 	bl	8003d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b21      	cmp	r3, #33	; 0x21
 8003f6a:	d144      	bne.n	8003ff6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f74:	d11a      	bne.n	8003fac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f8a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d105      	bne.n	8003fa0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	1c9a      	adds	r2, r3, #2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	621a      	str	r2, [r3, #32]
 8003f9e:	e00e      	b.n	8003fbe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	621a      	str	r2, [r3, #32]
 8003faa:	e008      	b.n	8003fbe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	1c59      	adds	r1, r3, #1
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6211      	str	r1, [r2, #32]
 8003fb6:	781a      	ldrb	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800401a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fe5b 	bl	8003ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b22      	cmp	r3, #34	; 0x22
 8004046:	d171      	bne.n	800412c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004050:	d123      	bne.n	800409a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10e      	bne.n	800407e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b29b      	uxth	r3, r3
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	1c9a      	adds	r2, r3, #2
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
 800407c:	e029      	b.n	80040d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	b29b      	uxth	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
 8004098:	e01b      	b.n	80040d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6858      	ldr	r0, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	1c59      	adds	r1, r3, #1
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6291      	str	r1, [r2, #40]	; 0x28
 80040b2:	b2c2      	uxtb	r2, r0
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e00c      	b.n	80040d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	1c58      	adds	r0, r3, #1
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	6288      	str	r0, [r1, #40]	; 0x28
 80040ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29b      	uxth	r3, r3
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4619      	mov	r1, r3
 80040e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d120      	bne.n	8004128 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0220 	bic.w	r2, r2, #32
 80040f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fd6a 	bl	8004bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e002      	b.n	800412e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800417a:	f023 030c 	bic.w	r3, r3, #12
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	68f9      	ldr	r1, [r7, #12]
 8004184:	430b      	orrs	r3, r1
 8004186:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a6:	f040 818b 	bne.w	80044c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4ac1      	ldr	r2, [pc, #772]	; (80044b4 <UART_SetConfig+0x37c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d005      	beq.n	80041c0 <UART_SetConfig+0x88>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4abf      	ldr	r2, [pc, #764]	; (80044b8 <UART_SetConfig+0x380>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	f040 80bd 	bne.w	800433a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c0:	f7fe f9e8 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 80041c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	461d      	mov	r5, r3
 80041ca:	f04f 0600 	mov.w	r6, #0
 80041ce:	46a8      	mov	r8, r5
 80041d0:	46b1      	mov	r9, r6
 80041d2:	eb18 0308 	adds.w	r3, r8, r8
 80041d6:	eb49 0409 	adc.w	r4, r9, r9
 80041da:	4698      	mov	r8, r3
 80041dc:	46a1      	mov	r9, r4
 80041de:	eb18 0805 	adds.w	r8, r8, r5
 80041e2:	eb49 0906 	adc.w	r9, r9, r6
 80041e6:	f04f 0100 	mov.w	r1, #0
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041fa:	4688      	mov	r8, r1
 80041fc:	4691      	mov	r9, r2
 80041fe:	eb18 0005 	adds.w	r0, r8, r5
 8004202:	eb49 0106 	adc.w	r1, r9, r6
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	461d      	mov	r5, r3
 800420c:	f04f 0600 	mov.w	r6, #0
 8004210:	196b      	adds	r3, r5, r5
 8004212:	eb46 0406 	adc.w	r4, r6, r6
 8004216:	461a      	mov	r2, r3
 8004218:	4623      	mov	r3, r4
 800421a:	f7fc fd3d 	bl	8000c98 <__aeabi_uldivmod>
 800421e:	4603      	mov	r3, r0
 8004220:	460c      	mov	r4, r1
 8004222:	461a      	mov	r2, r3
 8004224:	4ba5      	ldr	r3, [pc, #660]	; (80044bc <UART_SetConfig+0x384>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	461d      	mov	r5, r3
 8004234:	f04f 0600 	mov.w	r6, #0
 8004238:	46a9      	mov	r9, r5
 800423a:	46b2      	mov	sl, r6
 800423c:	eb19 0309 	adds.w	r3, r9, r9
 8004240:	eb4a 040a 	adc.w	r4, sl, sl
 8004244:	4699      	mov	r9, r3
 8004246:	46a2      	mov	sl, r4
 8004248:	eb19 0905 	adds.w	r9, r9, r5
 800424c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800425c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004260:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004264:	4689      	mov	r9, r1
 8004266:	4692      	mov	sl, r2
 8004268:	eb19 0005 	adds.w	r0, r9, r5
 800426c:	eb4a 0106 	adc.w	r1, sl, r6
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	461d      	mov	r5, r3
 8004276:	f04f 0600 	mov.w	r6, #0
 800427a:	196b      	adds	r3, r5, r5
 800427c:	eb46 0406 	adc.w	r4, r6, r6
 8004280:	461a      	mov	r2, r3
 8004282:	4623      	mov	r3, r4
 8004284:	f7fc fd08 	bl	8000c98 <__aeabi_uldivmod>
 8004288:	4603      	mov	r3, r0
 800428a:	460c      	mov	r4, r1
 800428c:	461a      	mov	r2, r3
 800428e:	4b8b      	ldr	r3, [pc, #556]	; (80044bc <UART_SetConfig+0x384>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	; 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	3332      	adds	r3, #50	; 0x32
 80042a2:	4a86      	ldr	r2, [pc, #536]	; (80044bc <UART_SetConfig+0x384>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042b0:	4498      	add	r8, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	461d      	mov	r5, r3
 80042b6:	f04f 0600 	mov.w	r6, #0
 80042ba:	46a9      	mov	r9, r5
 80042bc:	46b2      	mov	sl, r6
 80042be:	eb19 0309 	adds.w	r3, r9, r9
 80042c2:	eb4a 040a 	adc.w	r4, sl, sl
 80042c6:	4699      	mov	r9, r3
 80042c8:	46a2      	mov	sl, r4
 80042ca:	eb19 0905 	adds.w	r9, r9, r5
 80042ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042e6:	4689      	mov	r9, r1
 80042e8:	4692      	mov	sl, r2
 80042ea:	eb19 0005 	adds.w	r0, r9, r5
 80042ee:	eb4a 0106 	adc.w	r1, sl, r6
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	461d      	mov	r5, r3
 80042f8:	f04f 0600 	mov.w	r6, #0
 80042fc:	196b      	adds	r3, r5, r5
 80042fe:	eb46 0406 	adc.w	r4, r6, r6
 8004302:	461a      	mov	r2, r3
 8004304:	4623      	mov	r3, r4
 8004306:	f7fc fcc7 	bl	8000c98 <__aeabi_uldivmod>
 800430a:	4603      	mov	r3, r0
 800430c:	460c      	mov	r4, r1
 800430e:	461a      	mov	r2, r3
 8004310:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <UART_SetConfig+0x384>)
 8004312:	fba3 1302 	umull	r1, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	2164      	movs	r1, #100	; 0x64
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	3332      	adds	r3, #50	; 0x32
 8004324:	4a65      	ldr	r2, [pc, #404]	; (80044bc <UART_SetConfig+0x384>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	f003 0207 	and.w	r2, r3, #7
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4442      	add	r2, r8
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	e26f      	b.n	800481a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800433a:	f7fe f917 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 800433e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	461d      	mov	r5, r3
 8004344:	f04f 0600 	mov.w	r6, #0
 8004348:	46a8      	mov	r8, r5
 800434a:	46b1      	mov	r9, r6
 800434c:	eb18 0308 	adds.w	r3, r8, r8
 8004350:	eb49 0409 	adc.w	r4, r9, r9
 8004354:	4698      	mov	r8, r3
 8004356:	46a1      	mov	r9, r4
 8004358:	eb18 0805 	adds.w	r8, r8, r5
 800435c:	eb49 0906 	adc.w	r9, r9, r6
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800436c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004370:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004374:	4688      	mov	r8, r1
 8004376:	4691      	mov	r9, r2
 8004378:	eb18 0005 	adds.w	r0, r8, r5
 800437c:	eb49 0106 	adc.w	r1, r9, r6
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	461d      	mov	r5, r3
 8004386:	f04f 0600 	mov.w	r6, #0
 800438a:	196b      	adds	r3, r5, r5
 800438c:	eb46 0406 	adc.w	r4, r6, r6
 8004390:	461a      	mov	r2, r3
 8004392:	4623      	mov	r3, r4
 8004394:	f7fc fc80 	bl	8000c98 <__aeabi_uldivmod>
 8004398:	4603      	mov	r3, r0
 800439a:	460c      	mov	r4, r1
 800439c:	461a      	mov	r2, r3
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <UART_SetConfig+0x384>)
 80043a0:	fba3 2302 	umull	r2, r3, r3, r2
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	461d      	mov	r5, r3
 80043ae:	f04f 0600 	mov.w	r6, #0
 80043b2:	46a9      	mov	r9, r5
 80043b4:	46b2      	mov	sl, r6
 80043b6:	eb19 0309 	adds.w	r3, r9, r9
 80043ba:	eb4a 040a 	adc.w	r4, sl, sl
 80043be:	4699      	mov	r9, r3
 80043c0:	46a2      	mov	sl, r4
 80043c2:	eb19 0905 	adds.w	r9, r9, r5
 80043c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043de:	4689      	mov	r9, r1
 80043e0:	4692      	mov	sl, r2
 80043e2:	eb19 0005 	adds.w	r0, r9, r5
 80043e6:	eb4a 0106 	adc.w	r1, sl, r6
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	461d      	mov	r5, r3
 80043f0:	f04f 0600 	mov.w	r6, #0
 80043f4:	196b      	adds	r3, r5, r5
 80043f6:	eb46 0406 	adc.w	r4, r6, r6
 80043fa:	461a      	mov	r2, r3
 80043fc:	4623      	mov	r3, r4
 80043fe:	f7fc fc4b 	bl	8000c98 <__aeabi_uldivmod>
 8004402:	4603      	mov	r3, r0
 8004404:	460c      	mov	r4, r1
 8004406:	461a      	mov	r2, r3
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <UART_SetConfig+0x384>)
 800440a:	fba3 1302 	umull	r1, r3, r3, r2
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2164      	movs	r1, #100	; 0x64
 8004412:	fb01 f303 	mul.w	r3, r1, r3
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	3332      	adds	r3, #50	; 0x32
 800441c:	4a27      	ldr	r2, [pc, #156]	; (80044bc <UART_SetConfig+0x384>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800442a:	4498      	add	r8, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	461d      	mov	r5, r3
 8004430:	f04f 0600 	mov.w	r6, #0
 8004434:	46a9      	mov	r9, r5
 8004436:	46b2      	mov	sl, r6
 8004438:	eb19 0309 	adds.w	r3, r9, r9
 800443c:	eb4a 040a 	adc.w	r4, sl, sl
 8004440:	4699      	mov	r9, r3
 8004442:	46a2      	mov	sl, r4
 8004444:	eb19 0905 	adds.w	r9, r9, r5
 8004448:	eb4a 0a06 	adc.w	sl, sl, r6
 800444c:	f04f 0100 	mov.w	r1, #0
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004458:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800445c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004460:	4689      	mov	r9, r1
 8004462:	4692      	mov	sl, r2
 8004464:	eb19 0005 	adds.w	r0, r9, r5
 8004468:	eb4a 0106 	adc.w	r1, sl, r6
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	461d      	mov	r5, r3
 8004472:	f04f 0600 	mov.w	r6, #0
 8004476:	196b      	adds	r3, r5, r5
 8004478:	eb46 0406 	adc.w	r4, r6, r6
 800447c:	461a      	mov	r2, r3
 800447e:	4623      	mov	r3, r4
 8004480:	f7fc fc0a 	bl	8000c98 <__aeabi_uldivmod>
 8004484:	4603      	mov	r3, r0
 8004486:	460c      	mov	r4, r1
 8004488:	461a      	mov	r2, r3
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <UART_SetConfig+0x384>)
 800448c:	fba3 1302 	umull	r1, r3, r3, r2
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	2164      	movs	r1, #100	; 0x64
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	3332      	adds	r3, #50	; 0x32
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <UART_SetConfig+0x384>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	f003 0207 	and.w	r2, r3, #7
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4442      	add	r2, r8
 80044b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80044b2:	e1b2      	b.n	800481a <UART_SetConfig+0x6e2>
 80044b4:	40011000 	.word	0x40011000
 80044b8:	40011400 	.word	0x40011400
 80044bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4ad7      	ldr	r2, [pc, #860]	; (8004824 <UART_SetConfig+0x6ec>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d005      	beq.n	80044d6 <UART_SetConfig+0x39e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4ad6      	ldr	r2, [pc, #856]	; (8004828 <UART_SetConfig+0x6f0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	f040 80d1 	bne.w	8004678 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80044d6:	f7fe f85d 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 80044da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	469a      	mov	sl, r3
 80044e0:	f04f 0b00 	mov.w	fp, #0
 80044e4:	46d0      	mov	r8, sl
 80044e6:	46d9      	mov	r9, fp
 80044e8:	eb18 0308 	adds.w	r3, r8, r8
 80044ec:	eb49 0409 	adc.w	r4, r9, r9
 80044f0:	4698      	mov	r8, r3
 80044f2:	46a1      	mov	r9, r4
 80044f4:	eb18 080a 	adds.w	r8, r8, sl
 80044f8:	eb49 090b 	adc.w	r9, r9, fp
 80044fc:	f04f 0100 	mov.w	r1, #0
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004508:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800450c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004510:	4688      	mov	r8, r1
 8004512:	4691      	mov	r9, r2
 8004514:	eb1a 0508 	adds.w	r5, sl, r8
 8004518:	eb4b 0609 	adc.w	r6, fp, r9
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	4619      	mov	r1, r3
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	f04f 0400 	mov.w	r4, #0
 800452e:	0094      	lsls	r4, r2, #2
 8004530:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004534:	008b      	lsls	r3, r1, #2
 8004536:	461a      	mov	r2, r3
 8004538:	4623      	mov	r3, r4
 800453a:	4628      	mov	r0, r5
 800453c:	4631      	mov	r1, r6
 800453e:	f7fc fbab 	bl	8000c98 <__aeabi_uldivmod>
 8004542:	4603      	mov	r3, r0
 8004544:	460c      	mov	r4, r1
 8004546:	461a      	mov	r2, r3
 8004548:	4bb8      	ldr	r3, [pc, #736]	; (800482c <UART_SetConfig+0x6f4>)
 800454a:	fba3 2302 	umull	r2, r3, r3, r2
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	469b      	mov	fp, r3
 8004558:	f04f 0c00 	mov.w	ip, #0
 800455c:	46d9      	mov	r9, fp
 800455e:	46e2      	mov	sl, ip
 8004560:	eb19 0309 	adds.w	r3, r9, r9
 8004564:	eb4a 040a 	adc.w	r4, sl, sl
 8004568:	4699      	mov	r9, r3
 800456a:	46a2      	mov	sl, r4
 800456c:	eb19 090b 	adds.w	r9, r9, fp
 8004570:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004574:	f04f 0100 	mov.w	r1, #0
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004580:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004584:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004588:	4689      	mov	r9, r1
 800458a:	4692      	mov	sl, r2
 800458c:	eb1b 0509 	adds.w	r5, fp, r9
 8004590:	eb4c 060a 	adc.w	r6, ip, sl
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4619      	mov	r1, r3
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	f04f 0400 	mov.w	r4, #0
 80045a6:	0094      	lsls	r4, r2, #2
 80045a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045ac:	008b      	lsls	r3, r1, #2
 80045ae:	461a      	mov	r2, r3
 80045b0:	4623      	mov	r3, r4
 80045b2:	4628      	mov	r0, r5
 80045b4:	4631      	mov	r1, r6
 80045b6:	f7fc fb6f 	bl	8000c98 <__aeabi_uldivmod>
 80045ba:	4603      	mov	r3, r0
 80045bc:	460c      	mov	r4, r1
 80045be:	461a      	mov	r2, r3
 80045c0:	4b9a      	ldr	r3, [pc, #616]	; (800482c <UART_SetConfig+0x6f4>)
 80045c2:	fba3 1302 	umull	r1, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2164      	movs	r1, #100	; 0x64
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	3332      	adds	r3, #50	; 0x32
 80045d4:	4a95      	ldr	r2, [pc, #596]	; (800482c <UART_SetConfig+0x6f4>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e0:	4498      	add	r8, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	469b      	mov	fp, r3
 80045e6:	f04f 0c00 	mov.w	ip, #0
 80045ea:	46d9      	mov	r9, fp
 80045ec:	46e2      	mov	sl, ip
 80045ee:	eb19 0309 	adds.w	r3, r9, r9
 80045f2:	eb4a 040a 	adc.w	r4, sl, sl
 80045f6:	4699      	mov	r9, r3
 80045f8:	46a2      	mov	sl, r4
 80045fa:	eb19 090b 	adds.w	r9, r9, fp
 80045fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004602:	f04f 0100 	mov.w	r1, #0
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800460e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004612:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004616:	4689      	mov	r9, r1
 8004618:	4692      	mov	sl, r2
 800461a:	eb1b 0509 	adds.w	r5, fp, r9
 800461e:	eb4c 060a 	adc.w	r6, ip, sl
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4619      	mov	r1, r3
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	f04f 0400 	mov.w	r4, #0
 8004634:	0094      	lsls	r4, r2, #2
 8004636:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800463a:	008b      	lsls	r3, r1, #2
 800463c:	461a      	mov	r2, r3
 800463e:	4623      	mov	r3, r4
 8004640:	4628      	mov	r0, r5
 8004642:	4631      	mov	r1, r6
 8004644:	f7fc fb28 	bl	8000c98 <__aeabi_uldivmod>
 8004648:	4603      	mov	r3, r0
 800464a:	460c      	mov	r4, r1
 800464c:	461a      	mov	r2, r3
 800464e:	4b77      	ldr	r3, [pc, #476]	; (800482c <UART_SetConfig+0x6f4>)
 8004650:	fba3 1302 	umull	r1, r3, r3, r2
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	2164      	movs	r1, #100	; 0x64
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	3332      	adds	r3, #50	; 0x32
 8004662:	4a72      	ldr	r2, [pc, #456]	; (800482c <UART_SetConfig+0x6f4>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	f003 020f 	and.w	r2, r3, #15
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4442      	add	r2, r8
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	e0d0      	b.n	800481a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004678:	f7fd ff78 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 800467c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	469a      	mov	sl, r3
 8004682:	f04f 0b00 	mov.w	fp, #0
 8004686:	46d0      	mov	r8, sl
 8004688:	46d9      	mov	r9, fp
 800468a:	eb18 0308 	adds.w	r3, r8, r8
 800468e:	eb49 0409 	adc.w	r4, r9, r9
 8004692:	4698      	mov	r8, r3
 8004694:	46a1      	mov	r9, r4
 8004696:	eb18 080a 	adds.w	r8, r8, sl
 800469a:	eb49 090b 	adc.w	r9, r9, fp
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046b2:	4688      	mov	r8, r1
 80046b4:	4691      	mov	r9, r2
 80046b6:	eb1a 0508 	adds.w	r5, sl, r8
 80046ba:	eb4b 0609 	adc.w	r6, fp, r9
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4619      	mov	r1, r3
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	f04f 0400 	mov.w	r4, #0
 80046d0:	0094      	lsls	r4, r2, #2
 80046d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046d6:	008b      	lsls	r3, r1, #2
 80046d8:	461a      	mov	r2, r3
 80046da:	4623      	mov	r3, r4
 80046dc:	4628      	mov	r0, r5
 80046de:	4631      	mov	r1, r6
 80046e0:	f7fc fada 	bl	8000c98 <__aeabi_uldivmod>
 80046e4:	4603      	mov	r3, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	461a      	mov	r2, r3
 80046ea:	4b50      	ldr	r3, [pc, #320]	; (800482c <UART_SetConfig+0x6f4>)
 80046ec:	fba3 2302 	umull	r2, r3, r3, r2
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	469b      	mov	fp, r3
 80046fa:	f04f 0c00 	mov.w	ip, #0
 80046fe:	46d9      	mov	r9, fp
 8004700:	46e2      	mov	sl, ip
 8004702:	eb19 0309 	adds.w	r3, r9, r9
 8004706:	eb4a 040a 	adc.w	r4, sl, sl
 800470a:	4699      	mov	r9, r3
 800470c:	46a2      	mov	sl, r4
 800470e:	eb19 090b 	adds.w	r9, r9, fp
 8004712:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004722:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004726:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800472a:	4689      	mov	r9, r1
 800472c:	4692      	mov	sl, r2
 800472e:	eb1b 0509 	adds.w	r5, fp, r9
 8004732:	eb4c 060a 	adc.w	r6, ip, sl
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	4619      	mov	r1, r3
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	f04f 0400 	mov.w	r4, #0
 8004748:	0094      	lsls	r4, r2, #2
 800474a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800474e:	008b      	lsls	r3, r1, #2
 8004750:	461a      	mov	r2, r3
 8004752:	4623      	mov	r3, r4
 8004754:	4628      	mov	r0, r5
 8004756:	4631      	mov	r1, r6
 8004758:	f7fc fa9e 	bl	8000c98 <__aeabi_uldivmod>
 800475c:	4603      	mov	r3, r0
 800475e:	460c      	mov	r4, r1
 8004760:	461a      	mov	r2, r3
 8004762:	4b32      	ldr	r3, [pc, #200]	; (800482c <UART_SetConfig+0x6f4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a2d      	ldr	r2, [pc, #180]	; (800482c <UART_SetConfig+0x6f4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004782:	4498      	add	r8, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	469b      	mov	fp, r3
 8004788:	f04f 0c00 	mov.w	ip, #0
 800478c:	46d9      	mov	r9, fp
 800478e:	46e2      	mov	sl, ip
 8004790:	eb19 0309 	adds.w	r3, r9, r9
 8004794:	eb4a 040a 	adc.w	r4, sl, sl
 8004798:	4699      	mov	r9, r3
 800479a:	46a2      	mov	sl, r4
 800479c:	eb19 090b 	adds.w	r9, r9, fp
 80047a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047a4:	f04f 0100 	mov.w	r1, #0
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047b8:	4689      	mov	r9, r1
 80047ba:	4692      	mov	sl, r2
 80047bc:	eb1b 0509 	adds.w	r5, fp, r9
 80047c0:	eb4c 060a 	adc.w	r6, ip, sl
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	f04f 0400 	mov.w	r4, #0
 80047d6:	0094      	lsls	r4, r2, #2
 80047d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047dc:	008b      	lsls	r3, r1, #2
 80047de:	461a      	mov	r2, r3
 80047e0:	4623      	mov	r3, r4
 80047e2:	4628      	mov	r0, r5
 80047e4:	4631      	mov	r1, r6
 80047e6:	f7fc fa57 	bl	8000c98 <__aeabi_uldivmod>
 80047ea:	4603      	mov	r3, r0
 80047ec:	460c      	mov	r4, r1
 80047ee:	461a      	mov	r2, r3
 80047f0:	4b0e      	ldr	r3, [pc, #56]	; (800482c <UART_SetConfig+0x6f4>)
 80047f2:	fba3 1302 	umull	r1, r3, r3, r2
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2164      	movs	r1, #100	; 0x64
 80047fa:	fb01 f303 	mul.w	r3, r1, r3
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	3332      	adds	r3, #50	; 0x32
 8004804:	4a09      	ldr	r2, [pc, #36]	; (800482c <UART_SetConfig+0x6f4>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	f003 020f 	and.w	r2, r3, #15
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4442      	add	r2, r8
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	e7ff      	b.n	800481a <UART_SetConfig+0x6e2>
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004824:	40011000 	.word	0x40011000
 8004828:	40011400 	.word	0x40011400
 800482c:	51eb851f 	.word	0x51eb851f

08004830 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <MX_DMA_Init+0x3c>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	4a0b      	ldr	r2, [pc, #44]	; (800486c <MX_DMA_Init+0x3c>)
 8004840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004844:	6313      	str	r3, [r2, #48]	; 0x30
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <MX_DMA_Init+0x3c>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	2100      	movs	r1, #0
 8004856:	2010      	movs	r0, #16
 8004858:	f7fc fceb 	bl	8001232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800485c:	2010      	movs	r0, #16
 800485e:	f7fc fd04 	bl	800126a <HAL_NVIC_EnableIRQ>

}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800

08004870 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08c      	sub	sp, #48	; 0x30
 8004874:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004876:	f107 031c 	add.w	r3, r7, #28
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	609a      	str	r2, [r3, #8]
 8004882:	60da      	str	r2, [r3, #12]
 8004884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	4ba1      	ldr	r3, [pc, #644]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4aa0      	ldr	r2, [pc, #640]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 8004890:	f043 0310 	orr.w	r3, r3, #16
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
 8004896:	4b9e      	ldr	r3, [pc, #632]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	61bb      	str	r3, [r7, #24]
 80048a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	4b9a      	ldr	r3, [pc, #616]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	4a99      	ldr	r2, [pc, #612]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	6313      	str	r3, [r2, #48]	; 0x30
 80048b2:	4b97      	ldr	r3, [pc, #604]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	4b93      	ldr	r3, [pc, #588]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	4a92      	ldr	r2, [pc, #584]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048cc:	6313      	str	r3, [r2, #48]	; 0x30
 80048ce:	4b90      	ldr	r3, [pc, #576]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	4b8c      	ldr	r3, [pc, #560]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	4a8b      	ldr	r2, [pc, #556]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ea:	4b89      	ldr	r3, [pc, #548]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	4b85      	ldr	r3, [pc, #532]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	4a84      	ldr	r2, [pc, #528]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 8004900:	f043 0302 	orr.w	r3, r3, #2
 8004904:	6313      	str	r3, [r2, #48]	; 0x30
 8004906:	4b82      	ldr	r3, [pc, #520]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	4b7e      	ldr	r3, [pc, #504]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	4a7d      	ldr	r2, [pc, #500]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 800491c:	f043 0308 	orr.w	r3, r3, #8
 8004920:	6313      	str	r3, [r2, #48]	; 0x30
 8004922:	4b7b      	ldr	r3, [pc, #492]	; (8004b10 <MX_GPIO_Init+0x2a0>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800492e:	2200      	movs	r2, #0
 8004930:	2108      	movs	r1, #8
 8004932:	4878      	ldr	r0, [pc, #480]	; (8004b14 <MX_GPIO_Init+0x2a4>)
 8004934:	f7fd f9c6 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004938:	2201      	movs	r2, #1
 800493a:	2101      	movs	r1, #1
 800493c:	4876      	ldr	r0, [pc, #472]	; (8004b18 <MX_GPIO_Init+0x2a8>)
 800493e:	f7fd f9c1 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Dc_IN3_Pin|Dc_IN4_Pin|Dc_IN2_Pin|Dc_IN1_Pin 
 8004942:	2200      	movs	r2, #0
 8004944:	f64c 4110 	movw	r1, #52240	; 0xcc10
 8004948:	4874      	ldr	r0, [pc, #464]	; (8004b1c <MX_GPIO_Init+0x2ac>)
 800494a:	f7fd f9bb 	bl	8001cc4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800494e:	2304      	movs	r3, #4
 8004950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004952:	2300      	movs	r3, #0
 8004954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800495a:	f107 031c 	add.w	r3, r7, #28
 800495e:	4619      	mov	r1, r3
 8004960:	486c      	ldr	r0, [pc, #432]	; (8004b14 <MX_GPIO_Init+0x2a4>)
 8004962:	f7fd f82d 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004966:	2308      	movs	r3, #8
 8004968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800496a:	2301      	movs	r3, #1
 800496c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004972:	2300      	movs	r3, #0
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004976:	f107 031c 	add.w	r3, r7, #28
 800497a:	4619      	mov	r1, r3
 800497c:	4865      	ldr	r0, [pc, #404]	; (8004b14 <MX_GPIO_Init+0x2a4>)
 800497e:	f7fd f81f 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8004982:	2332      	movs	r3, #50	; 0x32
 8004984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004986:	4b66      	ldr	r3, [pc, #408]	; (8004b20 <MX_GPIO_Init+0x2b0>)
 8004988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800498e:	f107 031c 	add.w	r3, r7, #28
 8004992:	4619      	mov	r1, r3
 8004994:	485f      	ldr	r0, [pc, #380]	; (8004b14 <MX_GPIO_Init+0x2a4>)
 8004996:	f7fd f813 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800499a:	2301      	movs	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800499e:	2301      	movs	r3, #1
 80049a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a6:	2300      	movs	r3, #0
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80049aa:	f107 031c 	add.w	r3, r7, #28
 80049ae:	4619      	mov	r1, r3
 80049b0:	4859      	ldr	r0, [pc, #356]	; (8004b18 <MX_GPIO_Init+0x2a8>)
 80049b2:	f7fd f805 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80049b6:	2308      	movs	r3, #8
 80049b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ba:	2302      	movs	r3, #2
 80049bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c2:	2300      	movs	r3, #0
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049c6:	2305      	movs	r3, #5
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80049ca:	f107 031c 	add.w	r3, r7, #28
 80049ce:	4619      	mov	r1, r3
 80049d0:	4851      	ldr	r0, [pc, #324]	; (8004b18 <MX_GPIO_Init+0x2a8>)
 80049d2:	f7fc fff5 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80049d6:	2301      	movs	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80049da:	4b51      	ldr	r3, [pc, #324]	; (8004b20 <MX_GPIO_Init+0x2b0>)
 80049dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e2:	f107 031c 	add.w	r3, r7, #28
 80049e6:	4619      	mov	r1, r3
 80049e8:	484e      	ldr	r0, [pc, #312]	; (8004b24 <MX_GPIO_Init+0x2b4>)
 80049ea:	f7fc ffe9 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80049ee:	2310      	movs	r3, #16
 80049f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f2:	2302      	movs	r3, #2
 80049f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049fa:	2300      	movs	r3, #0
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80049fe:	2306      	movs	r3, #6
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004a02:	f107 031c 	add.w	r3, r7, #28
 8004a06:	4619      	mov	r1, r3
 8004a08:	4846      	ldr	r0, [pc, #280]	; (8004b24 <MX_GPIO_Init+0x2b4>)
 8004a0a:	f7fc ffd9 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8004a0e:	23a0      	movs	r3, #160	; 0xa0
 8004a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a12:	2302      	movs	r3, #2
 8004a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a1e:	2305      	movs	r3, #5
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a22:	f107 031c 	add.w	r3, r7, #28
 8004a26:	4619      	mov	r1, r3
 8004a28:	483e      	ldr	r0, [pc, #248]	; (8004b24 <MX_GPIO_Init+0x2b4>)
 8004a2a:	f7fc ffc9 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8004a2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a34:	2302      	movs	r3, #2
 8004a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004a40:	2305      	movs	r3, #5
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a44:	f107 031c 	add.w	r3, r7, #28
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4837      	ldr	r0, [pc, #220]	; (8004b28 <MX_GPIO_Init+0x2b8>)
 8004a4c:	f7fc ffb8 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin */
  GPIO_InitStruct.Pin = Dc_IN3_Pin|Dc_IN4_Pin|Dc_IN2_Pin|Dc_IN1_Pin 
 8004a50:	f64c 4310 	movw	r3, #52240	; 0xcc10
 8004a54:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a56:	2301      	movs	r3, #1
 8004a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a62:	f107 031c 	add.w	r3, r7, #28
 8004a66:	4619      	mov	r1, r3
 8004a68:	482c      	ldr	r0, [pc, #176]	; (8004b1c <MX_GPIO_Init+0x2ac>)
 8004a6a:	f7fc ffa9 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004a6e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8004a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a74:	2302      	movs	r3, #2
 8004a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004a80:	2306      	movs	r3, #6
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a84:	f107 031c 	add.w	r3, r7, #28
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4823      	ldr	r0, [pc, #140]	; (8004b18 <MX_GPIO_Init+0x2a8>)
 8004a8c:	f7fc ff98 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a96:	2300      	movs	r3, #0
 8004a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004a9e:	f107 031c 	add.w	r3, r7, #28
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	481f      	ldr	r0, [pc, #124]	; (8004b24 <MX_GPIO_Init+0x2b4>)
 8004aa6:	f7fc ff8b 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004aaa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004abc:	230a      	movs	r3, #10
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac0:	f107 031c 	add.w	r3, r7, #28
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4817      	ldr	r0, [pc, #92]	; (8004b24 <MX_GPIO_Init+0x2b4>)
 8004ac8:	f7fc ff7a 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004acc:	2320      	movs	r3, #32
 8004ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004ad8:	f107 031c 	add.w	r3, r7, #28
 8004adc:	4619      	mov	r1, r3
 8004ade:	480f      	ldr	r0, [pc, #60]	; (8004b1c <MX_GPIO_Init+0x2ac>)
 8004ae0:	f7fc ff6e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004ae4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004aea:	2312      	movs	r3, #18
 8004aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aee:	2301      	movs	r3, #1
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af2:	2300      	movs	r3, #0
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004af6:	2304      	movs	r3, #4
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004afa:	f107 031c 	add.w	r3, r7, #28
 8004afe:	4619      	mov	r1, r3
 8004b00:	4809      	ldr	r0, [pc, #36]	; (8004b28 <MX_GPIO_Init+0x2b8>)
 8004b02:	f7fc ff5d 	bl	80019c0 <HAL_GPIO_Init>

}
 8004b06:	bf00      	nop
 8004b08:	3730      	adds	r7, #48	; 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40020800 	.word	0x40020800
 8004b1c:	40020c00 	.word	0x40020c00
 8004b20:	10120000 	.word	0x10120000
 8004b24:	40020000 	.word	0x40020000
 8004b28:	40020400 	.word	0x40020400
 8004b2c:	00000000 	.word	0x00000000

08004b30 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b08b      	sub	sp, #44	; 0x2c
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a2b      	ldr	r2, [pc, #172]	; (8004be8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d149      	bne.n	8004bd4 <HAL_TIM_IC_CaptureCallback+0xa4>
	uint16_t time;
	char buff[25];
	uint8_t len;

	time = __HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_2) -__HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_1);
 8004b40:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	4b27      	ldr	r3, [pc, #156]	; (8004be8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(time < 23615) {
 8004b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b56:	f645 423e 	movw	r2, #23614	; 0x5c3e
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d83a      	bhi.n	8004bd4 <HAL_TIM_IC_CaptureCallback+0xa4>
		Hcsr04_Distance_tmp = (float)time / 2.0 * 0.0343;
 8004b5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b68:	ee17 0a90 	vmov	r0, s15
 8004b6c:	f7fb fcf4 	bl	8000558 <__aeabi_f2d>
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b78:	f7fb fe70 	bl	800085c <__aeabi_ddiv>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	4618      	mov	r0, r3
 8004b82:	4621      	mov	r1, r4
 8004b84:	a316      	add	r3, pc, #88	; (adr r3, 8004be0 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fd3d 	bl	8000608 <__aeabi_dmul>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	460c      	mov	r4, r1
 8004b92:	4618      	mov	r0, r3
 8004b94:	4621      	mov	r1, r4
 8004b96:	f7fc f82f 	bl	8000bf8 <__aeabi_d2f>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <HAL_TIM_IC_CaptureCallback+0xbc>)
 8004b9e:	601a      	str	r2, [r3, #0]
		len = sprintf(buff,"%.2f\r\n" ,Hcsr04_Distance_tmp);
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_TIM_IC_CaptureCallback+0xbc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fb fcd7 	bl	8000558 <__aeabi_f2d>
 8004baa:	4603      	mov	r3, r0
 8004bac:	460c      	mov	r4, r1
 8004bae:	f107 000c 	add.w	r0, r7, #12
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8004bb8:	f001 fc0e 	bl	80063d8 <siprintf>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		HAL_UART_Transmit(&huart2, (uint8_t*)buff, len,15);
 8004bc2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	f107 010c 	add.w	r1, r7, #12
 8004bcc:	230f      	movs	r3, #15
 8004bce:	4809      	ldr	r0, [pc, #36]	; (8004bf4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8004bd0:	f7fe fe6d 	bl	80038ae <HAL_UART_Transmit>
	}
	}
}
 8004bd4:	bf00      	nop
 8004bd6:	372c      	adds	r7, #44	; 0x2c
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}
 8004bdc:	f3af 8000 	nop.w
 8004be0:	04816f00 	.word	0x04816f00
 8004be4:	3fa18fc5 	.word	0x3fa18fc5
 8004be8:	20000254 	.word	0x20000254
 8004bec:	2000020c 	.word	0x2000020c
 8004bf0:	08009200 	.word	0x08009200
 8004bf4:	200002f4 	.word	0x200002f4

08004bf8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	flag=1;
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_UART_RxCpltCallback+0x20>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, &Received, 1);
 8004c06:	2201      	movs	r2, #1
 8004c08:	4904      	ldr	r1, [pc, #16]	; (8004c1c <HAL_UART_RxCpltCallback+0x24>)
 8004c0a:	4805      	ldr	r0, [pc, #20]	; (8004c20 <HAL_UART_RxCpltCallback+0x28>)
 8004c0c:	f7fe fee8 	bl	80039e0 <HAL_UART_Receive_DMA>
 }
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000209 	.word	0x20000209
 8004c1c:	20000208 	.word	0x20000208
 8004c20:	200002f4 	.word	0x200002f4

08004c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag=0;
 8004c28:	4ba4      	ldr	r3, [pc, #656]	; (8004ebc <main+0x298>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
	pwm_duty=0;
 8004c2e:	4ba4      	ldr	r3, [pc, #656]	; (8004ec0 <main+0x29c>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c34:	f7fc f9b0 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c38:	f000 f952 	bl	8004ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c3c:	f7ff fe18 	bl	8004870 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c40:	f7ff fdf6 	bl	8004830 <MX_DMA_Init>
  MX_TIM3_Init();
 8004c44:	f000 fa7c 	bl	8005140 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004c48:	f000 fb24 	bl	8005294 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8004c4c:	f000 fc74 	bl	8005538 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 8004c50:	489c      	ldr	r0, [pc, #624]	; (8004ec4 <main+0x2a0>)
 8004c52:	f7fd fcde 	bl	8002612 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8004c56:	2100      	movs	r1, #0
 8004c58:	489a      	ldr	r0, [pc, #616]	; (8004ec4 <main+0x2a0>)
 8004c5a:	f7fd fd33 	bl	80026c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004c5e:	2104      	movs	r1, #4
 8004c60:	4898      	ldr	r0, [pc, #608]	; (8004ec4 <main+0x2a0>)
 8004c62:	f7fd fd2f 	bl	80026c4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim3);
 8004c66:	4898      	ldr	r0, [pc, #608]	; (8004ec8 <main+0x2a4>)
 8004c68:	f7fd fcd3 	bl	8002612 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004c6c:	2108      	movs	r1, #8
 8004c6e:	4896      	ldr	r0, [pc, #600]	; (8004ec8 <main+0x2a4>)
 8004c70:	f7fd fd28 	bl	80026c4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8004c74:	2100      	movs	r1, #0
 8004c76:	4894      	ldr	r0, [pc, #592]	; (8004ec8 <main+0x2a4>)
 8004c78:	f7fd fd8b 	bl	8002792 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	4892      	ldr	r0, [pc, #584]	; (8004ec8 <main+0x2a4>)
 8004c80:	f7fd fdaa 	bl	80027d8 <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive_DMA(&huart2, &Received, 1);
 8004c84:	2201      	movs	r2, #1
 8004c86:	4991      	ldr	r1, [pc, #580]	; (8004ecc <main+0x2a8>)
 8004c88:	4891      	ldr	r0, [pc, #580]	; (8004ed0 <main+0x2ac>)
 8004c8a:	f7fe fea9 	bl	80039e0 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1){
 8004c8e:	4b8b      	ldr	r3, [pc, #556]	; (8004ebc <main+0x298>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	f040 8110 	bne.w	8004eb8 <main+0x294>
		  switch (atoi(&Received)){
 8004c98:	488c      	ldr	r0, [pc, #560]	; (8004ecc <main+0x2a8>)
 8004c9a:	f000 fd22 	bl	80056e2 <atoi>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	f200 80e2 	bhi.w	8004e6a <main+0x246>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <main+0x88>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cbd 	.word	0x08004cbd
 8004cb0:	08004d57 	.word	0x08004d57
 8004cb4:	08004db3 	.word	0x08004db3
 8004cb8:	08004e0f 	.word	0x08004e0f
		  case 0: // do przodu
			  if(Hcsr04_Distance_tmp >= 50){
 8004cbc:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <main+0x2b0>)
 8004cbe:	edd3 7a00 	vldr	s15, [r3]
 8004cc2:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8004ed8 <main+0x2b4>
 8004cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	db2d      	blt.n	8004d2c <main+0x108>
				  HAL_GPIO_WritePin(Dc_IN4_GPIO_Port, Dc_IN4_Pin, GPIO_PIN_RESET);
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cd6:	4881      	ldr	r0, [pc, #516]	; (8004edc <main+0x2b8>)
 8004cd8:	f7fc fff4 	bl	8001cc4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Dc_IN3_GPIO_Port, Dc_IN3_Pin, GPIO_PIN_SET);
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ce2:	487e      	ldr	r0, [pc, #504]	; (8004edc <main+0x2b8>)
 8004ce4:	f7fc ffee 	bl	8001cc4 <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_SET);
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cee:	487b      	ldr	r0, [pc, #492]	; (8004edc <main+0x2b8>)
 8004cf0:	f7fc ffe8 	bl	8001cc4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cfa:	4878      	ldr	r0, [pc, #480]	; (8004edc <main+0x2b8>)
 8004cfc:	f7fc ffe2 	bl	8001cc4 <HAL_GPIO_WritePin>

				  if(pwm_duty <6000){
 8004d00:	4b6f      	ldr	r3, [pc, #444]	; (8004ec0 <main+0x29c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f241 726f 	movw	r2, #5999	; 0x176f
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	dc04      	bgt.n	8004d16 <main+0xf2>
					  pwm_duty +=10;
 8004d0c:	4b6c      	ldr	r3, [pc, #432]	; (8004ec0 <main+0x29c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330a      	adds	r3, #10
 8004d12:	4a6b      	ldr	r2, [pc, #428]	; (8004ec0 <main+0x29c>)
 8004d14:	6013      	str	r3, [r2, #0]
				  }
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm_duty);
 8004d16:	4b6a      	ldr	r3, [pc, #424]	; (8004ec0 <main+0x29c>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b6a      	ldr	r3, [pc, #424]	; (8004ec4 <main+0x2a0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,pwm_duty);
 8004d20:	4b67      	ldr	r3, [pc, #412]	; (8004ec0 <main+0x29c>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	4b67      	ldr	r3, [pc, #412]	; (8004ec4 <main+0x2a0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
				  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);

				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
			  }
			  break;
 8004d2a:	e0c6      	b.n	8004eba <main+0x296>
				  HAL_GPIO_WritePin(Dc_IN3_GPIO_Port, Dc_IN3_Pin, GPIO_PIN_RESET);
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d32:	486a      	ldr	r0, [pc, #424]	; (8004edc <main+0x2b8>)
 8004d34:	f7fc ffc6 	bl	8001cc4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d3e:	4867      	ldr	r0, [pc, #412]	; (8004edc <main+0x2b8>)
 8004d40:	f7fc ffc0 	bl	8001cc4 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8004d44:	4b5f      	ldr	r3, [pc, #380]	; (8004ec4 <main+0x2a0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8004d4c:	4b5d      	ldr	r3, [pc, #372]	; (8004ec4 <main+0x2a0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2200      	movs	r2, #0
 8004d52:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8004d54:	e0b1      	b.n	8004eba <main+0x296>

		  case 1: // w lewo
			  HAL_GPIO_WritePin(Dc_IN4_GPIO_Port, Dc_IN4_Pin, GPIO_PIN_SET);
 8004d56:	2201      	movs	r2, #1
 8004d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d5c:	485f      	ldr	r0, [pc, #380]	; (8004edc <main+0x2b8>)
 8004d5e:	f7fc ffb1 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN3_GPIO_Port, Dc_IN3_Pin, GPIO_PIN_RESET);
 8004d62:	2200      	movs	r2, #0
 8004d64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d68:	485c      	ldr	r0, [pc, #368]	; (8004edc <main+0x2b8>)
 8004d6a:	f7fc ffab 	bl	8001cc4 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_SET);
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d74:	4859      	ldr	r0, [pc, #356]	; (8004edc <main+0x2b8>)
 8004d76:	f7fc ffa5 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d80:	4856      	ldr	r0, [pc, #344]	; (8004edc <main+0x2b8>)
 8004d82:	f7fc ff9f 	bl	8001cc4 <HAL_GPIO_WritePin>
			  if(pwm_duty <6000){
 8004d86:	4b4e      	ldr	r3, [pc, #312]	; (8004ec0 <main+0x29c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f241 726f 	movw	r2, #5999	; 0x176f
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	dc04      	bgt.n	8004d9c <main+0x178>
				  pwm_duty +=10;
 8004d92:	4b4b      	ldr	r3, [pc, #300]	; (8004ec0 <main+0x29c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	330a      	adds	r3, #10
 8004d98:	4a49      	ldr	r2, [pc, #292]	; (8004ec0 <main+0x29c>)
 8004d9a:	6013      	str	r3, [r2, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,pwm_duty);
 8004d9c:	4b48      	ldr	r3, [pc, #288]	; (8004ec0 <main+0x29c>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b48      	ldr	r3, [pc, #288]	; (8004ec4 <main+0x2a0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm_duty);
 8004da6:	4b46      	ldr	r3, [pc, #280]	; (8004ec0 <main+0x29c>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4b46      	ldr	r3, [pc, #280]	; (8004ec4 <main+0x2a0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8004db0:	e083      	b.n	8004eba <main+0x296>

		  case 2: //  w prawo
			  HAL_GPIO_WritePin(Dc_IN4_GPIO_Port, Dc_IN4_Pin, GPIO_PIN_RESET);
 8004db2:	2200      	movs	r2, #0
 8004db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004db8:	4848      	ldr	r0, [pc, #288]	; (8004edc <main+0x2b8>)
 8004dba:	f7fc ff83 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN3_GPIO_Port, Dc_IN3_Pin, GPIO_PIN_SET);
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dc4:	4845      	ldr	r0, [pc, #276]	; (8004edc <main+0x2b8>)
 8004dc6:	f7fc ff7d 	bl	8001cc4 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dd0:	4842      	ldr	r0, [pc, #264]	; (8004edc <main+0x2b8>)
 8004dd2:	f7fc ff77 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_SET);
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ddc:	483f      	ldr	r0, [pc, #252]	; (8004edc <main+0x2b8>)
 8004dde:	f7fc ff71 	bl	8001cc4 <HAL_GPIO_WritePin>
			  if(pwm_duty <6000){
 8004de2:	4b37      	ldr	r3, [pc, #220]	; (8004ec0 <main+0x29c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f241 726f 	movw	r2, #5999	; 0x176f
 8004dea:	4293      	cmp	r3, r2
 8004dec:	dc04      	bgt.n	8004df8 <main+0x1d4>
				  pwm_duty +=10;
 8004dee:	4b34      	ldr	r3, [pc, #208]	; (8004ec0 <main+0x29c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	330a      	adds	r3, #10
 8004df4:	4a32      	ldr	r2, [pc, #200]	; (8004ec0 <main+0x29c>)
 8004df6:	6013      	str	r3, [r2, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,pwm_duty);
 8004df8:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <main+0x29c>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <main+0x2a0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm_duty);
 8004e02:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <main+0x29c>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <main+0x2a0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8004e0c:	e055      	b.n	8004eba <main+0x296>

		  case 3: // do tylu
			  HAL_GPIO_WritePin(Dc_IN4_GPIO_Port, Dc_IN4_Pin, GPIO_PIN_SET);
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e14:	4831      	ldr	r0, [pc, #196]	; (8004edc <main+0x2b8>)
 8004e16:	f7fc ff55 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN3_GPIO_Port, Dc_IN3_Pin, GPIO_PIN_RESET);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e20:	482e      	ldr	r0, [pc, #184]	; (8004edc <main+0x2b8>)
 8004e22:	f7fc ff4f 	bl	8001cc4 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8004e26:	2200      	movs	r2, #0
 8004e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e2c:	482b      	ldr	r0, [pc, #172]	; (8004edc <main+0x2b8>)
 8004e2e:	f7fc ff49 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_SET);
 8004e32:	2201      	movs	r2, #1
 8004e34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e38:	4828      	ldr	r0, [pc, #160]	; (8004edc <main+0x2b8>)
 8004e3a:	f7fc ff43 	bl	8001cc4 <HAL_GPIO_WritePin>
			  if(pwm_duty <6000){
 8004e3e:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <main+0x29c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f241 726f 	movw	r2, #5999	; 0x176f
 8004e46:	4293      	cmp	r3, r2
 8004e48:	dc04      	bgt.n	8004e54 <main+0x230>
				  pwm_duty +=10;
 8004e4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <main+0x29c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330a      	adds	r3, #10
 8004e50:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <main+0x29c>)
 8004e52:	6013      	str	r3, [r2, #0]
			  }
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,pwm_duty);
 8004e54:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <main+0x29c>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <main+0x2a0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwm_duty);
 8004e5e:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <main+0x29c>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <main+0x2a0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8004e68:	e027      	b.n	8004eba <main+0x296>

		  default:
			  HAL_GPIO_WritePin(Dc_IN4_GPIO_Port, Dc_IN4_Pin, GPIO_PIN_RESET);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e70:	481a      	ldr	r0, [pc, #104]	; (8004edc <main+0x2b8>)
 8004e72:	f7fc ff27 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN3_GPIO_Port, Dc_IN3_Pin, GPIO_PIN_RESET);
 8004e76:	2200      	movs	r2, #0
 8004e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e7c:	4817      	ldr	r0, [pc, #92]	; (8004edc <main+0x2b8>)
 8004e7e:	f7fc ff21 	bl	8001cc4 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8004e82:	2200      	movs	r2, #0
 8004e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e88:	4814      	ldr	r0, [pc, #80]	; (8004edc <main+0x2b8>)
 8004e8a:	f7fc ff1b 	bl	8001cc4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e94:	4811      	ldr	r0, [pc, #68]	; (8004edc <main+0x2b8>)
 8004e96:	f7fc ff15 	bl	8001cc4 <HAL_GPIO_WritePin>

			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <main+0x2a0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <main+0x2a0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	635a      	str	r2, [r3, #52]	; 0x34

			  pwm_duty=0;
 8004eaa:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <main+0x29c>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
			  flag = 0;
 8004eb0:	4b02      	ldr	r3, [pc, #8]	; (8004ebc <main+0x298>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
			  break;
 8004eb6:	e000      	b.n	8004eba <main+0x296>
		  }
	  }
 8004eb8:	bf00      	nop
	  if(flag == 1){
 8004eba:	e6e8      	b.n	8004c8e <main+0x6a>
 8004ebc:	20000209 	.word	0x20000209
 8004ec0:	20000210 	.word	0x20000210
 8004ec4:	20000214 	.word	0x20000214
 8004ec8:	20000254 	.word	0x20000254
 8004ecc:	20000208 	.word	0x20000208
 8004ed0:	200002f4 	.word	0x200002f4
 8004ed4:	2000020c 	.word	0x2000020c
 8004ed8:	42480000 	.word	0x42480000
 8004edc:	40020c00 	.word	0x40020c00

08004ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b094      	sub	sp, #80	; 0x50
 8004ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ee6:	f107 0320 	add.w	r3, r7, #32
 8004eea:	2230      	movs	r2, #48	; 0x30
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fc26 	bl	8005740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f04:	2300      	movs	r3, #0
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <SystemClock_Config+0xc8>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <SystemClock_Config+0xc8>)
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	6413      	str	r3, [r2, #64]	; 0x40
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <SystemClock_Config+0xc8>)
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f20:	2300      	movs	r3, #0
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <SystemClock_Config+0xcc>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <SystemClock_Config+0xcc>)
 8004f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <SystemClock_Config+0xcc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f40:	2301      	movs	r3, #1
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f44:	2310      	movs	r3, #16
 8004f46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004f50:	2308      	movs	r3, #8
 8004f52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004f54:	2364      	movs	r3, #100	; 0x64
 8004f56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004f5c:	2308      	movs	r3, #8
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f60:	f107 0320 	add.w	r3, r7, #32
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fc fec7 	bl	8001cf8 <HAL_RCC_OscConfig>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004f70:	f000 f81e 	bl	8004fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f74:	230f      	movs	r3, #15
 8004f76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004f8a:	f107 030c 	add.w	r3, r7, #12
 8004f8e:	2103      	movs	r1, #3
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fd f921 	bl	80021d8 <HAL_RCC_ClockConfig>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004f9c:	f000 f808 	bl	8004fb0 <Error_Handler>
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3750      	adds	r7, #80	; 0x50
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40007000 	.word	0x40007000

08004fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_MspInit+0x4c>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	4a0f      	ldr	r2, [pc, #60]	; (800500c <HAL_MspInit+0x4c>)
 8004fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	; (800500c <HAL_MspInit+0x4c>)
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	4b09      	ldr	r3, [pc, #36]	; (800500c <HAL_MspInit+0x4c>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	4a08      	ldr	r2, [pc, #32]	; (800500c <HAL_MspInit+0x4c>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <HAL_MspInit+0x4c>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004ffe:	2007      	movs	r0, #7
 8005000:	f7fc f90c 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40023800 	.word	0x40023800

08005010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005022:	e7fe      	b.n	8005022 <HardFault_Handler+0x4>

08005024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005028:	e7fe      	b.n	8005028 <MemManage_Handler+0x4>

0800502a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800502e:	e7fe      	b.n	800502e <BusFault_Handler+0x4>

08005030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005034:	e7fe      	b.n	8005034 <UsageFault_Handler+0x4>

08005036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005036:	b480      	push	{r7}
 8005038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800503a:	bf00      	nop
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005052:	b480      	push	{r7}
 8005054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005064:	f7fb ffea 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}

0800506c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <DMA1_Stream5_IRQHandler+0x10>)
 8005072:	f7fc fa3d 	bl	80014f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000294 	.word	0x20000294

08005080 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <TIM3_IRQHandler+0x10>)
 8005086:	f7fd fc0f 	bl	80028a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000254 	.word	0x20000254

08005094 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <TIM4_IRQHandler+0x10>)
 800509a:	f7fd fc05 	bl	80028a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000214 	.word	0x20000214

080050a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80050ac:	4802      	ldr	r0, [pc, #8]	; (80050b8 <USART2_IRQHandler+0x10>)
 80050ae:	f7fe fd17 	bl	8003ae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	200002f4 	.word	0x200002f4

080050bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80050c4:	4b11      	ldr	r3, [pc, #68]	; (800510c <_sbrk+0x50>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <_sbrk+0x16>
		heap_end = &end;
 80050cc:	4b0f      	ldr	r3, [pc, #60]	; (800510c <_sbrk+0x50>)
 80050ce:	4a10      	ldr	r2, [pc, #64]	; (8005110 <_sbrk+0x54>)
 80050d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80050d2:	4b0e      	ldr	r3, [pc, #56]	; (800510c <_sbrk+0x50>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <_sbrk+0x50>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4413      	add	r3, r2
 80050e0:	466a      	mov	r2, sp
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d907      	bls.n	80050f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80050e6:	f000 fb01 	bl	80056ec <__errno>
 80050ea:	4602      	mov	r2, r0
 80050ec:	230c      	movs	r3, #12
 80050ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295
 80050f4:	e006      	b.n	8005104 <_sbrk+0x48>
	}

	heap_end += incr;
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <_sbrk+0x50>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	4a03      	ldr	r2, [pc, #12]	; (800510c <_sbrk+0x50>)
 8005100:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005102:	68fb      	ldr	r3, [r7, #12]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	200001f8 	.word	0x200001f8
 8005110:	20000338 	.word	0x20000338

08005114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005118:	4b08      	ldr	r3, [pc, #32]	; (800513c <SystemInit+0x28>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	4a07      	ldr	r2, [pc, #28]	; (800513c <SystemInit+0x28>)
 8005120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005128:	4b04      	ldr	r3, [pc, #16]	; (800513c <SystemInit+0x28>)
 800512a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800512e:	609a      	str	r2, [r3, #8]
#endif
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	e000ed00 	.word	0xe000ed00

08005140 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b092      	sub	sp, #72	; 0x48
 8005144:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005146:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	605a      	str	r2, [r3, #4]
 8005150:	609a      	str	r2, [r3, #8]
 8005152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800515e:	f107 0320 	add.w	r3, r7, #32
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800516c:	1d3b      	adds	r3, r7, #4
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	605a      	str	r2, [r3, #4]
 8005174:	609a      	str	r2, [r3, #8]
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	611a      	str	r2, [r3, #16]
 800517a:	615a      	str	r2, [r3, #20]
 800517c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800517e:	4b43      	ldr	r3, [pc, #268]	; (800528c <MX_TIM3_Init+0x14c>)
 8005180:	4a43      	ldr	r2, [pc, #268]	; (8005290 <MX_TIM3_Init+0x150>)
 8005182:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8005184:	4b41      	ldr	r3, [pc, #260]	; (800528c <MX_TIM3_Init+0x14c>)
 8005186:	2263      	movs	r2, #99	; 0x63
 8005188:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800518a:	4b40      	ldr	r3, [pc, #256]	; (800528c <MX_TIM3_Init+0x14c>)
 800518c:	2200      	movs	r2, #0
 800518e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8005190:	4b3e      	ldr	r3, [pc, #248]	; (800528c <MX_TIM3_Init+0x14c>)
 8005192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005198:	4b3c      	ldr	r3, [pc, #240]	; (800528c <MX_TIM3_Init+0x14c>)
 800519a:	2200      	movs	r2, #0
 800519c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800519e:	4b3b      	ldr	r3, [pc, #236]	; (800528c <MX_TIM3_Init+0x14c>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80051a4:	4839      	ldr	r0, [pc, #228]	; (800528c <MX_TIM3_Init+0x14c>)
 80051a6:	f7fd fa09 	bl	80025bc <HAL_TIM_Base_Init>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80051b0:	f7ff fefe 	bl	8004fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051b8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80051ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051be:	4619      	mov	r1, r3
 80051c0:	4832      	ldr	r0, [pc, #200]	; (800528c <MX_TIM3_Init+0x14c>)
 80051c2:	f7fd fddb 	bl	8002d7c <HAL_TIM_ConfigClockSource>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80051cc:	f7ff fef0 	bl	8004fb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80051d0:	482e      	ldr	r0, [pc, #184]	; (800528c <MX_TIM3_Init+0x14c>)
 80051d2:	f7fd faa9 	bl	8002728 <HAL_TIM_IC_Init>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80051dc:	f7ff fee8 	bl	8004fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80051e0:	482a      	ldr	r0, [pc, #168]	; (800528c <MX_TIM3_Init+0x14c>)
 80051e2:	f7fd fa3a 	bl	800265a <HAL_TIM_PWM_Init>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80051ec:	f7ff fee0 	bl	8004fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051f0:	2300      	movs	r3, #0
 80051f2:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051f4:	2300      	movs	r3, #0
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80051f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051fc:	4619      	mov	r1, r3
 80051fe:	4823      	ldr	r0, [pc, #140]	; (800528c <MX_TIM3_Init+0x14c>)
 8005200:	f7fe fa86 	bl	8003710 <HAL_TIMEx_MasterConfigSynchronization>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800520a:	f7ff fed1 	bl	8004fb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800520e:	2300      	movs	r3, #0
 8005210:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005212:	2301      	movs	r3, #1
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005216:	2300      	movs	r3, #0
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800521e:	f107 0320 	add.w	r3, r7, #32
 8005222:	2200      	movs	r2, #0
 8005224:	4619      	mov	r1, r3
 8005226:	4819      	ldr	r0, [pc, #100]	; (800528c <MX_TIM3_Init+0x14c>)
 8005228:	f7fd fc46 	bl	8002ab8 <HAL_TIM_IC_ConfigChannel>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8005232:	f7ff febd 	bl	8004fb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005236:	2302      	movs	r3, #2
 8005238:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800523a:	2302      	movs	r3, #2
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800523e:	f107 0320 	add.w	r3, r7, #32
 8005242:	2204      	movs	r2, #4
 8005244:	4619      	mov	r1, r3
 8005246:	4811      	ldr	r0, [pc, #68]	; (800528c <MX_TIM3_Init+0x14c>)
 8005248:	f7fd fc36 	bl	8002ab8 <HAL_TIM_IC_ConfigChannel>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8005252:	f7ff fead 	bl	8004fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005256:	2360      	movs	r3, #96	; 0x60
 8005258:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11;
 800525a:	230b      	movs	r3, #11
 800525c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	2208      	movs	r2, #8
 800526a:	4619      	mov	r1, r3
 800526c:	4807      	ldr	r0, [pc, #28]	; (800528c <MX_TIM3_Init+0x14c>)
 800526e:	f7fd fcbf 	bl	8002bf0 <HAL_TIM_PWM_ConfigChannel>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <MX_TIM3_Init+0x13c>
  {
    Error_Handler();
 8005278:	f7ff fe9a 	bl	8004fb0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800527c:	4803      	ldr	r0, [pc, #12]	; (800528c <MX_TIM3_Init+0x14c>)
 800527e:	f000 f8f9 	bl	8005474 <HAL_TIM_MspPostInit>

}
 8005282:	bf00      	nop
 8005284:	3748      	adds	r7, #72	; 0x48
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000254 	.word	0x20000254
 8005290:	40000400 	.word	0x40000400

08005294 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08e      	sub	sp, #56	; 0x38
 8005298:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800529a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	605a      	str	r2, [r3, #4]
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052a8:	f107 0320 	add.w	r3, r7, #32
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052b2:	1d3b      	adds	r3, r7, #4
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	611a      	str	r2, [r3, #16]
 80052c0:	615a      	str	r2, [r3, #20]
 80052c2:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80052c4:	4b32      	ldr	r3, [pc, #200]	; (8005390 <MX_TIM4_Init+0xfc>)
 80052c6:	4a33      	ldr	r2, [pc, #204]	; (8005394 <MX_TIM4_Init+0x100>)
 80052c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200;
 80052ca:	4b31      	ldr	r3, [pc, #196]	; (8005390 <MX_TIM4_Init+0xfc>)
 80052cc:	22c8      	movs	r2, #200	; 0xc8
 80052ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052d0:	4b2f      	ldr	r3, [pc, #188]	; (8005390 <MX_TIM4_Init+0xfc>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80052d6:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <MX_TIM4_Init+0xfc>)
 80052d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80052dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052de:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <MX_TIM4_Init+0xfc>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052e4:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <MX_TIM4_Init+0xfc>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80052ea:	4829      	ldr	r0, [pc, #164]	; (8005390 <MX_TIM4_Init+0xfc>)
 80052ec:	f7fd f966 	bl	80025bc <HAL_TIM_Base_Init>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80052f6:	f7ff fe5b 	bl	8004fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005304:	4619      	mov	r1, r3
 8005306:	4822      	ldr	r0, [pc, #136]	; (8005390 <MX_TIM4_Init+0xfc>)
 8005308:	f7fd fd38 	bl	8002d7c <HAL_TIM_ConfigClockSource>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005312:	f7ff fe4d 	bl	8004fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005316:	481e      	ldr	r0, [pc, #120]	; (8005390 <MX_TIM4_Init+0xfc>)
 8005318:	f7fd f99f 	bl	800265a <HAL_TIM_PWM_Init>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005322:	f7ff fe45 	bl	8004fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005326:	2300      	movs	r3, #0
 8005328:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800532a:	2300      	movs	r3, #0
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800532e:	f107 0320 	add.w	r3, r7, #32
 8005332:	4619      	mov	r1, r3
 8005334:	4816      	ldr	r0, [pc, #88]	; (8005390 <MX_TIM4_Init+0xfc>)
 8005336:	f7fe f9eb 	bl	8003710 <HAL_TIMEx_MasterConfigSynchronization>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005340:	f7ff fe36 	bl	8004fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005344:	2360      	movs	r3, #96	; 0x60
 8005346:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	2200      	movs	r2, #0
 8005358:	4619      	mov	r1, r3
 800535a:	480d      	ldr	r0, [pc, #52]	; (8005390 <MX_TIM4_Init+0xfc>)
 800535c:	f7fd fc48 	bl	8002bf0 <HAL_TIM_PWM_ConfigChannel>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005366:	f7ff fe23 	bl	8004fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800536a:	1d3b      	adds	r3, r7, #4
 800536c:	2204      	movs	r2, #4
 800536e:	4619      	mov	r1, r3
 8005370:	4807      	ldr	r0, [pc, #28]	; (8005390 <MX_TIM4_Init+0xfc>)
 8005372:	f7fd fc3d 	bl	8002bf0 <HAL_TIM_PWM_ConfigChannel>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800537c:	f7ff fe18 	bl	8004fb0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8005380:	4803      	ldr	r0, [pc, #12]	; (8005390 <MX_TIM4_Init+0xfc>)
 8005382:	f000 f877 	bl	8005474 <HAL_TIM_MspPostInit>

}
 8005386:	bf00      	nop
 8005388:	3738      	adds	r7, #56	; 0x38
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000214 	.word	0x20000214
 8005394:	40000800 	.word	0x40000800

08005398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a0:	f107 0314 	add.w	r3, r7, #20
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	609a      	str	r2, [r3, #8]
 80053ac:	60da      	str	r2, [r3, #12]
 80053ae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <HAL_TIM_Base_MspInit+0xcc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d134      	bne.n	8005424 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <HAL_TIM_Base_MspInit+0xd0>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	4a29      	ldr	r2, [pc, #164]	; (8005468 <HAL_TIM_Base_MspInit+0xd0>)
 80053c4:	f043 0302 	orr.w	r3, r3, #2
 80053c8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ca:	4b27      	ldr	r3, [pc, #156]	; (8005468 <HAL_TIM_Base_MspInit+0xd0>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	4b23      	ldr	r3, [pc, #140]	; (8005468 <HAL_TIM_Base_MspInit+0xd0>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	4a22      	ldr	r2, [pc, #136]	; (8005468 <HAL_TIM_Base_MspInit+0xd0>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6313      	str	r3, [r2, #48]	; 0x30
 80053e6:	4b20      	ldr	r3, [pc, #128]	; (8005468 <HAL_TIM_Base_MspInit+0xd0>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = Hc_ECHO_Pin;
 80053f2:	2340      	movs	r3, #64	; 0x40
 80053f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f6:	2302      	movs	r3, #2
 80053f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053fe:	2300      	movs	r3, #0
 8005400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005402:	2302      	movs	r3, #2
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Hc_ECHO_GPIO_Port, &GPIO_InitStruct);
 8005406:	f107 0314 	add.w	r3, r7, #20
 800540a:	4619      	mov	r1, r3
 800540c:	4817      	ldr	r0, [pc, #92]	; (800546c <HAL_TIM_Base_MspInit+0xd4>)
 800540e:	f7fc fad7 	bl	80019c0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005412:	2200      	movs	r2, #0
 8005414:	2100      	movs	r1, #0
 8005416:	201d      	movs	r0, #29
 8005418:	f7fb ff0b 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800541c:	201d      	movs	r0, #29
 800541e:	f7fb ff24 	bl	800126a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005422:	e01a      	b.n	800545a <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM4)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a11      	ldr	r2, [pc, #68]	; (8005470 <HAL_TIM_Base_MspInit+0xd8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d115      	bne.n	800545a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <HAL_TIM_Base_MspInit+0xd0>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	4a0c      	ldr	r2, [pc, #48]	; (8005468 <HAL_TIM_Base_MspInit+0xd0>)
 8005438:	f043 0304 	orr.w	r3, r3, #4
 800543c:	6413      	str	r3, [r2, #64]	; 0x40
 800543e:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <HAL_TIM_Base_MspInit+0xd0>)
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	60bb      	str	r3, [r7, #8]
 8005448:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800544a:	2200      	movs	r2, #0
 800544c:	2100      	movs	r1, #0
 800544e:	201e      	movs	r0, #30
 8005450:	f7fb feef 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005454:	201e      	movs	r0, #30
 8005456:	f7fb ff08 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 800545a:	bf00      	nop
 800545c:	3728      	adds	r7, #40	; 0x28
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40000400 	.word	0x40000400
 8005468:	40023800 	.word	0x40023800
 800546c:	40020000 	.word	0x40020000
 8005470:	40000800 	.word	0x40000800

08005474 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	2200      	movs	r2, #0
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	605a      	str	r2, [r3, #4]
 8005486:	609a      	str	r2, [r3, #8]
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a24      	ldr	r2, [pc, #144]	; (8005524 <HAL_TIM_MspPostInit+0xb0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d11e      	bne.n	80054d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	4b23      	ldr	r3, [pc, #140]	; (8005528 <HAL_TIM_MspPostInit+0xb4>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	4a22      	ldr	r2, [pc, #136]	; (8005528 <HAL_TIM_MspPostInit+0xb4>)
 80054a0:	f043 0302 	orr.w	r3, r3, #2
 80054a4:	6313      	str	r3, [r2, #48]	; 0x30
 80054a6:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_TIM_MspPostInit+0xb4>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = Hc_TRIG_Pin;
 80054b2:	2301      	movs	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b6:	2302      	movs	r3, #2
 80054b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054be:	2300      	movs	r3, #0
 80054c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054c2:	2302      	movs	r3, #2
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Hc_TRIG_GPIO_Port, &GPIO_InitStruct);
 80054c6:	f107 0314 	add.w	r3, r7, #20
 80054ca:	4619      	mov	r1, r3
 80054cc:	4817      	ldr	r0, [pc, #92]	; (800552c <HAL_TIM_MspPostInit+0xb8>)
 80054ce:	f7fc fa77 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80054d2:	e023      	b.n	800551c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a15      	ldr	r2, [pc, #84]	; (8005530 <HAL_TIM_MspPostInit+0xbc>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d11e      	bne.n	800551c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	4b11      	ldr	r3, [pc, #68]	; (8005528 <HAL_TIM_MspPostInit+0xb4>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	4a10      	ldr	r2, [pc, #64]	; (8005528 <HAL_TIM_MspPostInit+0xb4>)
 80054e8:	f043 0308 	orr.w	r3, r3, #8
 80054ec:	6313      	str	r3, [r2, #48]	; 0x30
 80054ee:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <HAL_TIM_MspPostInit+0xb4>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Dc_ENB_Pin|Dc_ENA_Pin;
 80054fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80054fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005500:	2302      	movs	r3, #2
 8005502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005508:	2300      	movs	r3, #0
 800550a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800550c:	2302      	movs	r3, #2
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	4619      	mov	r1, r3
 8005516:	4807      	ldr	r0, [pc, #28]	; (8005534 <HAL_TIM_MspPostInit+0xc0>)
 8005518:	f7fc fa52 	bl	80019c0 <HAL_GPIO_Init>
}
 800551c:	bf00      	nop
 800551e:	3728      	adds	r7, #40	; 0x28
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40000400 	.word	0x40000400
 8005528:	40023800 	.word	0x40023800
 800552c:	40020400 	.word	0x40020400
 8005530:	40000800 	.word	0x40000800
 8005534:	40020c00 	.word	0x40020c00

08005538 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <MX_USART2_UART_Init+0x4c>)
 800553e:	4a12      	ldr	r2, [pc, #72]	; (8005588 <MX_USART2_UART_Init+0x50>)
 8005540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <MX_USART2_UART_Init+0x4c>)
 8005544:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800554a:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <MX_USART2_UART_Init+0x4c>)
 800554c:	2200      	movs	r2, #0
 800554e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005550:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <MX_USART2_UART_Init+0x4c>)
 8005552:	2200      	movs	r2, #0
 8005554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005556:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <MX_USART2_UART_Init+0x4c>)
 8005558:	2200      	movs	r2, #0
 800555a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <MX_USART2_UART_Init+0x4c>)
 800555e:	220c      	movs	r2, #12
 8005560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005562:	4b08      	ldr	r3, [pc, #32]	; (8005584 <MX_USART2_UART_Init+0x4c>)
 8005564:	2200      	movs	r2, #0
 8005566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <MX_USART2_UART_Init+0x4c>)
 800556a:	2200      	movs	r2, #0
 800556c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800556e:	4805      	ldr	r0, [pc, #20]	; (8005584 <MX_USART2_UART_Init+0x4c>)
 8005570:	f7fe f950 	bl	8003814 <HAL_UART_Init>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800557a:	f7ff fd19 	bl	8004fb0 <Error_Handler>
  }

}
 800557e:	bf00      	nop
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	200002f4 	.word	0x200002f4
 8005588:	40004400 	.word	0x40004400

0800558c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	; 0x28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005594:	f107 0314 	add.w	r3, r7, #20
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a34      	ldr	r2, [pc, #208]	; (800567c <HAL_UART_MspInit+0xf0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d162      	bne.n	8005674 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	4b33      	ldr	r3, [pc, #204]	; (8005680 <HAL_UART_MspInit+0xf4>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	4a32      	ldr	r2, [pc, #200]	; (8005680 <HAL_UART_MspInit+0xf4>)
 80055b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055bc:	6413      	str	r3, [r2, #64]	; 0x40
 80055be:	4b30      	ldr	r3, [pc, #192]	; (8005680 <HAL_UART_MspInit+0xf4>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <HAL_UART_MspInit+0xf4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	4a2b      	ldr	r2, [pc, #172]	; (8005680 <HAL_UART_MspInit+0xf4>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	6313      	str	r3, [r2, #48]	; 0x30
 80055da:	4b29      	ldr	r3, [pc, #164]	; (8005680 <HAL_UART_MspInit+0xf4>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80055e6:	230c      	movs	r3, #12
 80055e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ea:	2302      	movs	r3, #2
 80055ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f2:	2303      	movs	r3, #3
 80055f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055f6:	2307      	movs	r3, #7
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055fa:	f107 0314 	add.w	r3, r7, #20
 80055fe:	4619      	mov	r1, r3
 8005600:	4820      	ldr	r0, [pc, #128]	; (8005684 <HAL_UART_MspInit+0xf8>)
 8005602:	f7fc f9dd 	bl	80019c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <HAL_UART_MspInit+0xfc>)
 8005608:	4a20      	ldr	r2, [pc, #128]	; (800568c <HAL_UART_MspInit+0x100>)
 800560a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <HAL_UART_MspInit+0xfc>)
 800560e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005612:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005614:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <HAL_UART_MspInit+0xfc>)
 8005616:	2200      	movs	r2, #0
 8005618:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <HAL_UART_MspInit+0xfc>)
 800561c:	2200      	movs	r2, #0
 800561e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005620:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_UART_MspInit+0xfc>)
 8005622:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005626:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005628:	4b17      	ldr	r3, [pc, #92]	; (8005688 <HAL_UART_MspInit+0xfc>)
 800562a:	2200      	movs	r2, #0
 800562c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800562e:	4b16      	ldr	r3, [pc, #88]	; (8005688 <HAL_UART_MspInit+0xfc>)
 8005630:	2200      	movs	r2, #0
 8005632:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005634:	4b14      	ldr	r3, [pc, #80]	; (8005688 <HAL_UART_MspInit+0xfc>)
 8005636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800563a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800563c:	4b12      	ldr	r3, [pc, #72]	; (8005688 <HAL_UART_MspInit+0xfc>)
 800563e:	2200      	movs	r2, #0
 8005640:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_UART_MspInit+0xfc>)
 8005644:	2200      	movs	r2, #0
 8005646:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005648:	480f      	ldr	r0, [pc, #60]	; (8005688 <HAL_UART_MspInit+0xfc>)
 800564a:	f7fb fe29 	bl	80012a0 <HAL_DMA_Init>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005654:	f7ff fcac 	bl	8004fb0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <HAL_UART_MspInit+0xfc>)
 800565c:	635a      	str	r2, [r3, #52]	; 0x34
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <HAL_UART_MspInit+0xfc>)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005664:	2200      	movs	r2, #0
 8005666:	2100      	movs	r1, #0
 8005668:	2026      	movs	r0, #38	; 0x26
 800566a:	f7fb fde2 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800566e:	2026      	movs	r0, #38	; 0x26
 8005670:	f7fb fdfb 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005674:	bf00      	nop
 8005676:	3728      	adds	r7, #40	; 0x28
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40004400 	.word	0x40004400
 8005680:	40023800 	.word	0x40023800
 8005684:	40020000 	.word	0x40020000
 8005688:	20000294 	.word	0x20000294
 800568c:	40026088 	.word	0x40026088

08005690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005694:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005696:	e003      	b.n	80056a0 <LoopCopyDataInit>

08005698 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800569a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800569c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800569e:	3104      	adds	r1, #4

080056a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056a0:	480b      	ldr	r0, [pc, #44]	; (80056d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056a2:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056a8:	d3f6      	bcc.n	8005698 <CopyDataInit>
  ldr  r2, =_sbss
 80056aa:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056ac:	e002      	b.n	80056b4 <LoopFillZerobss>

080056ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056b0:	f842 3b04 	str.w	r3, [r2], #4

080056b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056b8:	d3f9      	bcc.n	80056ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056ba:	f7ff fd2b 	bl	8005114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056be:	f000 f81b 	bl	80056f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056c2:	f7ff faaf 	bl	8004c24 <main>
  bx  lr    
 80056c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80056cc:	080094f0 	.word	0x080094f0
  ldr  r0, =_sdata
 80056d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80056d4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80056d8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80056dc:	20000338 	.word	0x20000338

080056e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056e0:	e7fe      	b.n	80056e0 <ADC_IRQHandler>

080056e2 <atoi>:
 80056e2:	220a      	movs	r2, #10
 80056e4:	2100      	movs	r1, #0
 80056e6:	f001 bd45 	b.w	8007174 <strtol>
	...

080056ec <__errno>:
 80056ec:	4b01      	ldr	r3, [pc, #4]	; (80056f4 <__errno+0x8>)
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000000c 	.word	0x2000000c

080056f8 <__libc_init_array>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4e0d      	ldr	r6, [pc, #52]	; (8005730 <__libc_init_array+0x38>)
 80056fc:	4c0d      	ldr	r4, [pc, #52]	; (8005734 <__libc_init_array+0x3c>)
 80056fe:	1ba4      	subs	r4, r4, r6
 8005700:	10a4      	asrs	r4, r4, #2
 8005702:	2500      	movs	r5, #0
 8005704:	42a5      	cmp	r5, r4
 8005706:	d109      	bne.n	800571c <__libc_init_array+0x24>
 8005708:	4e0b      	ldr	r6, [pc, #44]	; (8005738 <__libc_init_array+0x40>)
 800570a:	4c0c      	ldr	r4, [pc, #48]	; (800573c <__libc_init_array+0x44>)
 800570c:	f003 fd6a 	bl	80091e4 <_init>
 8005710:	1ba4      	subs	r4, r4, r6
 8005712:	10a4      	asrs	r4, r4, #2
 8005714:	2500      	movs	r5, #0
 8005716:	42a5      	cmp	r5, r4
 8005718:	d105      	bne.n	8005726 <__libc_init_array+0x2e>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005720:	4798      	blx	r3
 8005722:	3501      	adds	r5, #1
 8005724:	e7ee      	b.n	8005704 <__libc_init_array+0xc>
 8005726:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800572a:	4798      	blx	r3
 800572c:	3501      	adds	r5, #1
 800572e:	e7f2      	b.n	8005716 <__libc_init_array+0x1e>
 8005730:	080094e8 	.word	0x080094e8
 8005734:	080094e8 	.word	0x080094e8
 8005738:	080094e8 	.word	0x080094e8
 800573c:	080094ec 	.word	0x080094ec

08005740 <memset>:
 8005740:	4402      	add	r2, r0
 8005742:	4603      	mov	r3, r0
 8005744:	4293      	cmp	r3, r2
 8005746:	d100      	bne.n	800574a <memset+0xa>
 8005748:	4770      	bx	lr
 800574a:	f803 1b01 	strb.w	r1, [r3], #1
 800574e:	e7f9      	b.n	8005744 <memset+0x4>

08005750 <__cvt>:
 8005750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	ec55 4b10 	vmov	r4, r5, d0
 8005758:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800575a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800575e:	2d00      	cmp	r5, #0
 8005760:	460e      	mov	r6, r1
 8005762:	4691      	mov	r9, r2
 8005764:	4619      	mov	r1, r3
 8005766:	bfb8      	it	lt
 8005768:	4622      	movlt	r2, r4
 800576a:	462b      	mov	r3, r5
 800576c:	f027 0720 	bic.w	r7, r7, #32
 8005770:	bfbb      	ittet	lt
 8005772:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005776:	461d      	movlt	r5, r3
 8005778:	2300      	movge	r3, #0
 800577a:	232d      	movlt	r3, #45	; 0x2d
 800577c:	bfb8      	it	lt
 800577e:	4614      	movlt	r4, r2
 8005780:	2f46      	cmp	r7, #70	; 0x46
 8005782:	700b      	strb	r3, [r1, #0]
 8005784:	d004      	beq.n	8005790 <__cvt+0x40>
 8005786:	2f45      	cmp	r7, #69	; 0x45
 8005788:	d100      	bne.n	800578c <__cvt+0x3c>
 800578a:	3601      	adds	r6, #1
 800578c:	2102      	movs	r1, #2
 800578e:	e000      	b.n	8005792 <__cvt+0x42>
 8005790:	2103      	movs	r1, #3
 8005792:	ab03      	add	r3, sp, #12
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	ab02      	add	r3, sp, #8
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	4632      	mov	r2, r6
 800579c:	4653      	mov	r3, sl
 800579e:	ec45 4b10 	vmov	d0, r4, r5
 80057a2:	f001 fd89 	bl	80072b8 <_dtoa_r>
 80057a6:	2f47      	cmp	r7, #71	; 0x47
 80057a8:	4680      	mov	r8, r0
 80057aa:	d102      	bne.n	80057b2 <__cvt+0x62>
 80057ac:	f019 0f01 	tst.w	r9, #1
 80057b0:	d026      	beq.n	8005800 <__cvt+0xb0>
 80057b2:	2f46      	cmp	r7, #70	; 0x46
 80057b4:	eb08 0906 	add.w	r9, r8, r6
 80057b8:	d111      	bne.n	80057de <__cvt+0x8e>
 80057ba:	f898 3000 	ldrb.w	r3, [r8]
 80057be:	2b30      	cmp	r3, #48	; 0x30
 80057c0:	d10a      	bne.n	80057d8 <__cvt+0x88>
 80057c2:	2200      	movs	r2, #0
 80057c4:	2300      	movs	r3, #0
 80057c6:	4620      	mov	r0, r4
 80057c8:	4629      	mov	r1, r5
 80057ca:	f7fb f985 	bl	8000ad8 <__aeabi_dcmpeq>
 80057ce:	b918      	cbnz	r0, 80057d8 <__cvt+0x88>
 80057d0:	f1c6 0601 	rsb	r6, r6, #1
 80057d4:	f8ca 6000 	str.w	r6, [sl]
 80057d8:	f8da 3000 	ldr.w	r3, [sl]
 80057dc:	4499      	add	r9, r3
 80057de:	2200      	movs	r2, #0
 80057e0:	2300      	movs	r3, #0
 80057e2:	4620      	mov	r0, r4
 80057e4:	4629      	mov	r1, r5
 80057e6:	f7fb f977 	bl	8000ad8 <__aeabi_dcmpeq>
 80057ea:	b938      	cbnz	r0, 80057fc <__cvt+0xac>
 80057ec:	2230      	movs	r2, #48	; 0x30
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	454b      	cmp	r3, r9
 80057f2:	d205      	bcs.n	8005800 <__cvt+0xb0>
 80057f4:	1c59      	adds	r1, r3, #1
 80057f6:	9103      	str	r1, [sp, #12]
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e7f8      	b.n	80057ee <__cvt+0x9e>
 80057fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005804:	eba3 0308 	sub.w	r3, r3, r8
 8005808:	4640      	mov	r0, r8
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	b004      	add	sp, #16
 800580e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005812 <__exponent>:
 8005812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005814:	2900      	cmp	r1, #0
 8005816:	4604      	mov	r4, r0
 8005818:	bfba      	itte	lt
 800581a:	4249      	neglt	r1, r1
 800581c:	232d      	movlt	r3, #45	; 0x2d
 800581e:	232b      	movge	r3, #43	; 0x2b
 8005820:	2909      	cmp	r1, #9
 8005822:	f804 2b02 	strb.w	r2, [r4], #2
 8005826:	7043      	strb	r3, [r0, #1]
 8005828:	dd20      	ble.n	800586c <__exponent+0x5a>
 800582a:	f10d 0307 	add.w	r3, sp, #7
 800582e:	461f      	mov	r7, r3
 8005830:	260a      	movs	r6, #10
 8005832:	fb91 f5f6 	sdiv	r5, r1, r6
 8005836:	fb06 1115 	mls	r1, r6, r5, r1
 800583a:	3130      	adds	r1, #48	; 0x30
 800583c:	2d09      	cmp	r5, #9
 800583e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005842:	f103 32ff 	add.w	r2, r3, #4294967295
 8005846:	4629      	mov	r1, r5
 8005848:	dc09      	bgt.n	800585e <__exponent+0x4c>
 800584a:	3130      	adds	r1, #48	; 0x30
 800584c:	3b02      	subs	r3, #2
 800584e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005852:	42bb      	cmp	r3, r7
 8005854:	4622      	mov	r2, r4
 8005856:	d304      	bcc.n	8005862 <__exponent+0x50>
 8005858:	1a10      	subs	r0, r2, r0
 800585a:	b003      	add	sp, #12
 800585c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585e:	4613      	mov	r3, r2
 8005860:	e7e7      	b.n	8005832 <__exponent+0x20>
 8005862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005866:	f804 2b01 	strb.w	r2, [r4], #1
 800586a:	e7f2      	b.n	8005852 <__exponent+0x40>
 800586c:	2330      	movs	r3, #48	; 0x30
 800586e:	4419      	add	r1, r3
 8005870:	7083      	strb	r3, [r0, #2]
 8005872:	1d02      	adds	r2, r0, #4
 8005874:	70c1      	strb	r1, [r0, #3]
 8005876:	e7ef      	b.n	8005858 <__exponent+0x46>

08005878 <_printf_float>:
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	b08d      	sub	sp, #52	; 0x34
 800587e:	460c      	mov	r4, r1
 8005880:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005884:	4616      	mov	r6, r2
 8005886:	461f      	mov	r7, r3
 8005888:	4605      	mov	r5, r0
 800588a:	f002 fdf9 	bl	8008480 <_localeconv_r>
 800588e:	6803      	ldr	r3, [r0, #0]
 8005890:	9304      	str	r3, [sp, #16]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fa fca4 	bl	80001e0 <strlen>
 8005898:	2300      	movs	r3, #0
 800589a:	930a      	str	r3, [sp, #40]	; 0x28
 800589c:	f8d8 3000 	ldr.w	r3, [r8]
 80058a0:	9005      	str	r0, [sp, #20]
 80058a2:	3307      	adds	r3, #7
 80058a4:	f023 0307 	bic.w	r3, r3, #7
 80058a8:	f103 0208 	add.w	r2, r3, #8
 80058ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058b0:	f8d4 b000 	ldr.w	fp, [r4]
 80058b4:	f8c8 2000 	str.w	r2, [r8]
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058c0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80058c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058c8:	9307      	str	r3, [sp, #28]
 80058ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80058ce:	f04f 32ff 	mov.w	r2, #4294967295
 80058d2:	4ba7      	ldr	r3, [pc, #668]	; (8005b70 <_printf_float+0x2f8>)
 80058d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058d8:	f7fb f930 	bl	8000b3c <__aeabi_dcmpun>
 80058dc:	bb70      	cbnz	r0, 800593c <_printf_float+0xc4>
 80058de:	f04f 32ff 	mov.w	r2, #4294967295
 80058e2:	4ba3      	ldr	r3, [pc, #652]	; (8005b70 <_printf_float+0x2f8>)
 80058e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058e8:	f7fb f90a 	bl	8000b00 <__aeabi_dcmple>
 80058ec:	bb30      	cbnz	r0, 800593c <_printf_float+0xc4>
 80058ee:	2200      	movs	r2, #0
 80058f0:	2300      	movs	r3, #0
 80058f2:	4640      	mov	r0, r8
 80058f4:	4649      	mov	r1, r9
 80058f6:	f7fb f8f9 	bl	8000aec <__aeabi_dcmplt>
 80058fa:	b110      	cbz	r0, 8005902 <_printf_float+0x8a>
 80058fc:	232d      	movs	r3, #45	; 0x2d
 80058fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005902:	4a9c      	ldr	r2, [pc, #624]	; (8005b74 <_printf_float+0x2fc>)
 8005904:	4b9c      	ldr	r3, [pc, #624]	; (8005b78 <_printf_float+0x300>)
 8005906:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800590a:	bf8c      	ite	hi
 800590c:	4690      	movhi	r8, r2
 800590e:	4698      	movls	r8, r3
 8005910:	2303      	movs	r3, #3
 8005912:	f02b 0204 	bic.w	r2, fp, #4
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	6022      	str	r2, [r4, #0]
 800591a:	f04f 0900 	mov.w	r9, #0
 800591e:	9700      	str	r7, [sp, #0]
 8005920:	4633      	mov	r3, r6
 8005922:	aa0b      	add	r2, sp, #44	; 0x2c
 8005924:	4621      	mov	r1, r4
 8005926:	4628      	mov	r0, r5
 8005928:	f000 f9e6 	bl	8005cf8 <_printf_common>
 800592c:	3001      	adds	r0, #1
 800592e:	f040 808d 	bne.w	8005a4c <_printf_float+0x1d4>
 8005932:	f04f 30ff 	mov.w	r0, #4294967295
 8005936:	b00d      	add	sp, #52	; 0x34
 8005938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	4640      	mov	r0, r8
 8005942:	4649      	mov	r1, r9
 8005944:	f7fb f8fa 	bl	8000b3c <__aeabi_dcmpun>
 8005948:	b110      	cbz	r0, 8005950 <_printf_float+0xd8>
 800594a:	4a8c      	ldr	r2, [pc, #560]	; (8005b7c <_printf_float+0x304>)
 800594c:	4b8c      	ldr	r3, [pc, #560]	; (8005b80 <_printf_float+0x308>)
 800594e:	e7da      	b.n	8005906 <_printf_float+0x8e>
 8005950:	6861      	ldr	r1, [r4, #4]
 8005952:	1c4b      	adds	r3, r1, #1
 8005954:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005958:	a80a      	add	r0, sp, #40	; 0x28
 800595a:	d13e      	bne.n	80059da <_printf_float+0x162>
 800595c:	2306      	movs	r3, #6
 800595e:	6063      	str	r3, [r4, #4]
 8005960:	2300      	movs	r3, #0
 8005962:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005966:	ab09      	add	r3, sp, #36	; 0x24
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	ec49 8b10 	vmov	d0, r8, r9
 800596e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005972:	6022      	str	r2, [r4, #0]
 8005974:	f8cd a004 	str.w	sl, [sp, #4]
 8005978:	6861      	ldr	r1, [r4, #4]
 800597a:	4628      	mov	r0, r5
 800597c:	f7ff fee8 	bl	8005750 <__cvt>
 8005980:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005984:	2b47      	cmp	r3, #71	; 0x47
 8005986:	4680      	mov	r8, r0
 8005988:	d109      	bne.n	800599e <_printf_float+0x126>
 800598a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598c:	1cd8      	adds	r0, r3, #3
 800598e:	db02      	blt.n	8005996 <_printf_float+0x11e>
 8005990:	6862      	ldr	r2, [r4, #4]
 8005992:	4293      	cmp	r3, r2
 8005994:	dd47      	ble.n	8005a26 <_printf_float+0x1ae>
 8005996:	f1aa 0a02 	sub.w	sl, sl, #2
 800599a:	fa5f fa8a 	uxtb.w	sl, sl
 800599e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80059a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059a4:	d824      	bhi.n	80059f0 <_printf_float+0x178>
 80059a6:	3901      	subs	r1, #1
 80059a8:	4652      	mov	r2, sl
 80059aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059ae:	9109      	str	r1, [sp, #36]	; 0x24
 80059b0:	f7ff ff2f 	bl	8005812 <__exponent>
 80059b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059b6:	1813      	adds	r3, r2, r0
 80059b8:	2a01      	cmp	r2, #1
 80059ba:	4681      	mov	r9, r0
 80059bc:	6123      	str	r3, [r4, #16]
 80059be:	dc02      	bgt.n	80059c6 <_printf_float+0x14e>
 80059c0:	6822      	ldr	r2, [r4, #0]
 80059c2:	07d1      	lsls	r1, r2, #31
 80059c4:	d501      	bpl.n	80059ca <_printf_float+0x152>
 80059c6:	3301      	adds	r3, #1
 80059c8:	6123      	str	r3, [r4, #16]
 80059ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0a5      	beq.n	800591e <_printf_float+0xa6>
 80059d2:	232d      	movs	r3, #45	; 0x2d
 80059d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d8:	e7a1      	b.n	800591e <_printf_float+0xa6>
 80059da:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80059de:	f000 8177 	beq.w	8005cd0 <_printf_float+0x458>
 80059e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80059e6:	d1bb      	bne.n	8005960 <_printf_float+0xe8>
 80059e8:	2900      	cmp	r1, #0
 80059ea:	d1b9      	bne.n	8005960 <_printf_float+0xe8>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e7b6      	b.n	800595e <_printf_float+0xe6>
 80059f0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80059f4:	d119      	bne.n	8005a2a <_printf_float+0x1b2>
 80059f6:	2900      	cmp	r1, #0
 80059f8:	6863      	ldr	r3, [r4, #4]
 80059fa:	dd0c      	ble.n	8005a16 <_printf_float+0x19e>
 80059fc:	6121      	str	r1, [r4, #16]
 80059fe:	b913      	cbnz	r3, 8005a06 <_printf_float+0x18e>
 8005a00:	6822      	ldr	r2, [r4, #0]
 8005a02:	07d2      	lsls	r2, r2, #31
 8005a04:	d502      	bpl.n	8005a0c <_printf_float+0x194>
 8005a06:	3301      	adds	r3, #1
 8005a08:	440b      	add	r3, r1
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a10:	f04f 0900 	mov.w	r9, #0
 8005a14:	e7d9      	b.n	80059ca <_printf_float+0x152>
 8005a16:	b913      	cbnz	r3, 8005a1e <_printf_float+0x1a6>
 8005a18:	6822      	ldr	r2, [r4, #0]
 8005a1a:	07d0      	lsls	r0, r2, #31
 8005a1c:	d501      	bpl.n	8005a22 <_printf_float+0x1aa>
 8005a1e:	3302      	adds	r3, #2
 8005a20:	e7f3      	b.n	8005a0a <_printf_float+0x192>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e7f1      	b.n	8005a0a <_printf_float+0x192>
 8005a26:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005a2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	db05      	blt.n	8005a3e <_printf_float+0x1c6>
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	6123      	str	r3, [r4, #16]
 8005a36:	07d1      	lsls	r1, r2, #31
 8005a38:	d5e8      	bpl.n	8005a0c <_printf_float+0x194>
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	e7e5      	b.n	8005a0a <_printf_float+0x192>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bfd4      	ite	le
 8005a42:	f1c3 0302 	rsble	r3, r3, #2
 8005a46:	2301      	movgt	r3, #1
 8005a48:	4413      	add	r3, r2
 8005a4a:	e7de      	b.n	8005a0a <_printf_float+0x192>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	055a      	lsls	r2, r3, #21
 8005a50:	d407      	bmi.n	8005a62 <_printf_float+0x1ea>
 8005a52:	6923      	ldr	r3, [r4, #16]
 8005a54:	4642      	mov	r2, r8
 8005a56:	4631      	mov	r1, r6
 8005a58:	4628      	mov	r0, r5
 8005a5a:	47b8      	blx	r7
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d12b      	bne.n	8005ab8 <_printf_float+0x240>
 8005a60:	e767      	b.n	8005932 <_printf_float+0xba>
 8005a62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005a66:	f240 80dc 	bls.w	8005c22 <_printf_float+0x3aa>
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a72:	f7fb f831 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d033      	beq.n	8005ae2 <_printf_float+0x26a>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4a41      	ldr	r2, [pc, #260]	; (8005b84 <_printf_float+0x30c>)
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b8      	blx	r7
 8005a84:	3001      	adds	r0, #1
 8005a86:	f43f af54 	beq.w	8005932 <_printf_float+0xba>
 8005a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	db02      	blt.n	8005a98 <_printf_float+0x220>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	07d8      	lsls	r0, r3, #31
 8005a96:	d50f      	bpl.n	8005ab8 <_printf_float+0x240>
 8005a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	f43f af45 	beq.w	8005932 <_printf_float+0xba>
 8005aa8:	f04f 0800 	mov.w	r8, #0
 8005aac:	f104 091a 	add.w	r9, r4, #26
 8005ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	4543      	cmp	r3, r8
 8005ab6:	dc09      	bgt.n	8005acc <_printf_float+0x254>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	079b      	lsls	r3, r3, #30
 8005abc:	f100 8103 	bmi.w	8005cc6 <_printf_float+0x44e>
 8005ac0:	68e0      	ldr	r0, [r4, #12]
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac4:	4298      	cmp	r0, r3
 8005ac6:	bfb8      	it	lt
 8005ac8:	4618      	movlt	r0, r3
 8005aca:	e734      	b.n	8005936 <_printf_float+0xbe>
 8005acc:	2301      	movs	r3, #1
 8005ace:	464a      	mov	r2, r9
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b8      	blx	r7
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f43f af2b 	beq.w	8005932 <_printf_float+0xba>
 8005adc:	f108 0801 	add.w	r8, r8, #1
 8005ae0:	e7e6      	b.n	8005ab0 <_printf_float+0x238>
 8005ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	dc2b      	bgt.n	8005b40 <_printf_float+0x2c8>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4a26      	ldr	r2, [pc, #152]	; (8005b84 <_printf_float+0x30c>)
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f af1d 	beq.w	8005932 <_printf_float+0xba>
 8005af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005afa:	b923      	cbnz	r3, 8005b06 <_printf_float+0x28e>
 8005afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005afe:	b913      	cbnz	r3, 8005b06 <_printf_float+0x28e>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	07d9      	lsls	r1, r3, #31
 8005b04:	d5d8      	bpl.n	8005ab8 <_printf_float+0x240>
 8005b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	f43f af0e 	beq.w	8005932 <_printf_float+0xba>
 8005b16:	f04f 0900 	mov.w	r9, #0
 8005b1a:	f104 0a1a 	add.w	sl, r4, #26
 8005b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b20:	425b      	negs	r3, r3
 8005b22:	454b      	cmp	r3, r9
 8005b24:	dc01      	bgt.n	8005b2a <_printf_float+0x2b2>
 8005b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b28:	e794      	b.n	8005a54 <_printf_float+0x1dc>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4652      	mov	r2, sl
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f aefc 	beq.w	8005932 <_printf_float+0xba>
 8005b3a:	f109 0901 	add.w	r9, r9, #1
 8005b3e:	e7ee      	b.n	8005b1e <_printf_float+0x2a6>
 8005b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b44:	429a      	cmp	r2, r3
 8005b46:	bfa8      	it	ge
 8005b48:	461a      	movge	r2, r3
 8005b4a:	2a00      	cmp	r2, #0
 8005b4c:	4691      	mov	r9, r2
 8005b4e:	dd07      	ble.n	8005b60 <_printf_float+0x2e8>
 8005b50:	4613      	mov	r3, r2
 8005b52:	4631      	mov	r1, r6
 8005b54:	4642      	mov	r2, r8
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	f43f aee9 	beq.w	8005932 <_printf_float+0xba>
 8005b60:	f104 031a 	add.w	r3, r4, #26
 8005b64:	f04f 0b00 	mov.w	fp, #0
 8005b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b6c:	9306      	str	r3, [sp, #24]
 8005b6e:	e015      	b.n	8005b9c <_printf_float+0x324>
 8005b70:	7fefffff 	.word	0x7fefffff
 8005b74:	0800922c 	.word	0x0800922c
 8005b78:	08009228 	.word	0x08009228
 8005b7c:	08009234 	.word	0x08009234
 8005b80:	08009230 	.word	0x08009230
 8005b84:	08009238 	.word	0x08009238
 8005b88:	2301      	movs	r3, #1
 8005b8a:	9a06      	ldr	r2, [sp, #24]
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4628      	mov	r0, r5
 8005b90:	47b8      	blx	r7
 8005b92:	3001      	adds	r0, #1
 8005b94:	f43f aecd 	beq.w	8005932 <_printf_float+0xba>
 8005b98:	f10b 0b01 	add.w	fp, fp, #1
 8005b9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ba0:	ebaa 0309 	sub.w	r3, sl, r9
 8005ba4:	455b      	cmp	r3, fp
 8005ba6:	dcef      	bgt.n	8005b88 <_printf_float+0x310>
 8005ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bac:	429a      	cmp	r2, r3
 8005bae:	44d0      	add	r8, sl
 8005bb0:	db15      	blt.n	8005bde <_printf_float+0x366>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	07da      	lsls	r2, r3, #31
 8005bb6:	d412      	bmi.n	8005bde <_printf_float+0x366>
 8005bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bbc:	eba3 020a 	sub.w	r2, r3, sl
 8005bc0:	eba3 0a01 	sub.w	sl, r3, r1
 8005bc4:	4592      	cmp	sl, r2
 8005bc6:	bfa8      	it	ge
 8005bc8:	4692      	movge	sl, r2
 8005bca:	f1ba 0f00 	cmp.w	sl, #0
 8005bce:	dc0e      	bgt.n	8005bee <_printf_float+0x376>
 8005bd0:	f04f 0800 	mov.w	r8, #0
 8005bd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bd8:	f104 091a 	add.w	r9, r4, #26
 8005bdc:	e019      	b.n	8005c12 <_printf_float+0x39a>
 8005bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	d1e5      	bne.n	8005bb8 <_printf_float+0x340>
 8005bec:	e6a1      	b.n	8005932 <_printf_float+0xba>
 8005bee:	4653      	mov	r3, sl
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d1e9      	bne.n	8005bd0 <_printf_float+0x358>
 8005bfc:	e699      	b.n	8005932 <_printf_float+0xba>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	464a      	mov	r2, r9
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	f43f ae92 	beq.w	8005932 <_printf_float+0xba>
 8005c0e:	f108 0801 	add.w	r8, r8, #1
 8005c12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c16:	1a9b      	subs	r3, r3, r2
 8005c18:	eba3 030a 	sub.w	r3, r3, sl
 8005c1c:	4543      	cmp	r3, r8
 8005c1e:	dcee      	bgt.n	8005bfe <_printf_float+0x386>
 8005c20:	e74a      	b.n	8005ab8 <_printf_float+0x240>
 8005c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c24:	2a01      	cmp	r2, #1
 8005c26:	dc01      	bgt.n	8005c2c <_printf_float+0x3b4>
 8005c28:	07db      	lsls	r3, r3, #31
 8005c2a:	d53a      	bpl.n	8005ca2 <_printf_float+0x42a>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4642      	mov	r2, r8
 8005c30:	4631      	mov	r1, r6
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	f43f ae7b 	beq.w	8005932 <_printf_float+0xba>
 8005c3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f108 0801 	add.w	r8, r8, #1
 8005c4c:	f43f ae71 	beq.w	8005932 <_printf_float+0xba>
 8005c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c52:	2200      	movs	r2, #0
 8005c54:	f103 3aff 	add.w	sl, r3, #4294967295
 8005c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f7fa ff3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c62:	b9c8      	cbnz	r0, 8005c98 <_printf_float+0x420>
 8005c64:	4653      	mov	r3, sl
 8005c66:	4642      	mov	r2, r8
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d10e      	bne.n	8005c90 <_printf_float+0x418>
 8005c72:	e65e      	b.n	8005932 <_printf_float+0xba>
 8005c74:	2301      	movs	r3, #1
 8005c76:	4652      	mov	r2, sl
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f ae57 	beq.w	8005932 <_printf_float+0xba>
 8005c84:	f108 0801 	add.w	r8, r8, #1
 8005c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	4543      	cmp	r3, r8
 8005c8e:	dcf1      	bgt.n	8005c74 <_printf_float+0x3fc>
 8005c90:	464b      	mov	r3, r9
 8005c92:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c96:	e6de      	b.n	8005a56 <_printf_float+0x1de>
 8005c98:	f04f 0800 	mov.w	r8, #0
 8005c9c:	f104 0a1a 	add.w	sl, r4, #26
 8005ca0:	e7f2      	b.n	8005c88 <_printf_float+0x410>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e7df      	b.n	8005c66 <_printf_float+0x3ee>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	464a      	mov	r2, r9
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	f43f ae3e 	beq.w	8005932 <_printf_float+0xba>
 8005cb6:	f108 0801 	add.w	r8, r8, #1
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	4543      	cmp	r3, r8
 8005cc2:	dcf0      	bgt.n	8005ca6 <_printf_float+0x42e>
 8005cc4:	e6fc      	b.n	8005ac0 <_printf_float+0x248>
 8005cc6:	f04f 0800 	mov.w	r8, #0
 8005cca:	f104 0919 	add.w	r9, r4, #25
 8005cce:	e7f4      	b.n	8005cba <_printf_float+0x442>
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	f43f ae8b 	beq.w	80059ec <_printf_float+0x174>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005cdc:	ab09      	add	r3, sp, #36	; 0x24
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	ec49 8b10 	vmov	d0, r8, r9
 8005ce4:	6022      	str	r2, [r4, #0]
 8005ce6:	f8cd a004 	str.w	sl, [sp, #4]
 8005cea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f7ff fd2e 	bl	8005750 <__cvt>
 8005cf4:	4680      	mov	r8, r0
 8005cf6:	e648      	b.n	800598a <_printf_float+0x112>

08005cf8 <_printf_common>:
 8005cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfc:	4691      	mov	r9, r2
 8005cfe:	461f      	mov	r7, r3
 8005d00:	688a      	ldr	r2, [r1, #8]
 8005d02:	690b      	ldr	r3, [r1, #16]
 8005d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	bfb8      	it	lt
 8005d0c:	4613      	movlt	r3, r2
 8005d0e:	f8c9 3000 	str.w	r3, [r9]
 8005d12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d16:	4606      	mov	r6, r0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	b112      	cbz	r2, 8005d22 <_printf_common+0x2a>
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	f8c9 3000 	str.w	r3, [r9]
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	0699      	lsls	r1, r3, #26
 8005d26:	bf42      	ittt	mi
 8005d28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005d2c:	3302      	addmi	r3, #2
 8005d2e:	f8c9 3000 	strmi.w	r3, [r9]
 8005d32:	6825      	ldr	r5, [r4, #0]
 8005d34:	f015 0506 	ands.w	r5, r5, #6
 8005d38:	d107      	bne.n	8005d4a <_printf_common+0x52>
 8005d3a:	f104 0a19 	add.w	sl, r4, #25
 8005d3e:	68e3      	ldr	r3, [r4, #12]
 8005d40:	f8d9 2000 	ldr.w	r2, [r9]
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	42ab      	cmp	r3, r5
 8005d48:	dc28      	bgt.n	8005d9c <_printf_common+0xa4>
 8005d4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	3300      	adds	r3, #0
 8005d52:	bf18      	it	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	0692      	lsls	r2, r2, #26
 8005d58:	d42d      	bmi.n	8005db6 <_printf_common+0xbe>
 8005d5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d5e:	4639      	mov	r1, r7
 8005d60:	4630      	mov	r0, r6
 8005d62:	47c0      	blx	r8
 8005d64:	3001      	adds	r0, #1
 8005d66:	d020      	beq.n	8005daa <_printf_common+0xb2>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	68e5      	ldr	r5, [r4, #12]
 8005d6c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d70:	f003 0306 	and.w	r3, r3, #6
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	bf08      	it	eq
 8005d78:	1aad      	subeq	r5, r5, r2
 8005d7a:	68a3      	ldr	r3, [r4, #8]
 8005d7c:	6922      	ldr	r2, [r4, #16]
 8005d7e:	bf0c      	ite	eq
 8005d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d84:	2500      	movne	r5, #0
 8005d86:	4293      	cmp	r3, r2
 8005d88:	bfc4      	itt	gt
 8005d8a:	1a9b      	subgt	r3, r3, r2
 8005d8c:	18ed      	addgt	r5, r5, r3
 8005d8e:	f04f 0900 	mov.w	r9, #0
 8005d92:	341a      	adds	r4, #26
 8005d94:	454d      	cmp	r5, r9
 8005d96:	d11a      	bne.n	8005dce <_printf_common+0xd6>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e008      	b.n	8005dae <_printf_common+0xb6>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	4652      	mov	r2, sl
 8005da0:	4639      	mov	r1, r7
 8005da2:	4630      	mov	r0, r6
 8005da4:	47c0      	blx	r8
 8005da6:	3001      	adds	r0, #1
 8005da8:	d103      	bne.n	8005db2 <_printf_common+0xba>
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db2:	3501      	adds	r5, #1
 8005db4:	e7c3      	b.n	8005d3e <_printf_common+0x46>
 8005db6:	18e1      	adds	r1, r4, r3
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	2030      	movs	r0, #48	; 0x30
 8005dbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dc0:	4422      	add	r2, r4
 8005dc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dca:	3302      	adds	r3, #2
 8005dcc:	e7c5      	b.n	8005d5a <_printf_common+0x62>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	47c0      	blx	r8
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d0e6      	beq.n	8005daa <_printf_common+0xb2>
 8005ddc:	f109 0901 	add.w	r9, r9, #1
 8005de0:	e7d8      	b.n	8005d94 <_printf_common+0x9c>
	...

08005de4 <_printf_i>:
 8005de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005de8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005dec:	460c      	mov	r4, r1
 8005dee:	7e09      	ldrb	r1, [r1, #24]
 8005df0:	b085      	sub	sp, #20
 8005df2:	296e      	cmp	r1, #110	; 0x6e
 8005df4:	4617      	mov	r7, r2
 8005df6:	4606      	mov	r6, r0
 8005df8:	4698      	mov	r8, r3
 8005dfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dfc:	f000 80b3 	beq.w	8005f66 <_printf_i+0x182>
 8005e00:	d822      	bhi.n	8005e48 <_printf_i+0x64>
 8005e02:	2963      	cmp	r1, #99	; 0x63
 8005e04:	d036      	beq.n	8005e74 <_printf_i+0x90>
 8005e06:	d80a      	bhi.n	8005e1e <_printf_i+0x3a>
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	f000 80b9 	beq.w	8005f80 <_printf_i+0x19c>
 8005e0e:	2958      	cmp	r1, #88	; 0x58
 8005e10:	f000 8083 	beq.w	8005f1a <_printf_i+0x136>
 8005e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005e1c:	e032      	b.n	8005e84 <_printf_i+0xa0>
 8005e1e:	2964      	cmp	r1, #100	; 0x64
 8005e20:	d001      	beq.n	8005e26 <_printf_i+0x42>
 8005e22:	2969      	cmp	r1, #105	; 0x69
 8005e24:	d1f6      	bne.n	8005e14 <_printf_i+0x30>
 8005e26:	6820      	ldr	r0, [r4, #0]
 8005e28:	6813      	ldr	r3, [r2, #0]
 8005e2a:	0605      	lsls	r5, r0, #24
 8005e2c:	f103 0104 	add.w	r1, r3, #4
 8005e30:	d52a      	bpl.n	8005e88 <_printf_i+0xa4>
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6011      	str	r1, [r2, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da03      	bge.n	8005e42 <_printf_i+0x5e>
 8005e3a:	222d      	movs	r2, #45	; 0x2d
 8005e3c:	425b      	negs	r3, r3
 8005e3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005e42:	486f      	ldr	r0, [pc, #444]	; (8006000 <_printf_i+0x21c>)
 8005e44:	220a      	movs	r2, #10
 8005e46:	e039      	b.n	8005ebc <_printf_i+0xd8>
 8005e48:	2973      	cmp	r1, #115	; 0x73
 8005e4a:	f000 809d 	beq.w	8005f88 <_printf_i+0x1a4>
 8005e4e:	d808      	bhi.n	8005e62 <_printf_i+0x7e>
 8005e50:	296f      	cmp	r1, #111	; 0x6f
 8005e52:	d020      	beq.n	8005e96 <_printf_i+0xb2>
 8005e54:	2970      	cmp	r1, #112	; 0x70
 8005e56:	d1dd      	bne.n	8005e14 <_printf_i+0x30>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	f043 0320 	orr.w	r3, r3, #32
 8005e5e:	6023      	str	r3, [r4, #0]
 8005e60:	e003      	b.n	8005e6a <_printf_i+0x86>
 8005e62:	2975      	cmp	r1, #117	; 0x75
 8005e64:	d017      	beq.n	8005e96 <_printf_i+0xb2>
 8005e66:	2978      	cmp	r1, #120	; 0x78
 8005e68:	d1d4      	bne.n	8005e14 <_printf_i+0x30>
 8005e6a:	2378      	movs	r3, #120	; 0x78
 8005e6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e70:	4864      	ldr	r0, [pc, #400]	; (8006004 <_printf_i+0x220>)
 8005e72:	e055      	b.n	8005f20 <_printf_i+0x13c>
 8005e74:	6813      	ldr	r3, [r2, #0]
 8005e76:	1d19      	adds	r1, r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6011      	str	r1, [r2, #0]
 8005e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e84:	2301      	movs	r3, #1
 8005e86:	e08c      	b.n	8005fa2 <_printf_i+0x1be>
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6011      	str	r1, [r2, #0]
 8005e8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e90:	bf18      	it	ne
 8005e92:	b21b      	sxthne	r3, r3
 8005e94:	e7cf      	b.n	8005e36 <_printf_i+0x52>
 8005e96:	6813      	ldr	r3, [r2, #0]
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	1d18      	adds	r0, r3, #4
 8005e9c:	6010      	str	r0, [r2, #0]
 8005e9e:	0628      	lsls	r0, r5, #24
 8005ea0:	d501      	bpl.n	8005ea6 <_printf_i+0xc2>
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	e002      	b.n	8005eac <_printf_i+0xc8>
 8005ea6:	0668      	lsls	r0, r5, #25
 8005ea8:	d5fb      	bpl.n	8005ea2 <_printf_i+0xbe>
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	4854      	ldr	r0, [pc, #336]	; (8006000 <_printf_i+0x21c>)
 8005eae:	296f      	cmp	r1, #111	; 0x6f
 8005eb0:	bf14      	ite	ne
 8005eb2:	220a      	movne	r2, #10
 8005eb4:	2208      	moveq	r2, #8
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ebc:	6865      	ldr	r5, [r4, #4]
 8005ebe:	60a5      	str	r5, [r4, #8]
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	f2c0 8095 	blt.w	8005ff0 <_printf_i+0x20c>
 8005ec6:	6821      	ldr	r1, [r4, #0]
 8005ec8:	f021 0104 	bic.w	r1, r1, #4
 8005ecc:	6021      	str	r1, [r4, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d13d      	bne.n	8005f4e <_printf_i+0x16a>
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	f040 808e 	bne.w	8005ff4 <_printf_i+0x210>
 8005ed8:	4665      	mov	r5, ip
 8005eda:	2a08      	cmp	r2, #8
 8005edc:	d10b      	bne.n	8005ef6 <_printf_i+0x112>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	07db      	lsls	r3, r3, #31
 8005ee2:	d508      	bpl.n	8005ef6 <_printf_i+0x112>
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	6862      	ldr	r2, [r4, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	bfde      	ittt	le
 8005eec:	2330      	movle	r3, #48	; 0x30
 8005eee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ef2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ef6:	ebac 0305 	sub.w	r3, ip, r5
 8005efa:	6123      	str	r3, [r4, #16]
 8005efc:	f8cd 8000 	str.w	r8, [sp]
 8005f00:	463b      	mov	r3, r7
 8005f02:	aa03      	add	r2, sp, #12
 8005f04:	4621      	mov	r1, r4
 8005f06:	4630      	mov	r0, r6
 8005f08:	f7ff fef6 	bl	8005cf8 <_printf_common>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d14d      	bne.n	8005fac <_printf_i+0x1c8>
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	b005      	add	sp, #20
 8005f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f1a:	4839      	ldr	r0, [pc, #228]	; (8006000 <_printf_i+0x21c>)
 8005f1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005f20:	6813      	ldr	r3, [r2, #0]
 8005f22:	6821      	ldr	r1, [r4, #0]
 8005f24:	1d1d      	adds	r5, r3, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6015      	str	r5, [r2, #0]
 8005f2a:	060a      	lsls	r2, r1, #24
 8005f2c:	d50b      	bpl.n	8005f46 <_printf_i+0x162>
 8005f2e:	07ca      	lsls	r2, r1, #31
 8005f30:	bf44      	itt	mi
 8005f32:	f041 0120 	orrmi.w	r1, r1, #32
 8005f36:	6021      	strmi	r1, [r4, #0]
 8005f38:	b91b      	cbnz	r3, 8005f42 <_printf_i+0x15e>
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	f022 0220 	bic.w	r2, r2, #32
 8005f40:	6022      	str	r2, [r4, #0]
 8005f42:	2210      	movs	r2, #16
 8005f44:	e7b7      	b.n	8005eb6 <_printf_i+0xd2>
 8005f46:	064d      	lsls	r5, r1, #25
 8005f48:	bf48      	it	mi
 8005f4a:	b29b      	uxthmi	r3, r3
 8005f4c:	e7ef      	b.n	8005f2e <_printf_i+0x14a>
 8005f4e:	4665      	mov	r5, ip
 8005f50:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f54:	fb02 3311 	mls	r3, r2, r1, r3
 8005f58:	5cc3      	ldrb	r3, [r0, r3]
 8005f5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005f5e:	460b      	mov	r3, r1
 8005f60:	2900      	cmp	r1, #0
 8005f62:	d1f5      	bne.n	8005f50 <_printf_i+0x16c>
 8005f64:	e7b9      	b.n	8005eda <_printf_i+0xf6>
 8005f66:	6813      	ldr	r3, [r2, #0]
 8005f68:	6825      	ldr	r5, [r4, #0]
 8005f6a:	6961      	ldr	r1, [r4, #20]
 8005f6c:	1d18      	adds	r0, r3, #4
 8005f6e:	6010      	str	r0, [r2, #0]
 8005f70:	0628      	lsls	r0, r5, #24
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	d501      	bpl.n	8005f7a <_printf_i+0x196>
 8005f76:	6019      	str	r1, [r3, #0]
 8005f78:	e002      	b.n	8005f80 <_printf_i+0x19c>
 8005f7a:	066a      	lsls	r2, r5, #25
 8005f7c:	d5fb      	bpl.n	8005f76 <_printf_i+0x192>
 8005f7e:	8019      	strh	r1, [r3, #0]
 8005f80:	2300      	movs	r3, #0
 8005f82:	6123      	str	r3, [r4, #16]
 8005f84:	4665      	mov	r5, ip
 8005f86:	e7b9      	b.n	8005efc <_printf_i+0x118>
 8005f88:	6813      	ldr	r3, [r2, #0]
 8005f8a:	1d19      	adds	r1, r3, #4
 8005f8c:	6011      	str	r1, [r2, #0]
 8005f8e:	681d      	ldr	r5, [r3, #0]
 8005f90:	6862      	ldr	r2, [r4, #4]
 8005f92:	2100      	movs	r1, #0
 8005f94:	4628      	mov	r0, r5
 8005f96:	f7fa f92b 	bl	80001f0 <memchr>
 8005f9a:	b108      	cbz	r0, 8005fa0 <_printf_i+0x1bc>
 8005f9c:	1b40      	subs	r0, r0, r5
 8005f9e:	6060      	str	r0, [r4, #4]
 8005fa0:	6863      	ldr	r3, [r4, #4]
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005faa:	e7a7      	b.n	8005efc <_printf_i+0x118>
 8005fac:	6923      	ldr	r3, [r4, #16]
 8005fae:	462a      	mov	r2, r5
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	47c0      	blx	r8
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d0aa      	beq.n	8005f10 <_printf_i+0x12c>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	079b      	lsls	r3, r3, #30
 8005fbe:	d413      	bmi.n	8005fe8 <_printf_i+0x204>
 8005fc0:	68e0      	ldr	r0, [r4, #12]
 8005fc2:	9b03      	ldr	r3, [sp, #12]
 8005fc4:	4298      	cmp	r0, r3
 8005fc6:	bfb8      	it	lt
 8005fc8:	4618      	movlt	r0, r3
 8005fca:	e7a3      	b.n	8005f14 <_printf_i+0x130>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	464a      	mov	r2, r9
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	47c0      	blx	r8
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d09a      	beq.n	8005f10 <_printf_i+0x12c>
 8005fda:	3501      	adds	r5, #1
 8005fdc:	68e3      	ldr	r3, [r4, #12]
 8005fde:	9a03      	ldr	r2, [sp, #12]
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	42ab      	cmp	r3, r5
 8005fe4:	dcf2      	bgt.n	8005fcc <_printf_i+0x1e8>
 8005fe6:	e7eb      	b.n	8005fc0 <_printf_i+0x1dc>
 8005fe8:	2500      	movs	r5, #0
 8005fea:	f104 0919 	add.w	r9, r4, #25
 8005fee:	e7f5      	b.n	8005fdc <_printf_i+0x1f8>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1ac      	bne.n	8005f4e <_printf_i+0x16a>
 8005ff4:	7803      	ldrb	r3, [r0, #0]
 8005ff6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ffa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ffe:	e76c      	b.n	8005eda <_printf_i+0xf6>
 8006000:	0800923a 	.word	0x0800923a
 8006004:	0800924b 	.word	0x0800924b

08006008 <_scanf_float>:
 8006008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	469a      	mov	sl, r3
 800600e:	688b      	ldr	r3, [r1, #8]
 8006010:	4616      	mov	r6, r2
 8006012:	1e5a      	subs	r2, r3, #1
 8006014:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006018:	b087      	sub	sp, #28
 800601a:	bf83      	ittte	hi
 800601c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006020:	189b      	addhi	r3, r3, r2
 8006022:	9301      	strhi	r3, [sp, #4]
 8006024:	2300      	movls	r3, #0
 8006026:	bf86      	itte	hi
 8006028:	f240 135d 	movwhi	r3, #349	; 0x15d
 800602c:	608b      	strhi	r3, [r1, #8]
 800602e:	9301      	strls	r3, [sp, #4]
 8006030:	680b      	ldr	r3, [r1, #0]
 8006032:	4688      	mov	r8, r1
 8006034:	f04f 0b00 	mov.w	fp, #0
 8006038:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800603c:	f848 3b1c 	str.w	r3, [r8], #28
 8006040:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006044:	4607      	mov	r7, r0
 8006046:	460c      	mov	r4, r1
 8006048:	4645      	mov	r5, r8
 800604a:	465a      	mov	r2, fp
 800604c:	46d9      	mov	r9, fp
 800604e:	f8cd b008 	str.w	fp, [sp, #8]
 8006052:	68a1      	ldr	r1, [r4, #8]
 8006054:	b181      	cbz	r1, 8006078 <_scanf_float+0x70>
 8006056:	6833      	ldr	r3, [r6, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b49      	cmp	r3, #73	; 0x49
 800605c:	d071      	beq.n	8006142 <_scanf_float+0x13a>
 800605e:	d84d      	bhi.n	80060fc <_scanf_float+0xf4>
 8006060:	2b39      	cmp	r3, #57	; 0x39
 8006062:	d840      	bhi.n	80060e6 <_scanf_float+0xde>
 8006064:	2b31      	cmp	r3, #49	; 0x31
 8006066:	f080 8088 	bcs.w	800617a <_scanf_float+0x172>
 800606a:	2b2d      	cmp	r3, #45	; 0x2d
 800606c:	f000 8090 	beq.w	8006190 <_scanf_float+0x188>
 8006070:	d815      	bhi.n	800609e <_scanf_float+0x96>
 8006072:	2b2b      	cmp	r3, #43	; 0x2b
 8006074:	f000 808c 	beq.w	8006190 <_scanf_float+0x188>
 8006078:	f1b9 0f00 	cmp.w	r9, #0
 800607c:	d003      	beq.n	8006086 <_scanf_float+0x7e>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	3a01      	subs	r2, #1
 8006088:	2a01      	cmp	r2, #1
 800608a:	f200 80ea 	bhi.w	8006262 <_scanf_float+0x25a>
 800608e:	4545      	cmp	r5, r8
 8006090:	f200 80dc 	bhi.w	800624c <_scanf_float+0x244>
 8006094:	2601      	movs	r6, #1
 8006096:	4630      	mov	r0, r6
 8006098:	b007      	add	sp, #28
 800609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609e:	2b2e      	cmp	r3, #46	; 0x2e
 80060a0:	f000 809f 	beq.w	80061e2 <_scanf_float+0x1da>
 80060a4:	2b30      	cmp	r3, #48	; 0x30
 80060a6:	d1e7      	bne.n	8006078 <_scanf_float+0x70>
 80060a8:	6820      	ldr	r0, [r4, #0]
 80060aa:	f410 7f80 	tst.w	r0, #256	; 0x100
 80060ae:	d064      	beq.n	800617a <_scanf_float+0x172>
 80060b0:	9b01      	ldr	r3, [sp, #4]
 80060b2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80060b6:	6020      	str	r0, [r4, #0]
 80060b8:	f109 0901 	add.w	r9, r9, #1
 80060bc:	b11b      	cbz	r3, 80060c6 <_scanf_float+0xbe>
 80060be:	3b01      	subs	r3, #1
 80060c0:	3101      	adds	r1, #1
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	60a1      	str	r1, [r4, #8]
 80060c6:	68a3      	ldr	r3, [r4, #8]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	60a3      	str	r3, [r4, #8]
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	3301      	adds	r3, #1
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	6873      	ldr	r3, [r6, #4]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	6073      	str	r3, [r6, #4]
 80060da:	f340 80ac 	ble.w	8006236 <_scanf_float+0x22e>
 80060de:	6833      	ldr	r3, [r6, #0]
 80060e0:	3301      	adds	r3, #1
 80060e2:	6033      	str	r3, [r6, #0]
 80060e4:	e7b5      	b.n	8006052 <_scanf_float+0x4a>
 80060e6:	2b45      	cmp	r3, #69	; 0x45
 80060e8:	f000 8085 	beq.w	80061f6 <_scanf_float+0x1ee>
 80060ec:	2b46      	cmp	r3, #70	; 0x46
 80060ee:	d06a      	beq.n	80061c6 <_scanf_float+0x1be>
 80060f0:	2b41      	cmp	r3, #65	; 0x41
 80060f2:	d1c1      	bne.n	8006078 <_scanf_float+0x70>
 80060f4:	2a01      	cmp	r2, #1
 80060f6:	d1bf      	bne.n	8006078 <_scanf_float+0x70>
 80060f8:	2202      	movs	r2, #2
 80060fa:	e046      	b.n	800618a <_scanf_float+0x182>
 80060fc:	2b65      	cmp	r3, #101	; 0x65
 80060fe:	d07a      	beq.n	80061f6 <_scanf_float+0x1ee>
 8006100:	d818      	bhi.n	8006134 <_scanf_float+0x12c>
 8006102:	2b54      	cmp	r3, #84	; 0x54
 8006104:	d066      	beq.n	80061d4 <_scanf_float+0x1cc>
 8006106:	d811      	bhi.n	800612c <_scanf_float+0x124>
 8006108:	2b4e      	cmp	r3, #78	; 0x4e
 800610a:	d1b5      	bne.n	8006078 <_scanf_float+0x70>
 800610c:	2a00      	cmp	r2, #0
 800610e:	d146      	bne.n	800619e <_scanf_float+0x196>
 8006110:	f1b9 0f00 	cmp.w	r9, #0
 8006114:	d145      	bne.n	80061a2 <_scanf_float+0x19a>
 8006116:	6821      	ldr	r1, [r4, #0]
 8006118:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800611c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006120:	d13f      	bne.n	80061a2 <_scanf_float+0x19a>
 8006122:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006126:	6021      	str	r1, [r4, #0]
 8006128:	2201      	movs	r2, #1
 800612a:	e02e      	b.n	800618a <_scanf_float+0x182>
 800612c:	2b59      	cmp	r3, #89	; 0x59
 800612e:	d01e      	beq.n	800616e <_scanf_float+0x166>
 8006130:	2b61      	cmp	r3, #97	; 0x61
 8006132:	e7de      	b.n	80060f2 <_scanf_float+0xea>
 8006134:	2b6e      	cmp	r3, #110	; 0x6e
 8006136:	d0e9      	beq.n	800610c <_scanf_float+0x104>
 8006138:	d815      	bhi.n	8006166 <_scanf_float+0x15e>
 800613a:	2b66      	cmp	r3, #102	; 0x66
 800613c:	d043      	beq.n	80061c6 <_scanf_float+0x1be>
 800613e:	2b69      	cmp	r3, #105	; 0x69
 8006140:	d19a      	bne.n	8006078 <_scanf_float+0x70>
 8006142:	f1bb 0f00 	cmp.w	fp, #0
 8006146:	d138      	bne.n	80061ba <_scanf_float+0x1b2>
 8006148:	f1b9 0f00 	cmp.w	r9, #0
 800614c:	d197      	bne.n	800607e <_scanf_float+0x76>
 800614e:	6821      	ldr	r1, [r4, #0]
 8006150:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006154:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006158:	d195      	bne.n	8006086 <_scanf_float+0x7e>
 800615a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800615e:	6021      	str	r1, [r4, #0]
 8006160:	f04f 0b01 	mov.w	fp, #1
 8006164:	e011      	b.n	800618a <_scanf_float+0x182>
 8006166:	2b74      	cmp	r3, #116	; 0x74
 8006168:	d034      	beq.n	80061d4 <_scanf_float+0x1cc>
 800616a:	2b79      	cmp	r3, #121	; 0x79
 800616c:	d184      	bne.n	8006078 <_scanf_float+0x70>
 800616e:	f1bb 0f07 	cmp.w	fp, #7
 8006172:	d181      	bne.n	8006078 <_scanf_float+0x70>
 8006174:	f04f 0b08 	mov.w	fp, #8
 8006178:	e007      	b.n	800618a <_scanf_float+0x182>
 800617a:	eb12 0f0b 	cmn.w	r2, fp
 800617e:	f47f af7b 	bne.w	8006078 <_scanf_float+0x70>
 8006182:	6821      	ldr	r1, [r4, #0]
 8006184:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006188:	6021      	str	r1, [r4, #0]
 800618a:	702b      	strb	r3, [r5, #0]
 800618c:	3501      	adds	r5, #1
 800618e:	e79a      	b.n	80060c6 <_scanf_float+0xbe>
 8006190:	6821      	ldr	r1, [r4, #0]
 8006192:	0608      	lsls	r0, r1, #24
 8006194:	f57f af70 	bpl.w	8006078 <_scanf_float+0x70>
 8006198:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800619c:	e7f4      	b.n	8006188 <_scanf_float+0x180>
 800619e:	2a02      	cmp	r2, #2
 80061a0:	d047      	beq.n	8006232 <_scanf_float+0x22a>
 80061a2:	f1bb 0f01 	cmp.w	fp, #1
 80061a6:	d003      	beq.n	80061b0 <_scanf_float+0x1a8>
 80061a8:	f1bb 0f04 	cmp.w	fp, #4
 80061ac:	f47f af64 	bne.w	8006078 <_scanf_float+0x70>
 80061b0:	f10b 0b01 	add.w	fp, fp, #1
 80061b4:	fa5f fb8b 	uxtb.w	fp, fp
 80061b8:	e7e7      	b.n	800618a <_scanf_float+0x182>
 80061ba:	f1bb 0f03 	cmp.w	fp, #3
 80061be:	d0f7      	beq.n	80061b0 <_scanf_float+0x1a8>
 80061c0:	f1bb 0f05 	cmp.w	fp, #5
 80061c4:	e7f2      	b.n	80061ac <_scanf_float+0x1a4>
 80061c6:	f1bb 0f02 	cmp.w	fp, #2
 80061ca:	f47f af55 	bne.w	8006078 <_scanf_float+0x70>
 80061ce:	f04f 0b03 	mov.w	fp, #3
 80061d2:	e7da      	b.n	800618a <_scanf_float+0x182>
 80061d4:	f1bb 0f06 	cmp.w	fp, #6
 80061d8:	f47f af4e 	bne.w	8006078 <_scanf_float+0x70>
 80061dc:	f04f 0b07 	mov.w	fp, #7
 80061e0:	e7d3      	b.n	800618a <_scanf_float+0x182>
 80061e2:	6821      	ldr	r1, [r4, #0]
 80061e4:	0588      	lsls	r0, r1, #22
 80061e6:	f57f af47 	bpl.w	8006078 <_scanf_float+0x70>
 80061ea:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80061ee:	6021      	str	r1, [r4, #0]
 80061f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80061f4:	e7c9      	b.n	800618a <_scanf_float+0x182>
 80061f6:	6821      	ldr	r1, [r4, #0]
 80061f8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80061fc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006200:	d006      	beq.n	8006210 <_scanf_float+0x208>
 8006202:	0548      	lsls	r0, r1, #21
 8006204:	f57f af38 	bpl.w	8006078 <_scanf_float+0x70>
 8006208:	f1b9 0f00 	cmp.w	r9, #0
 800620c:	f43f af3b 	beq.w	8006086 <_scanf_float+0x7e>
 8006210:	0588      	lsls	r0, r1, #22
 8006212:	bf58      	it	pl
 8006214:	9802      	ldrpl	r0, [sp, #8]
 8006216:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800621a:	bf58      	it	pl
 800621c:	eba9 0000 	subpl.w	r0, r9, r0
 8006220:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006224:	bf58      	it	pl
 8006226:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800622a:	6021      	str	r1, [r4, #0]
 800622c:	f04f 0900 	mov.w	r9, #0
 8006230:	e7ab      	b.n	800618a <_scanf_float+0x182>
 8006232:	2203      	movs	r2, #3
 8006234:	e7a9      	b.n	800618a <_scanf_float+0x182>
 8006236:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800623a:	9205      	str	r2, [sp, #20]
 800623c:	4631      	mov	r1, r6
 800623e:	4638      	mov	r0, r7
 8006240:	4798      	blx	r3
 8006242:	9a05      	ldr	r2, [sp, #20]
 8006244:	2800      	cmp	r0, #0
 8006246:	f43f af04 	beq.w	8006052 <_scanf_float+0x4a>
 800624a:	e715      	b.n	8006078 <_scanf_float+0x70>
 800624c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006250:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006254:	4632      	mov	r2, r6
 8006256:	4638      	mov	r0, r7
 8006258:	4798      	blx	r3
 800625a:	6923      	ldr	r3, [r4, #16]
 800625c:	3b01      	subs	r3, #1
 800625e:	6123      	str	r3, [r4, #16]
 8006260:	e715      	b.n	800608e <_scanf_float+0x86>
 8006262:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006266:	2b06      	cmp	r3, #6
 8006268:	d80a      	bhi.n	8006280 <_scanf_float+0x278>
 800626a:	f1bb 0f02 	cmp.w	fp, #2
 800626e:	d968      	bls.n	8006342 <_scanf_float+0x33a>
 8006270:	f1ab 0b03 	sub.w	fp, fp, #3
 8006274:	fa5f fb8b 	uxtb.w	fp, fp
 8006278:	eba5 0b0b 	sub.w	fp, r5, fp
 800627c:	455d      	cmp	r5, fp
 800627e:	d14b      	bne.n	8006318 <_scanf_float+0x310>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	05da      	lsls	r2, r3, #23
 8006284:	d51f      	bpl.n	80062c6 <_scanf_float+0x2be>
 8006286:	055b      	lsls	r3, r3, #21
 8006288:	d468      	bmi.n	800635c <_scanf_float+0x354>
 800628a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	2965      	cmp	r1, #101	; 0x65
 8006292:	f103 33ff 	add.w	r3, r3, #4294967295
 8006296:	f105 3bff 	add.w	fp, r5, #4294967295
 800629a:	6123      	str	r3, [r4, #16]
 800629c:	d00d      	beq.n	80062ba <_scanf_float+0x2b2>
 800629e:	2945      	cmp	r1, #69	; 0x45
 80062a0:	d00b      	beq.n	80062ba <_scanf_float+0x2b2>
 80062a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062a6:	4632      	mov	r2, r6
 80062a8:	4638      	mov	r0, r7
 80062aa:	4798      	blx	r3
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	f1a5 0b02 	sub.w	fp, r5, #2
 80062b8:	6123      	str	r3, [r4, #16]
 80062ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062be:	4632      	mov	r2, r6
 80062c0:	4638      	mov	r0, r7
 80062c2:	4798      	blx	r3
 80062c4:	465d      	mov	r5, fp
 80062c6:	6826      	ldr	r6, [r4, #0]
 80062c8:	f016 0610 	ands.w	r6, r6, #16
 80062cc:	d17a      	bne.n	80063c4 <_scanf_float+0x3bc>
 80062ce:	702e      	strb	r6, [r5, #0]
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d142      	bne.n	8006362 <_scanf_float+0x35a>
 80062dc:	9b02      	ldr	r3, [sp, #8]
 80062de:	eba9 0303 	sub.w	r3, r9, r3
 80062e2:	425a      	negs	r2, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d149      	bne.n	800637c <_scanf_float+0x374>
 80062e8:	2200      	movs	r2, #0
 80062ea:	4641      	mov	r1, r8
 80062ec:	4638      	mov	r0, r7
 80062ee:	f000 fea3 	bl	8007038 <_strtod_r>
 80062f2:	6825      	ldr	r5, [r4, #0]
 80062f4:	f8da 3000 	ldr.w	r3, [sl]
 80062f8:	f015 0f02 	tst.w	r5, #2
 80062fc:	f103 0204 	add.w	r2, r3, #4
 8006300:	ec59 8b10 	vmov	r8, r9, d0
 8006304:	f8ca 2000 	str.w	r2, [sl]
 8006308:	d043      	beq.n	8006392 <_scanf_float+0x38a>
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	e9c3 8900 	strd	r8, r9, [r3]
 8006310:	68e3      	ldr	r3, [r4, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	60e3      	str	r3, [r4, #12]
 8006316:	e6be      	b.n	8006096 <_scanf_float+0x8e>
 8006318:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800631c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006320:	4632      	mov	r2, r6
 8006322:	4638      	mov	r0, r7
 8006324:	4798      	blx	r3
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	3b01      	subs	r3, #1
 800632a:	6123      	str	r3, [r4, #16]
 800632c:	e7a6      	b.n	800627c <_scanf_float+0x274>
 800632e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006332:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006336:	4632      	mov	r2, r6
 8006338:	4638      	mov	r0, r7
 800633a:	4798      	blx	r3
 800633c:	6923      	ldr	r3, [r4, #16]
 800633e:	3b01      	subs	r3, #1
 8006340:	6123      	str	r3, [r4, #16]
 8006342:	4545      	cmp	r5, r8
 8006344:	d8f3      	bhi.n	800632e <_scanf_float+0x326>
 8006346:	e6a5      	b.n	8006094 <_scanf_float+0x8c>
 8006348:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800634c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006350:	4632      	mov	r2, r6
 8006352:	4638      	mov	r0, r7
 8006354:	4798      	blx	r3
 8006356:	6923      	ldr	r3, [r4, #16]
 8006358:	3b01      	subs	r3, #1
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	4545      	cmp	r5, r8
 800635e:	d8f3      	bhi.n	8006348 <_scanf_float+0x340>
 8006360:	e698      	b.n	8006094 <_scanf_float+0x8c>
 8006362:	9b03      	ldr	r3, [sp, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0bf      	beq.n	80062e8 <_scanf_float+0x2e0>
 8006368:	9904      	ldr	r1, [sp, #16]
 800636a:	230a      	movs	r3, #10
 800636c:	4632      	mov	r2, r6
 800636e:	3101      	adds	r1, #1
 8006370:	4638      	mov	r0, r7
 8006372:	f000 feed 	bl	8007150 <_strtol_r>
 8006376:	9b03      	ldr	r3, [sp, #12]
 8006378:	9d04      	ldr	r5, [sp, #16]
 800637a:	1ac2      	subs	r2, r0, r3
 800637c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006380:	429d      	cmp	r5, r3
 8006382:	bf28      	it	cs
 8006384:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006388:	490f      	ldr	r1, [pc, #60]	; (80063c8 <_scanf_float+0x3c0>)
 800638a:	4628      	mov	r0, r5
 800638c:	f000 f824 	bl	80063d8 <siprintf>
 8006390:	e7aa      	b.n	80062e8 <_scanf_float+0x2e0>
 8006392:	f015 0504 	ands.w	r5, r5, #4
 8006396:	d1b8      	bne.n	800630a <_scanf_float+0x302>
 8006398:	681f      	ldr	r7, [r3, #0]
 800639a:	ee10 2a10 	vmov	r2, s0
 800639e:	464b      	mov	r3, r9
 80063a0:	ee10 0a10 	vmov	r0, s0
 80063a4:	4649      	mov	r1, r9
 80063a6:	f7fa fbc9 	bl	8000b3c <__aeabi_dcmpun>
 80063aa:	b128      	cbz	r0, 80063b8 <_scanf_float+0x3b0>
 80063ac:	4628      	mov	r0, r5
 80063ae:	f000 f80d 	bl	80063cc <nanf>
 80063b2:	ed87 0a00 	vstr	s0, [r7]
 80063b6:	e7ab      	b.n	8006310 <_scanf_float+0x308>
 80063b8:	4640      	mov	r0, r8
 80063ba:	4649      	mov	r1, r9
 80063bc:	f7fa fc1c 	bl	8000bf8 <__aeabi_d2f>
 80063c0:	6038      	str	r0, [r7, #0]
 80063c2:	e7a5      	b.n	8006310 <_scanf_float+0x308>
 80063c4:	2600      	movs	r6, #0
 80063c6:	e666      	b.n	8006096 <_scanf_float+0x8e>
 80063c8:	0800925c 	.word	0x0800925c

080063cc <nanf>:
 80063cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80063d4 <nanf+0x8>
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	7fc00000 	.word	0x7fc00000

080063d8 <siprintf>:
 80063d8:	b40e      	push	{r1, r2, r3}
 80063da:	b500      	push	{lr}
 80063dc:	b09c      	sub	sp, #112	; 0x70
 80063de:	ab1d      	add	r3, sp, #116	; 0x74
 80063e0:	9002      	str	r0, [sp, #8]
 80063e2:	9006      	str	r0, [sp, #24]
 80063e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063e8:	4809      	ldr	r0, [pc, #36]	; (8006410 <siprintf+0x38>)
 80063ea:	9107      	str	r1, [sp, #28]
 80063ec:	9104      	str	r1, [sp, #16]
 80063ee:	4909      	ldr	r1, [pc, #36]	; (8006414 <siprintf+0x3c>)
 80063f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063f4:	9105      	str	r1, [sp, #20]
 80063f6:	6800      	ldr	r0, [r0, #0]
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	a902      	add	r1, sp, #8
 80063fc:	f002 fd82 	bl	8008f04 <_svfiprintf_r>
 8006400:	9b02      	ldr	r3, [sp, #8]
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	b01c      	add	sp, #112	; 0x70
 8006408:	f85d eb04 	ldr.w	lr, [sp], #4
 800640c:	b003      	add	sp, #12
 800640e:	4770      	bx	lr
 8006410:	2000000c 	.word	0x2000000c
 8006414:	ffff0208 	.word	0xffff0208

08006418 <sulp>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	4604      	mov	r4, r0
 800641c:	460d      	mov	r5, r1
 800641e:	ec45 4b10 	vmov	d0, r4, r5
 8006422:	4616      	mov	r6, r2
 8006424:	f002 fb2a 	bl	8008a7c <__ulp>
 8006428:	ec51 0b10 	vmov	r0, r1, d0
 800642c:	b17e      	cbz	r6, 800644e <sulp+0x36>
 800642e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006432:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006436:	2b00      	cmp	r3, #0
 8006438:	dd09      	ble.n	800644e <sulp+0x36>
 800643a:	051b      	lsls	r3, r3, #20
 800643c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006440:	2400      	movs	r4, #0
 8006442:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006446:	4622      	mov	r2, r4
 8006448:	462b      	mov	r3, r5
 800644a:	f7fa f8dd 	bl	8000608 <__aeabi_dmul>
 800644e:	bd70      	pop	{r4, r5, r6, pc}

08006450 <_strtod_l>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	461f      	mov	r7, r3
 8006456:	b0a1      	sub	sp, #132	; 0x84
 8006458:	2300      	movs	r3, #0
 800645a:	4681      	mov	r9, r0
 800645c:	4638      	mov	r0, r7
 800645e:	460e      	mov	r6, r1
 8006460:	9217      	str	r2, [sp, #92]	; 0x5c
 8006462:	931c      	str	r3, [sp, #112]	; 0x70
 8006464:	f002 f809 	bl	800847a <__localeconv_l>
 8006468:	4680      	mov	r8, r0
 800646a:	6800      	ldr	r0, [r0, #0]
 800646c:	f7f9 feb8 	bl	80001e0 <strlen>
 8006470:	f04f 0a00 	mov.w	sl, #0
 8006474:	4604      	mov	r4, r0
 8006476:	f04f 0b00 	mov.w	fp, #0
 800647a:	961b      	str	r6, [sp, #108]	; 0x6c
 800647c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800647e:	781a      	ldrb	r2, [r3, #0]
 8006480:	2a0d      	cmp	r2, #13
 8006482:	d832      	bhi.n	80064ea <_strtod_l+0x9a>
 8006484:	2a09      	cmp	r2, #9
 8006486:	d236      	bcs.n	80064f6 <_strtod_l+0xa6>
 8006488:	2a00      	cmp	r2, #0
 800648a:	d03e      	beq.n	800650a <_strtod_l+0xba>
 800648c:	2300      	movs	r3, #0
 800648e:	930d      	str	r3, [sp, #52]	; 0x34
 8006490:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006492:	782b      	ldrb	r3, [r5, #0]
 8006494:	2b30      	cmp	r3, #48	; 0x30
 8006496:	f040 80ac 	bne.w	80065f2 <_strtod_l+0x1a2>
 800649a:	786b      	ldrb	r3, [r5, #1]
 800649c:	2b58      	cmp	r3, #88	; 0x58
 800649e:	d001      	beq.n	80064a4 <_strtod_l+0x54>
 80064a0:	2b78      	cmp	r3, #120	; 0x78
 80064a2:	d167      	bne.n	8006574 <_strtod_l+0x124>
 80064a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064a6:	9301      	str	r3, [sp, #4]
 80064a8:	ab1c      	add	r3, sp, #112	; 0x70
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	9702      	str	r7, [sp, #8]
 80064ae:	ab1d      	add	r3, sp, #116	; 0x74
 80064b0:	4a88      	ldr	r2, [pc, #544]	; (80066d4 <_strtod_l+0x284>)
 80064b2:	a91b      	add	r1, sp, #108	; 0x6c
 80064b4:	4648      	mov	r0, r9
 80064b6:	f001 fd06 	bl	8007ec6 <__gethex>
 80064ba:	f010 0407 	ands.w	r4, r0, #7
 80064be:	4606      	mov	r6, r0
 80064c0:	d005      	beq.n	80064ce <_strtod_l+0x7e>
 80064c2:	2c06      	cmp	r4, #6
 80064c4:	d12b      	bne.n	800651e <_strtod_l+0xce>
 80064c6:	3501      	adds	r5, #1
 80064c8:	2300      	movs	r3, #0
 80064ca:	951b      	str	r5, [sp, #108]	; 0x6c
 80064cc:	930d      	str	r3, [sp, #52]	; 0x34
 80064ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f040 859a 	bne.w	800700a <_strtod_l+0xbba>
 80064d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064d8:	b1e3      	cbz	r3, 8006514 <_strtod_l+0xc4>
 80064da:	4652      	mov	r2, sl
 80064dc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064e0:	ec43 2b10 	vmov	d0, r2, r3
 80064e4:	b021      	add	sp, #132	; 0x84
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ea:	2a2b      	cmp	r2, #43	; 0x2b
 80064ec:	d015      	beq.n	800651a <_strtod_l+0xca>
 80064ee:	2a2d      	cmp	r2, #45	; 0x2d
 80064f0:	d004      	beq.n	80064fc <_strtod_l+0xac>
 80064f2:	2a20      	cmp	r2, #32
 80064f4:	d1ca      	bne.n	800648c <_strtod_l+0x3c>
 80064f6:	3301      	adds	r3, #1
 80064f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80064fa:	e7bf      	b.n	800647c <_strtod_l+0x2c>
 80064fc:	2201      	movs	r2, #1
 80064fe:	920d      	str	r2, [sp, #52]	; 0x34
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	921b      	str	r2, [sp, #108]	; 0x6c
 8006504:	785b      	ldrb	r3, [r3, #1]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1c2      	bne.n	8006490 <_strtod_l+0x40>
 800650a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800650c:	961b      	str	r6, [sp, #108]	; 0x6c
 800650e:	2b00      	cmp	r3, #0
 8006510:	f040 8579 	bne.w	8007006 <_strtod_l+0xbb6>
 8006514:	4652      	mov	r2, sl
 8006516:	465b      	mov	r3, fp
 8006518:	e7e2      	b.n	80064e0 <_strtod_l+0x90>
 800651a:	2200      	movs	r2, #0
 800651c:	e7ef      	b.n	80064fe <_strtod_l+0xae>
 800651e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006520:	b13a      	cbz	r2, 8006532 <_strtod_l+0xe2>
 8006522:	2135      	movs	r1, #53	; 0x35
 8006524:	a81e      	add	r0, sp, #120	; 0x78
 8006526:	f002 fba1 	bl	8008c6c <__copybits>
 800652a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800652c:	4648      	mov	r0, r9
 800652e:	f002 f80e 	bl	800854e <_Bfree>
 8006532:	3c01      	subs	r4, #1
 8006534:	2c04      	cmp	r4, #4
 8006536:	d806      	bhi.n	8006546 <_strtod_l+0xf6>
 8006538:	e8df f004 	tbb	[pc, r4]
 800653c:	1714030a 	.word	0x1714030a
 8006540:	0a          	.byte	0x0a
 8006541:	00          	.byte	0x00
 8006542:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006546:	0730      	lsls	r0, r6, #28
 8006548:	d5c1      	bpl.n	80064ce <_strtod_l+0x7e>
 800654a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800654e:	e7be      	b.n	80064ce <_strtod_l+0x7e>
 8006550:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006554:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006556:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800655a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800655e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006562:	e7f0      	b.n	8006546 <_strtod_l+0xf6>
 8006564:	f8df b170 	ldr.w	fp, [pc, #368]	; 80066d8 <_strtod_l+0x288>
 8006568:	e7ed      	b.n	8006546 <_strtod_l+0xf6>
 800656a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800656e:	f04f 3aff 	mov.w	sl, #4294967295
 8006572:	e7e8      	b.n	8006546 <_strtod_l+0xf6>
 8006574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	921b      	str	r2, [sp, #108]	; 0x6c
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	2b30      	cmp	r3, #48	; 0x30
 800657e:	d0f9      	beq.n	8006574 <_strtod_l+0x124>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0a4      	beq.n	80064ce <_strtod_l+0x7e>
 8006584:	2301      	movs	r3, #1
 8006586:	2500      	movs	r5, #0
 8006588:	9306      	str	r3, [sp, #24]
 800658a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800658c:	9308      	str	r3, [sp, #32]
 800658e:	9507      	str	r5, [sp, #28]
 8006590:	9505      	str	r5, [sp, #20]
 8006592:	220a      	movs	r2, #10
 8006594:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006596:	7807      	ldrb	r7, [r0, #0]
 8006598:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800659c:	b2d9      	uxtb	r1, r3
 800659e:	2909      	cmp	r1, #9
 80065a0:	d929      	bls.n	80065f6 <_strtod_l+0x1a6>
 80065a2:	4622      	mov	r2, r4
 80065a4:	f8d8 1000 	ldr.w	r1, [r8]
 80065a8:	f002 fdb4 	bl	8009114 <strncmp>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d031      	beq.n	8006614 <_strtod_l+0x1c4>
 80065b0:	2000      	movs	r0, #0
 80065b2:	9c05      	ldr	r4, [sp, #20]
 80065b4:	9004      	str	r0, [sp, #16]
 80065b6:	463b      	mov	r3, r7
 80065b8:	4602      	mov	r2, r0
 80065ba:	2b65      	cmp	r3, #101	; 0x65
 80065bc:	d001      	beq.n	80065c2 <_strtod_l+0x172>
 80065be:	2b45      	cmp	r3, #69	; 0x45
 80065c0:	d114      	bne.n	80065ec <_strtod_l+0x19c>
 80065c2:	b924      	cbnz	r4, 80065ce <_strtod_l+0x17e>
 80065c4:	b910      	cbnz	r0, 80065cc <_strtod_l+0x17c>
 80065c6:	9b06      	ldr	r3, [sp, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d09e      	beq.n	800650a <_strtod_l+0xba>
 80065cc:	2400      	movs	r4, #0
 80065ce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80065d0:	1c73      	adds	r3, r6, #1
 80065d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80065d4:	7873      	ldrb	r3, [r6, #1]
 80065d6:	2b2b      	cmp	r3, #43	; 0x2b
 80065d8:	d078      	beq.n	80066cc <_strtod_l+0x27c>
 80065da:	2b2d      	cmp	r3, #45	; 0x2d
 80065dc:	d070      	beq.n	80066c0 <_strtod_l+0x270>
 80065de:	f04f 0c00 	mov.w	ip, #0
 80065e2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80065e6:	2f09      	cmp	r7, #9
 80065e8:	d97c      	bls.n	80066e4 <_strtod_l+0x294>
 80065ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80065ec:	f04f 0e00 	mov.w	lr, #0
 80065f0:	e09a      	b.n	8006728 <_strtod_l+0x2d8>
 80065f2:	2300      	movs	r3, #0
 80065f4:	e7c7      	b.n	8006586 <_strtod_l+0x136>
 80065f6:	9905      	ldr	r1, [sp, #20]
 80065f8:	2908      	cmp	r1, #8
 80065fa:	bfdd      	ittte	le
 80065fc:	9907      	ldrle	r1, [sp, #28]
 80065fe:	fb02 3301 	mlale	r3, r2, r1, r3
 8006602:	9307      	strle	r3, [sp, #28]
 8006604:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006608:	9b05      	ldr	r3, [sp, #20]
 800660a:	3001      	adds	r0, #1
 800660c:	3301      	adds	r3, #1
 800660e:	9305      	str	r3, [sp, #20]
 8006610:	901b      	str	r0, [sp, #108]	; 0x6c
 8006612:	e7bf      	b.n	8006594 <_strtod_l+0x144>
 8006614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006616:	191a      	adds	r2, r3, r4
 8006618:	921b      	str	r2, [sp, #108]	; 0x6c
 800661a:	9a05      	ldr	r2, [sp, #20]
 800661c:	5d1b      	ldrb	r3, [r3, r4]
 800661e:	2a00      	cmp	r2, #0
 8006620:	d037      	beq.n	8006692 <_strtod_l+0x242>
 8006622:	9c05      	ldr	r4, [sp, #20]
 8006624:	4602      	mov	r2, r0
 8006626:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800662a:	2909      	cmp	r1, #9
 800662c:	d913      	bls.n	8006656 <_strtod_l+0x206>
 800662e:	2101      	movs	r1, #1
 8006630:	9104      	str	r1, [sp, #16]
 8006632:	e7c2      	b.n	80065ba <_strtod_l+0x16a>
 8006634:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	921b      	str	r2, [sp, #108]	; 0x6c
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	3001      	adds	r0, #1
 800663e:	2b30      	cmp	r3, #48	; 0x30
 8006640:	d0f8      	beq.n	8006634 <_strtod_l+0x1e4>
 8006642:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006646:	2a08      	cmp	r2, #8
 8006648:	f200 84e4 	bhi.w	8007014 <_strtod_l+0xbc4>
 800664c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800664e:	9208      	str	r2, [sp, #32]
 8006650:	4602      	mov	r2, r0
 8006652:	2000      	movs	r0, #0
 8006654:	4604      	mov	r4, r0
 8006656:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800665a:	f100 0101 	add.w	r1, r0, #1
 800665e:	d012      	beq.n	8006686 <_strtod_l+0x236>
 8006660:	440a      	add	r2, r1
 8006662:	eb00 0c04 	add.w	ip, r0, r4
 8006666:	4621      	mov	r1, r4
 8006668:	270a      	movs	r7, #10
 800666a:	458c      	cmp	ip, r1
 800666c:	d113      	bne.n	8006696 <_strtod_l+0x246>
 800666e:	1821      	adds	r1, r4, r0
 8006670:	2908      	cmp	r1, #8
 8006672:	f104 0401 	add.w	r4, r4, #1
 8006676:	4404      	add	r4, r0
 8006678:	dc19      	bgt.n	80066ae <_strtod_l+0x25e>
 800667a:	9b07      	ldr	r3, [sp, #28]
 800667c:	210a      	movs	r1, #10
 800667e:	fb01 e303 	mla	r3, r1, r3, lr
 8006682:	9307      	str	r3, [sp, #28]
 8006684:	2100      	movs	r1, #0
 8006686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006688:	1c58      	adds	r0, r3, #1
 800668a:	901b      	str	r0, [sp, #108]	; 0x6c
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	4608      	mov	r0, r1
 8006690:	e7c9      	b.n	8006626 <_strtod_l+0x1d6>
 8006692:	9805      	ldr	r0, [sp, #20]
 8006694:	e7d3      	b.n	800663e <_strtod_l+0x1ee>
 8006696:	2908      	cmp	r1, #8
 8006698:	f101 0101 	add.w	r1, r1, #1
 800669c:	dc03      	bgt.n	80066a6 <_strtod_l+0x256>
 800669e:	9b07      	ldr	r3, [sp, #28]
 80066a0:	437b      	muls	r3, r7
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	e7e1      	b.n	800666a <_strtod_l+0x21a>
 80066a6:	2910      	cmp	r1, #16
 80066a8:	bfd8      	it	le
 80066aa:	437d      	mulle	r5, r7
 80066ac:	e7dd      	b.n	800666a <_strtod_l+0x21a>
 80066ae:	2c10      	cmp	r4, #16
 80066b0:	bfdc      	itt	le
 80066b2:	210a      	movle	r1, #10
 80066b4:	fb01 e505 	mlale	r5, r1, r5, lr
 80066b8:	e7e4      	b.n	8006684 <_strtod_l+0x234>
 80066ba:	2301      	movs	r3, #1
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	e781      	b.n	80065c4 <_strtod_l+0x174>
 80066c0:	f04f 0c01 	mov.w	ip, #1
 80066c4:	1cb3      	adds	r3, r6, #2
 80066c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80066c8:	78b3      	ldrb	r3, [r6, #2]
 80066ca:	e78a      	b.n	80065e2 <_strtod_l+0x192>
 80066cc:	f04f 0c00 	mov.w	ip, #0
 80066d0:	e7f8      	b.n	80066c4 <_strtod_l+0x274>
 80066d2:	bf00      	nop
 80066d4:	08009264 	.word	0x08009264
 80066d8:	7ff00000 	.word	0x7ff00000
 80066dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066de:	1c5f      	adds	r7, r3, #1
 80066e0:	971b      	str	r7, [sp, #108]	; 0x6c
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	2b30      	cmp	r3, #48	; 0x30
 80066e6:	d0f9      	beq.n	80066dc <_strtod_l+0x28c>
 80066e8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80066ec:	2f08      	cmp	r7, #8
 80066ee:	f63f af7d 	bhi.w	80065ec <_strtod_l+0x19c>
 80066f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80066f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066f8:	930a      	str	r3, [sp, #40]	; 0x28
 80066fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066fc:	1c5f      	adds	r7, r3, #1
 80066fe:	971b      	str	r7, [sp, #108]	; 0x6c
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006706:	f1b8 0f09 	cmp.w	r8, #9
 800670a:	d937      	bls.n	800677c <_strtod_l+0x32c>
 800670c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800670e:	1a7f      	subs	r7, r7, r1
 8006710:	2f08      	cmp	r7, #8
 8006712:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006716:	dc37      	bgt.n	8006788 <_strtod_l+0x338>
 8006718:	45be      	cmp	lr, r7
 800671a:	bfa8      	it	ge
 800671c:	46be      	movge	lr, r7
 800671e:	f1bc 0f00 	cmp.w	ip, #0
 8006722:	d001      	beq.n	8006728 <_strtod_l+0x2d8>
 8006724:	f1ce 0e00 	rsb	lr, lr, #0
 8006728:	2c00      	cmp	r4, #0
 800672a:	d151      	bne.n	80067d0 <_strtod_l+0x380>
 800672c:	2800      	cmp	r0, #0
 800672e:	f47f aece 	bne.w	80064ce <_strtod_l+0x7e>
 8006732:	9a06      	ldr	r2, [sp, #24]
 8006734:	2a00      	cmp	r2, #0
 8006736:	f47f aeca 	bne.w	80064ce <_strtod_l+0x7e>
 800673a:	9a04      	ldr	r2, [sp, #16]
 800673c:	2a00      	cmp	r2, #0
 800673e:	f47f aee4 	bne.w	800650a <_strtod_l+0xba>
 8006742:	2b4e      	cmp	r3, #78	; 0x4e
 8006744:	d027      	beq.n	8006796 <_strtod_l+0x346>
 8006746:	dc21      	bgt.n	800678c <_strtod_l+0x33c>
 8006748:	2b49      	cmp	r3, #73	; 0x49
 800674a:	f47f aede 	bne.w	800650a <_strtod_l+0xba>
 800674e:	49a0      	ldr	r1, [pc, #640]	; (80069d0 <_strtod_l+0x580>)
 8006750:	a81b      	add	r0, sp, #108	; 0x6c
 8006752:	f001 fdeb 	bl	800832c <__match>
 8006756:	2800      	cmp	r0, #0
 8006758:	f43f aed7 	beq.w	800650a <_strtod_l+0xba>
 800675c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800675e:	499d      	ldr	r1, [pc, #628]	; (80069d4 <_strtod_l+0x584>)
 8006760:	3b01      	subs	r3, #1
 8006762:	a81b      	add	r0, sp, #108	; 0x6c
 8006764:	931b      	str	r3, [sp, #108]	; 0x6c
 8006766:	f001 fde1 	bl	800832c <__match>
 800676a:	b910      	cbnz	r0, 8006772 <_strtod_l+0x322>
 800676c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800676e:	3301      	adds	r3, #1
 8006770:	931b      	str	r3, [sp, #108]	; 0x6c
 8006772:	f8df b274 	ldr.w	fp, [pc, #628]	; 80069e8 <_strtod_l+0x598>
 8006776:	f04f 0a00 	mov.w	sl, #0
 800677a:	e6a8      	b.n	80064ce <_strtod_l+0x7e>
 800677c:	210a      	movs	r1, #10
 800677e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006782:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006786:	e7b8      	b.n	80066fa <_strtod_l+0x2aa>
 8006788:	46be      	mov	lr, r7
 800678a:	e7c8      	b.n	800671e <_strtod_l+0x2ce>
 800678c:	2b69      	cmp	r3, #105	; 0x69
 800678e:	d0de      	beq.n	800674e <_strtod_l+0x2fe>
 8006790:	2b6e      	cmp	r3, #110	; 0x6e
 8006792:	f47f aeba 	bne.w	800650a <_strtod_l+0xba>
 8006796:	4990      	ldr	r1, [pc, #576]	; (80069d8 <_strtod_l+0x588>)
 8006798:	a81b      	add	r0, sp, #108	; 0x6c
 800679a:	f001 fdc7 	bl	800832c <__match>
 800679e:	2800      	cmp	r0, #0
 80067a0:	f43f aeb3 	beq.w	800650a <_strtod_l+0xba>
 80067a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b28      	cmp	r3, #40	; 0x28
 80067aa:	d10e      	bne.n	80067ca <_strtod_l+0x37a>
 80067ac:	aa1e      	add	r2, sp, #120	; 0x78
 80067ae:	498b      	ldr	r1, [pc, #556]	; (80069dc <_strtod_l+0x58c>)
 80067b0:	a81b      	add	r0, sp, #108	; 0x6c
 80067b2:	f001 fdcf 	bl	8008354 <__hexnan>
 80067b6:	2805      	cmp	r0, #5
 80067b8:	d107      	bne.n	80067ca <_strtod_l+0x37a>
 80067ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067bc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80067c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80067c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80067c8:	e681      	b.n	80064ce <_strtod_l+0x7e>
 80067ca:	f8df b224 	ldr.w	fp, [pc, #548]	; 80069f0 <_strtod_l+0x5a0>
 80067ce:	e7d2      	b.n	8006776 <_strtod_l+0x326>
 80067d0:	ebae 0302 	sub.w	r3, lr, r2
 80067d4:	9306      	str	r3, [sp, #24]
 80067d6:	9b05      	ldr	r3, [sp, #20]
 80067d8:	9807      	ldr	r0, [sp, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	bf08      	it	eq
 80067de:	4623      	moveq	r3, r4
 80067e0:	2c10      	cmp	r4, #16
 80067e2:	9305      	str	r3, [sp, #20]
 80067e4:	46a0      	mov	r8, r4
 80067e6:	bfa8      	it	ge
 80067e8:	f04f 0810 	movge.w	r8, #16
 80067ec:	f7f9 fe92 	bl	8000514 <__aeabi_ui2d>
 80067f0:	2c09      	cmp	r4, #9
 80067f2:	4682      	mov	sl, r0
 80067f4:	468b      	mov	fp, r1
 80067f6:	dc13      	bgt.n	8006820 <_strtod_l+0x3d0>
 80067f8:	9b06      	ldr	r3, [sp, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f43f ae67 	beq.w	80064ce <_strtod_l+0x7e>
 8006800:	9b06      	ldr	r3, [sp, #24]
 8006802:	dd7a      	ble.n	80068fa <_strtod_l+0x4aa>
 8006804:	2b16      	cmp	r3, #22
 8006806:	dc61      	bgt.n	80068cc <_strtod_l+0x47c>
 8006808:	4a75      	ldr	r2, [pc, #468]	; (80069e0 <_strtod_l+0x590>)
 800680a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800680e:	e9de 0100 	ldrd	r0, r1, [lr]
 8006812:	4652      	mov	r2, sl
 8006814:	465b      	mov	r3, fp
 8006816:	f7f9 fef7 	bl	8000608 <__aeabi_dmul>
 800681a:	4682      	mov	sl, r0
 800681c:	468b      	mov	fp, r1
 800681e:	e656      	b.n	80064ce <_strtod_l+0x7e>
 8006820:	4b6f      	ldr	r3, [pc, #444]	; (80069e0 <_strtod_l+0x590>)
 8006822:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006826:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800682a:	f7f9 feed 	bl	8000608 <__aeabi_dmul>
 800682e:	4606      	mov	r6, r0
 8006830:	4628      	mov	r0, r5
 8006832:	460f      	mov	r7, r1
 8006834:	f7f9 fe6e 	bl	8000514 <__aeabi_ui2d>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7f9 fd2c 	bl	800029c <__adddf3>
 8006844:	2c0f      	cmp	r4, #15
 8006846:	4682      	mov	sl, r0
 8006848:	468b      	mov	fp, r1
 800684a:	ddd5      	ble.n	80067f8 <_strtod_l+0x3a8>
 800684c:	9b06      	ldr	r3, [sp, #24]
 800684e:	eba4 0808 	sub.w	r8, r4, r8
 8006852:	4498      	add	r8, r3
 8006854:	f1b8 0f00 	cmp.w	r8, #0
 8006858:	f340 8096 	ble.w	8006988 <_strtod_l+0x538>
 800685c:	f018 030f 	ands.w	r3, r8, #15
 8006860:	d00a      	beq.n	8006878 <_strtod_l+0x428>
 8006862:	495f      	ldr	r1, [pc, #380]	; (80069e0 <_strtod_l+0x590>)
 8006864:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006868:	4652      	mov	r2, sl
 800686a:	465b      	mov	r3, fp
 800686c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006870:	f7f9 feca 	bl	8000608 <__aeabi_dmul>
 8006874:	4682      	mov	sl, r0
 8006876:	468b      	mov	fp, r1
 8006878:	f038 080f 	bics.w	r8, r8, #15
 800687c:	d073      	beq.n	8006966 <_strtod_l+0x516>
 800687e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006882:	dd47      	ble.n	8006914 <_strtod_l+0x4c4>
 8006884:	2400      	movs	r4, #0
 8006886:	46a0      	mov	r8, r4
 8006888:	9407      	str	r4, [sp, #28]
 800688a:	9405      	str	r4, [sp, #20]
 800688c:	2322      	movs	r3, #34	; 0x22
 800688e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80069e8 <_strtod_l+0x598>
 8006892:	f8c9 3000 	str.w	r3, [r9]
 8006896:	f04f 0a00 	mov.w	sl, #0
 800689a:	9b07      	ldr	r3, [sp, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f43f ae16 	beq.w	80064ce <_strtod_l+0x7e>
 80068a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80068a4:	4648      	mov	r0, r9
 80068a6:	f001 fe52 	bl	800854e <_Bfree>
 80068aa:	9905      	ldr	r1, [sp, #20]
 80068ac:	4648      	mov	r0, r9
 80068ae:	f001 fe4e 	bl	800854e <_Bfree>
 80068b2:	4641      	mov	r1, r8
 80068b4:	4648      	mov	r0, r9
 80068b6:	f001 fe4a 	bl	800854e <_Bfree>
 80068ba:	9907      	ldr	r1, [sp, #28]
 80068bc:	4648      	mov	r0, r9
 80068be:	f001 fe46 	bl	800854e <_Bfree>
 80068c2:	4621      	mov	r1, r4
 80068c4:	4648      	mov	r0, r9
 80068c6:	f001 fe42 	bl	800854e <_Bfree>
 80068ca:	e600      	b.n	80064ce <_strtod_l+0x7e>
 80068cc:	9a06      	ldr	r2, [sp, #24]
 80068ce:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80068d2:	4293      	cmp	r3, r2
 80068d4:	dbba      	blt.n	800684c <_strtod_l+0x3fc>
 80068d6:	4d42      	ldr	r5, [pc, #264]	; (80069e0 <_strtod_l+0x590>)
 80068d8:	f1c4 040f 	rsb	r4, r4, #15
 80068dc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80068e0:	4652      	mov	r2, sl
 80068e2:	465b      	mov	r3, fp
 80068e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068e8:	f7f9 fe8e 	bl	8000608 <__aeabi_dmul>
 80068ec:	9b06      	ldr	r3, [sp, #24]
 80068ee:	1b1c      	subs	r4, r3, r4
 80068f0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80068f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068f8:	e78d      	b.n	8006816 <_strtod_l+0x3c6>
 80068fa:	f113 0f16 	cmn.w	r3, #22
 80068fe:	dba5      	blt.n	800684c <_strtod_l+0x3fc>
 8006900:	4a37      	ldr	r2, [pc, #220]	; (80069e0 <_strtod_l+0x590>)
 8006902:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006906:	e9d2 2300 	ldrd	r2, r3, [r2]
 800690a:	4650      	mov	r0, sl
 800690c:	4659      	mov	r1, fp
 800690e:	f7f9 ffa5 	bl	800085c <__aeabi_ddiv>
 8006912:	e782      	b.n	800681a <_strtod_l+0x3ca>
 8006914:	2300      	movs	r3, #0
 8006916:	4e33      	ldr	r6, [pc, #204]	; (80069e4 <_strtod_l+0x594>)
 8006918:	ea4f 1828 	mov.w	r8, r8, asr #4
 800691c:	4650      	mov	r0, sl
 800691e:	4659      	mov	r1, fp
 8006920:	461d      	mov	r5, r3
 8006922:	f1b8 0f01 	cmp.w	r8, #1
 8006926:	dc21      	bgt.n	800696c <_strtod_l+0x51c>
 8006928:	b10b      	cbz	r3, 800692e <_strtod_l+0x4de>
 800692a:	4682      	mov	sl, r0
 800692c:	468b      	mov	fp, r1
 800692e:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <_strtod_l+0x594>)
 8006930:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006934:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006938:	4652      	mov	r2, sl
 800693a:	465b      	mov	r3, fp
 800693c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006940:	f7f9 fe62 	bl	8000608 <__aeabi_dmul>
 8006944:	4b28      	ldr	r3, [pc, #160]	; (80069e8 <_strtod_l+0x598>)
 8006946:	460a      	mov	r2, r1
 8006948:	400b      	ands	r3, r1
 800694a:	4928      	ldr	r1, [pc, #160]	; (80069ec <_strtod_l+0x59c>)
 800694c:	428b      	cmp	r3, r1
 800694e:	4682      	mov	sl, r0
 8006950:	d898      	bhi.n	8006884 <_strtod_l+0x434>
 8006952:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006956:	428b      	cmp	r3, r1
 8006958:	bf86      	itte	hi
 800695a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80069f4 <_strtod_l+0x5a4>
 800695e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006962:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006966:	2300      	movs	r3, #0
 8006968:	9304      	str	r3, [sp, #16]
 800696a:	e077      	b.n	8006a5c <_strtod_l+0x60c>
 800696c:	f018 0f01 	tst.w	r8, #1
 8006970:	d006      	beq.n	8006980 <_strtod_l+0x530>
 8006972:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	f7f9 fe45 	bl	8000608 <__aeabi_dmul>
 800697e:	2301      	movs	r3, #1
 8006980:	3501      	adds	r5, #1
 8006982:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006986:	e7cc      	b.n	8006922 <_strtod_l+0x4d2>
 8006988:	d0ed      	beq.n	8006966 <_strtod_l+0x516>
 800698a:	f1c8 0800 	rsb	r8, r8, #0
 800698e:	f018 020f 	ands.w	r2, r8, #15
 8006992:	d00a      	beq.n	80069aa <_strtod_l+0x55a>
 8006994:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <_strtod_l+0x590>)
 8006996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800699a:	4650      	mov	r0, sl
 800699c:	4659      	mov	r1, fp
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 ff5b 	bl	800085c <__aeabi_ddiv>
 80069a6:	4682      	mov	sl, r0
 80069a8:	468b      	mov	fp, r1
 80069aa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80069ae:	d0da      	beq.n	8006966 <_strtod_l+0x516>
 80069b0:	f1b8 0f1f 	cmp.w	r8, #31
 80069b4:	dd20      	ble.n	80069f8 <_strtod_l+0x5a8>
 80069b6:	2400      	movs	r4, #0
 80069b8:	46a0      	mov	r8, r4
 80069ba:	9407      	str	r4, [sp, #28]
 80069bc:	9405      	str	r4, [sp, #20]
 80069be:	2322      	movs	r3, #34	; 0x22
 80069c0:	f04f 0a00 	mov.w	sl, #0
 80069c4:	f04f 0b00 	mov.w	fp, #0
 80069c8:	f8c9 3000 	str.w	r3, [r9]
 80069cc:	e765      	b.n	800689a <_strtod_l+0x44a>
 80069ce:	bf00      	nop
 80069d0:	0800922d 	.word	0x0800922d
 80069d4:	080092bb 	.word	0x080092bb
 80069d8:	08009235 	.word	0x08009235
 80069dc:	08009278 	.word	0x08009278
 80069e0:	080092f8 	.word	0x080092f8
 80069e4:	080092d0 	.word	0x080092d0
 80069e8:	7ff00000 	.word	0x7ff00000
 80069ec:	7ca00000 	.word	0x7ca00000
 80069f0:	fff80000 	.word	0xfff80000
 80069f4:	7fefffff 	.word	0x7fefffff
 80069f8:	f018 0310 	ands.w	r3, r8, #16
 80069fc:	bf18      	it	ne
 80069fe:	236a      	movne	r3, #106	; 0x6a
 8006a00:	4da0      	ldr	r5, [pc, #640]	; (8006c84 <_strtod_l+0x834>)
 8006a02:	9304      	str	r3, [sp, #16]
 8006a04:	4650      	mov	r0, sl
 8006a06:	4659      	mov	r1, fp
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f1b8 0f00 	cmp.w	r8, #0
 8006a0e:	f300 810a 	bgt.w	8006c26 <_strtod_l+0x7d6>
 8006a12:	b10b      	cbz	r3, 8006a18 <_strtod_l+0x5c8>
 8006a14:	4682      	mov	sl, r0
 8006a16:	468b      	mov	fp, r1
 8006a18:	9b04      	ldr	r3, [sp, #16]
 8006a1a:	b1bb      	cbz	r3, 8006a4c <_strtod_l+0x5fc>
 8006a1c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006a20:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	4659      	mov	r1, fp
 8006a28:	dd10      	ble.n	8006a4c <_strtod_l+0x5fc>
 8006a2a:	2b1f      	cmp	r3, #31
 8006a2c:	f340 8107 	ble.w	8006c3e <_strtod_l+0x7ee>
 8006a30:	2b34      	cmp	r3, #52	; 0x34
 8006a32:	bfde      	ittt	le
 8006a34:	3b20      	suble	r3, #32
 8006a36:	f04f 32ff 	movle.w	r2, #4294967295
 8006a3a:	fa02 f303 	lslle.w	r3, r2, r3
 8006a3e:	f04f 0a00 	mov.w	sl, #0
 8006a42:	bfcc      	ite	gt
 8006a44:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a48:	ea03 0b01 	andle.w	fp, r3, r1
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2300      	movs	r3, #0
 8006a50:	4650      	mov	r0, sl
 8006a52:	4659      	mov	r1, fp
 8006a54:	f7fa f840 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d1ac      	bne.n	80069b6 <_strtod_l+0x566>
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	9a05      	ldr	r2, [sp, #20]
 8006a62:	9908      	ldr	r1, [sp, #32]
 8006a64:	4623      	mov	r3, r4
 8006a66:	4648      	mov	r0, r9
 8006a68:	f001 fdc3 	bl	80085f2 <__s2b>
 8006a6c:	9007      	str	r0, [sp, #28]
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f43f af08 	beq.w	8006884 <_strtod_l+0x434>
 8006a74:	9a06      	ldr	r2, [sp, #24]
 8006a76:	9b06      	ldr	r3, [sp, #24]
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	f1c3 0300 	rsb	r3, r3, #0
 8006a7e:	bfa8      	it	ge
 8006a80:	2300      	movge	r3, #0
 8006a82:	930e      	str	r3, [sp, #56]	; 0x38
 8006a84:	2400      	movs	r4, #0
 8006a86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006a8a:	9316      	str	r3, [sp, #88]	; 0x58
 8006a8c:	46a0      	mov	r8, r4
 8006a8e:	9b07      	ldr	r3, [sp, #28]
 8006a90:	4648      	mov	r0, r9
 8006a92:	6859      	ldr	r1, [r3, #4]
 8006a94:	f001 fd27 	bl	80084e6 <_Balloc>
 8006a98:	9005      	str	r0, [sp, #20]
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	f43f aef6 	beq.w	800688c <_strtod_l+0x43c>
 8006aa0:	9b07      	ldr	r3, [sp, #28]
 8006aa2:	691a      	ldr	r2, [r3, #16]
 8006aa4:	3202      	adds	r2, #2
 8006aa6:	f103 010c 	add.w	r1, r3, #12
 8006aaa:	0092      	lsls	r2, r2, #2
 8006aac:	300c      	adds	r0, #12
 8006aae:	f001 fd0f 	bl	80084d0 <memcpy>
 8006ab2:	aa1e      	add	r2, sp, #120	; 0x78
 8006ab4:	a91d      	add	r1, sp, #116	; 0x74
 8006ab6:	ec4b ab10 	vmov	d0, sl, fp
 8006aba:	4648      	mov	r0, r9
 8006abc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006ac0:	f002 f852 	bl	8008b68 <__d2b>
 8006ac4:	901c      	str	r0, [sp, #112]	; 0x70
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	f43f aee0 	beq.w	800688c <_strtod_l+0x43c>
 8006acc:	2101      	movs	r1, #1
 8006ace:	4648      	mov	r0, r9
 8006ad0:	f001 fe1b 	bl	800870a <__i2b>
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	f43f aed8 	beq.w	800688c <_strtod_l+0x43c>
 8006adc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006ade:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006ae0:	2e00      	cmp	r6, #0
 8006ae2:	bfab      	itete	ge
 8006ae4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006ae6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006ae8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006aea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006aec:	bfac      	ite	ge
 8006aee:	18f7      	addge	r7, r6, r3
 8006af0:	1b9d      	sublt	r5, r3, r6
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	1af6      	subs	r6, r6, r3
 8006af6:	4416      	add	r6, r2
 8006af8:	4b63      	ldr	r3, [pc, #396]	; (8006c88 <_strtod_l+0x838>)
 8006afa:	3e01      	subs	r6, #1
 8006afc:	429e      	cmp	r6, r3
 8006afe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b02:	f280 80af 	bge.w	8006c64 <_strtod_l+0x814>
 8006b06:	1b9b      	subs	r3, r3, r6
 8006b08:	2b1f      	cmp	r3, #31
 8006b0a:	eba2 0203 	sub.w	r2, r2, r3
 8006b0e:	f04f 0101 	mov.w	r1, #1
 8006b12:	f300 809b 	bgt.w	8006c4c <_strtod_l+0x7fc>
 8006b16:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b20:	18be      	adds	r6, r7, r2
 8006b22:	9b04      	ldr	r3, [sp, #16]
 8006b24:	42b7      	cmp	r7, r6
 8006b26:	4415      	add	r5, r2
 8006b28:	441d      	add	r5, r3
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	bfa8      	it	ge
 8006b2e:	4633      	movge	r3, r6
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	bfa8      	it	ge
 8006b34:	462b      	movge	r3, r5
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	bfc2      	ittt	gt
 8006b3a:	1af6      	subgt	r6, r6, r3
 8006b3c:	1aed      	subgt	r5, r5, r3
 8006b3e:	1aff      	subgt	r7, r7, r3
 8006b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b42:	b1bb      	cbz	r3, 8006b74 <_strtod_l+0x724>
 8006b44:	4641      	mov	r1, r8
 8006b46:	461a      	mov	r2, r3
 8006b48:	4648      	mov	r0, r9
 8006b4a:	f001 fe7d 	bl	8008848 <__pow5mult>
 8006b4e:	4680      	mov	r8, r0
 8006b50:	2800      	cmp	r0, #0
 8006b52:	f43f ae9b 	beq.w	800688c <_strtod_l+0x43c>
 8006b56:	4601      	mov	r1, r0
 8006b58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006b5a:	4648      	mov	r0, r9
 8006b5c:	f001 fdde 	bl	800871c <__multiply>
 8006b60:	900c      	str	r0, [sp, #48]	; 0x30
 8006b62:	2800      	cmp	r0, #0
 8006b64:	f43f ae92 	beq.w	800688c <_strtod_l+0x43c>
 8006b68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006b6a:	4648      	mov	r0, r9
 8006b6c:	f001 fcef 	bl	800854e <_Bfree>
 8006b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b72:	931c      	str	r3, [sp, #112]	; 0x70
 8006b74:	2e00      	cmp	r6, #0
 8006b76:	dc7a      	bgt.n	8006c6e <_strtod_l+0x81e>
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dd08      	ble.n	8006b90 <_strtod_l+0x740>
 8006b7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006b80:	9905      	ldr	r1, [sp, #20]
 8006b82:	4648      	mov	r0, r9
 8006b84:	f001 fe60 	bl	8008848 <__pow5mult>
 8006b88:	9005      	str	r0, [sp, #20]
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	f43f ae7e 	beq.w	800688c <_strtod_l+0x43c>
 8006b90:	2d00      	cmp	r5, #0
 8006b92:	dd08      	ble.n	8006ba6 <_strtod_l+0x756>
 8006b94:	462a      	mov	r2, r5
 8006b96:	9905      	ldr	r1, [sp, #20]
 8006b98:	4648      	mov	r0, r9
 8006b9a:	f001 fea3 	bl	80088e4 <__lshift>
 8006b9e:	9005      	str	r0, [sp, #20]
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	f43f ae73 	beq.w	800688c <_strtod_l+0x43c>
 8006ba6:	2f00      	cmp	r7, #0
 8006ba8:	dd08      	ble.n	8006bbc <_strtod_l+0x76c>
 8006baa:	4641      	mov	r1, r8
 8006bac:	463a      	mov	r2, r7
 8006bae:	4648      	mov	r0, r9
 8006bb0:	f001 fe98 	bl	80088e4 <__lshift>
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f43f ae68 	beq.w	800688c <_strtod_l+0x43c>
 8006bbc:	9a05      	ldr	r2, [sp, #20]
 8006bbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006bc0:	4648      	mov	r0, r9
 8006bc2:	f001 fefd 	bl	80089c0 <__mdiff>
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	f43f ae5f 	beq.w	800688c <_strtod_l+0x43c>
 8006bce:	68c3      	ldr	r3, [r0, #12]
 8006bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60c3      	str	r3, [r0, #12]
 8006bd6:	4641      	mov	r1, r8
 8006bd8:	f001 fed8 	bl	800898c <__mcmp>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	da55      	bge.n	8006c8c <_strtod_l+0x83c>
 8006be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006be2:	b9e3      	cbnz	r3, 8006c1e <_strtod_l+0x7ce>
 8006be4:	f1ba 0f00 	cmp.w	sl, #0
 8006be8:	d119      	bne.n	8006c1e <_strtod_l+0x7ce>
 8006bea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bee:	b9b3      	cbnz	r3, 8006c1e <_strtod_l+0x7ce>
 8006bf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006bf4:	0d1b      	lsrs	r3, r3, #20
 8006bf6:	051b      	lsls	r3, r3, #20
 8006bf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006bfc:	d90f      	bls.n	8006c1e <_strtod_l+0x7ce>
 8006bfe:	6963      	ldr	r3, [r4, #20]
 8006c00:	b913      	cbnz	r3, 8006c08 <_strtod_l+0x7b8>
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	dd0a      	ble.n	8006c1e <_strtod_l+0x7ce>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4648      	mov	r0, r9
 8006c0e:	f001 fe69 	bl	80088e4 <__lshift>
 8006c12:	4641      	mov	r1, r8
 8006c14:	4604      	mov	r4, r0
 8006c16:	f001 feb9 	bl	800898c <__mcmp>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	dc67      	bgt.n	8006cee <_strtod_l+0x89e>
 8006c1e:	9b04      	ldr	r3, [sp, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d171      	bne.n	8006d08 <_strtod_l+0x8b8>
 8006c24:	e63d      	b.n	80068a2 <_strtod_l+0x452>
 8006c26:	f018 0f01 	tst.w	r8, #1
 8006c2a:	d004      	beq.n	8006c36 <_strtod_l+0x7e6>
 8006c2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c30:	f7f9 fcea 	bl	8000608 <__aeabi_dmul>
 8006c34:	2301      	movs	r3, #1
 8006c36:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006c3a:	3508      	adds	r5, #8
 8006c3c:	e6e5      	b.n	8006a0a <_strtod_l+0x5ba>
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	ea03 0a0a 	and.w	sl, r3, sl
 8006c4a:	e6ff      	b.n	8006a4c <_strtod_l+0x5fc>
 8006c4c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006c50:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006c54:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006c58:	36e2      	adds	r6, #226	; 0xe2
 8006c5a:	fa01 f306 	lsl.w	r3, r1, r6
 8006c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c60:	910f      	str	r1, [sp, #60]	; 0x3c
 8006c62:	e75d      	b.n	8006b20 <_strtod_l+0x6d0>
 8006c64:	2300      	movs	r3, #0
 8006c66:	930a      	str	r3, [sp, #40]	; 0x28
 8006c68:	2301      	movs	r3, #1
 8006c6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c6c:	e758      	b.n	8006b20 <_strtod_l+0x6d0>
 8006c6e:	4632      	mov	r2, r6
 8006c70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c72:	4648      	mov	r0, r9
 8006c74:	f001 fe36 	bl	80088e4 <__lshift>
 8006c78:	901c      	str	r0, [sp, #112]	; 0x70
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f47f af7c 	bne.w	8006b78 <_strtod_l+0x728>
 8006c80:	e604      	b.n	800688c <_strtod_l+0x43c>
 8006c82:	bf00      	nop
 8006c84:	08009290 	.word	0x08009290
 8006c88:	fffffc02 	.word	0xfffffc02
 8006c8c:	465d      	mov	r5, fp
 8006c8e:	f040 8086 	bne.w	8006d9e <_strtod_l+0x94e>
 8006c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c98:	b32a      	cbz	r2, 8006ce6 <_strtod_l+0x896>
 8006c9a:	4aaf      	ldr	r2, [pc, #700]	; (8006f58 <_strtod_l+0xb08>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d153      	bne.n	8006d48 <_strtod_l+0x8f8>
 8006ca0:	9b04      	ldr	r3, [sp, #16]
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	b1d3      	cbz	r3, 8006cdc <_strtod_l+0x88c>
 8006ca6:	4aad      	ldr	r2, [pc, #692]	; (8006f5c <_strtod_l+0xb0c>)
 8006ca8:	402a      	ands	r2, r5
 8006caa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006cae:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb2:	d816      	bhi.n	8006ce2 <_strtod_l+0x892>
 8006cb4:	0d12      	lsrs	r2, r2, #20
 8006cb6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006cba:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbe:	4298      	cmp	r0, r3
 8006cc0:	d142      	bne.n	8006d48 <_strtod_l+0x8f8>
 8006cc2:	4ba7      	ldr	r3, [pc, #668]	; (8006f60 <_strtod_l+0xb10>)
 8006cc4:	429d      	cmp	r5, r3
 8006cc6:	d102      	bne.n	8006cce <_strtod_l+0x87e>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	f43f addf 	beq.w	800688c <_strtod_l+0x43c>
 8006cce:	4ba3      	ldr	r3, [pc, #652]	; (8006f5c <_strtod_l+0xb0c>)
 8006cd0:	402b      	ands	r3, r5
 8006cd2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006cd6:	f04f 0a00 	mov.w	sl, #0
 8006cda:	e7a0      	b.n	8006c1e <_strtod_l+0x7ce>
 8006cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce0:	e7ed      	b.n	8006cbe <_strtod_l+0x86e>
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	e7eb      	b.n	8006cbe <_strtod_l+0x86e>
 8006ce6:	bb7b      	cbnz	r3, 8006d48 <_strtod_l+0x8f8>
 8006ce8:	f1ba 0f00 	cmp.w	sl, #0
 8006cec:	d12c      	bne.n	8006d48 <_strtod_l+0x8f8>
 8006cee:	9904      	ldr	r1, [sp, #16]
 8006cf0:	4a9a      	ldr	r2, [pc, #616]	; (8006f5c <_strtod_l+0xb0c>)
 8006cf2:	465b      	mov	r3, fp
 8006cf4:	b1f1      	cbz	r1, 8006d34 <_strtod_l+0x8e4>
 8006cf6:	ea02 010b 	and.w	r1, r2, fp
 8006cfa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006cfe:	dc19      	bgt.n	8006d34 <_strtod_l+0x8e4>
 8006d00:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d04:	f77f ae5b 	ble.w	80069be <_strtod_l+0x56e>
 8006d08:	4a96      	ldr	r2, [pc, #600]	; (8006f64 <_strtod_l+0xb14>)
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006d10:	4650      	mov	r0, sl
 8006d12:	4659      	mov	r1, fp
 8006d14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006d18:	f7f9 fc76 	bl	8000608 <__aeabi_dmul>
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	468b      	mov	fp, r1
 8006d20:	2900      	cmp	r1, #0
 8006d22:	f47f adbe 	bne.w	80068a2 <_strtod_l+0x452>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f47f adbb 	bne.w	80068a2 <_strtod_l+0x452>
 8006d2c:	2322      	movs	r3, #34	; 0x22
 8006d2e:	f8c9 3000 	str.w	r3, [r9]
 8006d32:	e5b6      	b.n	80068a2 <_strtod_l+0x452>
 8006d34:	4013      	ands	r3, r2
 8006d36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d42:	f04f 3aff 	mov.w	sl, #4294967295
 8006d46:	e76a      	b.n	8006c1e <_strtod_l+0x7ce>
 8006d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4a:	b193      	cbz	r3, 8006d72 <_strtod_l+0x922>
 8006d4c:	422b      	tst	r3, r5
 8006d4e:	f43f af66 	beq.w	8006c1e <_strtod_l+0x7ce>
 8006d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d54:	9a04      	ldr	r2, [sp, #16]
 8006d56:	4650      	mov	r0, sl
 8006d58:	4659      	mov	r1, fp
 8006d5a:	b173      	cbz	r3, 8006d7a <_strtod_l+0x92a>
 8006d5c:	f7ff fb5c 	bl	8006418 <sulp>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d68:	f7f9 fa98 	bl	800029c <__adddf3>
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	468b      	mov	fp, r1
 8006d70:	e755      	b.n	8006c1e <_strtod_l+0x7ce>
 8006d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d74:	ea13 0f0a 	tst.w	r3, sl
 8006d78:	e7e9      	b.n	8006d4e <_strtod_l+0x8fe>
 8006d7a:	f7ff fb4d 	bl	8006418 <sulp>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d86:	f7f9 fa87 	bl	8000298 <__aeabi_dsub>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	4682      	mov	sl, r0
 8006d90:	468b      	mov	fp, r1
 8006d92:	f7f9 fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f47f ae11 	bne.w	80069be <_strtod_l+0x56e>
 8006d9c:	e73f      	b.n	8006c1e <_strtod_l+0x7ce>
 8006d9e:	4641      	mov	r1, r8
 8006da0:	4620      	mov	r0, r4
 8006da2:	f001 ff30 	bl	8008c06 <__ratio>
 8006da6:	ec57 6b10 	vmov	r6, r7, d0
 8006daa:	2200      	movs	r2, #0
 8006dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006db0:	ee10 0a10 	vmov	r0, s0
 8006db4:	4639      	mov	r1, r7
 8006db6:	f7f9 fea3 	bl	8000b00 <__aeabi_dcmple>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d077      	beq.n	8006eae <_strtod_l+0xa5e>
 8006dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d04a      	beq.n	8006e5a <_strtod_l+0xa0a>
 8006dc4:	4b68      	ldr	r3, [pc, #416]	; (8006f68 <_strtod_l+0xb18>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006dcc:	4f66      	ldr	r7, [pc, #408]	; (8006f68 <_strtod_l+0xb18>)
 8006dce:	2600      	movs	r6, #0
 8006dd0:	4b62      	ldr	r3, [pc, #392]	; (8006f5c <_strtod_l+0xb0c>)
 8006dd2:	402b      	ands	r3, r5
 8006dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006dd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dd8:	4b64      	ldr	r3, [pc, #400]	; (8006f6c <_strtod_l+0xb1c>)
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	f040 80ce 	bne.w	8006f7c <_strtod_l+0xb2c>
 8006de0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006de4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006de8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8006dec:	ec4b ab10 	vmov	d0, sl, fp
 8006df0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006df4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006df8:	f001 fe40 	bl	8008a7c <__ulp>
 8006dfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e00:	ec53 2b10 	vmov	r2, r3, d0
 8006e04:	f7f9 fc00 	bl	8000608 <__aeabi_dmul>
 8006e08:	4652      	mov	r2, sl
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	f7f9 fa46 	bl	800029c <__adddf3>
 8006e10:	460b      	mov	r3, r1
 8006e12:	4952      	ldr	r1, [pc, #328]	; (8006f5c <_strtod_l+0xb0c>)
 8006e14:	4a56      	ldr	r2, [pc, #344]	; (8006f70 <_strtod_l+0xb20>)
 8006e16:	4019      	ands	r1, r3
 8006e18:	4291      	cmp	r1, r2
 8006e1a:	4682      	mov	sl, r0
 8006e1c:	d95b      	bls.n	8006ed6 <_strtod_l+0xa86>
 8006e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e20:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d103      	bne.n	8006e30 <_strtod_l+0x9e0>
 8006e28:	9b08      	ldr	r3, [sp, #32]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	f43f ad2e 	beq.w	800688c <_strtod_l+0x43c>
 8006e30:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006f60 <_strtod_l+0xb10>
 8006e34:	f04f 3aff 	mov.w	sl, #4294967295
 8006e38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e3a:	4648      	mov	r0, r9
 8006e3c:	f001 fb87 	bl	800854e <_Bfree>
 8006e40:	9905      	ldr	r1, [sp, #20]
 8006e42:	4648      	mov	r0, r9
 8006e44:	f001 fb83 	bl	800854e <_Bfree>
 8006e48:	4641      	mov	r1, r8
 8006e4a:	4648      	mov	r0, r9
 8006e4c:	f001 fb7f 	bl	800854e <_Bfree>
 8006e50:	4621      	mov	r1, r4
 8006e52:	4648      	mov	r0, r9
 8006e54:	f001 fb7b 	bl	800854e <_Bfree>
 8006e58:	e619      	b.n	8006a8e <_strtod_l+0x63e>
 8006e5a:	f1ba 0f00 	cmp.w	sl, #0
 8006e5e:	d11a      	bne.n	8006e96 <_strtod_l+0xa46>
 8006e60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e64:	b9eb      	cbnz	r3, 8006ea2 <_strtod_l+0xa52>
 8006e66:	2200      	movs	r2, #0
 8006e68:	4b3f      	ldr	r3, [pc, #252]	; (8006f68 <_strtod_l+0xb18>)
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	f7f9 fe3d 	bl	8000aec <__aeabi_dcmplt>
 8006e72:	b9c8      	cbnz	r0, 8006ea8 <_strtod_l+0xa58>
 8006e74:	4630      	mov	r0, r6
 8006e76:	4639      	mov	r1, r7
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4b3e      	ldr	r3, [pc, #248]	; (8006f74 <_strtod_l+0xb24>)
 8006e7c:	f7f9 fbc4 	bl	8000608 <__aeabi_dmul>
 8006e80:	4606      	mov	r6, r0
 8006e82:	460f      	mov	r7, r1
 8006e84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006e88:	9618      	str	r6, [sp, #96]	; 0x60
 8006e8a:	9319      	str	r3, [sp, #100]	; 0x64
 8006e8c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006e90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e94:	e79c      	b.n	8006dd0 <_strtod_l+0x980>
 8006e96:	f1ba 0f01 	cmp.w	sl, #1
 8006e9a:	d102      	bne.n	8006ea2 <_strtod_l+0xa52>
 8006e9c:	2d00      	cmp	r5, #0
 8006e9e:	f43f ad8e 	beq.w	80069be <_strtod_l+0x56e>
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	4b34      	ldr	r3, [pc, #208]	; (8006f78 <_strtod_l+0xb28>)
 8006ea6:	e78f      	b.n	8006dc8 <_strtod_l+0x978>
 8006ea8:	2600      	movs	r6, #0
 8006eaa:	4f32      	ldr	r7, [pc, #200]	; (8006f74 <_strtod_l+0xb24>)
 8006eac:	e7ea      	b.n	8006e84 <_strtod_l+0xa34>
 8006eae:	4b31      	ldr	r3, [pc, #196]	; (8006f74 <_strtod_l+0xb24>)
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f7f9 fba7 	bl	8000608 <__aeabi_dmul>
 8006eba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	460f      	mov	r7, r1
 8006ec0:	b933      	cbnz	r3, 8006ed0 <_strtod_l+0xa80>
 8006ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ec6:	9010      	str	r0, [sp, #64]	; 0x40
 8006ec8:	9311      	str	r3, [sp, #68]	; 0x44
 8006eca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ece:	e7df      	b.n	8006e90 <_strtod_l+0xa40>
 8006ed0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006ed4:	e7f9      	b.n	8006eca <_strtod_l+0xa7a>
 8006ed6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006eda:	9b04      	ldr	r3, [sp, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1ab      	bne.n	8006e38 <_strtod_l+0x9e8>
 8006ee0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006ee4:	0d1b      	lsrs	r3, r3, #20
 8006ee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ee8:	051b      	lsls	r3, r3, #20
 8006eea:	429a      	cmp	r2, r3
 8006eec:	465d      	mov	r5, fp
 8006eee:	d1a3      	bne.n	8006e38 <_strtod_l+0x9e8>
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7f9 fe38 	bl	8000b68 <__aeabi_d2iz>
 8006ef8:	f7f9 fb1c 	bl	8000534 <__aeabi_i2d>
 8006efc:	460b      	mov	r3, r1
 8006efe:	4602      	mov	r2, r0
 8006f00:	4639      	mov	r1, r7
 8006f02:	4630      	mov	r0, r6
 8006f04:	f7f9 f9c8 	bl	8000298 <__aeabi_dsub>
 8006f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	460f      	mov	r7, r1
 8006f0e:	b933      	cbnz	r3, 8006f1e <_strtod_l+0xace>
 8006f10:	f1ba 0f00 	cmp.w	sl, #0
 8006f14:	d103      	bne.n	8006f1e <_strtod_l+0xace>
 8006f16:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	d06d      	beq.n	8006ffa <_strtod_l+0xbaa>
 8006f1e:	a30a      	add	r3, pc, #40	; (adr r3, 8006f48 <_strtod_l+0xaf8>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f7f9 fde0 	bl	8000aec <__aeabi_dcmplt>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f47f acb8 	bne.w	80068a2 <_strtod_l+0x452>
 8006f32:	a307      	add	r3, pc, #28	; (adr r3, 8006f50 <_strtod_l+0xb00>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	4630      	mov	r0, r6
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	f7f9 fdf4 	bl	8000b28 <__aeabi_dcmpgt>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f43f af79 	beq.w	8006e38 <_strtod_l+0x9e8>
 8006f46:	e4ac      	b.n	80068a2 <_strtod_l+0x452>
 8006f48:	94a03595 	.word	0x94a03595
 8006f4c:	3fdfffff 	.word	0x3fdfffff
 8006f50:	35afe535 	.word	0x35afe535
 8006f54:	3fe00000 	.word	0x3fe00000
 8006f58:	000fffff 	.word	0x000fffff
 8006f5c:	7ff00000 	.word	0x7ff00000
 8006f60:	7fefffff 	.word	0x7fefffff
 8006f64:	39500000 	.word	0x39500000
 8006f68:	3ff00000 	.word	0x3ff00000
 8006f6c:	7fe00000 	.word	0x7fe00000
 8006f70:	7c9fffff 	.word	0x7c9fffff
 8006f74:	3fe00000 	.word	0x3fe00000
 8006f78:	bff00000 	.word	0xbff00000
 8006f7c:	9b04      	ldr	r3, [sp, #16]
 8006f7e:	b333      	cbz	r3, 8006fce <_strtod_l+0xb7e>
 8006f80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f82:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f86:	d822      	bhi.n	8006fce <_strtod_l+0xb7e>
 8006f88:	a327      	add	r3, pc, #156	; (adr r3, 8007028 <_strtod_l+0xbd8>)
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	4630      	mov	r0, r6
 8006f90:	4639      	mov	r1, r7
 8006f92:	f7f9 fdb5 	bl	8000b00 <__aeabi_dcmple>
 8006f96:	b1a0      	cbz	r0, 8006fc2 <_strtod_l+0xb72>
 8006f98:	4639      	mov	r1, r7
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7f9 fe0c 	bl	8000bb8 <__aeabi_d2uiz>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	bf08      	it	eq
 8006fa4:	2001      	moveq	r0, #1
 8006fa6:	f7f9 fab5 	bl	8000514 <__aeabi_ui2d>
 8006faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fac:	4606      	mov	r6, r0
 8006fae:	460f      	mov	r7, r1
 8006fb0:	bb03      	cbnz	r3, 8006ff4 <_strtod_l+0xba4>
 8006fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fb6:	9012      	str	r0, [sp, #72]	; 0x48
 8006fb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006fbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fc6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fce:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006fd2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006fd6:	f001 fd51 	bl	8008a7c <__ulp>
 8006fda:	4650      	mov	r0, sl
 8006fdc:	ec53 2b10 	vmov	r2, r3, d0
 8006fe0:	4659      	mov	r1, fp
 8006fe2:	f7f9 fb11 	bl	8000608 <__aeabi_dmul>
 8006fe6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fea:	f7f9 f957 	bl	800029c <__adddf3>
 8006fee:	4682      	mov	sl, r0
 8006ff0:	468b      	mov	fp, r1
 8006ff2:	e772      	b.n	8006eda <_strtod_l+0xa8a>
 8006ff4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006ff8:	e7df      	b.n	8006fba <_strtod_l+0xb6a>
 8006ffa:	a30d      	add	r3, pc, #52	; (adr r3, 8007030 <_strtod_l+0xbe0>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f7f9 fd74 	bl	8000aec <__aeabi_dcmplt>
 8007004:	e79c      	b.n	8006f40 <_strtod_l+0xaf0>
 8007006:	2300      	movs	r3, #0
 8007008:	930d      	str	r3, [sp, #52]	; 0x34
 800700a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800700c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	f7ff ba61 	b.w	80064d6 <_strtod_l+0x86>
 8007014:	2b65      	cmp	r3, #101	; 0x65
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f43f ab4e 	beq.w	80066ba <_strtod_l+0x26a>
 800701e:	2101      	movs	r1, #1
 8007020:	4614      	mov	r4, r2
 8007022:	9104      	str	r1, [sp, #16]
 8007024:	f7ff bacb 	b.w	80065be <_strtod_l+0x16e>
 8007028:	ffc00000 	.word	0xffc00000
 800702c:	41dfffff 	.word	0x41dfffff
 8007030:	94a03595 	.word	0x94a03595
 8007034:	3fcfffff 	.word	0x3fcfffff

08007038 <_strtod_r>:
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <_strtod_r+0x18>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	b410      	push	{r4}
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	4c04      	ldr	r4, [pc, #16]	; (8007054 <_strtod_r+0x1c>)
 8007042:	2b00      	cmp	r3, #0
 8007044:	bf08      	it	eq
 8007046:	4623      	moveq	r3, r4
 8007048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800704c:	f7ff ba00 	b.w	8006450 <_strtod_l>
 8007050:	2000000c 	.word	0x2000000c
 8007054:	20000070 	.word	0x20000070

08007058 <_strtol_l.isra.0>:
 8007058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	4680      	mov	r8, r0
 800705e:	4689      	mov	r9, r1
 8007060:	4692      	mov	sl, r2
 8007062:	461e      	mov	r6, r3
 8007064:	460f      	mov	r7, r1
 8007066:	463d      	mov	r5, r7
 8007068:	9808      	ldr	r0, [sp, #32]
 800706a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800706e:	f001 fa01 	bl	8008474 <__locale_ctype_ptr_l>
 8007072:	4420      	add	r0, r4
 8007074:	7843      	ldrb	r3, [r0, #1]
 8007076:	f013 0308 	ands.w	r3, r3, #8
 800707a:	d132      	bne.n	80070e2 <_strtol_l.isra.0+0x8a>
 800707c:	2c2d      	cmp	r4, #45	; 0x2d
 800707e:	d132      	bne.n	80070e6 <_strtol_l.isra.0+0x8e>
 8007080:	787c      	ldrb	r4, [r7, #1]
 8007082:	1cbd      	adds	r5, r7, #2
 8007084:	2201      	movs	r2, #1
 8007086:	2e00      	cmp	r6, #0
 8007088:	d05d      	beq.n	8007146 <_strtol_l.isra.0+0xee>
 800708a:	2e10      	cmp	r6, #16
 800708c:	d109      	bne.n	80070a2 <_strtol_l.isra.0+0x4a>
 800708e:	2c30      	cmp	r4, #48	; 0x30
 8007090:	d107      	bne.n	80070a2 <_strtol_l.isra.0+0x4a>
 8007092:	782b      	ldrb	r3, [r5, #0]
 8007094:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007098:	2b58      	cmp	r3, #88	; 0x58
 800709a:	d14f      	bne.n	800713c <_strtol_l.isra.0+0xe4>
 800709c:	786c      	ldrb	r4, [r5, #1]
 800709e:	2610      	movs	r6, #16
 80070a0:	3502      	adds	r5, #2
 80070a2:	2a00      	cmp	r2, #0
 80070a4:	bf14      	ite	ne
 80070a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80070aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80070ae:	2700      	movs	r7, #0
 80070b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80070b4:	4638      	mov	r0, r7
 80070b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80070ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80070be:	2b09      	cmp	r3, #9
 80070c0:	d817      	bhi.n	80070f2 <_strtol_l.isra.0+0x9a>
 80070c2:	461c      	mov	r4, r3
 80070c4:	42a6      	cmp	r6, r4
 80070c6:	dd23      	ble.n	8007110 <_strtol_l.isra.0+0xb8>
 80070c8:	1c7b      	adds	r3, r7, #1
 80070ca:	d007      	beq.n	80070dc <_strtol_l.isra.0+0x84>
 80070cc:	4584      	cmp	ip, r0
 80070ce:	d31c      	bcc.n	800710a <_strtol_l.isra.0+0xb2>
 80070d0:	d101      	bne.n	80070d6 <_strtol_l.isra.0+0x7e>
 80070d2:	45a6      	cmp	lr, r4
 80070d4:	db19      	blt.n	800710a <_strtol_l.isra.0+0xb2>
 80070d6:	fb00 4006 	mla	r0, r0, r6, r4
 80070da:	2701      	movs	r7, #1
 80070dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070e0:	e7eb      	b.n	80070ba <_strtol_l.isra.0+0x62>
 80070e2:	462f      	mov	r7, r5
 80070e4:	e7bf      	b.n	8007066 <_strtol_l.isra.0+0xe>
 80070e6:	2c2b      	cmp	r4, #43	; 0x2b
 80070e8:	bf04      	itt	eq
 80070ea:	1cbd      	addeq	r5, r7, #2
 80070ec:	787c      	ldrbeq	r4, [r7, #1]
 80070ee:	461a      	mov	r2, r3
 80070f0:	e7c9      	b.n	8007086 <_strtol_l.isra.0+0x2e>
 80070f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80070f6:	2b19      	cmp	r3, #25
 80070f8:	d801      	bhi.n	80070fe <_strtol_l.isra.0+0xa6>
 80070fa:	3c37      	subs	r4, #55	; 0x37
 80070fc:	e7e2      	b.n	80070c4 <_strtol_l.isra.0+0x6c>
 80070fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007102:	2b19      	cmp	r3, #25
 8007104:	d804      	bhi.n	8007110 <_strtol_l.isra.0+0xb8>
 8007106:	3c57      	subs	r4, #87	; 0x57
 8007108:	e7dc      	b.n	80070c4 <_strtol_l.isra.0+0x6c>
 800710a:	f04f 37ff 	mov.w	r7, #4294967295
 800710e:	e7e5      	b.n	80070dc <_strtol_l.isra.0+0x84>
 8007110:	1c7b      	adds	r3, r7, #1
 8007112:	d108      	bne.n	8007126 <_strtol_l.isra.0+0xce>
 8007114:	2322      	movs	r3, #34	; 0x22
 8007116:	f8c8 3000 	str.w	r3, [r8]
 800711a:	4608      	mov	r0, r1
 800711c:	f1ba 0f00 	cmp.w	sl, #0
 8007120:	d107      	bne.n	8007132 <_strtol_l.isra.0+0xda>
 8007122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007126:	b102      	cbz	r2, 800712a <_strtol_l.isra.0+0xd2>
 8007128:	4240      	negs	r0, r0
 800712a:	f1ba 0f00 	cmp.w	sl, #0
 800712e:	d0f8      	beq.n	8007122 <_strtol_l.isra.0+0xca>
 8007130:	b10f      	cbz	r7, 8007136 <_strtol_l.isra.0+0xde>
 8007132:	f105 39ff 	add.w	r9, r5, #4294967295
 8007136:	f8ca 9000 	str.w	r9, [sl]
 800713a:	e7f2      	b.n	8007122 <_strtol_l.isra.0+0xca>
 800713c:	2430      	movs	r4, #48	; 0x30
 800713e:	2e00      	cmp	r6, #0
 8007140:	d1af      	bne.n	80070a2 <_strtol_l.isra.0+0x4a>
 8007142:	2608      	movs	r6, #8
 8007144:	e7ad      	b.n	80070a2 <_strtol_l.isra.0+0x4a>
 8007146:	2c30      	cmp	r4, #48	; 0x30
 8007148:	d0a3      	beq.n	8007092 <_strtol_l.isra.0+0x3a>
 800714a:	260a      	movs	r6, #10
 800714c:	e7a9      	b.n	80070a2 <_strtol_l.isra.0+0x4a>
	...

08007150 <_strtol_r>:
 8007150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007152:	4c06      	ldr	r4, [pc, #24]	; (800716c <_strtol_r+0x1c>)
 8007154:	4d06      	ldr	r5, [pc, #24]	; (8007170 <_strtol_r+0x20>)
 8007156:	6824      	ldr	r4, [r4, #0]
 8007158:	6a24      	ldr	r4, [r4, #32]
 800715a:	2c00      	cmp	r4, #0
 800715c:	bf08      	it	eq
 800715e:	462c      	moveq	r4, r5
 8007160:	9400      	str	r4, [sp, #0]
 8007162:	f7ff ff79 	bl	8007058 <_strtol_l.isra.0>
 8007166:	b003      	add	sp, #12
 8007168:	bd30      	pop	{r4, r5, pc}
 800716a:	bf00      	nop
 800716c:	2000000c 	.word	0x2000000c
 8007170:	20000070 	.word	0x20000070

08007174 <strtol>:
 8007174:	4b08      	ldr	r3, [pc, #32]	; (8007198 <strtol+0x24>)
 8007176:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007178:	681c      	ldr	r4, [r3, #0]
 800717a:	4d08      	ldr	r5, [pc, #32]	; (800719c <strtol+0x28>)
 800717c:	6a23      	ldr	r3, [r4, #32]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bf08      	it	eq
 8007182:	462b      	moveq	r3, r5
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4613      	mov	r3, r2
 8007188:	460a      	mov	r2, r1
 800718a:	4601      	mov	r1, r0
 800718c:	4620      	mov	r0, r4
 800718e:	f7ff ff63 	bl	8007058 <_strtol_l.isra.0>
 8007192:	b003      	add	sp, #12
 8007194:	bd30      	pop	{r4, r5, pc}
 8007196:	bf00      	nop
 8007198:	2000000c 	.word	0x2000000c
 800719c:	20000070 	.word	0x20000070

080071a0 <quorem>:
 80071a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	6903      	ldr	r3, [r0, #16]
 80071a6:	690c      	ldr	r4, [r1, #16]
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	4680      	mov	r8, r0
 80071ac:	f2c0 8082 	blt.w	80072b4 <quorem+0x114>
 80071b0:	3c01      	subs	r4, #1
 80071b2:	f101 0714 	add.w	r7, r1, #20
 80071b6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80071ba:	f100 0614 	add.w	r6, r0, #20
 80071be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80071c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80071c6:	eb06 030c 	add.w	r3, r6, ip
 80071ca:	3501      	adds	r5, #1
 80071cc:	eb07 090c 	add.w	r9, r7, ip
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	fbb0 f5f5 	udiv	r5, r0, r5
 80071d6:	b395      	cbz	r5, 800723e <quorem+0x9e>
 80071d8:	f04f 0a00 	mov.w	sl, #0
 80071dc:	4638      	mov	r0, r7
 80071de:	46b6      	mov	lr, r6
 80071e0:	46d3      	mov	fp, sl
 80071e2:	f850 2b04 	ldr.w	r2, [r0], #4
 80071e6:	b293      	uxth	r3, r2
 80071e8:	fb05 a303 	mla	r3, r5, r3, sl
 80071ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	ebab 0303 	sub.w	r3, fp, r3
 80071f6:	0c12      	lsrs	r2, r2, #16
 80071f8:	f8de b000 	ldr.w	fp, [lr]
 80071fc:	fb05 a202 	mla	r2, r5, r2, sl
 8007200:	fa13 f38b 	uxtah	r3, r3, fp
 8007204:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007208:	fa1f fb82 	uxth.w	fp, r2
 800720c:	f8de 2000 	ldr.w	r2, [lr]
 8007210:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007214:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007218:	b29b      	uxth	r3, r3
 800721a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800721e:	4581      	cmp	r9, r0
 8007220:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007224:	f84e 3b04 	str.w	r3, [lr], #4
 8007228:	d2db      	bcs.n	80071e2 <quorem+0x42>
 800722a:	f856 300c 	ldr.w	r3, [r6, ip]
 800722e:	b933      	cbnz	r3, 800723e <quorem+0x9e>
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	3b04      	subs	r3, #4
 8007234:	429e      	cmp	r6, r3
 8007236:	461a      	mov	r2, r3
 8007238:	d330      	bcc.n	800729c <quorem+0xfc>
 800723a:	f8c8 4010 	str.w	r4, [r8, #16]
 800723e:	4640      	mov	r0, r8
 8007240:	f001 fba4 	bl	800898c <__mcmp>
 8007244:	2800      	cmp	r0, #0
 8007246:	db25      	blt.n	8007294 <quorem+0xf4>
 8007248:	3501      	adds	r5, #1
 800724a:	4630      	mov	r0, r6
 800724c:	f04f 0c00 	mov.w	ip, #0
 8007250:	f857 2b04 	ldr.w	r2, [r7], #4
 8007254:	f8d0 e000 	ldr.w	lr, [r0]
 8007258:	b293      	uxth	r3, r2
 800725a:	ebac 0303 	sub.w	r3, ip, r3
 800725e:	0c12      	lsrs	r2, r2, #16
 8007260:	fa13 f38e 	uxtah	r3, r3, lr
 8007264:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007268:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800726c:	b29b      	uxth	r3, r3
 800726e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007272:	45b9      	cmp	r9, r7
 8007274:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007278:	f840 3b04 	str.w	r3, [r0], #4
 800727c:	d2e8      	bcs.n	8007250 <quorem+0xb0>
 800727e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007282:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007286:	b92a      	cbnz	r2, 8007294 <quorem+0xf4>
 8007288:	3b04      	subs	r3, #4
 800728a:	429e      	cmp	r6, r3
 800728c:	461a      	mov	r2, r3
 800728e:	d30b      	bcc.n	80072a8 <quorem+0x108>
 8007290:	f8c8 4010 	str.w	r4, [r8, #16]
 8007294:	4628      	mov	r0, r5
 8007296:	b003      	add	sp, #12
 8007298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	3b04      	subs	r3, #4
 80072a0:	2a00      	cmp	r2, #0
 80072a2:	d1ca      	bne.n	800723a <quorem+0x9a>
 80072a4:	3c01      	subs	r4, #1
 80072a6:	e7c5      	b.n	8007234 <quorem+0x94>
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	3b04      	subs	r3, #4
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	d1ef      	bne.n	8007290 <quorem+0xf0>
 80072b0:	3c01      	subs	r4, #1
 80072b2:	e7ea      	b.n	800728a <quorem+0xea>
 80072b4:	2000      	movs	r0, #0
 80072b6:	e7ee      	b.n	8007296 <quorem+0xf6>

080072b8 <_dtoa_r>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	ec57 6b10 	vmov	r6, r7, d0
 80072c0:	b097      	sub	sp, #92	; 0x5c
 80072c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072c4:	9106      	str	r1, [sp, #24]
 80072c6:	4604      	mov	r4, r0
 80072c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80072ca:	9312      	str	r3, [sp, #72]	; 0x48
 80072cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80072d0:	e9cd 6700 	strd	r6, r7, [sp]
 80072d4:	b93d      	cbnz	r5, 80072e6 <_dtoa_r+0x2e>
 80072d6:	2010      	movs	r0, #16
 80072d8:	f001 f8e0 	bl	800849c <malloc>
 80072dc:	6260      	str	r0, [r4, #36]	; 0x24
 80072de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072e2:	6005      	str	r5, [r0, #0]
 80072e4:	60c5      	str	r5, [r0, #12]
 80072e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e8:	6819      	ldr	r1, [r3, #0]
 80072ea:	b151      	cbz	r1, 8007302 <_dtoa_r+0x4a>
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	604a      	str	r2, [r1, #4]
 80072f0:	2301      	movs	r3, #1
 80072f2:	4093      	lsls	r3, r2
 80072f4:	608b      	str	r3, [r1, #8]
 80072f6:	4620      	mov	r0, r4
 80072f8:	f001 f929 	bl	800854e <_Bfree>
 80072fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	1e3b      	subs	r3, r7, #0
 8007304:	bfbb      	ittet	lt
 8007306:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800730a:	9301      	strlt	r3, [sp, #4]
 800730c:	2300      	movge	r3, #0
 800730e:	2201      	movlt	r2, #1
 8007310:	bfac      	ite	ge
 8007312:	f8c8 3000 	strge.w	r3, [r8]
 8007316:	f8c8 2000 	strlt.w	r2, [r8]
 800731a:	4baf      	ldr	r3, [pc, #700]	; (80075d8 <_dtoa_r+0x320>)
 800731c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007320:	ea33 0308 	bics.w	r3, r3, r8
 8007324:	d114      	bne.n	8007350 <_dtoa_r+0x98>
 8007326:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007328:	f242 730f 	movw	r3, #9999	; 0x270f
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	9b00      	ldr	r3, [sp, #0]
 8007330:	b923      	cbnz	r3, 800733c <_dtoa_r+0x84>
 8007332:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007336:	2800      	cmp	r0, #0
 8007338:	f000 8542 	beq.w	8007dc0 <_dtoa_r+0xb08>
 800733c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800733e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80075ec <_dtoa_r+0x334>
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8544 	beq.w	8007dd0 <_dtoa_r+0xb18>
 8007348:	f10b 0303 	add.w	r3, fp, #3
 800734c:	f000 bd3e 	b.w	8007dcc <_dtoa_r+0xb14>
 8007350:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007354:	2200      	movs	r2, #0
 8007356:	2300      	movs	r3, #0
 8007358:	4630      	mov	r0, r6
 800735a:	4639      	mov	r1, r7
 800735c:	f7f9 fbbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007360:	4681      	mov	r9, r0
 8007362:	b168      	cbz	r0, 8007380 <_dtoa_r+0xc8>
 8007364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007366:	2301      	movs	r3, #1
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8524 	beq.w	8007dba <_dtoa_r+0xb02>
 8007372:	4b9a      	ldr	r3, [pc, #616]	; (80075dc <_dtoa_r+0x324>)
 8007374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007376:	f103 3bff 	add.w	fp, r3, #4294967295
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	f000 bd28 	b.w	8007dd0 <_dtoa_r+0xb18>
 8007380:	aa14      	add	r2, sp, #80	; 0x50
 8007382:	a915      	add	r1, sp, #84	; 0x54
 8007384:	ec47 6b10 	vmov	d0, r6, r7
 8007388:	4620      	mov	r0, r4
 800738a:	f001 fbed 	bl	8008b68 <__d2b>
 800738e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007392:	9004      	str	r0, [sp, #16]
 8007394:	2d00      	cmp	r5, #0
 8007396:	d07c      	beq.n	8007492 <_dtoa_r+0x1da>
 8007398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800739c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80073a0:	46b2      	mov	sl, r6
 80073a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80073a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80073ae:	2200      	movs	r2, #0
 80073b0:	4b8b      	ldr	r3, [pc, #556]	; (80075e0 <_dtoa_r+0x328>)
 80073b2:	4650      	mov	r0, sl
 80073b4:	4659      	mov	r1, fp
 80073b6:	f7f8 ff6f 	bl	8000298 <__aeabi_dsub>
 80073ba:	a381      	add	r3, pc, #516	; (adr r3, 80075c0 <_dtoa_r+0x308>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f7f9 f922 	bl	8000608 <__aeabi_dmul>
 80073c4:	a380      	add	r3, pc, #512	; (adr r3, 80075c8 <_dtoa_r+0x310>)
 80073c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ca:	f7f8 ff67 	bl	800029c <__adddf3>
 80073ce:	4606      	mov	r6, r0
 80073d0:	4628      	mov	r0, r5
 80073d2:	460f      	mov	r7, r1
 80073d4:	f7f9 f8ae 	bl	8000534 <__aeabi_i2d>
 80073d8:	a37d      	add	r3, pc, #500	; (adr r3, 80075d0 <_dtoa_r+0x318>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f7f9 f913 	bl	8000608 <__aeabi_dmul>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4630      	mov	r0, r6
 80073e8:	4639      	mov	r1, r7
 80073ea:	f7f8 ff57 	bl	800029c <__adddf3>
 80073ee:	4606      	mov	r6, r0
 80073f0:	460f      	mov	r7, r1
 80073f2:	f7f9 fbb9 	bl	8000b68 <__aeabi_d2iz>
 80073f6:	2200      	movs	r2, #0
 80073f8:	4682      	mov	sl, r0
 80073fa:	2300      	movs	r3, #0
 80073fc:	4630      	mov	r0, r6
 80073fe:	4639      	mov	r1, r7
 8007400:	f7f9 fb74 	bl	8000aec <__aeabi_dcmplt>
 8007404:	b148      	cbz	r0, 800741a <_dtoa_r+0x162>
 8007406:	4650      	mov	r0, sl
 8007408:	f7f9 f894 	bl	8000534 <__aeabi_i2d>
 800740c:	4632      	mov	r2, r6
 800740e:	463b      	mov	r3, r7
 8007410:	f7f9 fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 8007414:	b908      	cbnz	r0, 800741a <_dtoa_r+0x162>
 8007416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800741a:	f1ba 0f16 	cmp.w	sl, #22
 800741e:	d859      	bhi.n	80074d4 <_dtoa_r+0x21c>
 8007420:	4970      	ldr	r1, [pc, #448]	; (80075e4 <_dtoa_r+0x32c>)
 8007422:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800742a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800742e:	f7f9 fb7b 	bl	8000b28 <__aeabi_dcmpgt>
 8007432:	2800      	cmp	r0, #0
 8007434:	d050      	beq.n	80074d8 <_dtoa_r+0x220>
 8007436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800743a:	2300      	movs	r3, #0
 800743c:	930f      	str	r3, [sp, #60]	; 0x3c
 800743e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007440:	1b5d      	subs	r5, r3, r5
 8007442:	f1b5 0801 	subs.w	r8, r5, #1
 8007446:	bf49      	itett	mi
 8007448:	f1c5 0301 	rsbmi	r3, r5, #1
 800744c:	2300      	movpl	r3, #0
 800744e:	9305      	strmi	r3, [sp, #20]
 8007450:	f04f 0800 	movmi.w	r8, #0
 8007454:	bf58      	it	pl
 8007456:	9305      	strpl	r3, [sp, #20]
 8007458:	f1ba 0f00 	cmp.w	sl, #0
 800745c:	db3e      	blt.n	80074dc <_dtoa_r+0x224>
 800745e:	2300      	movs	r3, #0
 8007460:	44d0      	add	r8, sl
 8007462:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	9b06      	ldr	r3, [sp, #24]
 800746a:	2b09      	cmp	r3, #9
 800746c:	f200 8090 	bhi.w	8007590 <_dtoa_r+0x2d8>
 8007470:	2b05      	cmp	r3, #5
 8007472:	bfc4      	itt	gt
 8007474:	3b04      	subgt	r3, #4
 8007476:	9306      	strgt	r3, [sp, #24]
 8007478:	9b06      	ldr	r3, [sp, #24]
 800747a:	f1a3 0302 	sub.w	r3, r3, #2
 800747e:	bfcc      	ite	gt
 8007480:	2500      	movgt	r5, #0
 8007482:	2501      	movle	r5, #1
 8007484:	2b03      	cmp	r3, #3
 8007486:	f200 808f 	bhi.w	80075a8 <_dtoa_r+0x2f0>
 800748a:	e8df f003 	tbb	[pc, r3]
 800748e:	7f7d      	.short	0x7f7d
 8007490:	7131      	.short	0x7131
 8007492:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007496:	441d      	add	r5, r3
 8007498:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800749c:	2820      	cmp	r0, #32
 800749e:	dd13      	ble.n	80074c8 <_dtoa_r+0x210>
 80074a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80074a4:	9b00      	ldr	r3, [sp, #0]
 80074a6:	fa08 f800 	lsl.w	r8, r8, r0
 80074aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80074ae:	fa23 f000 	lsr.w	r0, r3, r0
 80074b2:	ea48 0000 	orr.w	r0, r8, r0
 80074b6:	f7f9 f82d 	bl	8000514 <__aeabi_ui2d>
 80074ba:	2301      	movs	r3, #1
 80074bc:	4682      	mov	sl, r0
 80074be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80074c2:	3d01      	subs	r5, #1
 80074c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80074c6:	e772      	b.n	80073ae <_dtoa_r+0xf6>
 80074c8:	9b00      	ldr	r3, [sp, #0]
 80074ca:	f1c0 0020 	rsb	r0, r0, #32
 80074ce:	fa03 f000 	lsl.w	r0, r3, r0
 80074d2:	e7f0      	b.n	80074b6 <_dtoa_r+0x1fe>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e7b1      	b.n	800743c <_dtoa_r+0x184>
 80074d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80074da:	e7b0      	b.n	800743e <_dtoa_r+0x186>
 80074dc:	9b05      	ldr	r3, [sp, #20]
 80074de:	eba3 030a 	sub.w	r3, r3, sl
 80074e2:	9305      	str	r3, [sp, #20]
 80074e4:	f1ca 0300 	rsb	r3, sl, #0
 80074e8:	9307      	str	r3, [sp, #28]
 80074ea:	2300      	movs	r3, #0
 80074ec:	930e      	str	r3, [sp, #56]	; 0x38
 80074ee:	e7bb      	b.n	8007468 <_dtoa_r+0x1b0>
 80074f0:	2301      	movs	r3, #1
 80074f2:	930a      	str	r3, [sp, #40]	; 0x28
 80074f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	dd59      	ble.n	80075ae <_dtoa_r+0x2f6>
 80074fa:	9302      	str	r3, [sp, #8]
 80074fc:	4699      	mov	r9, r3
 80074fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007500:	2200      	movs	r2, #0
 8007502:	6072      	str	r2, [r6, #4]
 8007504:	2204      	movs	r2, #4
 8007506:	f102 0014 	add.w	r0, r2, #20
 800750a:	4298      	cmp	r0, r3
 800750c:	6871      	ldr	r1, [r6, #4]
 800750e:	d953      	bls.n	80075b8 <_dtoa_r+0x300>
 8007510:	4620      	mov	r0, r4
 8007512:	f000 ffe8 	bl	80084e6 <_Balloc>
 8007516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007518:	6030      	str	r0, [r6, #0]
 800751a:	f1b9 0f0e 	cmp.w	r9, #14
 800751e:	f8d3 b000 	ldr.w	fp, [r3]
 8007522:	f200 80e6 	bhi.w	80076f2 <_dtoa_r+0x43a>
 8007526:	2d00      	cmp	r5, #0
 8007528:	f000 80e3 	beq.w	80076f2 <_dtoa_r+0x43a>
 800752c:	ed9d 7b00 	vldr	d7, [sp]
 8007530:	f1ba 0f00 	cmp.w	sl, #0
 8007534:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007538:	dd74      	ble.n	8007624 <_dtoa_r+0x36c>
 800753a:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <_dtoa_r+0x32c>)
 800753c:	f00a 030f 	and.w	r3, sl, #15
 8007540:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007544:	ed93 7b00 	vldr	d7, [r3]
 8007548:	ea4f 162a 	mov.w	r6, sl, asr #4
 800754c:	06f0      	lsls	r0, r6, #27
 800754e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007552:	d565      	bpl.n	8007620 <_dtoa_r+0x368>
 8007554:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <_dtoa_r+0x330>)
 8007556:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800755a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800755e:	f7f9 f97d 	bl	800085c <__aeabi_ddiv>
 8007562:	e9cd 0100 	strd	r0, r1, [sp]
 8007566:	f006 060f 	and.w	r6, r6, #15
 800756a:	2503      	movs	r5, #3
 800756c:	4f1e      	ldr	r7, [pc, #120]	; (80075e8 <_dtoa_r+0x330>)
 800756e:	e04c      	b.n	800760a <_dtoa_r+0x352>
 8007570:	2301      	movs	r3, #1
 8007572:	930a      	str	r3, [sp, #40]	; 0x28
 8007574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007576:	4453      	add	r3, sl
 8007578:	f103 0901 	add.w	r9, r3, #1
 800757c:	9302      	str	r3, [sp, #8]
 800757e:	464b      	mov	r3, r9
 8007580:	2b01      	cmp	r3, #1
 8007582:	bfb8      	it	lt
 8007584:	2301      	movlt	r3, #1
 8007586:	e7ba      	b.n	80074fe <_dtoa_r+0x246>
 8007588:	2300      	movs	r3, #0
 800758a:	e7b2      	b.n	80074f2 <_dtoa_r+0x23a>
 800758c:	2300      	movs	r3, #0
 800758e:	e7f0      	b.n	8007572 <_dtoa_r+0x2ba>
 8007590:	2501      	movs	r5, #1
 8007592:	2300      	movs	r3, #0
 8007594:	9306      	str	r3, [sp, #24]
 8007596:	950a      	str	r5, [sp, #40]	; 0x28
 8007598:	f04f 33ff 	mov.w	r3, #4294967295
 800759c:	9302      	str	r3, [sp, #8]
 800759e:	4699      	mov	r9, r3
 80075a0:	2200      	movs	r2, #0
 80075a2:	2312      	movs	r3, #18
 80075a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80075a6:	e7aa      	b.n	80074fe <_dtoa_r+0x246>
 80075a8:	2301      	movs	r3, #1
 80075aa:	930a      	str	r3, [sp, #40]	; 0x28
 80075ac:	e7f4      	b.n	8007598 <_dtoa_r+0x2e0>
 80075ae:	2301      	movs	r3, #1
 80075b0:	9302      	str	r3, [sp, #8]
 80075b2:	4699      	mov	r9, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	e7f5      	b.n	80075a4 <_dtoa_r+0x2ec>
 80075b8:	3101      	adds	r1, #1
 80075ba:	6071      	str	r1, [r6, #4]
 80075bc:	0052      	lsls	r2, r2, #1
 80075be:	e7a2      	b.n	8007506 <_dtoa_r+0x24e>
 80075c0:	636f4361 	.word	0x636f4361
 80075c4:	3fd287a7 	.word	0x3fd287a7
 80075c8:	8b60c8b3 	.word	0x8b60c8b3
 80075cc:	3fc68a28 	.word	0x3fc68a28
 80075d0:	509f79fb 	.word	0x509f79fb
 80075d4:	3fd34413 	.word	0x3fd34413
 80075d8:	7ff00000 	.word	0x7ff00000
 80075dc:	08009239 	.word	0x08009239
 80075e0:	3ff80000 	.word	0x3ff80000
 80075e4:	080092f8 	.word	0x080092f8
 80075e8:	080092d0 	.word	0x080092d0
 80075ec:	080092c1 	.word	0x080092c1
 80075f0:	07f1      	lsls	r1, r6, #31
 80075f2:	d508      	bpl.n	8007606 <_dtoa_r+0x34e>
 80075f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fc:	f7f9 f804 	bl	8000608 <__aeabi_dmul>
 8007600:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007604:	3501      	adds	r5, #1
 8007606:	1076      	asrs	r6, r6, #1
 8007608:	3708      	adds	r7, #8
 800760a:	2e00      	cmp	r6, #0
 800760c:	d1f0      	bne.n	80075f0 <_dtoa_r+0x338>
 800760e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007612:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007616:	f7f9 f921 	bl	800085c <__aeabi_ddiv>
 800761a:	e9cd 0100 	strd	r0, r1, [sp]
 800761e:	e01a      	b.n	8007656 <_dtoa_r+0x39e>
 8007620:	2502      	movs	r5, #2
 8007622:	e7a3      	b.n	800756c <_dtoa_r+0x2b4>
 8007624:	f000 80a0 	beq.w	8007768 <_dtoa_r+0x4b0>
 8007628:	f1ca 0600 	rsb	r6, sl, #0
 800762c:	4b9f      	ldr	r3, [pc, #636]	; (80078ac <_dtoa_r+0x5f4>)
 800762e:	4fa0      	ldr	r7, [pc, #640]	; (80078b0 <_dtoa_r+0x5f8>)
 8007630:	f006 020f 	and.w	r2, r6, #15
 8007634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007640:	f7f8 ffe2 	bl	8000608 <__aeabi_dmul>
 8007644:	e9cd 0100 	strd	r0, r1, [sp]
 8007648:	1136      	asrs	r6, r6, #4
 800764a:	2300      	movs	r3, #0
 800764c:	2502      	movs	r5, #2
 800764e:	2e00      	cmp	r6, #0
 8007650:	d17f      	bne.n	8007752 <_dtoa_r+0x49a>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e1      	bne.n	800761a <_dtoa_r+0x362>
 8007656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 8087 	beq.w	800776c <_dtoa_r+0x4b4>
 800765e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007662:	2200      	movs	r2, #0
 8007664:	4b93      	ldr	r3, [pc, #588]	; (80078b4 <_dtoa_r+0x5fc>)
 8007666:	4630      	mov	r0, r6
 8007668:	4639      	mov	r1, r7
 800766a:	f7f9 fa3f 	bl	8000aec <__aeabi_dcmplt>
 800766e:	2800      	cmp	r0, #0
 8007670:	d07c      	beq.n	800776c <_dtoa_r+0x4b4>
 8007672:	f1b9 0f00 	cmp.w	r9, #0
 8007676:	d079      	beq.n	800776c <_dtoa_r+0x4b4>
 8007678:	9b02      	ldr	r3, [sp, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	dd35      	ble.n	80076ea <_dtoa_r+0x432>
 800767e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007682:	9308      	str	r3, [sp, #32]
 8007684:	4639      	mov	r1, r7
 8007686:	2200      	movs	r2, #0
 8007688:	4b8b      	ldr	r3, [pc, #556]	; (80078b8 <_dtoa_r+0x600>)
 800768a:	4630      	mov	r0, r6
 800768c:	f7f8 ffbc 	bl	8000608 <__aeabi_dmul>
 8007690:	e9cd 0100 	strd	r0, r1, [sp]
 8007694:	9f02      	ldr	r7, [sp, #8]
 8007696:	3501      	adds	r5, #1
 8007698:	4628      	mov	r0, r5
 800769a:	f7f8 ff4b 	bl	8000534 <__aeabi_i2d>
 800769e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076a2:	f7f8 ffb1 	bl	8000608 <__aeabi_dmul>
 80076a6:	2200      	movs	r2, #0
 80076a8:	4b84      	ldr	r3, [pc, #528]	; (80078bc <_dtoa_r+0x604>)
 80076aa:	f7f8 fdf7 	bl	800029c <__adddf3>
 80076ae:	4605      	mov	r5, r0
 80076b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80076b4:	2f00      	cmp	r7, #0
 80076b6:	d15d      	bne.n	8007774 <_dtoa_r+0x4bc>
 80076b8:	2200      	movs	r2, #0
 80076ba:	4b81      	ldr	r3, [pc, #516]	; (80078c0 <_dtoa_r+0x608>)
 80076bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076c0:	f7f8 fdea 	bl	8000298 <__aeabi_dsub>
 80076c4:	462a      	mov	r2, r5
 80076c6:	4633      	mov	r3, r6
 80076c8:	e9cd 0100 	strd	r0, r1, [sp]
 80076cc:	f7f9 fa2c 	bl	8000b28 <__aeabi_dcmpgt>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	f040 8288 	bne.w	8007be6 <_dtoa_r+0x92e>
 80076d6:	462a      	mov	r2, r5
 80076d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80076dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076e0:	f7f9 fa04 	bl	8000aec <__aeabi_dcmplt>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	f040 827c 	bne.w	8007be2 <_dtoa_r+0x92a>
 80076ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076ee:	e9cd 2300 	strd	r2, r3, [sp]
 80076f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f2c0 8150 	blt.w	800799a <_dtoa_r+0x6e2>
 80076fa:	f1ba 0f0e 	cmp.w	sl, #14
 80076fe:	f300 814c 	bgt.w	800799a <_dtoa_r+0x6e2>
 8007702:	4b6a      	ldr	r3, [pc, #424]	; (80078ac <_dtoa_r+0x5f4>)
 8007704:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007708:	ed93 7b00 	vldr	d7, [r3]
 800770c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800770e:	2b00      	cmp	r3, #0
 8007710:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007714:	f280 80d8 	bge.w	80078c8 <_dtoa_r+0x610>
 8007718:	f1b9 0f00 	cmp.w	r9, #0
 800771c:	f300 80d4 	bgt.w	80078c8 <_dtoa_r+0x610>
 8007720:	f040 825e 	bne.w	8007be0 <_dtoa_r+0x928>
 8007724:	2200      	movs	r2, #0
 8007726:	4b66      	ldr	r3, [pc, #408]	; (80078c0 <_dtoa_r+0x608>)
 8007728:	ec51 0b17 	vmov	r0, r1, d7
 800772c:	f7f8 ff6c 	bl	8000608 <__aeabi_dmul>
 8007730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007734:	f7f9 f9ee 	bl	8000b14 <__aeabi_dcmpge>
 8007738:	464f      	mov	r7, r9
 800773a:	464e      	mov	r6, r9
 800773c:	2800      	cmp	r0, #0
 800773e:	f040 8234 	bne.w	8007baa <_dtoa_r+0x8f2>
 8007742:	2331      	movs	r3, #49	; 0x31
 8007744:	f10b 0501 	add.w	r5, fp, #1
 8007748:	f88b 3000 	strb.w	r3, [fp]
 800774c:	f10a 0a01 	add.w	sl, sl, #1
 8007750:	e22f      	b.n	8007bb2 <_dtoa_r+0x8fa>
 8007752:	07f2      	lsls	r2, r6, #31
 8007754:	d505      	bpl.n	8007762 <_dtoa_r+0x4aa>
 8007756:	e9d7 2300 	ldrd	r2, r3, [r7]
 800775a:	f7f8 ff55 	bl	8000608 <__aeabi_dmul>
 800775e:	3501      	adds	r5, #1
 8007760:	2301      	movs	r3, #1
 8007762:	1076      	asrs	r6, r6, #1
 8007764:	3708      	adds	r7, #8
 8007766:	e772      	b.n	800764e <_dtoa_r+0x396>
 8007768:	2502      	movs	r5, #2
 800776a:	e774      	b.n	8007656 <_dtoa_r+0x39e>
 800776c:	f8cd a020 	str.w	sl, [sp, #32]
 8007770:	464f      	mov	r7, r9
 8007772:	e791      	b.n	8007698 <_dtoa_r+0x3e0>
 8007774:	4b4d      	ldr	r3, [pc, #308]	; (80078ac <_dtoa_r+0x5f4>)
 8007776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800777a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800777e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007780:	2b00      	cmp	r3, #0
 8007782:	d047      	beq.n	8007814 <_dtoa_r+0x55c>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	2000      	movs	r0, #0
 800778a:	494e      	ldr	r1, [pc, #312]	; (80078c4 <_dtoa_r+0x60c>)
 800778c:	f7f9 f866 	bl	800085c <__aeabi_ddiv>
 8007790:	462a      	mov	r2, r5
 8007792:	4633      	mov	r3, r6
 8007794:	f7f8 fd80 	bl	8000298 <__aeabi_dsub>
 8007798:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800779c:	465d      	mov	r5, fp
 800779e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077a2:	f7f9 f9e1 	bl	8000b68 <__aeabi_d2iz>
 80077a6:	4606      	mov	r6, r0
 80077a8:	f7f8 fec4 	bl	8000534 <__aeabi_i2d>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077b4:	f7f8 fd70 	bl	8000298 <__aeabi_dsub>
 80077b8:	3630      	adds	r6, #48	; 0x30
 80077ba:	f805 6b01 	strb.w	r6, [r5], #1
 80077be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077c2:	e9cd 0100 	strd	r0, r1, [sp]
 80077c6:	f7f9 f991 	bl	8000aec <__aeabi_dcmplt>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d163      	bne.n	8007896 <_dtoa_r+0x5de>
 80077ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077d2:	2000      	movs	r0, #0
 80077d4:	4937      	ldr	r1, [pc, #220]	; (80078b4 <_dtoa_r+0x5fc>)
 80077d6:	f7f8 fd5f 	bl	8000298 <__aeabi_dsub>
 80077da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80077de:	f7f9 f985 	bl	8000aec <__aeabi_dcmplt>
 80077e2:	2800      	cmp	r0, #0
 80077e4:	f040 80b7 	bne.w	8007956 <_dtoa_r+0x69e>
 80077e8:	eba5 030b 	sub.w	r3, r5, fp
 80077ec:	429f      	cmp	r7, r3
 80077ee:	f77f af7c 	ble.w	80076ea <_dtoa_r+0x432>
 80077f2:	2200      	movs	r2, #0
 80077f4:	4b30      	ldr	r3, [pc, #192]	; (80078b8 <_dtoa_r+0x600>)
 80077f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80077fa:	f7f8 ff05 	bl	8000608 <__aeabi_dmul>
 80077fe:	2200      	movs	r2, #0
 8007800:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007804:	4b2c      	ldr	r3, [pc, #176]	; (80078b8 <_dtoa_r+0x600>)
 8007806:	e9dd 0100 	ldrd	r0, r1, [sp]
 800780a:	f7f8 fefd 	bl	8000608 <__aeabi_dmul>
 800780e:	e9cd 0100 	strd	r0, r1, [sp]
 8007812:	e7c4      	b.n	800779e <_dtoa_r+0x4e6>
 8007814:	462a      	mov	r2, r5
 8007816:	4633      	mov	r3, r6
 8007818:	f7f8 fef6 	bl	8000608 <__aeabi_dmul>
 800781c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007820:	eb0b 0507 	add.w	r5, fp, r7
 8007824:	465e      	mov	r6, fp
 8007826:	e9dd 0100 	ldrd	r0, r1, [sp]
 800782a:	f7f9 f99d 	bl	8000b68 <__aeabi_d2iz>
 800782e:	4607      	mov	r7, r0
 8007830:	f7f8 fe80 	bl	8000534 <__aeabi_i2d>
 8007834:	3730      	adds	r7, #48	; 0x30
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800783e:	f7f8 fd2b 	bl	8000298 <__aeabi_dsub>
 8007842:	f806 7b01 	strb.w	r7, [r6], #1
 8007846:	42ae      	cmp	r6, r5
 8007848:	e9cd 0100 	strd	r0, r1, [sp]
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	d126      	bne.n	80078a0 <_dtoa_r+0x5e8>
 8007852:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <_dtoa_r+0x60c>)
 8007854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007858:	f7f8 fd20 	bl	800029c <__adddf3>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007864:	f7f9 f960 	bl	8000b28 <__aeabi_dcmpgt>
 8007868:	2800      	cmp	r0, #0
 800786a:	d174      	bne.n	8007956 <_dtoa_r+0x69e>
 800786c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007870:	2000      	movs	r0, #0
 8007872:	4914      	ldr	r1, [pc, #80]	; (80078c4 <_dtoa_r+0x60c>)
 8007874:	f7f8 fd10 	bl	8000298 <__aeabi_dsub>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007880:	f7f9 f934 	bl	8000aec <__aeabi_dcmplt>
 8007884:	2800      	cmp	r0, #0
 8007886:	f43f af30 	beq.w	80076ea <_dtoa_r+0x432>
 800788a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800788e:	2b30      	cmp	r3, #48	; 0x30
 8007890:	f105 32ff 	add.w	r2, r5, #4294967295
 8007894:	d002      	beq.n	800789c <_dtoa_r+0x5e4>
 8007896:	f8dd a020 	ldr.w	sl, [sp, #32]
 800789a:	e04a      	b.n	8007932 <_dtoa_r+0x67a>
 800789c:	4615      	mov	r5, r2
 800789e:	e7f4      	b.n	800788a <_dtoa_r+0x5d2>
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <_dtoa_r+0x600>)
 80078a2:	f7f8 feb1 	bl	8000608 <__aeabi_dmul>
 80078a6:	e9cd 0100 	strd	r0, r1, [sp]
 80078aa:	e7bc      	b.n	8007826 <_dtoa_r+0x56e>
 80078ac:	080092f8 	.word	0x080092f8
 80078b0:	080092d0 	.word	0x080092d0
 80078b4:	3ff00000 	.word	0x3ff00000
 80078b8:	40240000 	.word	0x40240000
 80078bc:	401c0000 	.word	0x401c0000
 80078c0:	40140000 	.word	0x40140000
 80078c4:	3fe00000 	.word	0x3fe00000
 80078c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80078cc:	465d      	mov	r5, fp
 80078ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078d2:	4630      	mov	r0, r6
 80078d4:	4639      	mov	r1, r7
 80078d6:	f7f8 ffc1 	bl	800085c <__aeabi_ddiv>
 80078da:	f7f9 f945 	bl	8000b68 <__aeabi_d2iz>
 80078de:	4680      	mov	r8, r0
 80078e0:	f7f8 fe28 	bl	8000534 <__aeabi_i2d>
 80078e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078e8:	f7f8 fe8e 	bl	8000608 <__aeabi_dmul>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4630      	mov	r0, r6
 80078f2:	4639      	mov	r1, r7
 80078f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80078f8:	f7f8 fcce 	bl	8000298 <__aeabi_dsub>
 80078fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007900:	eba5 060b 	sub.w	r6, r5, fp
 8007904:	45b1      	cmp	r9, r6
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	d139      	bne.n	8007980 <_dtoa_r+0x6c8>
 800790c:	f7f8 fcc6 	bl	800029c <__adddf3>
 8007910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007914:	4606      	mov	r6, r0
 8007916:	460f      	mov	r7, r1
 8007918:	f7f9 f906 	bl	8000b28 <__aeabi_dcmpgt>
 800791c:	b9c8      	cbnz	r0, 8007952 <_dtoa_r+0x69a>
 800791e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007922:	4630      	mov	r0, r6
 8007924:	4639      	mov	r1, r7
 8007926:	f7f9 f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800792a:	b110      	cbz	r0, 8007932 <_dtoa_r+0x67a>
 800792c:	f018 0f01 	tst.w	r8, #1
 8007930:	d10f      	bne.n	8007952 <_dtoa_r+0x69a>
 8007932:	9904      	ldr	r1, [sp, #16]
 8007934:	4620      	mov	r0, r4
 8007936:	f000 fe0a 	bl	800854e <_Bfree>
 800793a:	2300      	movs	r3, #0
 800793c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800793e:	702b      	strb	r3, [r5, #0]
 8007940:	f10a 0301 	add.w	r3, sl, #1
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 8241 	beq.w	8007dd0 <_dtoa_r+0xb18>
 800794e:	601d      	str	r5, [r3, #0]
 8007950:	e23e      	b.n	8007dd0 <_dtoa_r+0xb18>
 8007952:	f8cd a020 	str.w	sl, [sp, #32]
 8007956:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800795a:	2a39      	cmp	r2, #57	; 0x39
 800795c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007960:	d108      	bne.n	8007974 <_dtoa_r+0x6bc>
 8007962:	459b      	cmp	fp, r3
 8007964:	d10a      	bne.n	800797c <_dtoa_r+0x6c4>
 8007966:	9b08      	ldr	r3, [sp, #32]
 8007968:	3301      	adds	r3, #1
 800796a:	9308      	str	r3, [sp, #32]
 800796c:	2330      	movs	r3, #48	; 0x30
 800796e:	f88b 3000 	strb.w	r3, [fp]
 8007972:	465b      	mov	r3, fp
 8007974:	781a      	ldrb	r2, [r3, #0]
 8007976:	3201      	adds	r2, #1
 8007978:	701a      	strb	r2, [r3, #0]
 800797a:	e78c      	b.n	8007896 <_dtoa_r+0x5de>
 800797c:	461d      	mov	r5, r3
 800797e:	e7ea      	b.n	8007956 <_dtoa_r+0x69e>
 8007980:	2200      	movs	r2, #0
 8007982:	4b9b      	ldr	r3, [pc, #620]	; (8007bf0 <_dtoa_r+0x938>)
 8007984:	f7f8 fe40 	bl	8000608 <__aeabi_dmul>
 8007988:	2200      	movs	r2, #0
 800798a:	2300      	movs	r3, #0
 800798c:	4606      	mov	r6, r0
 800798e:	460f      	mov	r7, r1
 8007990:	f7f9 f8a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007994:	2800      	cmp	r0, #0
 8007996:	d09a      	beq.n	80078ce <_dtoa_r+0x616>
 8007998:	e7cb      	b.n	8007932 <_dtoa_r+0x67a>
 800799a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800799c:	2a00      	cmp	r2, #0
 800799e:	f000 808b 	beq.w	8007ab8 <_dtoa_r+0x800>
 80079a2:	9a06      	ldr	r2, [sp, #24]
 80079a4:	2a01      	cmp	r2, #1
 80079a6:	dc6e      	bgt.n	8007a86 <_dtoa_r+0x7ce>
 80079a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	d067      	beq.n	8007a7e <_dtoa_r+0x7c6>
 80079ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079b2:	9f07      	ldr	r7, [sp, #28]
 80079b4:	9d05      	ldr	r5, [sp, #20]
 80079b6:	9a05      	ldr	r2, [sp, #20]
 80079b8:	2101      	movs	r1, #1
 80079ba:	441a      	add	r2, r3
 80079bc:	4620      	mov	r0, r4
 80079be:	9205      	str	r2, [sp, #20]
 80079c0:	4498      	add	r8, r3
 80079c2:	f000 fea2 	bl	800870a <__i2b>
 80079c6:	4606      	mov	r6, r0
 80079c8:	2d00      	cmp	r5, #0
 80079ca:	dd0c      	ble.n	80079e6 <_dtoa_r+0x72e>
 80079cc:	f1b8 0f00 	cmp.w	r8, #0
 80079d0:	dd09      	ble.n	80079e6 <_dtoa_r+0x72e>
 80079d2:	4545      	cmp	r5, r8
 80079d4:	9a05      	ldr	r2, [sp, #20]
 80079d6:	462b      	mov	r3, r5
 80079d8:	bfa8      	it	ge
 80079da:	4643      	movge	r3, r8
 80079dc:	1ad2      	subs	r2, r2, r3
 80079de:	9205      	str	r2, [sp, #20]
 80079e0:	1aed      	subs	r5, r5, r3
 80079e2:	eba8 0803 	sub.w	r8, r8, r3
 80079e6:	9b07      	ldr	r3, [sp, #28]
 80079e8:	b1eb      	cbz	r3, 8007a26 <_dtoa_r+0x76e>
 80079ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d067      	beq.n	8007ac0 <_dtoa_r+0x808>
 80079f0:	b18f      	cbz	r7, 8007a16 <_dtoa_r+0x75e>
 80079f2:	4631      	mov	r1, r6
 80079f4:	463a      	mov	r2, r7
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 ff26 	bl	8008848 <__pow5mult>
 80079fc:	9a04      	ldr	r2, [sp, #16]
 80079fe:	4601      	mov	r1, r0
 8007a00:	4606      	mov	r6, r0
 8007a02:	4620      	mov	r0, r4
 8007a04:	f000 fe8a 	bl	800871c <__multiply>
 8007a08:	9904      	ldr	r1, [sp, #16]
 8007a0a:	9008      	str	r0, [sp, #32]
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f000 fd9e 	bl	800854e <_Bfree>
 8007a12:	9b08      	ldr	r3, [sp, #32]
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	1bda      	subs	r2, r3, r7
 8007a1a:	d004      	beq.n	8007a26 <_dtoa_r+0x76e>
 8007a1c:	9904      	ldr	r1, [sp, #16]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 ff12 	bl	8008848 <__pow5mult>
 8007a24:	9004      	str	r0, [sp, #16]
 8007a26:	2101      	movs	r1, #1
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fe6e 	bl	800870a <__i2b>
 8007a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a30:	4607      	mov	r7, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 81d0 	beq.w	8007dd8 <_dtoa_r+0xb20>
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 ff03 	bl	8008848 <__pow5mult>
 8007a42:	9b06      	ldr	r3, [sp, #24]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	4607      	mov	r7, r0
 8007a48:	dc40      	bgt.n	8007acc <_dtoa_r+0x814>
 8007a4a:	9b00      	ldr	r3, [sp, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d139      	bne.n	8007ac4 <_dtoa_r+0x80c>
 8007a50:	9b01      	ldr	r3, [sp, #4]
 8007a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d136      	bne.n	8007ac8 <_dtoa_r+0x810>
 8007a5a:	9b01      	ldr	r3, [sp, #4]
 8007a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a60:	0d1b      	lsrs	r3, r3, #20
 8007a62:	051b      	lsls	r3, r3, #20
 8007a64:	b12b      	cbz	r3, 8007a72 <_dtoa_r+0x7ba>
 8007a66:	9b05      	ldr	r3, [sp, #20]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	9305      	str	r3, [sp, #20]
 8007a6c:	f108 0801 	add.w	r8, r8, #1
 8007a70:	2301      	movs	r3, #1
 8007a72:	9307      	str	r3, [sp, #28]
 8007a74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d12a      	bne.n	8007ad0 <_dtoa_r+0x818>
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e030      	b.n	8007ae0 <_dtoa_r+0x828>
 8007a7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a84:	e795      	b.n	80079b2 <_dtoa_r+0x6fa>
 8007a86:	9b07      	ldr	r3, [sp, #28]
 8007a88:	f109 37ff 	add.w	r7, r9, #4294967295
 8007a8c:	42bb      	cmp	r3, r7
 8007a8e:	bfbf      	itttt	lt
 8007a90:	9b07      	ldrlt	r3, [sp, #28]
 8007a92:	9707      	strlt	r7, [sp, #28]
 8007a94:	1afa      	sublt	r2, r7, r3
 8007a96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007a98:	bfbb      	ittet	lt
 8007a9a:	189b      	addlt	r3, r3, r2
 8007a9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007a9e:	1bdf      	subge	r7, r3, r7
 8007aa0:	2700      	movlt	r7, #0
 8007aa2:	f1b9 0f00 	cmp.w	r9, #0
 8007aa6:	bfb5      	itete	lt
 8007aa8:	9b05      	ldrlt	r3, [sp, #20]
 8007aaa:	9d05      	ldrge	r5, [sp, #20]
 8007aac:	eba3 0509 	sublt.w	r5, r3, r9
 8007ab0:	464b      	movge	r3, r9
 8007ab2:	bfb8      	it	lt
 8007ab4:	2300      	movlt	r3, #0
 8007ab6:	e77e      	b.n	80079b6 <_dtoa_r+0x6fe>
 8007ab8:	9f07      	ldr	r7, [sp, #28]
 8007aba:	9d05      	ldr	r5, [sp, #20]
 8007abc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007abe:	e783      	b.n	80079c8 <_dtoa_r+0x710>
 8007ac0:	9a07      	ldr	r2, [sp, #28]
 8007ac2:	e7ab      	b.n	8007a1c <_dtoa_r+0x764>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e7d4      	b.n	8007a72 <_dtoa_r+0x7ba>
 8007ac8:	9b00      	ldr	r3, [sp, #0]
 8007aca:	e7d2      	b.n	8007a72 <_dtoa_r+0x7ba>
 8007acc:	2300      	movs	r3, #0
 8007ace:	9307      	str	r3, [sp, #28]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007ad6:	6918      	ldr	r0, [r3, #16]
 8007ad8:	f000 fdc9 	bl	800866e <__hi0bits>
 8007adc:	f1c0 0020 	rsb	r0, r0, #32
 8007ae0:	4440      	add	r0, r8
 8007ae2:	f010 001f 	ands.w	r0, r0, #31
 8007ae6:	d047      	beq.n	8007b78 <_dtoa_r+0x8c0>
 8007ae8:	f1c0 0320 	rsb	r3, r0, #32
 8007aec:	2b04      	cmp	r3, #4
 8007aee:	dd3b      	ble.n	8007b68 <_dtoa_r+0x8b0>
 8007af0:	9b05      	ldr	r3, [sp, #20]
 8007af2:	f1c0 001c 	rsb	r0, r0, #28
 8007af6:	4403      	add	r3, r0
 8007af8:	9305      	str	r3, [sp, #20]
 8007afa:	4405      	add	r5, r0
 8007afc:	4480      	add	r8, r0
 8007afe:	9b05      	ldr	r3, [sp, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	dd05      	ble.n	8007b10 <_dtoa_r+0x858>
 8007b04:	461a      	mov	r2, r3
 8007b06:	9904      	ldr	r1, [sp, #16]
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 feeb 	bl	80088e4 <__lshift>
 8007b0e:	9004      	str	r0, [sp, #16]
 8007b10:	f1b8 0f00 	cmp.w	r8, #0
 8007b14:	dd05      	ble.n	8007b22 <_dtoa_r+0x86a>
 8007b16:	4639      	mov	r1, r7
 8007b18:	4642      	mov	r2, r8
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f000 fee2 	bl	80088e4 <__lshift>
 8007b20:	4607      	mov	r7, r0
 8007b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b24:	b353      	cbz	r3, 8007b7c <_dtoa_r+0x8c4>
 8007b26:	4639      	mov	r1, r7
 8007b28:	9804      	ldr	r0, [sp, #16]
 8007b2a:	f000 ff2f 	bl	800898c <__mcmp>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	da24      	bge.n	8007b7c <_dtoa_r+0x8c4>
 8007b32:	2300      	movs	r3, #0
 8007b34:	220a      	movs	r2, #10
 8007b36:	9904      	ldr	r1, [sp, #16]
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 fd1f 	bl	800857c <__multadd>
 8007b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b40:	9004      	str	r0, [sp, #16]
 8007b42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 814d 	beq.w	8007de6 <_dtoa_r+0xb2e>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4631      	mov	r1, r6
 8007b50:	220a      	movs	r2, #10
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fd12 	bl	800857c <__multadd>
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	dc4f      	bgt.n	8007c00 <_dtoa_r+0x948>
 8007b60:	9b06      	ldr	r3, [sp, #24]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	dd4c      	ble.n	8007c00 <_dtoa_r+0x948>
 8007b66:	e011      	b.n	8007b8c <_dtoa_r+0x8d4>
 8007b68:	d0c9      	beq.n	8007afe <_dtoa_r+0x846>
 8007b6a:	9a05      	ldr	r2, [sp, #20]
 8007b6c:	331c      	adds	r3, #28
 8007b6e:	441a      	add	r2, r3
 8007b70:	9205      	str	r2, [sp, #20]
 8007b72:	441d      	add	r5, r3
 8007b74:	4498      	add	r8, r3
 8007b76:	e7c2      	b.n	8007afe <_dtoa_r+0x846>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	e7f6      	b.n	8007b6a <_dtoa_r+0x8b2>
 8007b7c:	f1b9 0f00 	cmp.w	r9, #0
 8007b80:	dc38      	bgt.n	8007bf4 <_dtoa_r+0x93c>
 8007b82:	9b06      	ldr	r3, [sp, #24]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	dd35      	ble.n	8007bf4 <_dtoa_r+0x93c>
 8007b88:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b8c:	9b02      	ldr	r3, [sp, #8]
 8007b8e:	b963      	cbnz	r3, 8007baa <_dtoa_r+0x8f2>
 8007b90:	4639      	mov	r1, r7
 8007b92:	2205      	movs	r2, #5
 8007b94:	4620      	mov	r0, r4
 8007b96:	f000 fcf1 	bl	800857c <__multadd>
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	9804      	ldr	r0, [sp, #16]
 8007ba0:	f000 fef4 	bl	800898c <__mcmp>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f73f adcc 	bgt.w	8007742 <_dtoa_r+0x48a>
 8007baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bac:	465d      	mov	r5, fp
 8007bae:	ea6f 0a03 	mvn.w	sl, r3
 8007bb2:	f04f 0900 	mov.w	r9, #0
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fcc8 	bl	800854e <_Bfree>
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	f43f aeb7 	beq.w	8007932 <_dtoa_r+0x67a>
 8007bc4:	f1b9 0f00 	cmp.w	r9, #0
 8007bc8:	d005      	beq.n	8007bd6 <_dtoa_r+0x91e>
 8007bca:	45b1      	cmp	r9, r6
 8007bcc:	d003      	beq.n	8007bd6 <_dtoa_r+0x91e>
 8007bce:	4649      	mov	r1, r9
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 fcbc 	bl	800854e <_Bfree>
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 fcb8 	bl	800854e <_Bfree>
 8007bde:	e6a8      	b.n	8007932 <_dtoa_r+0x67a>
 8007be0:	2700      	movs	r7, #0
 8007be2:	463e      	mov	r6, r7
 8007be4:	e7e1      	b.n	8007baa <_dtoa_r+0x8f2>
 8007be6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007bea:	463e      	mov	r6, r7
 8007bec:	e5a9      	b.n	8007742 <_dtoa_r+0x48a>
 8007bee:	bf00      	nop
 8007bf0:	40240000 	.word	0x40240000
 8007bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 80fa 	beq.w	8007df4 <_dtoa_r+0xb3c>
 8007c00:	2d00      	cmp	r5, #0
 8007c02:	dd05      	ble.n	8007c10 <_dtoa_r+0x958>
 8007c04:	4631      	mov	r1, r6
 8007c06:	462a      	mov	r2, r5
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fe6b 	bl	80088e4 <__lshift>
 8007c0e:	4606      	mov	r6, r0
 8007c10:	9b07      	ldr	r3, [sp, #28]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d04c      	beq.n	8007cb0 <_dtoa_r+0x9f8>
 8007c16:	6871      	ldr	r1, [r6, #4]
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 fc64 	bl	80084e6 <_Balloc>
 8007c1e:	6932      	ldr	r2, [r6, #16]
 8007c20:	3202      	adds	r2, #2
 8007c22:	4605      	mov	r5, r0
 8007c24:	0092      	lsls	r2, r2, #2
 8007c26:	f106 010c 	add.w	r1, r6, #12
 8007c2a:	300c      	adds	r0, #12
 8007c2c:	f000 fc50 	bl	80084d0 <memcpy>
 8007c30:	2201      	movs	r2, #1
 8007c32:	4629      	mov	r1, r5
 8007c34:	4620      	mov	r0, r4
 8007c36:	f000 fe55 	bl	80088e4 <__lshift>
 8007c3a:	9b00      	ldr	r3, [sp, #0]
 8007c3c:	f8cd b014 	str.w	fp, [sp, #20]
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	46b1      	mov	r9, r6
 8007c46:	9307      	str	r3, [sp, #28]
 8007c48:	4606      	mov	r6, r0
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	9804      	ldr	r0, [sp, #16]
 8007c4e:	f7ff faa7 	bl	80071a0 <quorem>
 8007c52:	4649      	mov	r1, r9
 8007c54:	4605      	mov	r5, r0
 8007c56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007c5a:	9804      	ldr	r0, [sp, #16]
 8007c5c:	f000 fe96 	bl	800898c <__mcmp>
 8007c60:	4632      	mov	r2, r6
 8007c62:	9000      	str	r0, [sp, #0]
 8007c64:	4639      	mov	r1, r7
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 feaa 	bl	80089c0 <__mdiff>
 8007c6c:	68c3      	ldr	r3, [r0, #12]
 8007c6e:	4602      	mov	r2, r0
 8007c70:	bb03      	cbnz	r3, 8007cb4 <_dtoa_r+0x9fc>
 8007c72:	4601      	mov	r1, r0
 8007c74:	9008      	str	r0, [sp, #32]
 8007c76:	9804      	ldr	r0, [sp, #16]
 8007c78:	f000 fe88 	bl	800898c <__mcmp>
 8007c7c:	9a08      	ldr	r2, [sp, #32]
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4611      	mov	r1, r2
 8007c82:	4620      	mov	r0, r4
 8007c84:	9308      	str	r3, [sp, #32]
 8007c86:	f000 fc62 	bl	800854e <_Bfree>
 8007c8a:	9b08      	ldr	r3, [sp, #32]
 8007c8c:	b9a3      	cbnz	r3, 8007cb8 <_dtoa_r+0xa00>
 8007c8e:	9a06      	ldr	r2, [sp, #24]
 8007c90:	b992      	cbnz	r2, 8007cb8 <_dtoa_r+0xa00>
 8007c92:	9a07      	ldr	r2, [sp, #28]
 8007c94:	b982      	cbnz	r2, 8007cb8 <_dtoa_r+0xa00>
 8007c96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007c9a:	d029      	beq.n	8007cf0 <_dtoa_r+0xa38>
 8007c9c:	9b00      	ldr	r3, [sp, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	dd01      	ble.n	8007ca6 <_dtoa_r+0x9ee>
 8007ca2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ca6:	9b05      	ldr	r3, [sp, #20]
 8007ca8:	1c5d      	adds	r5, r3, #1
 8007caa:	f883 8000 	strb.w	r8, [r3]
 8007cae:	e782      	b.n	8007bb6 <_dtoa_r+0x8fe>
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	e7c2      	b.n	8007c3a <_dtoa_r+0x982>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e7e3      	b.n	8007c80 <_dtoa_r+0x9c8>
 8007cb8:	9a00      	ldr	r2, [sp, #0]
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	db04      	blt.n	8007cc8 <_dtoa_r+0xa10>
 8007cbe:	d125      	bne.n	8007d0c <_dtoa_r+0xa54>
 8007cc0:	9a06      	ldr	r2, [sp, #24]
 8007cc2:	bb1a      	cbnz	r2, 8007d0c <_dtoa_r+0xa54>
 8007cc4:	9a07      	ldr	r2, [sp, #28]
 8007cc6:	bb0a      	cbnz	r2, 8007d0c <_dtoa_r+0xa54>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	ddec      	ble.n	8007ca6 <_dtoa_r+0x9ee>
 8007ccc:	2201      	movs	r2, #1
 8007cce:	9904      	ldr	r1, [sp, #16]
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f000 fe07 	bl	80088e4 <__lshift>
 8007cd6:	4639      	mov	r1, r7
 8007cd8:	9004      	str	r0, [sp, #16]
 8007cda:	f000 fe57 	bl	800898c <__mcmp>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	dc03      	bgt.n	8007cea <_dtoa_r+0xa32>
 8007ce2:	d1e0      	bne.n	8007ca6 <_dtoa_r+0x9ee>
 8007ce4:	f018 0f01 	tst.w	r8, #1
 8007ce8:	d0dd      	beq.n	8007ca6 <_dtoa_r+0x9ee>
 8007cea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007cee:	d1d8      	bne.n	8007ca2 <_dtoa_r+0x9ea>
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	9a05      	ldr	r2, [sp, #20]
 8007cf4:	1c5d      	adds	r5, r3, #1
 8007cf6:	2339      	movs	r3, #57	; 0x39
 8007cf8:	7013      	strb	r3, [r2, #0]
 8007cfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cfe:	2b39      	cmp	r3, #57	; 0x39
 8007d00:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d04:	d04f      	beq.n	8007da6 <_dtoa_r+0xaee>
 8007d06:	3301      	adds	r3, #1
 8007d08:	7013      	strb	r3, [r2, #0]
 8007d0a:	e754      	b.n	8007bb6 <_dtoa_r+0x8fe>
 8007d0c:	9a05      	ldr	r2, [sp, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f102 0501 	add.w	r5, r2, #1
 8007d14:	dd06      	ble.n	8007d24 <_dtoa_r+0xa6c>
 8007d16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d1a:	d0e9      	beq.n	8007cf0 <_dtoa_r+0xa38>
 8007d1c:	f108 0801 	add.w	r8, r8, #1
 8007d20:	9b05      	ldr	r3, [sp, #20]
 8007d22:	e7c2      	b.n	8007caa <_dtoa_r+0x9f2>
 8007d24:	9a02      	ldr	r2, [sp, #8]
 8007d26:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007d2a:	eba5 030b 	sub.w	r3, r5, fp
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d021      	beq.n	8007d76 <_dtoa_r+0xabe>
 8007d32:	2300      	movs	r3, #0
 8007d34:	220a      	movs	r2, #10
 8007d36:	9904      	ldr	r1, [sp, #16]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fc1f 	bl	800857c <__multadd>
 8007d3e:	45b1      	cmp	r9, r6
 8007d40:	9004      	str	r0, [sp, #16]
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	f04f 020a 	mov.w	r2, #10
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	d105      	bne.n	8007d5c <_dtoa_r+0xaa4>
 8007d50:	f000 fc14 	bl	800857c <__multadd>
 8007d54:	4681      	mov	r9, r0
 8007d56:	4606      	mov	r6, r0
 8007d58:	9505      	str	r5, [sp, #20]
 8007d5a:	e776      	b.n	8007c4a <_dtoa_r+0x992>
 8007d5c:	f000 fc0e 	bl	800857c <__multadd>
 8007d60:	4631      	mov	r1, r6
 8007d62:	4681      	mov	r9, r0
 8007d64:	2300      	movs	r3, #0
 8007d66:	220a      	movs	r2, #10
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 fc07 	bl	800857c <__multadd>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	e7f2      	b.n	8007d58 <_dtoa_r+0xaa0>
 8007d72:	f04f 0900 	mov.w	r9, #0
 8007d76:	2201      	movs	r2, #1
 8007d78:	9904      	ldr	r1, [sp, #16]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 fdb2 	bl	80088e4 <__lshift>
 8007d80:	4639      	mov	r1, r7
 8007d82:	9004      	str	r0, [sp, #16]
 8007d84:	f000 fe02 	bl	800898c <__mcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	dcb6      	bgt.n	8007cfa <_dtoa_r+0xa42>
 8007d8c:	d102      	bne.n	8007d94 <_dtoa_r+0xadc>
 8007d8e:	f018 0f01 	tst.w	r8, #1
 8007d92:	d1b2      	bne.n	8007cfa <_dtoa_r+0xa42>
 8007d94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d98:	2b30      	cmp	r3, #48	; 0x30
 8007d9a:	f105 32ff 	add.w	r2, r5, #4294967295
 8007d9e:	f47f af0a 	bne.w	8007bb6 <_dtoa_r+0x8fe>
 8007da2:	4615      	mov	r5, r2
 8007da4:	e7f6      	b.n	8007d94 <_dtoa_r+0xadc>
 8007da6:	4593      	cmp	fp, r2
 8007da8:	d105      	bne.n	8007db6 <_dtoa_r+0xafe>
 8007daa:	2331      	movs	r3, #49	; 0x31
 8007dac:	f10a 0a01 	add.w	sl, sl, #1
 8007db0:	f88b 3000 	strb.w	r3, [fp]
 8007db4:	e6ff      	b.n	8007bb6 <_dtoa_r+0x8fe>
 8007db6:	4615      	mov	r5, r2
 8007db8:	e79f      	b.n	8007cfa <_dtoa_r+0xa42>
 8007dba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007e20 <_dtoa_r+0xb68>
 8007dbe:	e007      	b.n	8007dd0 <_dtoa_r+0xb18>
 8007dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007e24 <_dtoa_r+0xb6c>
 8007dc6:	b11b      	cbz	r3, 8007dd0 <_dtoa_r+0xb18>
 8007dc8:	f10b 0308 	add.w	r3, fp, #8
 8007dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	4658      	mov	r0, fp
 8007dd2:	b017      	add	sp, #92	; 0x5c
 8007dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd8:	9b06      	ldr	r3, [sp, #24]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	f77f ae35 	ble.w	8007a4a <_dtoa_r+0x792>
 8007de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007de2:	9307      	str	r3, [sp, #28]
 8007de4:	e649      	b.n	8007a7a <_dtoa_r+0x7c2>
 8007de6:	9b02      	ldr	r3, [sp, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	dc03      	bgt.n	8007df4 <_dtoa_r+0xb3c>
 8007dec:	9b06      	ldr	r3, [sp, #24]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	f73f aecc 	bgt.w	8007b8c <_dtoa_r+0x8d4>
 8007df4:	465d      	mov	r5, fp
 8007df6:	4639      	mov	r1, r7
 8007df8:	9804      	ldr	r0, [sp, #16]
 8007dfa:	f7ff f9d1 	bl	80071a0 <quorem>
 8007dfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e02:	f805 8b01 	strb.w	r8, [r5], #1
 8007e06:	9a02      	ldr	r2, [sp, #8]
 8007e08:	eba5 030b 	sub.w	r3, r5, fp
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	ddb0      	ble.n	8007d72 <_dtoa_r+0xaba>
 8007e10:	2300      	movs	r3, #0
 8007e12:	220a      	movs	r2, #10
 8007e14:	9904      	ldr	r1, [sp, #16]
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 fbb0 	bl	800857c <__multadd>
 8007e1c:	9004      	str	r0, [sp, #16]
 8007e1e:	e7ea      	b.n	8007df6 <_dtoa_r+0xb3e>
 8007e20:	08009238 	.word	0x08009238
 8007e24:	080092b8 	.word	0x080092b8

08007e28 <rshift>:
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	6906      	ldr	r6, [r0, #16]
 8007e2c:	114b      	asrs	r3, r1, #5
 8007e2e:	429e      	cmp	r6, r3
 8007e30:	f100 0414 	add.w	r4, r0, #20
 8007e34:	dd30      	ble.n	8007e98 <rshift+0x70>
 8007e36:	f011 011f 	ands.w	r1, r1, #31
 8007e3a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007e3e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007e42:	d108      	bne.n	8007e56 <rshift+0x2e>
 8007e44:	4621      	mov	r1, r4
 8007e46:	42b2      	cmp	r2, r6
 8007e48:	460b      	mov	r3, r1
 8007e4a:	d211      	bcs.n	8007e70 <rshift+0x48>
 8007e4c:	f852 3b04 	ldr.w	r3, [r2], #4
 8007e50:	f841 3b04 	str.w	r3, [r1], #4
 8007e54:	e7f7      	b.n	8007e46 <rshift+0x1e>
 8007e56:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007e5a:	f1c1 0c20 	rsb	ip, r1, #32
 8007e5e:	40cd      	lsrs	r5, r1
 8007e60:	3204      	adds	r2, #4
 8007e62:	4623      	mov	r3, r4
 8007e64:	42b2      	cmp	r2, r6
 8007e66:	4617      	mov	r7, r2
 8007e68:	d30c      	bcc.n	8007e84 <rshift+0x5c>
 8007e6a:	601d      	str	r5, [r3, #0]
 8007e6c:	b105      	cbz	r5, 8007e70 <rshift+0x48>
 8007e6e:	3304      	adds	r3, #4
 8007e70:	1b1a      	subs	r2, r3, r4
 8007e72:	42a3      	cmp	r3, r4
 8007e74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e78:	bf08      	it	eq
 8007e7a:	2300      	moveq	r3, #0
 8007e7c:	6102      	str	r2, [r0, #16]
 8007e7e:	bf08      	it	eq
 8007e80:	6143      	streq	r3, [r0, #20]
 8007e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e84:	683f      	ldr	r7, [r7, #0]
 8007e86:	fa07 f70c 	lsl.w	r7, r7, ip
 8007e8a:	433d      	orrs	r5, r7
 8007e8c:	f843 5b04 	str.w	r5, [r3], #4
 8007e90:	f852 5b04 	ldr.w	r5, [r2], #4
 8007e94:	40cd      	lsrs	r5, r1
 8007e96:	e7e5      	b.n	8007e64 <rshift+0x3c>
 8007e98:	4623      	mov	r3, r4
 8007e9a:	e7e9      	b.n	8007e70 <rshift+0x48>

08007e9c <__hexdig_fun>:
 8007e9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ea0:	2b09      	cmp	r3, #9
 8007ea2:	d802      	bhi.n	8007eaa <__hexdig_fun+0xe>
 8007ea4:	3820      	subs	r0, #32
 8007ea6:	b2c0      	uxtb	r0, r0
 8007ea8:	4770      	bx	lr
 8007eaa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d801      	bhi.n	8007eb6 <__hexdig_fun+0x1a>
 8007eb2:	3847      	subs	r0, #71	; 0x47
 8007eb4:	e7f7      	b.n	8007ea6 <__hexdig_fun+0xa>
 8007eb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007eba:	2b05      	cmp	r3, #5
 8007ebc:	d801      	bhi.n	8007ec2 <__hexdig_fun+0x26>
 8007ebe:	3827      	subs	r0, #39	; 0x27
 8007ec0:	e7f1      	b.n	8007ea6 <__hexdig_fun+0xa>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	4770      	bx	lr

08007ec6 <__gethex>:
 8007ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eca:	b08b      	sub	sp, #44	; 0x2c
 8007ecc:	468a      	mov	sl, r1
 8007ece:	9002      	str	r0, [sp, #8]
 8007ed0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007ed2:	9306      	str	r3, [sp, #24]
 8007ed4:	4690      	mov	r8, r2
 8007ed6:	f000 fad0 	bl	800847a <__localeconv_l>
 8007eda:	6803      	ldr	r3, [r0, #0]
 8007edc:	9303      	str	r3, [sp, #12]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7f8 f97e 	bl	80001e0 <strlen>
 8007ee4:	9b03      	ldr	r3, [sp, #12]
 8007ee6:	9001      	str	r0, [sp, #4]
 8007ee8:	4403      	add	r3, r0
 8007eea:	f04f 0b00 	mov.w	fp, #0
 8007eee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007ef2:	9307      	str	r3, [sp, #28]
 8007ef4:	f8da 3000 	ldr.w	r3, [sl]
 8007ef8:	3302      	adds	r3, #2
 8007efa:	461f      	mov	r7, r3
 8007efc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f00:	2830      	cmp	r0, #48	; 0x30
 8007f02:	d06c      	beq.n	8007fde <__gethex+0x118>
 8007f04:	f7ff ffca 	bl	8007e9c <__hexdig_fun>
 8007f08:	4604      	mov	r4, r0
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d16a      	bne.n	8007fe4 <__gethex+0x11e>
 8007f0e:	9a01      	ldr	r2, [sp, #4]
 8007f10:	9903      	ldr	r1, [sp, #12]
 8007f12:	4638      	mov	r0, r7
 8007f14:	f001 f8fe 	bl	8009114 <strncmp>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d166      	bne.n	8007fea <__gethex+0x124>
 8007f1c:	9b01      	ldr	r3, [sp, #4]
 8007f1e:	5cf8      	ldrb	r0, [r7, r3]
 8007f20:	18fe      	adds	r6, r7, r3
 8007f22:	f7ff ffbb 	bl	8007e9c <__hexdig_fun>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d062      	beq.n	8007ff0 <__gethex+0x12a>
 8007f2a:	4633      	mov	r3, r6
 8007f2c:	7818      	ldrb	r0, [r3, #0]
 8007f2e:	2830      	cmp	r0, #48	; 0x30
 8007f30:	461f      	mov	r7, r3
 8007f32:	f103 0301 	add.w	r3, r3, #1
 8007f36:	d0f9      	beq.n	8007f2c <__gethex+0x66>
 8007f38:	f7ff ffb0 	bl	8007e9c <__hexdig_fun>
 8007f3c:	fab0 f580 	clz	r5, r0
 8007f40:	096d      	lsrs	r5, r5, #5
 8007f42:	4634      	mov	r4, r6
 8007f44:	f04f 0b01 	mov.w	fp, #1
 8007f48:	463a      	mov	r2, r7
 8007f4a:	4616      	mov	r6, r2
 8007f4c:	3201      	adds	r2, #1
 8007f4e:	7830      	ldrb	r0, [r6, #0]
 8007f50:	f7ff ffa4 	bl	8007e9c <__hexdig_fun>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d1f8      	bne.n	8007f4a <__gethex+0x84>
 8007f58:	9a01      	ldr	r2, [sp, #4]
 8007f5a:	9903      	ldr	r1, [sp, #12]
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f001 f8d9 	bl	8009114 <strncmp>
 8007f62:	b950      	cbnz	r0, 8007f7a <__gethex+0xb4>
 8007f64:	b954      	cbnz	r4, 8007f7c <__gethex+0xb6>
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	18f4      	adds	r4, r6, r3
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	4616      	mov	r6, r2
 8007f6e:	3201      	adds	r2, #1
 8007f70:	7830      	ldrb	r0, [r6, #0]
 8007f72:	f7ff ff93 	bl	8007e9c <__hexdig_fun>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d1f8      	bne.n	8007f6c <__gethex+0xa6>
 8007f7a:	b10c      	cbz	r4, 8007f80 <__gethex+0xba>
 8007f7c:	1ba4      	subs	r4, r4, r6
 8007f7e:	00a4      	lsls	r4, r4, #2
 8007f80:	7833      	ldrb	r3, [r6, #0]
 8007f82:	2b50      	cmp	r3, #80	; 0x50
 8007f84:	d001      	beq.n	8007f8a <__gethex+0xc4>
 8007f86:	2b70      	cmp	r3, #112	; 0x70
 8007f88:	d140      	bne.n	800800c <__gethex+0x146>
 8007f8a:	7873      	ldrb	r3, [r6, #1]
 8007f8c:	2b2b      	cmp	r3, #43	; 0x2b
 8007f8e:	d031      	beq.n	8007ff4 <__gethex+0x12e>
 8007f90:	2b2d      	cmp	r3, #45	; 0x2d
 8007f92:	d033      	beq.n	8007ffc <__gethex+0x136>
 8007f94:	1c71      	adds	r1, r6, #1
 8007f96:	f04f 0900 	mov.w	r9, #0
 8007f9a:	7808      	ldrb	r0, [r1, #0]
 8007f9c:	f7ff ff7e 	bl	8007e9c <__hexdig_fun>
 8007fa0:	1e43      	subs	r3, r0, #1
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b18      	cmp	r3, #24
 8007fa6:	d831      	bhi.n	800800c <__gethex+0x146>
 8007fa8:	f1a0 0210 	sub.w	r2, r0, #16
 8007fac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fb0:	f7ff ff74 	bl	8007e9c <__hexdig_fun>
 8007fb4:	1e43      	subs	r3, r0, #1
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b18      	cmp	r3, #24
 8007fba:	d922      	bls.n	8008002 <__gethex+0x13c>
 8007fbc:	f1b9 0f00 	cmp.w	r9, #0
 8007fc0:	d000      	beq.n	8007fc4 <__gethex+0xfe>
 8007fc2:	4252      	negs	r2, r2
 8007fc4:	4414      	add	r4, r2
 8007fc6:	f8ca 1000 	str.w	r1, [sl]
 8007fca:	b30d      	cbz	r5, 8008010 <__gethex+0x14a>
 8007fcc:	f1bb 0f00 	cmp.w	fp, #0
 8007fd0:	bf0c      	ite	eq
 8007fd2:	2706      	moveq	r7, #6
 8007fd4:	2700      	movne	r7, #0
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	b00b      	add	sp, #44	; 0x2c
 8007fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fde:	f10b 0b01 	add.w	fp, fp, #1
 8007fe2:	e78a      	b.n	8007efa <__gethex+0x34>
 8007fe4:	2500      	movs	r5, #0
 8007fe6:	462c      	mov	r4, r5
 8007fe8:	e7ae      	b.n	8007f48 <__gethex+0x82>
 8007fea:	463e      	mov	r6, r7
 8007fec:	2501      	movs	r5, #1
 8007fee:	e7c7      	b.n	8007f80 <__gethex+0xba>
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	e7fb      	b.n	8007fec <__gethex+0x126>
 8007ff4:	f04f 0900 	mov.w	r9, #0
 8007ff8:	1cb1      	adds	r1, r6, #2
 8007ffa:	e7ce      	b.n	8007f9a <__gethex+0xd4>
 8007ffc:	f04f 0901 	mov.w	r9, #1
 8008000:	e7fa      	b.n	8007ff8 <__gethex+0x132>
 8008002:	230a      	movs	r3, #10
 8008004:	fb03 0202 	mla	r2, r3, r2, r0
 8008008:	3a10      	subs	r2, #16
 800800a:	e7cf      	b.n	8007fac <__gethex+0xe6>
 800800c:	4631      	mov	r1, r6
 800800e:	e7da      	b.n	8007fc6 <__gethex+0x100>
 8008010:	1bf3      	subs	r3, r6, r7
 8008012:	3b01      	subs	r3, #1
 8008014:	4629      	mov	r1, r5
 8008016:	2b07      	cmp	r3, #7
 8008018:	dc49      	bgt.n	80080ae <__gethex+0x1e8>
 800801a:	9802      	ldr	r0, [sp, #8]
 800801c:	f000 fa63 	bl	80084e6 <_Balloc>
 8008020:	9b01      	ldr	r3, [sp, #4]
 8008022:	f100 0914 	add.w	r9, r0, #20
 8008026:	f04f 0b00 	mov.w	fp, #0
 800802a:	f1c3 0301 	rsb	r3, r3, #1
 800802e:	4605      	mov	r5, r0
 8008030:	f8cd 9010 	str.w	r9, [sp, #16]
 8008034:	46da      	mov	sl, fp
 8008036:	9308      	str	r3, [sp, #32]
 8008038:	42b7      	cmp	r7, r6
 800803a:	d33b      	bcc.n	80080b4 <__gethex+0x1ee>
 800803c:	9804      	ldr	r0, [sp, #16]
 800803e:	f840 ab04 	str.w	sl, [r0], #4
 8008042:	eba0 0009 	sub.w	r0, r0, r9
 8008046:	1080      	asrs	r0, r0, #2
 8008048:	6128      	str	r0, [r5, #16]
 800804a:	0147      	lsls	r7, r0, #5
 800804c:	4650      	mov	r0, sl
 800804e:	f000 fb0e 	bl	800866e <__hi0bits>
 8008052:	f8d8 6000 	ldr.w	r6, [r8]
 8008056:	1a3f      	subs	r7, r7, r0
 8008058:	42b7      	cmp	r7, r6
 800805a:	dd64      	ble.n	8008126 <__gethex+0x260>
 800805c:	1bbf      	subs	r7, r7, r6
 800805e:	4639      	mov	r1, r7
 8008060:	4628      	mov	r0, r5
 8008062:	f000 fe1d 	bl	8008ca0 <__any_on>
 8008066:	4682      	mov	sl, r0
 8008068:	b178      	cbz	r0, 800808a <__gethex+0x1c4>
 800806a:	1e7b      	subs	r3, r7, #1
 800806c:	1159      	asrs	r1, r3, #5
 800806e:	f003 021f 	and.w	r2, r3, #31
 8008072:	f04f 0a01 	mov.w	sl, #1
 8008076:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800807a:	fa0a f202 	lsl.w	r2, sl, r2
 800807e:	420a      	tst	r2, r1
 8008080:	d003      	beq.n	800808a <__gethex+0x1c4>
 8008082:	4553      	cmp	r3, sl
 8008084:	dc46      	bgt.n	8008114 <__gethex+0x24e>
 8008086:	f04f 0a02 	mov.w	sl, #2
 800808a:	4639      	mov	r1, r7
 800808c:	4628      	mov	r0, r5
 800808e:	f7ff fecb 	bl	8007e28 <rshift>
 8008092:	443c      	add	r4, r7
 8008094:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008098:	42a3      	cmp	r3, r4
 800809a:	da52      	bge.n	8008142 <__gethex+0x27c>
 800809c:	4629      	mov	r1, r5
 800809e:	9802      	ldr	r0, [sp, #8]
 80080a0:	f000 fa55 	bl	800854e <_Bfree>
 80080a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080a6:	2300      	movs	r3, #0
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	27a3      	movs	r7, #163	; 0xa3
 80080ac:	e793      	b.n	8007fd6 <__gethex+0x110>
 80080ae:	3101      	adds	r1, #1
 80080b0:	105b      	asrs	r3, r3, #1
 80080b2:	e7b0      	b.n	8008016 <__gethex+0x150>
 80080b4:	1e73      	subs	r3, r6, #1
 80080b6:	9305      	str	r3, [sp, #20]
 80080b8:	9a07      	ldr	r2, [sp, #28]
 80080ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080be:	4293      	cmp	r3, r2
 80080c0:	d018      	beq.n	80080f4 <__gethex+0x22e>
 80080c2:	f1bb 0f20 	cmp.w	fp, #32
 80080c6:	d107      	bne.n	80080d8 <__gethex+0x212>
 80080c8:	9b04      	ldr	r3, [sp, #16]
 80080ca:	f8c3 a000 	str.w	sl, [r3]
 80080ce:	3304      	adds	r3, #4
 80080d0:	f04f 0a00 	mov.w	sl, #0
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	46d3      	mov	fp, sl
 80080d8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080dc:	f7ff fede 	bl	8007e9c <__hexdig_fun>
 80080e0:	f000 000f 	and.w	r0, r0, #15
 80080e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80080e8:	ea4a 0a00 	orr.w	sl, sl, r0
 80080ec:	f10b 0b04 	add.w	fp, fp, #4
 80080f0:	9b05      	ldr	r3, [sp, #20]
 80080f2:	e00d      	b.n	8008110 <__gethex+0x24a>
 80080f4:	9b05      	ldr	r3, [sp, #20]
 80080f6:	9a08      	ldr	r2, [sp, #32]
 80080f8:	4413      	add	r3, r2
 80080fa:	42bb      	cmp	r3, r7
 80080fc:	d3e1      	bcc.n	80080c2 <__gethex+0x1fc>
 80080fe:	4618      	mov	r0, r3
 8008100:	9a01      	ldr	r2, [sp, #4]
 8008102:	9903      	ldr	r1, [sp, #12]
 8008104:	9309      	str	r3, [sp, #36]	; 0x24
 8008106:	f001 f805 	bl	8009114 <strncmp>
 800810a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800810c:	2800      	cmp	r0, #0
 800810e:	d1d8      	bne.n	80080c2 <__gethex+0x1fc>
 8008110:	461e      	mov	r6, r3
 8008112:	e791      	b.n	8008038 <__gethex+0x172>
 8008114:	1eb9      	subs	r1, r7, #2
 8008116:	4628      	mov	r0, r5
 8008118:	f000 fdc2 	bl	8008ca0 <__any_on>
 800811c:	2800      	cmp	r0, #0
 800811e:	d0b2      	beq.n	8008086 <__gethex+0x1c0>
 8008120:	f04f 0a03 	mov.w	sl, #3
 8008124:	e7b1      	b.n	800808a <__gethex+0x1c4>
 8008126:	da09      	bge.n	800813c <__gethex+0x276>
 8008128:	1bf7      	subs	r7, r6, r7
 800812a:	4629      	mov	r1, r5
 800812c:	463a      	mov	r2, r7
 800812e:	9802      	ldr	r0, [sp, #8]
 8008130:	f000 fbd8 	bl	80088e4 <__lshift>
 8008134:	1be4      	subs	r4, r4, r7
 8008136:	4605      	mov	r5, r0
 8008138:	f100 0914 	add.w	r9, r0, #20
 800813c:	f04f 0a00 	mov.w	sl, #0
 8008140:	e7a8      	b.n	8008094 <__gethex+0x1ce>
 8008142:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008146:	42a0      	cmp	r0, r4
 8008148:	dd6a      	ble.n	8008220 <__gethex+0x35a>
 800814a:	1b04      	subs	r4, r0, r4
 800814c:	42a6      	cmp	r6, r4
 800814e:	dc2e      	bgt.n	80081ae <__gethex+0x2e8>
 8008150:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008154:	2b02      	cmp	r3, #2
 8008156:	d022      	beq.n	800819e <__gethex+0x2d8>
 8008158:	2b03      	cmp	r3, #3
 800815a:	d024      	beq.n	80081a6 <__gethex+0x2e0>
 800815c:	2b01      	cmp	r3, #1
 800815e:	d115      	bne.n	800818c <__gethex+0x2c6>
 8008160:	42a6      	cmp	r6, r4
 8008162:	d113      	bne.n	800818c <__gethex+0x2c6>
 8008164:	2e01      	cmp	r6, #1
 8008166:	dc0b      	bgt.n	8008180 <__gethex+0x2ba>
 8008168:	9a06      	ldr	r2, [sp, #24]
 800816a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	2301      	movs	r3, #1
 8008172:	612b      	str	r3, [r5, #16]
 8008174:	f8c9 3000 	str.w	r3, [r9]
 8008178:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800817a:	2762      	movs	r7, #98	; 0x62
 800817c:	601d      	str	r5, [r3, #0]
 800817e:	e72a      	b.n	8007fd6 <__gethex+0x110>
 8008180:	1e71      	subs	r1, r6, #1
 8008182:	4628      	mov	r0, r5
 8008184:	f000 fd8c 	bl	8008ca0 <__any_on>
 8008188:	2800      	cmp	r0, #0
 800818a:	d1ed      	bne.n	8008168 <__gethex+0x2a2>
 800818c:	4629      	mov	r1, r5
 800818e:	9802      	ldr	r0, [sp, #8]
 8008190:	f000 f9dd 	bl	800854e <_Bfree>
 8008194:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008196:	2300      	movs	r3, #0
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	2750      	movs	r7, #80	; 0x50
 800819c:	e71b      	b.n	8007fd6 <__gethex+0x110>
 800819e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0e1      	beq.n	8008168 <__gethex+0x2a2>
 80081a4:	e7f2      	b.n	800818c <__gethex+0x2c6>
 80081a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1dd      	bne.n	8008168 <__gethex+0x2a2>
 80081ac:	e7ee      	b.n	800818c <__gethex+0x2c6>
 80081ae:	1e67      	subs	r7, r4, #1
 80081b0:	f1ba 0f00 	cmp.w	sl, #0
 80081b4:	d131      	bne.n	800821a <__gethex+0x354>
 80081b6:	b127      	cbz	r7, 80081c2 <__gethex+0x2fc>
 80081b8:	4639      	mov	r1, r7
 80081ba:	4628      	mov	r0, r5
 80081bc:	f000 fd70 	bl	8008ca0 <__any_on>
 80081c0:	4682      	mov	sl, r0
 80081c2:	117a      	asrs	r2, r7, #5
 80081c4:	2301      	movs	r3, #1
 80081c6:	f007 071f 	and.w	r7, r7, #31
 80081ca:	fa03 f707 	lsl.w	r7, r3, r7
 80081ce:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80081d2:	4621      	mov	r1, r4
 80081d4:	421f      	tst	r7, r3
 80081d6:	4628      	mov	r0, r5
 80081d8:	bf18      	it	ne
 80081da:	f04a 0a02 	orrne.w	sl, sl, #2
 80081de:	1b36      	subs	r6, r6, r4
 80081e0:	f7ff fe22 	bl	8007e28 <rshift>
 80081e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80081e8:	2702      	movs	r7, #2
 80081ea:	f1ba 0f00 	cmp.w	sl, #0
 80081ee:	d048      	beq.n	8008282 <__gethex+0x3bc>
 80081f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d015      	beq.n	8008224 <__gethex+0x35e>
 80081f8:	2b03      	cmp	r3, #3
 80081fa:	d017      	beq.n	800822c <__gethex+0x366>
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d109      	bne.n	8008214 <__gethex+0x34e>
 8008200:	f01a 0f02 	tst.w	sl, #2
 8008204:	d006      	beq.n	8008214 <__gethex+0x34e>
 8008206:	f8d9 3000 	ldr.w	r3, [r9]
 800820a:	ea4a 0a03 	orr.w	sl, sl, r3
 800820e:	f01a 0f01 	tst.w	sl, #1
 8008212:	d10e      	bne.n	8008232 <__gethex+0x36c>
 8008214:	f047 0710 	orr.w	r7, r7, #16
 8008218:	e033      	b.n	8008282 <__gethex+0x3bc>
 800821a:	f04f 0a01 	mov.w	sl, #1
 800821e:	e7d0      	b.n	80081c2 <__gethex+0x2fc>
 8008220:	2701      	movs	r7, #1
 8008222:	e7e2      	b.n	80081ea <__gethex+0x324>
 8008224:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008226:	f1c3 0301 	rsb	r3, r3, #1
 800822a:	9315      	str	r3, [sp, #84]	; 0x54
 800822c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800822e:	2b00      	cmp	r3, #0
 8008230:	d0f0      	beq.n	8008214 <__gethex+0x34e>
 8008232:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008236:	f105 0314 	add.w	r3, r5, #20
 800823a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800823e:	eb03 010a 	add.w	r1, r3, sl
 8008242:	f04f 0c00 	mov.w	ip, #0
 8008246:	4618      	mov	r0, r3
 8008248:	f853 2b04 	ldr.w	r2, [r3], #4
 800824c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008250:	d01c      	beq.n	800828c <__gethex+0x3c6>
 8008252:	3201      	adds	r2, #1
 8008254:	6002      	str	r2, [r0, #0]
 8008256:	2f02      	cmp	r7, #2
 8008258:	f105 0314 	add.w	r3, r5, #20
 800825c:	d138      	bne.n	80082d0 <__gethex+0x40a>
 800825e:	f8d8 2000 	ldr.w	r2, [r8]
 8008262:	3a01      	subs	r2, #1
 8008264:	42b2      	cmp	r2, r6
 8008266:	d10a      	bne.n	800827e <__gethex+0x3b8>
 8008268:	1171      	asrs	r1, r6, #5
 800826a:	2201      	movs	r2, #1
 800826c:	f006 061f 	and.w	r6, r6, #31
 8008270:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008274:	fa02 f606 	lsl.w	r6, r2, r6
 8008278:	421e      	tst	r6, r3
 800827a:	bf18      	it	ne
 800827c:	4617      	movne	r7, r2
 800827e:	f047 0720 	orr.w	r7, r7, #32
 8008282:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008284:	601d      	str	r5, [r3, #0]
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	601c      	str	r4, [r3, #0]
 800828a:	e6a4      	b.n	8007fd6 <__gethex+0x110>
 800828c:	4299      	cmp	r1, r3
 800828e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008292:	d8d8      	bhi.n	8008246 <__gethex+0x380>
 8008294:	68ab      	ldr	r3, [r5, #8]
 8008296:	4599      	cmp	r9, r3
 8008298:	db12      	blt.n	80082c0 <__gethex+0x3fa>
 800829a:	6869      	ldr	r1, [r5, #4]
 800829c:	9802      	ldr	r0, [sp, #8]
 800829e:	3101      	adds	r1, #1
 80082a0:	f000 f921 	bl	80084e6 <_Balloc>
 80082a4:	692a      	ldr	r2, [r5, #16]
 80082a6:	3202      	adds	r2, #2
 80082a8:	f105 010c 	add.w	r1, r5, #12
 80082ac:	4683      	mov	fp, r0
 80082ae:	0092      	lsls	r2, r2, #2
 80082b0:	300c      	adds	r0, #12
 80082b2:	f000 f90d 	bl	80084d0 <memcpy>
 80082b6:	4629      	mov	r1, r5
 80082b8:	9802      	ldr	r0, [sp, #8]
 80082ba:	f000 f948 	bl	800854e <_Bfree>
 80082be:	465d      	mov	r5, fp
 80082c0:	692b      	ldr	r3, [r5, #16]
 80082c2:	1c5a      	adds	r2, r3, #1
 80082c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80082c8:	612a      	str	r2, [r5, #16]
 80082ca:	2201      	movs	r2, #1
 80082cc:	615a      	str	r2, [r3, #20]
 80082ce:	e7c2      	b.n	8008256 <__gethex+0x390>
 80082d0:	692a      	ldr	r2, [r5, #16]
 80082d2:	454a      	cmp	r2, r9
 80082d4:	dd0b      	ble.n	80082ee <__gethex+0x428>
 80082d6:	2101      	movs	r1, #1
 80082d8:	4628      	mov	r0, r5
 80082da:	f7ff fda5 	bl	8007e28 <rshift>
 80082de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082e2:	3401      	adds	r4, #1
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	f6ff aed9 	blt.w	800809c <__gethex+0x1d6>
 80082ea:	2701      	movs	r7, #1
 80082ec:	e7c7      	b.n	800827e <__gethex+0x3b8>
 80082ee:	f016 061f 	ands.w	r6, r6, #31
 80082f2:	d0fa      	beq.n	80082ea <__gethex+0x424>
 80082f4:	449a      	add	sl, r3
 80082f6:	f1c6 0620 	rsb	r6, r6, #32
 80082fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082fe:	f000 f9b6 	bl	800866e <__hi0bits>
 8008302:	42b0      	cmp	r0, r6
 8008304:	dbe7      	blt.n	80082d6 <__gethex+0x410>
 8008306:	e7f0      	b.n	80082ea <__gethex+0x424>

08008308 <L_shift>:
 8008308:	f1c2 0208 	rsb	r2, r2, #8
 800830c:	0092      	lsls	r2, r2, #2
 800830e:	b570      	push	{r4, r5, r6, lr}
 8008310:	f1c2 0620 	rsb	r6, r2, #32
 8008314:	6843      	ldr	r3, [r0, #4]
 8008316:	6804      	ldr	r4, [r0, #0]
 8008318:	fa03 f506 	lsl.w	r5, r3, r6
 800831c:	432c      	orrs	r4, r5
 800831e:	40d3      	lsrs	r3, r2
 8008320:	6004      	str	r4, [r0, #0]
 8008322:	f840 3f04 	str.w	r3, [r0, #4]!
 8008326:	4288      	cmp	r0, r1
 8008328:	d3f4      	bcc.n	8008314 <L_shift+0xc>
 800832a:	bd70      	pop	{r4, r5, r6, pc}

0800832c <__match>:
 800832c:	b530      	push	{r4, r5, lr}
 800832e:	6803      	ldr	r3, [r0, #0]
 8008330:	3301      	adds	r3, #1
 8008332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008336:	b914      	cbnz	r4, 800833e <__match+0x12>
 8008338:	6003      	str	r3, [r0, #0]
 800833a:	2001      	movs	r0, #1
 800833c:	bd30      	pop	{r4, r5, pc}
 800833e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008342:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008346:	2d19      	cmp	r5, #25
 8008348:	bf98      	it	ls
 800834a:	3220      	addls	r2, #32
 800834c:	42a2      	cmp	r2, r4
 800834e:	d0f0      	beq.n	8008332 <__match+0x6>
 8008350:	2000      	movs	r0, #0
 8008352:	e7f3      	b.n	800833c <__match+0x10>

08008354 <__hexnan>:
 8008354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008358:	680b      	ldr	r3, [r1, #0]
 800835a:	6801      	ldr	r1, [r0, #0]
 800835c:	115f      	asrs	r7, r3, #5
 800835e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008362:	f013 031f 	ands.w	r3, r3, #31
 8008366:	b087      	sub	sp, #28
 8008368:	bf18      	it	ne
 800836a:	3704      	addne	r7, #4
 800836c:	2500      	movs	r5, #0
 800836e:	1f3e      	subs	r6, r7, #4
 8008370:	4682      	mov	sl, r0
 8008372:	4690      	mov	r8, r2
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	f847 5c04 	str.w	r5, [r7, #-4]
 800837a:	46b1      	mov	r9, r6
 800837c:	4634      	mov	r4, r6
 800837e:	9502      	str	r5, [sp, #8]
 8008380:	46ab      	mov	fp, r5
 8008382:	784a      	ldrb	r2, [r1, #1]
 8008384:	1c4b      	adds	r3, r1, #1
 8008386:	9303      	str	r3, [sp, #12]
 8008388:	b342      	cbz	r2, 80083dc <__hexnan+0x88>
 800838a:	4610      	mov	r0, r2
 800838c:	9105      	str	r1, [sp, #20]
 800838e:	9204      	str	r2, [sp, #16]
 8008390:	f7ff fd84 	bl	8007e9c <__hexdig_fun>
 8008394:	2800      	cmp	r0, #0
 8008396:	d143      	bne.n	8008420 <__hexnan+0xcc>
 8008398:	9a04      	ldr	r2, [sp, #16]
 800839a:	9905      	ldr	r1, [sp, #20]
 800839c:	2a20      	cmp	r2, #32
 800839e:	d818      	bhi.n	80083d2 <__hexnan+0x7e>
 80083a0:	9b02      	ldr	r3, [sp, #8]
 80083a2:	459b      	cmp	fp, r3
 80083a4:	dd13      	ble.n	80083ce <__hexnan+0x7a>
 80083a6:	454c      	cmp	r4, r9
 80083a8:	d206      	bcs.n	80083b8 <__hexnan+0x64>
 80083aa:	2d07      	cmp	r5, #7
 80083ac:	dc04      	bgt.n	80083b8 <__hexnan+0x64>
 80083ae:	462a      	mov	r2, r5
 80083b0:	4649      	mov	r1, r9
 80083b2:	4620      	mov	r0, r4
 80083b4:	f7ff ffa8 	bl	8008308 <L_shift>
 80083b8:	4544      	cmp	r4, r8
 80083ba:	d944      	bls.n	8008446 <__hexnan+0xf2>
 80083bc:	2300      	movs	r3, #0
 80083be:	f1a4 0904 	sub.w	r9, r4, #4
 80083c2:	f844 3c04 	str.w	r3, [r4, #-4]
 80083c6:	f8cd b008 	str.w	fp, [sp, #8]
 80083ca:	464c      	mov	r4, r9
 80083cc:	461d      	mov	r5, r3
 80083ce:	9903      	ldr	r1, [sp, #12]
 80083d0:	e7d7      	b.n	8008382 <__hexnan+0x2e>
 80083d2:	2a29      	cmp	r2, #41	; 0x29
 80083d4:	d14a      	bne.n	800846c <__hexnan+0x118>
 80083d6:	3102      	adds	r1, #2
 80083d8:	f8ca 1000 	str.w	r1, [sl]
 80083dc:	f1bb 0f00 	cmp.w	fp, #0
 80083e0:	d044      	beq.n	800846c <__hexnan+0x118>
 80083e2:	454c      	cmp	r4, r9
 80083e4:	d206      	bcs.n	80083f4 <__hexnan+0xa0>
 80083e6:	2d07      	cmp	r5, #7
 80083e8:	dc04      	bgt.n	80083f4 <__hexnan+0xa0>
 80083ea:	462a      	mov	r2, r5
 80083ec:	4649      	mov	r1, r9
 80083ee:	4620      	mov	r0, r4
 80083f0:	f7ff ff8a 	bl	8008308 <L_shift>
 80083f4:	4544      	cmp	r4, r8
 80083f6:	d928      	bls.n	800844a <__hexnan+0xf6>
 80083f8:	4643      	mov	r3, r8
 80083fa:	f854 2b04 	ldr.w	r2, [r4], #4
 80083fe:	f843 2b04 	str.w	r2, [r3], #4
 8008402:	42a6      	cmp	r6, r4
 8008404:	d2f9      	bcs.n	80083fa <__hexnan+0xa6>
 8008406:	2200      	movs	r2, #0
 8008408:	f843 2b04 	str.w	r2, [r3], #4
 800840c:	429e      	cmp	r6, r3
 800840e:	d2fb      	bcs.n	8008408 <__hexnan+0xb4>
 8008410:	6833      	ldr	r3, [r6, #0]
 8008412:	b91b      	cbnz	r3, 800841c <__hexnan+0xc8>
 8008414:	4546      	cmp	r6, r8
 8008416:	d127      	bne.n	8008468 <__hexnan+0x114>
 8008418:	2301      	movs	r3, #1
 800841a:	6033      	str	r3, [r6, #0]
 800841c:	2005      	movs	r0, #5
 800841e:	e026      	b.n	800846e <__hexnan+0x11a>
 8008420:	3501      	adds	r5, #1
 8008422:	2d08      	cmp	r5, #8
 8008424:	f10b 0b01 	add.w	fp, fp, #1
 8008428:	dd06      	ble.n	8008438 <__hexnan+0xe4>
 800842a:	4544      	cmp	r4, r8
 800842c:	d9cf      	bls.n	80083ce <__hexnan+0x7a>
 800842e:	2300      	movs	r3, #0
 8008430:	f844 3c04 	str.w	r3, [r4, #-4]
 8008434:	2501      	movs	r5, #1
 8008436:	3c04      	subs	r4, #4
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	f000 000f 	and.w	r0, r0, #15
 800843e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008442:	6020      	str	r0, [r4, #0]
 8008444:	e7c3      	b.n	80083ce <__hexnan+0x7a>
 8008446:	2508      	movs	r5, #8
 8008448:	e7c1      	b.n	80083ce <__hexnan+0x7a>
 800844a:	9b01      	ldr	r3, [sp, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0df      	beq.n	8008410 <__hexnan+0xbc>
 8008450:	f04f 32ff 	mov.w	r2, #4294967295
 8008454:	f1c3 0320 	rsb	r3, r3, #32
 8008458:	fa22 f303 	lsr.w	r3, r2, r3
 800845c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008460:	401a      	ands	r2, r3
 8008462:	f847 2c04 	str.w	r2, [r7, #-4]
 8008466:	e7d3      	b.n	8008410 <__hexnan+0xbc>
 8008468:	3e04      	subs	r6, #4
 800846a:	e7d1      	b.n	8008410 <__hexnan+0xbc>
 800846c:	2004      	movs	r0, #4
 800846e:	b007      	add	sp, #28
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008474 <__locale_ctype_ptr_l>:
 8008474:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008478:	4770      	bx	lr

0800847a <__localeconv_l>:
 800847a:	30f0      	adds	r0, #240	; 0xf0
 800847c:	4770      	bx	lr
	...

08008480 <_localeconv_r>:
 8008480:	4b04      	ldr	r3, [pc, #16]	; (8008494 <_localeconv_r+0x14>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6a18      	ldr	r0, [r3, #32]
 8008486:	4b04      	ldr	r3, [pc, #16]	; (8008498 <_localeconv_r+0x18>)
 8008488:	2800      	cmp	r0, #0
 800848a:	bf08      	it	eq
 800848c:	4618      	moveq	r0, r3
 800848e:	30f0      	adds	r0, #240	; 0xf0
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	2000000c 	.word	0x2000000c
 8008498:	20000070 	.word	0x20000070

0800849c <malloc>:
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <malloc+0xc>)
 800849e:	4601      	mov	r1, r0
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	f000 bc7b 	b.w	8008d9c <_malloc_r>
 80084a6:	bf00      	nop
 80084a8:	2000000c 	.word	0x2000000c

080084ac <__ascii_mbtowc>:
 80084ac:	b082      	sub	sp, #8
 80084ae:	b901      	cbnz	r1, 80084b2 <__ascii_mbtowc+0x6>
 80084b0:	a901      	add	r1, sp, #4
 80084b2:	b142      	cbz	r2, 80084c6 <__ascii_mbtowc+0x1a>
 80084b4:	b14b      	cbz	r3, 80084ca <__ascii_mbtowc+0x1e>
 80084b6:	7813      	ldrb	r3, [r2, #0]
 80084b8:	600b      	str	r3, [r1, #0]
 80084ba:	7812      	ldrb	r2, [r2, #0]
 80084bc:	1c10      	adds	r0, r2, #0
 80084be:	bf18      	it	ne
 80084c0:	2001      	movne	r0, #1
 80084c2:	b002      	add	sp, #8
 80084c4:	4770      	bx	lr
 80084c6:	4610      	mov	r0, r2
 80084c8:	e7fb      	b.n	80084c2 <__ascii_mbtowc+0x16>
 80084ca:	f06f 0001 	mvn.w	r0, #1
 80084ce:	e7f8      	b.n	80084c2 <__ascii_mbtowc+0x16>

080084d0 <memcpy>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	1e43      	subs	r3, r0, #1
 80084d4:	440a      	add	r2, r1
 80084d6:	4291      	cmp	r1, r2
 80084d8:	d100      	bne.n	80084dc <memcpy+0xc>
 80084da:	bd10      	pop	{r4, pc}
 80084dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e4:	e7f7      	b.n	80084d6 <memcpy+0x6>

080084e6 <_Balloc>:
 80084e6:	b570      	push	{r4, r5, r6, lr}
 80084e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084ea:	4604      	mov	r4, r0
 80084ec:	460e      	mov	r6, r1
 80084ee:	b93d      	cbnz	r5, 8008500 <_Balloc+0x1a>
 80084f0:	2010      	movs	r0, #16
 80084f2:	f7ff ffd3 	bl	800849c <malloc>
 80084f6:	6260      	str	r0, [r4, #36]	; 0x24
 80084f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084fc:	6005      	str	r5, [r0, #0]
 80084fe:	60c5      	str	r5, [r0, #12]
 8008500:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008502:	68eb      	ldr	r3, [r5, #12]
 8008504:	b183      	cbz	r3, 8008528 <_Balloc+0x42>
 8008506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800850e:	b9b8      	cbnz	r0, 8008540 <_Balloc+0x5a>
 8008510:	2101      	movs	r1, #1
 8008512:	fa01 f506 	lsl.w	r5, r1, r6
 8008516:	1d6a      	adds	r2, r5, #5
 8008518:	0092      	lsls	r2, r2, #2
 800851a:	4620      	mov	r0, r4
 800851c:	f000 fbe1 	bl	8008ce2 <_calloc_r>
 8008520:	b160      	cbz	r0, 800853c <_Balloc+0x56>
 8008522:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008526:	e00e      	b.n	8008546 <_Balloc+0x60>
 8008528:	2221      	movs	r2, #33	; 0x21
 800852a:	2104      	movs	r1, #4
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fbd8 	bl	8008ce2 <_calloc_r>
 8008532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008534:	60e8      	str	r0, [r5, #12]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e4      	bne.n	8008506 <_Balloc+0x20>
 800853c:	2000      	movs	r0, #0
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	6802      	ldr	r2, [r0, #0]
 8008542:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008546:	2300      	movs	r3, #0
 8008548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800854c:	e7f7      	b.n	800853e <_Balloc+0x58>

0800854e <_Bfree>:
 800854e:	b570      	push	{r4, r5, r6, lr}
 8008550:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008552:	4606      	mov	r6, r0
 8008554:	460d      	mov	r5, r1
 8008556:	b93c      	cbnz	r4, 8008568 <_Bfree+0x1a>
 8008558:	2010      	movs	r0, #16
 800855a:	f7ff ff9f 	bl	800849c <malloc>
 800855e:	6270      	str	r0, [r6, #36]	; 0x24
 8008560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008564:	6004      	str	r4, [r0, #0]
 8008566:	60c4      	str	r4, [r0, #12]
 8008568:	b13d      	cbz	r5, 800857a <_Bfree+0x2c>
 800856a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800856c:	686a      	ldr	r2, [r5, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008574:	6029      	str	r1, [r5, #0]
 8008576:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800857a:	bd70      	pop	{r4, r5, r6, pc}

0800857c <__multadd>:
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	690d      	ldr	r5, [r1, #16]
 8008582:	461f      	mov	r7, r3
 8008584:	4606      	mov	r6, r0
 8008586:	460c      	mov	r4, r1
 8008588:	f101 0c14 	add.w	ip, r1, #20
 800858c:	2300      	movs	r3, #0
 800858e:	f8dc 0000 	ldr.w	r0, [ip]
 8008592:	b281      	uxth	r1, r0
 8008594:	fb02 7101 	mla	r1, r2, r1, r7
 8008598:	0c0f      	lsrs	r7, r1, #16
 800859a:	0c00      	lsrs	r0, r0, #16
 800859c:	fb02 7000 	mla	r0, r2, r0, r7
 80085a0:	b289      	uxth	r1, r1
 80085a2:	3301      	adds	r3, #1
 80085a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80085a8:	429d      	cmp	r5, r3
 80085aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80085ae:	f84c 1b04 	str.w	r1, [ip], #4
 80085b2:	dcec      	bgt.n	800858e <__multadd+0x12>
 80085b4:	b1d7      	cbz	r7, 80085ec <__multadd+0x70>
 80085b6:	68a3      	ldr	r3, [r4, #8]
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	dc12      	bgt.n	80085e2 <__multadd+0x66>
 80085bc:	6861      	ldr	r1, [r4, #4]
 80085be:	4630      	mov	r0, r6
 80085c0:	3101      	adds	r1, #1
 80085c2:	f7ff ff90 	bl	80084e6 <_Balloc>
 80085c6:	6922      	ldr	r2, [r4, #16]
 80085c8:	3202      	adds	r2, #2
 80085ca:	f104 010c 	add.w	r1, r4, #12
 80085ce:	4680      	mov	r8, r0
 80085d0:	0092      	lsls	r2, r2, #2
 80085d2:	300c      	adds	r0, #12
 80085d4:	f7ff ff7c 	bl	80084d0 <memcpy>
 80085d8:	4621      	mov	r1, r4
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff ffb7 	bl	800854e <_Bfree>
 80085e0:	4644      	mov	r4, r8
 80085e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085e6:	3501      	adds	r5, #1
 80085e8:	615f      	str	r7, [r3, #20]
 80085ea:	6125      	str	r5, [r4, #16]
 80085ec:	4620      	mov	r0, r4
 80085ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080085f2 <__s2b>:
 80085f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f6:	460c      	mov	r4, r1
 80085f8:	4615      	mov	r5, r2
 80085fa:	461f      	mov	r7, r3
 80085fc:	2209      	movs	r2, #9
 80085fe:	3308      	adds	r3, #8
 8008600:	4606      	mov	r6, r0
 8008602:	fb93 f3f2 	sdiv	r3, r3, r2
 8008606:	2100      	movs	r1, #0
 8008608:	2201      	movs	r2, #1
 800860a:	429a      	cmp	r2, r3
 800860c:	db20      	blt.n	8008650 <__s2b+0x5e>
 800860e:	4630      	mov	r0, r6
 8008610:	f7ff ff69 	bl	80084e6 <_Balloc>
 8008614:	9b08      	ldr	r3, [sp, #32]
 8008616:	6143      	str	r3, [r0, #20]
 8008618:	2d09      	cmp	r5, #9
 800861a:	f04f 0301 	mov.w	r3, #1
 800861e:	6103      	str	r3, [r0, #16]
 8008620:	dd19      	ble.n	8008656 <__s2b+0x64>
 8008622:	f104 0809 	add.w	r8, r4, #9
 8008626:	46c1      	mov	r9, r8
 8008628:	442c      	add	r4, r5
 800862a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800862e:	4601      	mov	r1, r0
 8008630:	3b30      	subs	r3, #48	; 0x30
 8008632:	220a      	movs	r2, #10
 8008634:	4630      	mov	r0, r6
 8008636:	f7ff ffa1 	bl	800857c <__multadd>
 800863a:	45a1      	cmp	r9, r4
 800863c:	d1f5      	bne.n	800862a <__s2b+0x38>
 800863e:	eb08 0405 	add.w	r4, r8, r5
 8008642:	3c08      	subs	r4, #8
 8008644:	1b2d      	subs	r5, r5, r4
 8008646:	1963      	adds	r3, r4, r5
 8008648:	42bb      	cmp	r3, r7
 800864a:	db07      	blt.n	800865c <__s2b+0x6a>
 800864c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008650:	0052      	lsls	r2, r2, #1
 8008652:	3101      	adds	r1, #1
 8008654:	e7d9      	b.n	800860a <__s2b+0x18>
 8008656:	340a      	adds	r4, #10
 8008658:	2509      	movs	r5, #9
 800865a:	e7f3      	b.n	8008644 <__s2b+0x52>
 800865c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008660:	4601      	mov	r1, r0
 8008662:	3b30      	subs	r3, #48	; 0x30
 8008664:	220a      	movs	r2, #10
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff ff88 	bl	800857c <__multadd>
 800866c:	e7eb      	b.n	8008646 <__s2b+0x54>

0800866e <__hi0bits>:
 800866e:	0c02      	lsrs	r2, r0, #16
 8008670:	0412      	lsls	r2, r2, #16
 8008672:	4603      	mov	r3, r0
 8008674:	b9b2      	cbnz	r2, 80086a4 <__hi0bits+0x36>
 8008676:	0403      	lsls	r3, r0, #16
 8008678:	2010      	movs	r0, #16
 800867a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800867e:	bf04      	itt	eq
 8008680:	021b      	lsleq	r3, r3, #8
 8008682:	3008      	addeq	r0, #8
 8008684:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008688:	bf04      	itt	eq
 800868a:	011b      	lsleq	r3, r3, #4
 800868c:	3004      	addeq	r0, #4
 800868e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008692:	bf04      	itt	eq
 8008694:	009b      	lsleq	r3, r3, #2
 8008696:	3002      	addeq	r0, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	db06      	blt.n	80086aa <__hi0bits+0x3c>
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	d503      	bpl.n	80086a8 <__hi0bits+0x3a>
 80086a0:	3001      	adds	r0, #1
 80086a2:	4770      	bx	lr
 80086a4:	2000      	movs	r0, #0
 80086a6:	e7e8      	b.n	800867a <__hi0bits+0xc>
 80086a8:	2020      	movs	r0, #32
 80086aa:	4770      	bx	lr

080086ac <__lo0bits>:
 80086ac:	6803      	ldr	r3, [r0, #0]
 80086ae:	f013 0207 	ands.w	r2, r3, #7
 80086b2:	4601      	mov	r1, r0
 80086b4:	d00b      	beq.n	80086ce <__lo0bits+0x22>
 80086b6:	07da      	lsls	r2, r3, #31
 80086b8:	d423      	bmi.n	8008702 <__lo0bits+0x56>
 80086ba:	0798      	lsls	r0, r3, #30
 80086bc:	bf49      	itett	mi
 80086be:	085b      	lsrmi	r3, r3, #1
 80086c0:	089b      	lsrpl	r3, r3, #2
 80086c2:	2001      	movmi	r0, #1
 80086c4:	600b      	strmi	r3, [r1, #0]
 80086c6:	bf5c      	itt	pl
 80086c8:	600b      	strpl	r3, [r1, #0]
 80086ca:	2002      	movpl	r0, #2
 80086cc:	4770      	bx	lr
 80086ce:	b298      	uxth	r0, r3
 80086d0:	b9a8      	cbnz	r0, 80086fe <__lo0bits+0x52>
 80086d2:	0c1b      	lsrs	r3, r3, #16
 80086d4:	2010      	movs	r0, #16
 80086d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80086da:	bf04      	itt	eq
 80086dc:	0a1b      	lsreq	r3, r3, #8
 80086de:	3008      	addeq	r0, #8
 80086e0:	071a      	lsls	r2, r3, #28
 80086e2:	bf04      	itt	eq
 80086e4:	091b      	lsreq	r3, r3, #4
 80086e6:	3004      	addeq	r0, #4
 80086e8:	079a      	lsls	r2, r3, #30
 80086ea:	bf04      	itt	eq
 80086ec:	089b      	lsreq	r3, r3, #2
 80086ee:	3002      	addeq	r0, #2
 80086f0:	07da      	lsls	r2, r3, #31
 80086f2:	d402      	bmi.n	80086fa <__lo0bits+0x4e>
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	d006      	beq.n	8008706 <__lo0bits+0x5a>
 80086f8:	3001      	adds	r0, #1
 80086fa:	600b      	str	r3, [r1, #0]
 80086fc:	4770      	bx	lr
 80086fe:	4610      	mov	r0, r2
 8008700:	e7e9      	b.n	80086d6 <__lo0bits+0x2a>
 8008702:	2000      	movs	r0, #0
 8008704:	4770      	bx	lr
 8008706:	2020      	movs	r0, #32
 8008708:	4770      	bx	lr

0800870a <__i2b>:
 800870a:	b510      	push	{r4, lr}
 800870c:	460c      	mov	r4, r1
 800870e:	2101      	movs	r1, #1
 8008710:	f7ff fee9 	bl	80084e6 <_Balloc>
 8008714:	2201      	movs	r2, #1
 8008716:	6144      	str	r4, [r0, #20]
 8008718:	6102      	str	r2, [r0, #16]
 800871a:	bd10      	pop	{r4, pc}

0800871c <__multiply>:
 800871c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	4614      	mov	r4, r2
 8008722:	690a      	ldr	r2, [r1, #16]
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	429a      	cmp	r2, r3
 8008728:	bfb8      	it	lt
 800872a:	460b      	movlt	r3, r1
 800872c:	4688      	mov	r8, r1
 800872e:	bfbc      	itt	lt
 8008730:	46a0      	movlt	r8, r4
 8008732:	461c      	movlt	r4, r3
 8008734:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008738:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800873c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008740:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008744:	eb07 0609 	add.w	r6, r7, r9
 8008748:	42b3      	cmp	r3, r6
 800874a:	bfb8      	it	lt
 800874c:	3101      	addlt	r1, #1
 800874e:	f7ff feca 	bl	80084e6 <_Balloc>
 8008752:	f100 0514 	add.w	r5, r0, #20
 8008756:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800875a:	462b      	mov	r3, r5
 800875c:	2200      	movs	r2, #0
 800875e:	4573      	cmp	r3, lr
 8008760:	d316      	bcc.n	8008790 <__multiply+0x74>
 8008762:	f104 0214 	add.w	r2, r4, #20
 8008766:	f108 0114 	add.w	r1, r8, #20
 800876a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800876e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	9b00      	ldr	r3, [sp, #0]
 8008776:	9201      	str	r2, [sp, #4]
 8008778:	4293      	cmp	r3, r2
 800877a:	d80c      	bhi.n	8008796 <__multiply+0x7a>
 800877c:	2e00      	cmp	r6, #0
 800877e:	dd03      	ble.n	8008788 <__multiply+0x6c>
 8008780:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008784:	2b00      	cmp	r3, #0
 8008786:	d05d      	beq.n	8008844 <__multiply+0x128>
 8008788:	6106      	str	r6, [r0, #16]
 800878a:	b003      	add	sp, #12
 800878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008790:	f843 2b04 	str.w	r2, [r3], #4
 8008794:	e7e3      	b.n	800875e <__multiply+0x42>
 8008796:	f8b2 b000 	ldrh.w	fp, [r2]
 800879a:	f1bb 0f00 	cmp.w	fp, #0
 800879e:	d023      	beq.n	80087e8 <__multiply+0xcc>
 80087a0:	4689      	mov	r9, r1
 80087a2:	46ac      	mov	ip, r5
 80087a4:	f04f 0800 	mov.w	r8, #0
 80087a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80087ac:	f8dc a000 	ldr.w	sl, [ip]
 80087b0:	b2a3      	uxth	r3, r4
 80087b2:	fa1f fa8a 	uxth.w	sl, sl
 80087b6:	fb0b a303 	mla	r3, fp, r3, sl
 80087ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087be:	f8dc 4000 	ldr.w	r4, [ip]
 80087c2:	4443      	add	r3, r8
 80087c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087c8:	fb0b 840a 	mla	r4, fp, sl, r8
 80087cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80087d0:	46e2      	mov	sl, ip
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80087d8:	454f      	cmp	r7, r9
 80087da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80087de:	f84a 3b04 	str.w	r3, [sl], #4
 80087e2:	d82b      	bhi.n	800883c <__multiply+0x120>
 80087e4:	f8cc 8004 	str.w	r8, [ip, #4]
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80087ee:	3204      	adds	r2, #4
 80087f0:	f1ba 0f00 	cmp.w	sl, #0
 80087f4:	d020      	beq.n	8008838 <__multiply+0x11c>
 80087f6:	682b      	ldr	r3, [r5, #0]
 80087f8:	4689      	mov	r9, r1
 80087fa:	46a8      	mov	r8, r5
 80087fc:	f04f 0b00 	mov.w	fp, #0
 8008800:	f8b9 c000 	ldrh.w	ip, [r9]
 8008804:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008808:	fb0a 440c 	mla	r4, sl, ip, r4
 800880c:	445c      	add	r4, fp
 800880e:	46c4      	mov	ip, r8
 8008810:	b29b      	uxth	r3, r3
 8008812:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008816:	f84c 3b04 	str.w	r3, [ip], #4
 800881a:	f859 3b04 	ldr.w	r3, [r9], #4
 800881e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008822:	0c1b      	lsrs	r3, r3, #16
 8008824:	fb0a b303 	mla	r3, sl, r3, fp
 8008828:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800882c:	454f      	cmp	r7, r9
 800882e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008832:	d805      	bhi.n	8008840 <__multiply+0x124>
 8008834:	f8c8 3004 	str.w	r3, [r8, #4]
 8008838:	3504      	adds	r5, #4
 800883a:	e79b      	b.n	8008774 <__multiply+0x58>
 800883c:	46d4      	mov	ip, sl
 800883e:	e7b3      	b.n	80087a8 <__multiply+0x8c>
 8008840:	46e0      	mov	r8, ip
 8008842:	e7dd      	b.n	8008800 <__multiply+0xe4>
 8008844:	3e01      	subs	r6, #1
 8008846:	e799      	b.n	800877c <__multiply+0x60>

08008848 <__pow5mult>:
 8008848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800884c:	4615      	mov	r5, r2
 800884e:	f012 0203 	ands.w	r2, r2, #3
 8008852:	4606      	mov	r6, r0
 8008854:	460f      	mov	r7, r1
 8008856:	d007      	beq.n	8008868 <__pow5mult+0x20>
 8008858:	3a01      	subs	r2, #1
 800885a:	4c21      	ldr	r4, [pc, #132]	; (80088e0 <__pow5mult+0x98>)
 800885c:	2300      	movs	r3, #0
 800885e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008862:	f7ff fe8b 	bl	800857c <__multadd>
 8008866:	4607      	mov	r7, r0
 8008868:	10ad      	asrs	r5, r5, #2
 800886a:	d035      	beq.n	80088d8 <__pow5mult+0x90>
 800886c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800886e:	b93c      	cbnz	r4, 8008880 <__pow5mult+0x38>
 8008870:	2010      	movs	r0, #16
 8008872:	f7ff fe13 	bl	800849c <malloc>
 8008876:	6270      	str	r0, [r6, #36]	; 0x24
 8008878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800887c:	6004      	str	r4, [r0, #0]
 800887e:	60c4      	str	r4, [r0, #12]
 8008880:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008888:	b94c      	cbnz	r4, 800889e <__pow5mult+0x56>
 800888a:	f240 2171 	movw	r1, #625	; 0x271
 800888e:	4630      	mov	r0, r6
 8008890:	f7ff ff3b 	bl	800870a <__i2b>
 8008894:	2300      	movs	r3, #0
 8008896:	f8c8 0008 	str.w	r0, [r8, #8]
 800889a:	4604      	mov	r4, r0
 800889c:	6003      	str	r3, [r0, #0]
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	07eb      	lsls	r3, r5, #31
 80088a4:	d50a      	bpl.n	80088bc <__pow5mult+0x74>
 80088a6:	4639      	mov	r1, r7
 80088a8:	4622      	mov	r2, r4
 80088aa:	4630      	mov	r0, r6
 80088ac:	f7ff ff36 	bl	800871c <__multiply>
 80088b0:	4639      	mov	r1, r7
 80088b2:	4681      	mov	r9, r0
 80088b4:	4630      	mov	r0, r6
 80088b6:	f7ff fe4a 	bl	800854e <_Bfree>
 80088ba:	464f      	mov	r7, r9
 80088bc:	106d      	asrs	r5, r5, #1
 80088be:	d00b      	beq.n	80088d8 <__pow5mult+0x90>
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	b938      	cbnz	r0, 80088d4 <__pow5mult+0x8c>
 80088c4:	4622      	mov	r2, r4
 80088c6:	4621      	mov	r1, r4
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7ff ff27 	bl	800871c <__multiply>
 80088ce:	6020      	str	r0, [r4, #0]
 80088d0:	f8c0 8000 	str.w	r8, [r0]
 80088d4:	4604      	mov	r4, r0
 80088d6:	e7e4      	b.n	80088a2 <__pow5mult+0x5a>
 80088d8:	4638      	mov	r0, r7
 80088da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088de:	bf00      	nop
 80088e0:	080093c0 	.word	0x080093c0

080088e4 <__lshift>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	460c      	mov	r4, r1
 80088ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	6849      	ldr	r1, [r1, #4]
 80088f2:	eb0a 0903 	add.w	r9, sl, r3
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	4607      	mov	r7, r0
 80088fa:	4616      	mov	r6, r2
 80088fc:	f109 0501 	add.w	r5, r9, #1
 8008900:	42ab      	cmp	r3, r5
 8008902:	db32      	blt.n	800896a <__lshift+0x86>
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff fdee 	bl	80084e6 <_Balloc>
 800890a:	2300      	movs	r3, #0
 800890c:	4680      	mov	r8, r0
 800890e:	f100 0114 	add.w	r1, r0, #20
 8008912:	461a      	mov	r2, r3
 8008914:	4553      	cmp	r3, sl
 8008916:	db2b      	blt.n	8008970 <__lshift+0x8c>
 8008918:	6920      	ldr	r0, [r4, #16]
 800891a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800891e:	f104 0314 	add.w	r3, r4, #20
 8008922:	f016 021f 	ands.w	r2, r6, #31
 8008926:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800892a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800892e:	d025      	beq.n	800897c <__lshift+0x98>
 8008930:	f1c2 0e20 	rsb	lr, r2, #32
 8008934:	2000      	movs	r0, #0
 8008936:	681e      	ldr	r6, [r3, #0]
 8008938:	468a      	mov	sl, r1
 800893a:	4096      	lsls	r6, r2
 800893c:	4330      	orrs	r0, r6
 800893e:	f84a 0b04 	str.w	r0, [sl], #4
 8008942:	f853 0b04 	ldr.w	r0, [r3], #4
 8008946:	459c      	cmp	ip, r3
 8008948:	fa20 f00e 	lsr.w	r0, r0, lr
 800894c:	d814      	bhi.n	8008978 <__lshift+0x94>
 800894e:	6048      	str	r0, [r1, #4]
 8008950:	b108      	cbz	r0, 8008956 <__lshift+0x72>
 8008952:	f109 0502 	add.w	r5, r9, #2
 8008956:	3d01      	subs	r5, #1
 8008958:	4638      	mov	r0, r7
 800895a:	f8c8 5010 	str.w	r5, [r8, #16]
 800895e:	4621      	mov	r1, r4
 8008960:	f7ff fdf5 	bl	800854e <_Bfree>
 8008964:	4640      	mov	r0, r8
 8008966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896a:	3101      	adds	r1, #1
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	e7c7      	b.n	8008900 <__lshift+0x1c>
 8008970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008974:	3301      	adds	r3, #1
 8008976:	e7cd      	b.n	8008914 <__lshift+0x30>
 8008978:	4651      	mov	r1, sl
 800897a:	e7dc      	b.n	8008936 <__lshift+0x52>
 800897c:	3904      	subs	r1, #4
 800897e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008982:	f841 2f04 	str.w	r2, [r1, #4]!
 8008986:	459c      	cmp	ip, r3
 8008988:	d8f9      	bhi.n	800897e <__lshift+0x9a>
 800898a:	e7e4      	b.n	8008956 <__lshift+0x72>

0800898c <__mcmp>:
 800898c:	6903      	ldr	r3, [r0, #16]
 800898e:	690a      	ldr	r2, [r1, #16]
 8008990:	1a9b      	subs	r3, r3, r2
 8008992:	b530      	push	{r4, r5, lr}
 8008994:	d10c      	bne.n	80089b0 <__mcmp+0x24>
 8008996:	0092      	lsls	r2, r2, #2
 8008998:	3014      	adds	r0, #20
 800899a:	3114      	adds	r1, #20
 800899c:	1884      	adds	r4, r0, r2
 800899e:	4411      	add	r1, r2
 80089a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089a8:	4295      	cmp	r5, r2
 80089aa:	d003      	beq.n	80089b4 <__mcmp+0x28>
 80089ac:	d305      	bcc.n	80089ba <__mcmp+0x2e>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4618      	mov	r0, r3
 80089b2:	bd30      	pop	{r4, r5, pc}
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d3f3      	bcc.n	80089a0 <__mcmp+0x14>
 80089b8:	e7fa      	b.n	80089b0 <__mcmp+0x24>
 80089ba:	f04f 33ff 	mov.w	r3, #4294967295
 80089be:	e7f7      	b.n	80089b0 <__mcmp+0x24>

080089c0 <__mdiff>:
 80089c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c4:	460d      	mov	r5, r1
 80089c6:	4607      	mov	r7, r0
 80089c8:	4611      	mov	r1, r2
 80089ca:	4628      	mov	r0, r5
 80089cc:	4614      	mov	r4, r2
 80089ce:	f7ff ffdd 	bl	800898c <__mcmp>
 80089d2:	1e06      	subs	r6, r0, #0
 80089d4:	d108      	bne.n	80089e8 <__mdiff+0x28>
 80089d6:	4631      	mov	r1, r6
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff fd84 	bl	80084e6 <_Balloc>
 80089de:	2301      	movs	r3, #1
 80089e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80089e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e8:	bfa4      	itt	ge
 80089ea:	4623      	movge	r3, r4
 80089ec:	462c      	movge	r4, r5
 80089ee:	4638      	mov	r0, r7
 80089f0:	6861      	ldr	r1, [r4, #4]
 80089f2:	bfa6      	itte	ge
 80089f4:	461d      	movge	r5, r3
 80089f6:	2600      	movge	r6, #0
 80089f8:	2601      	movlt	r6, #1
 80089fa:	f7ff fd74 	bl	80084e6 <_Balloc>
 80089fe:	692b      	ldr	r3, [r5, #16]
 8008a00:	60c6      	str	r6, [r0, #12]
 8008a02:	6926      	ldr	r6, [r4, #16]
 8008a04:	f105 0914 	add.w	r9, r5, #20
 8008a08:	f104 0214 	add.w	r2, r4, #20
 8008a0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008a10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008a14:	f100 0514 	add.w	r5, r0, #20
 8008a18:	f04f 0e00 	mov.w	lr, #0
 8008a1c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008a20:	f859 4b04 	ldr.w	r4, [r9], #4
 8008a24:	fa1e f18a 	uxtah	r1, lr, sl
 8008a28:	b2a3      	uxth	r3, r4
 8008a2a:	1ac9      	subs	r1, r1, r3
 8008a2c:	0c23      	lsrs	r3, r4, #16
 8008a2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008a32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008a36:	b289      	uxth	r1, r1
 8008a38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008a3c:	45c8      	cmp	r8, r9
 8008a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008a42:	4694      	mov	ip, r2
 8008a44:	f845 3b04 	str.w	r3, [r5], #4
 8008a48:	d8e8      	bhi.n	8008a1c <__mdiff+0x5c>
 8008a4a:	45bc      	cmp	ip, r7
 8008a4c:	d304      	bcc.n	8008a58 <__mdiff+0x98>
 8008a4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008a52:	b183      	cbz	r3, 8008a76 <__mdiff+0xb6>
 8008a54:	6106      	str	r6, [r0, #16]
 8008a56:	e7c5      	b.n	80089e4 <__mdiff+0x24>
 8008a58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a5c:	fa1e f381 	uxtah	r3, lr, r1
 8008a60:	141a      	asrs	r2, r3, #16
 8008a62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008a70:	f845 3b04 	str.w	r3, [r5], #4
 8008a74:	e7e9      	b.n	8008a4a <__mdiff+0x8a>
 8008a76:	3e01      	subs	r6, #1
 8008a78:	e7e9      	b.n	8008a4e <__mdiff+0x8e>
	...

08008a7c <__ulp>:
 8008a7c:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <__ulp+0x4c>)
 8008a7e:	ee10 2a90 	vmov	r2, s1
 8008a82:	401a      	ands	r2, r3
 8008a84:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dd04      	ble.n	8008a96 <__ulp+0x1a>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	4619      	mov	r1, r3
 8008a90:	ec41 0b10 	vmov	d0, r0, r1
 8008a94:	4770      	bx	lr
 8008a96:	425b      	negs	r3, r3
 8008a98:	151b      	asrs	r3, r3, #20
 8008a9a:	2b13      	cmp	r3, #19
 8008a9c:	f04f 0000 	mov.w	r0, #0
 8008aa0:	f04f 0100 	mov.w	r1, #0
 8008aa4:	dc04      	bgt.n	8008ab0 <__ulp+0x34>
 8008aa6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008aaa:	fa42 f103 	asr.w	r1, r2, r3
 8008aae:	e7ef      	b.n	8008a90 <__ulp+0x14>
 8008ab0:	3b14      	subs	r3, #20
 8008ab2:	2b1e      	cmp	r3, #30
 8008ab4:	f04f 0201 	mov.w	r2, #1
 8008ab8:	bfda      	itte	le
 8008aba:	f1c3 031f 	rsble	r3, r3, #31
 8008abe:	fa02 f303 	lslle.w	r3, r2, r3
 8008ac2:	4613      	movgt	r3, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	e7e3      	b.n	8008a90 <__ulp+0x14>
 8008ac8:	7ff00000 	.word	0x7ff00000

08008acc <__b2d>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	6905      	ldr	r5, [r0, #16]
 8008ad0:	f100 0714 	add.w	r7, r0, #20
 8008ad4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008ad8:	1f2e      	subs	r6, r5, #4
 8008ada:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7ff fdc5 	bl	800866e <__hi0bits>
 8008ae4:	f1c0 0320 	rsb	r3, r0, #32
 8008ae8:	280a      	cmp	r0, #10
 8008aea:	600b      	str	r3, [r1, #0]
 8008aec:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008b64 <__b2d+0x98>
 8008af0:	dc14      	bgt.n	8008b1c <__b2d+0x50>
 8008af2:	f1c0 0e0b 	rsb	lr, r0, #11
 8008af6:	fa24 f10e 	lsr.w	r1, r4, lr
 8008afa:	42b7      	cmp	r7, r6
 8008afc:	ea41 030c 	orr.w	r3, r1, ip
 8008b00:	bf34      	ite	cc
 8008b02:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b06:	2100      	movcs	r1, #0
 8008b08:	3015      	adds	r0, #21
 8008b0a:	fa04 f000 	lsl.w	r0, r4, r0
 8008b0e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008b12:	ea40 0201 	orr.w	r2, r0, r1
 8008b16:	ec43 2b10 	vmov	d0, r2, r3
 8008b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b1c:	42b7      	cmp	r7, r6
 8008b1e:	bf3a      	itte	cc
 8008b20:	f1a5 0608 	subcc.w	r6, r5, #8
 8008b24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b28:	2100      	movcs	r1, #0
 8008b2a:	380b      	subs	r0, #11
 8008b2c:	d015      	beq.n	8008b5a <__b2d+0x8e>
 8008b2e:	4084      	lsls	r4, r0
 8008b30:	f1c0 0520 	rsb	r5, r0, #32
 8008b34:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008b38:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008b3c:	42be      	cmp	r6, r7
 8008b3e:	fa21 fc05 	lsr.w	ip, r1, r5
 8008b42:	ea44 030c 	orr.w	r3, r4, ip
 8008b46:	bf8c      	ite	hi
 8008b48:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008b4c:	2400      	movls	r4, #0
 8008b4e:	fa01 f000 	lsl.w	r0, r1, r0
 8008b52:	40ec      	lsrs	r4, r5
 8008b54:	ea40 0204 	orr.w	r2, r0, r4
 8008b58:	e7dd      	b.n	8008b16 <__b2d+0x4a>
 8008b5a:	ea44 030c 	orr.w	r3, r4, ip
 8008b5e:	460a      	mov	r2, r1
 8008b60:	e7d9      	b.n	8008b16 <__b2d+0x4a>
 8008b62:	bf00      	nop
 8008b64:	3ff00000 	.word	0x3ff00000

08008b68 <__d2b>:
 8008b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b6c:	460e      	mov	r6, r1
 8008b6e:	2101      	movs	r1, #1
 8008b70:	ec59 8b10 	vmov	r8, r9, d0
 8008b74:	4615      	mov	r5, r2
 8008b76:	f7ff fcb6 	bl	80084e6 <_Balloc>
 8008b7a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008b7e:	4607      	mov	r7, r0
 8008b80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b84:	bb34      	cbnz	r4, 8008bd4 <__d2b+0x6c>
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	f1b8 0300 	subs.w	r3, r8, #0
 8008b8c:	d027      	beq.n	8008bde <__d2b+0x76>
 8008b8e:	a802      	add	r0, sp, #8
 8008b90:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008b94:	f7ff fd8a 	bl	80086ac <__lo0bits>
 8008b98:	9900      	ldr	r1, [sp, #0]
 8008b9a:	b1f0      	cbz	r0, 8008bda <__d2b+0x72>
 8008b9c:	9a01      	ldr	r2, [sp, #4]
 8008b9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	40c2      	lsrs	r2, r0
 8008baa:	617b      	str	r3, [r7, #20]
 8008bac:	9201      	str	r2, [sp, #4]
 8008bae:	9b01      	ldr	r3, [sp, #4]
 8008bb0:	61bb      	str	r3, [r7, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	bf14      	ite	ne
 8008bb6:	2102      	movne	r1, #2
 8008bb8:	2101      	moveq	r1, #1
 8008bba:	6139      	str	r1, [r7, #16]
 8008bbc:	b1c4      	cbz	r4, 8008bf0 <__d2b+0x88>
 8008bbe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008bc2:	4404      	add	r4, r0
 8008bc4:	6034      	str	r4, [r6, #0]
 8008bc6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008bca:	6028      	str	r0, [r5, #0]
 8008bcc:	4638      	mov	r0, r7
 8008bce:	b003      	add	sp, #12
 8008bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bd8:	e7d5      	b.n	8008b86 <__d2b+0x1e>
 8008bda:	6179      	str	r1, [r7, #20]
 8008bdc:	e7e7      	b.n	8008bae <__d2b+0x46>
 8008bde:	a801      	add	r0, sp, #4
 8008be0:	f7ff fd64 	bl	80086ac <__lo0bits>
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	2101      	movs	r1, #1
 8008bea:	6139      	str	r1, [r7, #16]
 8008bec:	3020      	adds	r0, #32
 8008bee:	e7e5      	b.n	8008bbc <__d2b+0x54>
 8008bf0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008bf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008bf8:	6030      	str	r0, [r6, #0]
 8008bfa:	6918      	ldr	r0, [r3, #16]
 8008bfc:	f7ff fd37 	bl	800866e <__hi0bits>
 8008c00:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008c04:	e7e1      	b.n	8008bca <__d2b+0x62>

08008c06 <__ratio>:
 8008c06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0a:	4688      	mov	r8, r1
 8008c0c:	4669      	mov	r1, sp
 8008c0e:	4681      	mov	r9, r0
 8008c10:	f7ff ff5c 	bl	8008acc <__b2d>
 8008c14:	a901      	add	r1, sp, #4
 8008c16:	4640      	mov	r0, r8
 8008c18:	ec57 6b10 	vmov	r6, r7, d0
 8008c1c:	f7ff ff56 	bl	8008acc <__b2d>
 8008c20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c28:	eba3 0c02 	sub.w	ip, r3, r2
 8008c2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c30:	1a9b      	subs	r3, r3, r2
 8008c32:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008c36:	ec5b ab10 	vmov	sl, fp, d0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bfce      	itee	gt
 8008c3e:	463a      	movgt	r2, r7
 8008c40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c44:	465a      	movle	r2, fp
 8008c46:	4659      	mov	r1, fp
 8008c48:	463d      	mov	r5, r7
 8008c4a:	bfd4      	ite	le
 8008c4c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008c50:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008c54:	4630      	mov	r0, r6
 8008c56:	ee10 2a10 	vmov	r2, s0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f7f7 fdfd 	bl	800085c <__aeabi_ddiv>
 8008c62:	ec41 0b10 	vmov	d0, r0, r1
 8008c66:	b003      	add	sp, #12
 8008c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c6c <__copybits>:
 8008c6c:	3901      	subs	r1, #1
 8008c6e:	b510      	push	{r4, lr}
 8008c70:	1149      	asrs	r1, r1, #5
 8008c72:	6914      	ldr	r4, [r2, #16]
 8008c74:	3101      	adds	r1, #1
 8008c76:	f102 0314 	add.w	r3, r2, #20
 8008c7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c82:	42a3      	cmp	r3, r4
 8008c84:	4602      	mov	r2, r0
 8008c86:	d303      	bcc.n	8008c90 <__copybits+0x24>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	428a      	cmp	r2, r1
 8008c8c:	d305      	bcc.n	8008c9a <__copybits+0x2e>
 8008c8e:	bd10      	pop	{r4, pc}
 8008c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c94:	f840 2b04 	str.w	r2, [r0], #4
 8008c98:	e7f3      	b.n	8008c82 <__copybits+0x16>
 8008c9a:	f842 3b04 	str.w	r3, [r2], #4
 8008c9e:	e7f4      	b.n	8008c8a <__copybits+0x1e>

08008ca0 <__any_on>:
 8008ca0:	f100 0214 	add.w	r2, r0, #20
 8008ca4:	6900      	ldr	r0, [r0, #16]
 8008ca6:	114b      	asrs	r3, r1, #5
 8008ca8:	4298      	cmp	r0, r3
 8008caa:	b510      	push	{r4, lr}
 8008cac:	db11      	blt.n	8008cd2 <__any_on+0x32>
 8008cae:	dd0a      	ble.n	8008cc6 <__any_on+0x26>
 8008cb0:	f011 011f 	ands.w	r1, r1, #31
 8008cb4:	d007      	beq.n	8008cc6 <__any_on+0x26>
 8008cb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cba:	fa24 f001 	lsr.w	r0, r4, r1
 8008cbe:	fa00 f101 	lsl.w	r1, r0, r1
 8008cc2:	428c      	cmp	r4, r1
 8008cc4:	d10b      	bne.n	8008cde <__any_on+0x3e>
 8008cc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d803      	bhi.n	8008cd6 <__any_on+0x36>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	bd10      	pop	{r4, pc}
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	e7f7      	b.n	8008cc6 <__any_on+0x26>
 8008cd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cda:	2900      	cmp	r1, #0
 8008cdc:	d0f5      	beq.n	8008cca <__any_on+0x2a>
 8008cde:	2001      	movs	r0, #1
 8008ce0:	e7f6      	b.n	8008cd0 <__any_on+0x30>

08008ce2 <_calloc_r>:
 8008ce2:	b538      	push	{r3, r4, r5, lr}
 8008ce4:	fb02 f401 	mul.w	r4, r2, r1
 8008ce8:	4621      	mov	r1, r4
 8008cea:	f000 f857 	bl	8008d9c <_malloc_r>
 8008cee:	4605      	mov	r5, r0
 8008cf0:	b118      	cbz	r0, 8008cfa <_calloc_r+0x18>
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	f7fc fd23 	bl	8005740 <memset>
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	bd38      	pop	{r3, r4, r5, pc}
	...

08008d00 <_free_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4605      	mov	r5, r0
 8008d04:	2900      	cmp	r1, #0
 8008d06:	d045      	beq.n	8008d94 <_free_r+0x94>
 8008d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d0c:	1f0c      	subs	r4, r1, #4
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	bfb8      	it	lt
 8008d12:	18e4      	addlt	r4, r4, r3
 8008d14:	f000 fa36 	bl	8009184 <__malloc_lock>
 8008d18:	4a1f      	ldr	r2, [pc, #124]	; (8008d98 <_free_r+0x98>)
 8008d1a:	6813      	ldr	r3, [r2, #0]
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	b933      	cbnz	r3, 8008d2e <_free_r+0x2e>
 8008d20:	6063      	str	r3, [r4, #4]
 8008d22:	6014      	str	r4, [r2, #0]
 8008d24:	4628      	mov	r0, r5
 8008d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d2a:	f000 ba2c 	b.w	8009186 <__malloc_unlock>
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	d90c      	bls.n	8008d4c <_free_r+0x4c>
 8008d32:	6821      	ldr	r1, [r4, #0]
 8008d34:	1862      	adds	r2, r4, r1
 8008d36:	4293      	cmp	r3, r2
 8008d38:	bf04      	itt	eq
 8008d3a:	681a      	ldreq	r2, [r3, #0]
 8008d3c:	685b      	ldreq	r3, [r3, #4]
 8008d3e:	6063      	str	r3, [r4, #4]
 8008d40:	bf04      	itt	eq
 8008d42:	1852      	addeq	r2, r2, r1
 8008d44:	6022      	streq	r2, [r4, #0]
 8008d46:	6004      	str	r4, [r0, #0]
 8008d48:	e7ec      	b.n	8008d24 <_free_r+0x24>
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	b10a      	cbz	r2, 8008d54 <_free_r+0x54>
 8008d50:	42a2      	cmp	r2, r4
 8008d52:	d9fa      	bls.n	8008d4a <_free_r+0x4a>
 8008d54:	6819      	ldr	r1, [r3, #0]
 8008d56:	1858      	adds	r0, r3, r1
 8008d58:	42a0      	cmp	r0, r4
 8008d5a:	d10b      	bne.n	8008d74 <_free_r+0x74>
 8008d5c:	6820      	ldr	r0, [r4, #0]
 8008d5e:	4401      	add	r1, r0
 8008d60:	1858      	adds	r0, r3, r1
 8008d62:	4282      	cmp	r2, r0
 8008d64:	6019      	str	r1, [r3, #0]
 8008d66:	d1dd      	bne.n	8008d24 <_free_r+0x24>
 8008d68:	6810      	ldr	r0, [r2, #0]
 8008d6a:	6852      	ldr	r2, [r2, #4]
 8008d6c:	605a      	str	r2, [r3, #4]
 8008d6e:	4401      	add	r1, r0
 8008d70:	6019      	str	r1, [r3, #0]
 8008d72:	e7d7      	b.n	8008d24 <_free_r+0x24>
 8008d74:	d902      	bls.n	8008d7c <_free_r+0x7c>
 8008d76:	230c      	movs	r3, #12
 8008d78:	602b      	str	r3, [r5, #0]
 8008d7a:	e7d3      	b.n	8008d24 <_free_r+0x24>
 8008d7c:	6820      	ldr	r0, [r4, #0]
 8008d7e:	1821      	adds	r1, r4, r0
 8008d80:	428a      	cmp	r2, r1
 8008d82:	bf04      	itt	eq
 8008d84:	6811      	ldreq	r1, [r2, #0]
 8008d86:	6852      	ldreq	r2, [r2, #4]
 8008d88:	6062      	str	r2, [r4, #4]
 8008d8a:	bf04      	itt	eq
 8008d8c:	1809      	addeq	r1, r1, r0
 8008d8e:	6021      	streq	r1, [r4, #0]
 8008d90:	605c      	str	r4, [r3, #4]
 8008d92:	e7c7      	b.n	8008d24 <_free_r+0x24>
 8008d94:	bd38      	pop	{r3, r4, r5, pc}
 8008d96:	bf00      	nop
 8008d98:	200001fc 	.word	0x200001fc

08008d9c <_malloc_r>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	1ccd      	adds	r5, r1, #3
 8008da0:	f025 0503 	bic.w	r5, r5, #3
 8008da4:	3508      	adds	r5, #8
 8008da6:	2d0c      	cmp	r5, #12
 8008da8:	bf38      	it	cc
 8008daa:	250c      	movcc	r5, #12
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	4606      	mov	r6, r0
 8008db0:	db01      	blt.n	8008db6 <_malloc_r+0x1a>
 8008db2:	42a9      	cmp	r1, r5
 8008db4:	d903      	bls.n	8008dbe <_malloc_r+0x22>
 8008db6:	230c      	movs	r3, #12
 8008db8:	6033      	str	r3, [r6, #0]
 8008dba:	2000      	movs	r0, #0
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
 8008dbe:	f000 f9e1 	bl	8009184 <__malloc_lock>
 8008dc2:	4a21      	ldr	r2, [pc, #132]	; (8008e48 <_malloc_r+0xac>)
 8008dc4:	6814      	ldr	r4, [r2, #0]
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	b991      	cbnz	r1, 8008df0 <_malloc_r+0x54>
 8008dca:	4c20      	ldr	r4, [pc, #128]	; (8008e4c <_malloc_r+0xb0>)
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	b91b      	cbnz	r3, 8008dd8 <_malloc_r+0x3c>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f000 f98f 	bl	80090f4 <_sbrk_r>
 8008dd6:	6020      	str	r0, [r4, #0]
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f000 f98a 	bl	80090f4 <_sbrk_r>
 8008de0:	1c43      	adds	r3, r0, #1
 8008de2:	d124      	bne.n	8008e2e <_malloc_r+0x92>
 8008de4:	230c      	movs	r3, #12
 8008de6:	6033      	str	r3, [r6, #0]
 8008de8:	4630      	mov	r0, r6
 8008dea:	f000 f9cc 	bl	8009186 <__malloc_unlock>
 8008dee:	e7e4      	b.n	8008dba <_malloc_r+0x1e>
 8008df0:	680b      	ldr	r3, [r1, #0]
 8008df2:	1b5b      	subs	r3, r3, r5
 8008df4:	d418      	bmi.n	8008e28 <_malloc_r+0x8c>
 8008df6:	2b0b      	cmp	r3, #11
 8008df8:	d90f      	bls.n	8008e1a <_malloc_r+0x7e>
 8008dfa:	600b      	str	r3, [r1, #0]
 8008dfc:	50cd      	str	r5, [r1, r3]
 8008dfe:	18cc      	adds	r4, r1, r3
 8008e00:	4630      	mov	r0, r6
 8008e02:	f000 f9c0 	bl	8009186 <__malloc_unlock>
 8008e06:	f104 000b 	add.w	r0, r4, #11
 8008e0a:	1d23      	adds	r3, r4, #4
 8008e0c:	f020 0007 	bic.w	r0, r0, #7
 8008e10:	1ac3      	subs	r3, r0, r3
 8008e12:	d0d3      	beq.n	8008dbc <_malloc_r+0x20>
 8008e14:	425a      	negs	r2, r3
 8008e16:	50e2      	str	r2, [r4, r3]
 8008e18:	e7d0      	b.n	8008dbc <_malloc_r+0x20>
 8008e1a:	428c      	cmp	r4, r1
 8008e1c:	684b      	ldr	r3, [r1, #4]
 8008e1e:	bf16      	itet	ne
 8008e20:	6063      	strne	r3, [r4, #4]
 8008e22:	6013      	streq	r3, [r2, #0]
 8008e24:	460c      	movne	r4, r1
 8008e26:	e7eb      	b.n	8008e00 <_malloc_r+0x64>
 8008e28:	460c      	mov	r4, r1
 8008e2a:	6849      	ldr	r1, [r1, #4]
 8008e2c:	e7cc      	b.n	8008dc8 <_malloc_r+0x2c>
 8008e2e:	1cc4      	adds	r4, r0, #3
 8008e30:	f024 0403 	bic.w	r4, r4, #3
 8008e34:	42a0      	cmp	r0, r4
 8008e36:	d005      	beq.n	8008e44 <_malloc_r+0xa8>
 8008e38:	1a21      	subs	r1, r4, r0
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f000 f95a 	bl	80090f4 <_sbrk_r>
 8008e40:	3001      	adds	r0, #1
 8008e42:	d0cf      	beq.n	8008de4 <_malloc_r+0x48>
 8008e44:	6025      	str	r5, [r4, #0]
 8008e46:	e7db      	b.n	8008e00 <_malloc_r+0x64>
 8008e48:	200001fc 	.word	0x200001fc
 8008e4c:	20000200 	.word	0x20000200

08008e50 <__ssputs_r>:
 8008e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	688e      	ldr	r6, [r1, #8]
 8008e56:	429e      	cmp	r6, r3
 8008e58:	4682      	mov	sl, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	4690      	mov	r8, r2
 8008e5e:	4699      	mov	r9, r3
 8008e60:	d837      	bhi.n	8008ed2 <__ssputs_r+0x82>
 8008e62:	898a      	ldrh	r2, [r1, #12]
 8008e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e68:	d031      	beq.n	8008ece <__ssputs_r+0x7e>
 8008e6a:	6825      	ldr	r5, [r4, #0]
 8008e6c:	6909      	ldr	r1, [r1, #16]
 8008e6e:	1a6f      	subs	r7, r5, r1
 8008e70:	6965      	ldr	r5, [r4, #20]
 8008e72:	2302      	movs	r3, #2
 8008e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e78:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e7c:	f109 0301 	add.w	r3, r9, #1
 8008e80:	443b      	add	r3, r7
 8008e82:	429d      	cmp	r5, r3
 8008e84:	bf38      	it	cc
 8008e86:	461d      	movcc	r5, r3
 8008e88:	0553      	lsls	r3, r2, #21
 8008e8a:	d530      	bpl.n	8008eee <__ssputs_r+0x9e>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7ff ff85 	bl	8008d9c <_malloc_r>
 8008e92:	4606      	mov	r6, r0
 8008e94:	b950      	cbnz	r0, 8008eac <__ssputs_r+0x5c>
 8008e96:	230c      	movs	r3, #12
 8008e98:	f8ca 3000 	str.w	r3, [sl]
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eac:	463a      	mov	r2, r7
 8008eae:	6921      	ldr	r1, [r4, #16]
 8008eb0:	f7ff fb0e 	bl	80084d0 <memcpy>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	6126      	str	r6, [r4, #16]
 8008ec2:	6165      	str	r5, [r4, #20]
 8008ec4:	443e      	add	r6, r7
 8008ec6:	1bed      	subs	r5, r5, r7
 8008ec8:	6026      	str	r6, [r4, #0]
 8008eca:	60a5      	str	r5, [r4, #8]
 8008ecc:	464e      	mov	r6, r9
 8008ece:	454e      	cmp	r6, r9
 8008ed0:	d900      	bls.n	8008ed4 <__ssputs_r+0x84>
 8008ed2:	464e      	mov	r6, r9
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	4641      	mov	r1, r8
 8008ed8:	6820      	ldr	r0, [r4, #0]
 8008eda:	f000 f93a 	bl	8009152 <memmove>
 8008ede:	68a3      	ldr	r3, [r4, #8]
 8008ee0:	1b9b      	subs	r3, r3, r6
 8008ee2:	60a3      	str	r3, [r4, #8]
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	441e      	add	r6, r3
 8008ee8:	6026      	str	r6, [r4, #0]
 8008eea:	2000      	movs	r0, #0
 8008eec:	e7dc      	b.n	8008ea8 <__ssputs_r+0x58>
 8008eee:	462a      	mov	r2, r5
 8008ef0:	f000 f94a 	bl	8009188 <_realloc_r>
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d1e2      	bne.n	8008ec0 <__ssputs_r+0x70>
 8008efa:	6921      	ldr	r1, [r4, #16]
 8008efc:	4650      	mov	r0, sl
 8008efe:	f7ff feff 	bl	8008d00 <_free_r>
 8008f02:	e7c8      	b.n	8008e96 <__ssputs_r+0x46>

08008f04 <_svfiprintf_r>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	461d      	mov	r5, r3
 8008f0a:	898b      	ldrh	r3, [r1, #12]
 8008f0c:	061f      	lsls	r7, r3, #24
 8008f0e:	b09d      	sub	sp, #116	; 0x74
 8008f10:	4680      	mov	r8, r0
 8008f12:	460c      	mov	r4, r1
 8008f14:	4616      	mov	r6, r2
 8008f16:	d50f      	bpl.n	8008f38 <_svfiprintf_r+0x34>
 8008f18:	690b      	ldr	r3, [r1, #16]
 8008f1a:	b96b      	cbnz	r3, 8008f38 <_svfiprintf_r+0x34>
 8008f1c:	2140      	movs	r1, #64	; 0x40
 8008f1e:	f7ff ff3d 	bl	8008d9c <_malloc_r>
 8008f22:	6020      	str	r0, [r4, #0]
 8008f24:	6120      	str	r0, [r4, #16]
 8008f26:	b928      	cbnz	r0, 8008f34 <_svfiprintf_r+0x30>
 8008f28:	230c      	movs	r3, #12
 8008f2a:	f8c8 3000 	str.w	r3, [r8]
 8008f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f32:	e0c8      	b.n	80090c6 <_svfiprintf_r+0x1c2>
 8008f34:	2340      	movs	r3, #64	; 0x40
 8008f36:	6163      	str	r3, [r4, #20]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3c:	2320      	movs	r3, #32
 8008f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f42:	2330      	movs	r3, #48	; 0x30
 8008f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f48:	9503      	str	r5, [sp, #12]
 8008f4a:	f04f 0b01 	mov.w	fp, #1
 8008f4e:	4637      	mov	r7, r6
 8008f50:	463d      	mov	r5, r7
 8008f52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f56:	b10b      	cbz	r3, 8008f5c <_svfiprintf_r+0x58>
 8008f58:	2b25      	cmp	r3, #37	; 0x25
 8008f5a:	d13e      	bne.n	8008fda <_svfiprintf_r+0xd6>
 8008f5c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008f60:	d00b      	beq.n	8008f7a <_svfiprintf_r+0x76>
 8008f62:	4653      	mov	r3, sl
 8008f64:	4632      	mov	r2, r6
 8008f66:	4621      	mov	r1, r4
 8008f68:	4640      	mov	r0, r8
 8008f6a:	f7ff ff71 	bl	8008e50 <__ssputs_r>
 8008f6e:	3001      	adds	r0, #1
 8008f70:	f000 80a4 	beq.w	80090bc <_svfiprintf_r+0x1b8>
 8008f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f76:	4453      	add	r3, sl
 8008f78:	9309      	str	r3, [sp, #36]	; 0x24
 8008f7a:	783b      	ldrb	r3, [r7, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 809d 	beq.w	80090bc <_svfiprintf_r+0x1b8>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f04f 32ff 	mov.w	r2, #4294967295
 8008f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	9307      	str	r3, [sp, #28]
 8008f90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f94:	931a      	str	r3, [sp, #104]	; 0x68
 8008f96:	462f      	mov	r7, r5
 8008f98:	2205      	movs	r2, #5
 8008f9a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008f9e:	4850      	ldr	r0, [pc, #320]	; (80090e0 <_svfiprintf_r+0x1dc>)
 8008fa0:	f7f7 f926 	bl	80001f0 <memchr>
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	b9d0      	cbnz	r0, 8008fde <_svfiprintf_r+0xda>
 8008fa8:	06d9      	lsls	r1, r3, #27
 8008faa:	bf44      	itt	mi
 8008fac:	2220      	movmi	r2, #32
 8008fae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fb2:	071a      	lsls	r2, r3, #28
 8008fb4:	bf44      	itt	mi
 8008fb6:	222b      	movmi	r2, #43	; 0x2b
 8008fb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fbc:	782a      	ldrb	r2, [r5, #0]
 8008fbe:	2a2a      	cmp	r2, #42	; 0x2a
 8008fc0:	d015      	beq.n	8008fee <_svfiprintf_r+0xea>
 8008fc2:	9a07      	ldr	r2, [sp, #28]
 8008fc4:	462f      	mov	r7, r5
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	250a      	movs	r5, #10
 8008fca:	4639      	mov	r1, r7
 8008fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fd0:	3b30      	subs	r3, #48	; 0x30
 8008fd2:	2b09      	cmp	r3, #9
 8008fd4:	d94d      	bls.n	8009072 <_svfiprintf_r+0x16e>
 8008fd6:	b1b8      	cbz	r0, 8009008 <_svfiprintf_r+0x104>
 8008fd8:	e00f      	b.n	8008ffa <_svfiprintf_r+0xf6>
 8008fda:	462f      	mov	r7, r5
 8008fdc:	e7b8      	b.n	8008f50 <_svfiprintf_r+0x4c>
 8008fde:	4a40      	ldr	r2, [pc, #256]	; (80090e0 <_svfiprintf_r+0x1dc>)
 8008fe0:	1a80      	subs	r0, r0, r2
 8008fe2:	fa0b f000 	lsl.w	r0, fp, r0
 8008fe6:	4318      	orrs	r0, r3
 8008fe8:	9004      	str	r0, [sp, #16]
 8008fea:	463d      	mov	r5, r7
 8008fec:	e7d3      	b.n	8008f96 <_svfiprintf_r+0x92>
 8008fee:	9a03      	ldr	r2, [sp, #12]
 8008ff0:	1d11      	adds	r1, r2, #4
 8008ff2:	6812      	ldr	r2, [r2, #0]
 8008ff4:	9103      	str	r1, [sp, #12]
 8008ff6:	2a00      	cmp	r2, #0
 8008ff8:	db01      	blt.n	8008ffe <_svfiprintf_r+0xfa>
 8008ffa:	9207      	str	r2, [sp, #28]
 8008ffc:	e004      	b.n	8009008 <_svfiprintf_r+0x104>
 8008ffe:	4252      	negs	r2, r2
 8009000:	f043 0302 	orr.w	r3, r3, #2
 8009004:	9207      	str	r2, [sp, #28]
 8009006:	9304      	str	r3, [sp, #16]
 8009008:	783b      	ldrb	r3, [r7, #0]
 800900a:	2b2e      	cmp	r3, #46	; 0x2e
 800900c:	d10c      	bne.n	8009028 <_svfiprintf_r+0x124>
 800900e:	787b      	ldrb	r3, [r7, #1]
 8009010:	2b2a      	cmp	r3, #42	; 0x2a
 8009012:	d133      	bne.n	800907c <_svfiprintf_r+0x178>
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	1d1a      	adds	r2, r3, #4
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	9203      	str	r2, [sp, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	bfb8      	it	lt
 8009020:	f04f 33ff 	movlt.w	r3, #4294967295
 8009024:	3702      	adds	r7, #2
 8009026:	9305      	str	r3, [sp, #20]
 8009028:	4d2e      	ldr	r5, [pc, #184]	; (80090e4 <_svfiprintf_r+0x1e0>)
 800902a:	7839      	ldrb	r1, [r7, #0]
 800902c:	2203      	movs	r2, #3
 800902e:	4628      	mov	r0, r5
 8009030:	f7f7 f8de 	bl	80001f0 <memchr>
 8009034:	b138      	cbz	r0, 8009046 <_svfiprintf_r+0x142>
 8009036:	2340      	movs	r3, #64	; 0x40
 8009038:	1b40      	subs	r0, r0, r5
 800903a:	fa03 f000 	lsl.w	r0, r3, r0
 800903e:	9b04      	ldr	r3, [sp, #16]
 8009040:	4303      	orrs	r3, r0
 8009042:	3701      	adds	r7, #1
 8009044:	9304      	str	r3, [sp, #16]
 8009046:	7839      	ldrb	r1, [r7, #0]
 8009048:	4827      	ldr	r0, [pc, #156]	; (80090e8 <_svfiprintf_r+0x1e4>)
 800904a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800904e:	2206      	movs	r2, #6
 8009050:	1c7e      	adds	r6, r7, #1
 8009052:	f7f7 f8cd 	bl	80001f0 <memchr>
 8009056:	2800      	cmp	r0, #0
 8009058:	d038      	beq.n	80090cc <_svfiprintf_r+0x1c8>
 800905a:	4b24      	ldr	r3, [pc, #144]	; (80090ec <_svfiprintf_r+0x1e8>)
 800905c:	bb13      	cbnz	r3, 80090a4 <_svfiprintf_r+0x1a0>
 800905e:	9b03      	ldr	r3, [sp, #12]
 8009060:	3307      	adds	r3, #7
 8009062:	f023 0307 	bic.w	r3, r3, #7
 8009066:	3308      	adds	r3, #8
 8009068:	9303      	str	r3, [sp, #12]
 800906a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906c:	444b      	add	r3, r9
 800906e:	9309      	str	r3, [sp, #36]	; 0x24
 8009070:	e76d      	b.n	8008f4e <_svfiprintf_r+0x4a>
 8009072:	fb05 3202 	mla	r2, r5, r2, r3
 8009076:	2001      	movs	r0, #1
 8009078:	460f      	mov	r7, r1
 800907a:	e7a6      	b.n	8008fca <_svfiprintf_r+0xc6>
 800907c:	2300      	movs	r3, #0
 800907e:	3701      	adds	r7, #1
 8009080:	9305      	str	r3, [sp, #20]
 8009082:	4619      	mov	r1, r3
 8009084:	250a      	movs	r5, #10
 8009086:	4638      	mov	r0, r7
 8009088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800908c:	3a30      	subs	r2, #48	; 0x30
 800908e:	2a09      	cmp	r2, #9
 8009090:	d903      	bls.n	800909a <_svfiprintf_r+0x196>
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0c8      	beq.n	8009028 <_svfiprintf_r+0x124>
 8009096:	9105      	str	r1, [sp, #20]
 8009098:	e7c6      	b.n	8009028 <_svfiprintf_r+0x124>
 800909a:	fb05 2101 	mla	r1, r5, r1, r2
 800909e:	2301      	movs	r3, #1
 80090a0:	4607      	mov	r7, r0
 80090a2:	e7f0      	b.n	8009086 <_svfiprintf_r+0x182>
 80090a4:	ab03      	add	r3, sp, #12
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	4622      	mov	r2, r4
 80090aa:	4b11      	ldr	r3, [pc, #68]	; (80090f0 <_svfiprintf_r+0x1ec>)
 80090ac:	a904      	add	r1, sp, #16
 80090ae:	4640      	mov	r0, r8
 80090b0:	f7fc fbe2 	bl	8005878 <_printf_float>
 80090b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80090b8:	4681      	mov	r9, r0
 80090ba:	d1d6      	bne.n	800906a <_svfiprintf_r+0x166>
 80090bc:	89a3      	ldrh	r3, [r4, #12]
 80090be:	065b      	lsls	r3, r3, #25
 80090c0:	f53f af35 	bmi.w	8008f2e <_svfiprintf_r+0x2a>
 80090c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090c6:	b01d      	add	sp, #116	; 0x74
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	ab03      	add	r3, sp, #12
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	4622      	mov	r2, r4
 80090d2:	4b07      	ldr	r3, [pc, #28]	; (80090f0 <_svfiprintf_r+0x1ec>)
 80090d4:	a904      	add	r1, sp, #16
 80090d6:	4640      	mov	r0, r8
 80090d8:	f7fc fe84 	bl	8005de4 <_printf_i>
 80090dc:	e7ea      	b.n	80090b4 <_svfiprintf_r+0x1b0>
 80090de:	bf00      	nop
 80090e0:	080093cc 	.word	0x080093cc
 80090e4:	080093d2 	.word	0x080093d2
 80090e8:	080093d6 	.word	0x080093d6
 80090ec:	08005879 	.word	0x08005879
 80090f0:	08008e51 	.word	0x08008e51

080090f4 <_sbrk_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4c06      	ldr	r4, [pc, #24]	; (8009110 <_sbrk_r+0x1c>)
 80090f8:	2300      	movs	r3, #0
 80090fa:	4605      	mov	r5, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	f7fb ffdc 	bl	80050bc <_sbrk>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d102      	bne.n	800910e <_sbrk_r+0x1a>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	b103      	cbz	r3, 800910e <_sbrk_r+0x1a>
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	20000334 	.word	0x20000334

08009114 <strncmp>:
 8009114:	b510      	push	{r4, lr}
 8009116:	b16a      	cbz	r2, 8009134 <strncmp+0x20>
 8009118:	3901      	subs	r1, #1
 800911a:	1884      	adds	r4, r0, r2
 800911c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009120:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009124:	4293      	cmp	r3, r2
 8009126:	d103      	bne.n	8009130 <strncmp+0x1c>
 8009128:	42a0      	cmp	r0, r4
 800912a:	d001      	beq.n	8009130 <strncmp+0x1c>
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1f5      	bne.n	800911c <strncmp+0x8>
 8009130:	1a98      	subs	r0, r3, r2
 8009132:	bd10      	pop	{r4, pc}
 8009134:	4610      	mov	r0, r2
 8009136:	e7fc      	b.n	8009132 <strncmp+0x1e>

08009138 <__ascii_wctomb>:
 8009138:	b149      	cbz	r1, 800914e <__ascii_wctomb+0x16>
 800913a:	2aff      	cmp	r2, #255	; 0xff
 800913c:	bf85      	ittet	hi
 800913e:	238a      	movhi	r3, #138	; 0x8a
 8009140:	6003      	strhi	r3, [r0, #0]
 8009142:	700a      	strbls	r2, [r1, #0]
 8009144:	f04f 30ff 	movhi.w	r0, #4294967295
 8009148:	bf98      	it	ls
 800914a:	2001      	movls	r0, #1
 800914c:	4770      	bx	lr
 800914e:	4608      	mov	r0, r1
 8009150:	4770      	bx	lr

08009152 <memmove>:
 8009152:	4288      	cmp	r0, r1
 8009154:	b510      	push	{r4, lr}
 8009156:	eb01 0302 	add.w	r3, r1, r2
 800915a:	d807      	bhi.n	800916c <memmove+0x1a>
 800915c:	1e42      	subs	r2, r0, #1
 800915e:	4299      	cmp	r1, r3
 8009160:	d00a      	beq.n	8009178 <memmove+0x26>
 8009162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009166:	f802 4f01 	strb.w	r4, [r2, #1]!
 800916a:	e7f8      	b.n	800915e <memmove+0xc>
 800916c:	4283      	cmp	r3, r0
 800916e:	d9f5      	bls.n	800915c <memmove+0xa>
 8009170:	1881      	adds	r1, r0, r2
 8009172:	1ad2      	subs	r2, r2, r3
 8009174:	42d3      	cmn	r3, r2
 8009176:	d100      	bne.n	800917a <memmove+0x28>
 8009178:	bd10      	pop	{r4, pc}
 800917a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800917e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009182:	e7f7      	b.n	8009174 <memmove+0x22>

08009184 <__malloc_lock>:
 8009184:	4770      	bx	lr

08009186 <__malloc_unlock>:
 8009186:	4770      	bx	lr

08009188 <_realloc_r>:
 8009188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918a:	4607      	mov	r7, r0
 800918c:	4614      	mov	r4, r2
 800918e:	460e      	mov	r6, r1
 8009190:	b921      	cbnz	r1, 800919c <_realloc_r+0x14>
 8009192:	4611      	mov	r1, r2
 8009194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009198:	f7ff be00 	b.w	8008d9c <_malloc_r>
 800919c:	b922      	cbnz	r2, 80091a8 <_realloc_r+0x20>
 800919e:	f7ff fdaf 	bl	8008d00 <_free_r>
 80091a2:	4625      	mov	r5, r4
 80091a4:	4628      	mov	r0, r5
 80091a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a8:	f000 f814 	bl	80091d4 <_malloc_usable_size_r>
 80091ac:	42a0      	cmp	r0, r4
 80091ae:	d20f      	bcs.n	80091d0 <_realloc_r+0x48>
 80091b0:	4621      	mov	r1, r4
 80091b2:	4638      	mov	r0, r7
 80091b4:	f7ff fdf2 	bl	8008d9c <_malloc_r>
 80091b8:	4605      	mov	r5, r0
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d0f2      	beq.n	80091a4 <_realloc_r+0x1c>
 80091be:	4631      	mov	r1, r6
 80091c0:	4622      	mov	r2, r4
 80091c2:	f7ff f985 	bl	80084d0 <memcpy>
 80091c6:	4631      	mov	r1, r6
 80091c8:	4638      	mov	r0, r7
 80091ca:	f7ff fd99 	bl	8008d00 <_free_r>
 80091ce:	e7e9      	b.n	80091a4 <_realloc_r+0x1c>
 80091d0:	4635      	mov	r5, r6
 80091d2:	e7e7      	b.n	80091a4 <_realloc_r+0x1c>

080091d4 <_malloc_usable_size_r>:
 80091d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d8:	1f18      	subs	r0, r3, #4
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bfbc      	itt	lt
 80091de:	580b      	ldrlt	r3, [r1, r0]
 80091e0:	18c0      	addlt	r0, r0, r3
 80091e2:	4770      	bx	lr

080091e4 <_init>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	bf00      	nop
 80091e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ea:	bc08      	pop	{r3}
 80091ec:	469e      	mov	lr, r3
 80091ee:	4770      	bx	lr

080091f0 <_fini>:
 80091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f2:	bf00      	nop
 80091f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f6:	bc08      	pop	{r3}
 80091f8:	469e      	mov	lr, r3
 80091fa:	4770      	bx	lr
