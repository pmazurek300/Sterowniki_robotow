
testowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08008390  08008390  00018390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008660  08008660  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008668  08008668  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  200001dc  0800884c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  0800884c  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7a1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ddd  00000000  00000000  0002c9ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  0002e790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  0002f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b72  00000000  00000000  0002fea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009b2c  00000000  00000000  00046a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cfc6  00000000  00000000  00050546  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd50c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ef8  00000000  00000000  000dd588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008374 	.word	0x08008374

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008374 	.word	0x08008374

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f94d 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f003 f8fc 	bl	80041c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f965 	bl	80012ca <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f92d 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	20000204 	.word	0x20000204

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000204 	.word	0x20000204

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000004 	.word	0x20000004

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff3e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff8e 	bl	80011b4 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5d 	bl	8001160 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff31 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa2 	bl	800121c <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d004      	beq.n	8001300 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e00c      	b.n	800131a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2205      	movs	r2, #5
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	e159      	b.n	80015f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	f040 8148 	bne.w	80015f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d00b      	beq.n	8001382 <HAL_GPIO_Init+0x5a>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001376:	2b11      	cmp	r3, #17
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b12      	cmp	r3, #18
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0xfc>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d123      	bne.n	800146c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a2 	beq.w	80015f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b56      	ldr	r3, [pc, #344]	; (800160c <HAL_GPIO_Init+0x2e4>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a55      	ldr	r2, [pc, #340]	; (800160c <HAL_GPIO_Init+0x2e4>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_GPIO_Init+0x2e4>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ca:	4a51      	ldr	r2, [pc, #324]	; (8001610 <HAL_GPIO_Init+0x2e8>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a48      	ldr	r2, [pc, #288]	; (8001614 <HAL_GPIO_Init+0x2ec>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d019      	beq.n	800152a <HAL_GPIO_Init+0x202>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a47      	ldr	r2, [pc, #284]	; (8001618 <HAL_GPIO_Init+0x2f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x1fe>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a46      	ldr	r2, [pc, #280]	; (800161c <HAL_GPIO_Init+0x2f4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x1fa>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a45      	ldr	r2, [pc, #276]	; (8001620 <HAL_GPIO_Init+0x2f8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x1f6>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a44      	ldr	r2, [pc, #272]	; (8001624 <HAL_GPIO_Init+0x2fc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x1f2>
 8001516:	2304      	movs	r3, #4
 8001518:	e008      	b.n	800152c <HAL_GPIO_Init+0x204>
 800151a:	2307      	movs	r3, #7
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x204>
 800151e:	2303      	movs	r3, #3
 8001520:	e004      	b.n	800152c <HAL_GPIO_Init+0x204>
 8001522:	2302      	movs	r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x204>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x204>
 800152a:	2300      	movs	r3, #0
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4093      	lsls	r3, r2
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153c:	4934      	ldr	r1, [pc, #208]	; (8001610 <HAL_GPIO_Init+0x2e8>)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_GPIO_Init+0x300>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156e:	4a2e      	ldr	r2, [pc, #184]	; (8001628 <HAL_GPIO_Init+0x300>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001574:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <HAL_GPIO_Init+0x300>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001598:	4a23      	ldr	r2, [pc, #140]	; (8001628 <HAL_GPIO_Init+0x300>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_GPIO_Init+0x300>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4013      	ands	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015c2:	4a19      	ldr	r2, [pc, #100]	; (8001628 <HAL_GPIO_Init+0x300>)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_GPIO_Init+0x300>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_GPIO_Init+0x300>)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3301      	adds	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	2b0f      	cmp	r3, #15
 80015fc:	f67f aea2 	bls.w	8001344 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001600:	bf00      	nop
 8001602:	3724      	adds	r7, #36	; 0x24
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40020800 	.word	0x40020800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001648:	e003      	b.n	8001652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e25b      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d075      	beq.n	800176a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167e:	4ba3      	ldr	r3, [pc, #652]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b04      	cmp	r3, #4
 8001688:	d00c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168a:	4ba0      	ldr	r3, [pc, #640]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001692:	2b08      	cmp	r3, #8
 8001694:	d112      	bne.n	80016bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001696:	4b9d      	ldr	r3, [pc, #628]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a2:	d10b      	bne.n	80016bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	4b99      	ldr	r3, [pc, #612]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d05b      	beq.n	8001768 <HAL_RCC_OscConfig+0x108>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d157      	bne.n	8001768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e236      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d106      	bne.n	80016d4 <HAL_RCC_OscConfig+0x74>
 80016c6:	4b91      	ldr	r3, [pc, #580]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a90      	ldr	r2, [pc, #576]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e01d      	b.n	8001710 <HAL_RCC_OscConfig+0xb0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x98>
 80016de:	4b8b      	ldr	r3, [pc, #556]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a8a      	ldr	r2, [pc, #552]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b88      	ldr	r3, [pc, #544]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a87      	ldr	r2, [pc, #540]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0xb0>
 80016f8:	4b84      	ldr	r3, [pc, #528]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a83      	ldr	r2, [pc, #524]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b81      	ldr	r3, [pc, #516]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a80      	ldr	r2, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fca4 	bl	8001064 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fca0 	bl	8001064 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e1fb      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0xc0>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fc90 	bl	8001064 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fc8c 	bl	8001064 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1e7      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	4b6c      	ldr	r3, [pc, #432]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0xe8>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d063      	beq.n	800183e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001776:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00b      	beq.n	800179a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001782:	4b62      	ldr	r3, [pc, #392]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178a:	2b08      	cmp	r3, #8
 800178c:	d11c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178e:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d116      	bne.n	80017c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_RCC_OscConfig+0x152>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e1bb      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4952      	ldr	r1, [pc, #328]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	e03a      	b.n	800183e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d0:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <HAL_RCC_OscConfig+0x2b0>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fc45 	bl	8001064 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fc41 	bl	8001064 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e19c      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4940      	ldr	r1, [pc, #256]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
 8001810:	e015      	b.n	800183e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_OscConfig+0x2b0>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fc24 	bl	8001064 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff fc20 	bl	8001064 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e17b      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d030      	beq.n	80018ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d016      	beq.n	8001880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x2b4>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fc04 	bl	8001064 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001860:	f7ff fc00 	bl	8001064 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e15b      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x200>
 800187e:	e015      	b.n	80018ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_OscConfig+0x2b4>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001886:	f7ff fbed 	bl	8001064 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff fbe9 	bl	8001064 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e144      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80a0 	beq.w	80019fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x2b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d121      	bne.n	800193a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_RCC_OscConfig+0x2b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_RCC_OscConfig+0x2b8>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff fbaf 	bl	8001064 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e011      	b.n	800192e <HAL_RCC_OscConfig+0x2ce>
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	42470000 	.word	0x42470000
 8001914:	42470e80 	.word	0x42470e80
 8001918:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191c:	f7ff fba2 	bl	8001064 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0fd      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <HAL_RCC_OscConfig+0x4d4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d106      	bne.n	8001950 <HAL_RCC_OscConfig+0x2f0>
 8001942:	4b7d      	ldr	r3, [pc, #500]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a7c      	ldr	r2, [pc, #496]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	e01c      	b.n	800198a <HAL_RCC_OscConfig+0x32a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x312>
 8001958:	4b77      	ldr	r3, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a76      	ldr	r2, [pc, #472]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
 8001964:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	4a73      	ldr	r2, [pc, #460]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6713      	str	r3, [r2, #112]	; 0x70
 8001970:	e00b      	b.n	800198a <HAL_RCC_OscConfig+0x32a>
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a70      	ldr	r2, [pc, #448]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
 800197e:	4b6e      	ldr	r3, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a6d      	ldr	r2, [pc, #436]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d015      	beq.n	80019be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff fb67 	bl	8001064 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff fb63 	bl	8001064 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0bc      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ee      	beq.n	800199a <HAL_RCC_OscConfig+0x33a>
 80019bc:	e014      	b.n	80019e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff fb51 	bl	8001064 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff fb4d 	bl	8001064 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0a6      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	4b56      	ldr	r3, [pc, #344]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ee:	4b52      	ldr	r3, [pc, #328]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a51      	ldr	r2, [pc, #324]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 80019f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8092 	beq.w	8001b28 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d05c      	beq.n	8001aca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d141      	bne.n	8001a9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a18:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <HAL_RCC_OscConfig+0x4dc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fb21 	bl	8001064 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff fb1d 	bl	8001064 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e078      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a38:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69da      	ldr	r2, [r3, #28]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	019b      	lsls	r3, r3, #6
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	085b      	lsrs	r3, r3, #1
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	4933      	ldr	r1, [pc, #204]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6e:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_RCC_OscConfig+0x4dc>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff faf6 	bl	8001064 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff faf2 	bl	8001064 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e04d      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x41c>
 8001a9a:	e045      	b.n	8001b28 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_OscConfig+0x4dc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fadf 	bl	8001064 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fadb 	bl	8001064 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e036      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x44a>
 8001ac8:	e02e      	b.n	8001b28 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e029      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_RCC_OscConfig+0x4d8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d11c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d115      	bne.n	8001b24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001afe:	4013      	ands	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d10d      	bne.n	8001b24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40007000 	.word	0x40007000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	42470060 	.word	0x42470060

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0cc      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d90c      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0b8      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b94:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	494d      	ldr	r1, [pc, #308]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d044      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d119      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e07f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e06f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e067      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 0203 	bic.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4934      	ldr	r1, [pc, #208]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c30:	f7ff fa18 	bl	8001064 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff fa14 	bl	8001064 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e04f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 020c 	and.w	r2, r3, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1eb      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d20c      	bcs.n	8001c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e032      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4916      	ldr	r1, [pc, #88]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	490e      	ldr	r1, [pc, #56]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc6:	f000 f821 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cca:	4601      	mov	r1, r0
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	5cd3      	ldrb	r3, [r2, r3]
 8001cda:	fa21 f303 	lsr.w	r3, r1, r3
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f978 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	08008390 	.word	0x08008390
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20000000 	.word	0x20000000

08001d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d22:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d007      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x32>
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d008      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x38>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 80b4 	bne.w	8001ea0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d38:	4b5e      	ldr	r3, [pc, #376]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d3a:	60bb      	str	r3, [r7, #8]
       break;
 8001d3c:	e0b3      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d3e:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d40:	60bb      	str	r3, [r7, #8]
      break;
 8001d42:	e0b0      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d44:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4e:	4b58      	ldr	r3, [pc, #352]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d04a      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5a:	4b55      	ldr	r3, [pc, #340]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	099b      	lsrs	r3, r3, #6
 8001d60:	f04f 0400 	mov.w	r4, #0
 8001d64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	ea03 0501 	and.w	r5, r3, r1
 8001d70:	ea04 0602 	and.w	r6, r4, r2
 8001d74:	4629      	mov	r1, r5
 8001d76:	4632      	mov	r2, r6
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	f04f 0400 	mov.w	r4, #0
 8001d80:	0154      	lsls	r4, r2, #5
 8001d82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d86:	014b      	lsls	r3, r1, #5
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4622      	mov	r2, r4
 8001d8c:	1b49      	subs	r1, r1, r5
 8001d8e:	eb62 0206 	sbc.w	r2, r2, r6
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	f04f 0400 	mov.w	r4, #0
 8001d9a:	0194      	lsls	r4, r2, #6
 8001d9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001da0:	018b      	lsls	r3, r1, #6
 8001da2:	1a5b      	subs	r3, r3, r1
 8001da4:	eb64 0402 	sbc.w	r4, r4, r2
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	00e2      	lsls	r2, r4, #3
 8001db2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001db6:	00d9      	lsls	r1, r3, #3
 8001db8:	460b      	mov	r3, r1
 8001dba:	4614      	mov	r4, r2
 8001dbc:	195b      	adds	r3, r3, r5
 8001dbe:	eb44 0406 	adc.w	r4, r4, r6
 8001dc2:	f04f 0100 	mov.w	r1, #0
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	0262      	lsls	r2, r4, #9
 8001dcc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001dd0:	0259      	lsls	r1, r3, #9
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4621      	mov	r1, r4
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f04f 0400 	mov.w	r4, #0
 8001de0:	461a      	mov	r2, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	f7fe ff58 	bl	8000c98 <__aeabi_uldivmod>
 8001de8:	4603      	mov	r3, r0
 8001dea:	460c      	mov	r4, r1
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e049      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	f04f 0400 	mov.w	r4, #0
 8001dfa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	ea03 0501 	and.w	r5, r3, r1
 8001e06:	ea04 0602 	and.w	r6, r4, r2
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	4632      	mov	r2, r6
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	f04f 0400 	mov.w	r4, #0
 8001e16:	0154      	lsls	r4, r2, #5
 8001e18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e1c:	014b      	lsls	r3, r1, #5
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4622      	mov	r2, r4
 8001e22:	1b49      	subs	r1, r1, r5
 8001e24:	eb62 0206 	sbc.w	r2, r2, r6
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	f04f 0400 	mov.w	r4, #0
 8001e30:	0194      	lsls	r4, r2, #6
 8001e32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e36:	018b      	lsls	r3, r1, #6
 8001e38:	1a5b      	subs	r3, r3, r1
 8001e3a:	eb64 0402 	sbc.w	r4, r4, r2
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	00e2      	lsls	r2, r4, #3
 8001e48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e4c:	00d9      	lsls	r1, r3, #3
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4614      	mov	r4, r2
 8001e52:	195b      	adds	r3, r3, r5
 8001e54:	eb44 0406 	adc.w	r4, r4, r6
 8001e58:	f04f 0100 	mov.w	r1, #0
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	02a2      	lsls	r2, r4, #10
 8001e62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e66:	0299      	lsls	r1, r3, #10
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4614      	mov	r4, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4621      	mov	r1, r4
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f04f 0400 	mov.w	r4, #0
 8001e76:	461a      	mov	r2, r3
 8001e78:	4623      	mov	r3, r4
 8001e7a:	f7fe ff0d 	bl	8000c98 <__aeabi_uldivmod>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460c      	mov	r4, r1
 8001e82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	60bb      	str	r3, [r7, #8]
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ea2:	60bb      	str	r3, [r7, #8]
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4601      	mov	r1, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4a03      	ldr	r2, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	080083a0 	.word	0x080083a0

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f00:	f7ff ffdc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f04:	4601      	mov	r1, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	080083a0 	.word	0x080083a0

08001f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e01d      	b.n	8001f72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f002 fb1e 	bl	800458c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f000 fc1e 	bl	80027a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2202      	movs	r2, #2
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b06      	cmp	r3, #6
 8001f9a:	d007      	beq.n	8001fac <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e01d      	b.n	8002010 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f815 	bl	8002018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f000 fbcf 	bl	80027a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2201      	movs	r2, #1
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f000 ff74 	bl	8002f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_TIM_PWM_Start+0x60>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d107      	bne.n	800205e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b06      	cmp	r3, #6
 800206e:	d007      	beq.n	8002080 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40010000 	.word	0x40010000

08002090 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e01d      	b.n	80020de <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f815 	bl	80020e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f000 fb68 	bl	80027a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b02      	cmp	r3, #2
 800210e:	d122      	bne.n	8002156 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d11b      	bne.n	8002156 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f06f 0202 	mvn.w	r2, #2
 8002126:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fb12 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 8002142:	e005      	b.n	8002150 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fb04 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fb15 	bl	800277a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b04      	cmp	r3, #4
 8002162:	d122      	bne.n	80021aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b04      	cmp	r3, #4
 8002170:	d11b      	bne.n	80021aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f06f 0204 	mvn.w	r2, #4
 800217a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fae8 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 8002196:	e005      	b.n	80021a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fada 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 faeb 	bl	800277a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d122      	bne.n	80021fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d11b      	bne.n	80021fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0208 	mvn.w	r2, #8
 80021ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2204      	movs	r2, #4
 80021d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fabe 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 80021ea:	e005      	b.n	80021f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fab0 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fac1 	bl	800277a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b10      	cmp	r3, #16
 800220a:	d122      	bne.n	8002252 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b10      	cmp	r3, #16
 8002218:	d11b      	bne.n	8002252 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f06f 0210 	mvn.w	r2, #16
 8002222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2208      	movs	r2, #8
 8002228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fa94 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 800223e:	e005      	b.n	800224c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fa86 	bl	8002752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fa97 	bl	800277a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b01      	cmp	r3, #1
 800225e:	d10e      	bne.n	800227e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d107      	bne.n	800227e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f06f 0201 	mvn.w	r2, #1
 8002276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fa60 	bl	800273e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	2b80      	cmp	r3, #128	; 0x80
 800228a:	d10e      	bne.n	80022aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002296:	2b80      	cmp	r3, #128	; 0x80
 8002298:	d107      	bne.n	80022aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fedf 	bl	8003068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d10e      	bne.n	80022d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d107      	bne.n	80022d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fa5c 	bl	800278e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d10e      	bne.n	8002302 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d107      	bne.n	8002302 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0220 	mvn.w	r2, #32
 80022fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fea9 	bl	8003054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002320:	2302      	movs	r3, #2
 8002322:	e08a      	b.n	800243a <HAL_TIM_IC_ConfigChannel+0x130>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11b      	bne.n	8002372 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f000 fc37 	bl	8002bbc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 020c 	bic.w	r2, r2, #12
 800235c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6999      	ldr	r1, [r3, #24]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	619a      	str	r2, [r3, #24]
 8002370:	e05a      	b.n	8002428 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d11c      	bne.n	80023b2 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f000 fcaf 	bl	8002cea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699a      	ldr	r2, [r3, #24]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800239a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6999      	ldr	r1, [r3, #24]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	021a      	lsls	r2, r3, #8
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	619a      	str	r2, [r3, #24]
 80023b0:	e03a      	b.n	8002428 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d11b      	bne.n	80023f0 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f000 fcfc 	bl	8002dc4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 020c 	bic.w	r2, r2, #12
 80023da:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69d9      	ldr	r1, [r3, #28]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	61da      	str	r2, [r3, #28]
 80023ee:	e01b      	b.n	8002428 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f000 fd1c 	bl	8002e3c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002412:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69d9      	ldr	r1, [r3, #28]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	021a      	lsls	r2, r3, #8
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800245a:	2302      	movs	r3, #2
 800245c:	e0b4      	b.n	80025c8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0c      	cmp	r3, #12
 8002472:	f200 809f 	bhi.w	80025b4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002476:	a201      	add	r2, pc, #4	; (adr r2, 800247c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	080024b1 	.word	0x080024b1
 8002480:	080025b5 	.word	0x080025b5
 8002484:	080025b5 	.word	0x080025b5
 8002488:	080025b5 	.word	0x080025b5
 800248c:	080024f1 	.word	0x080024f1
 8002490:	080025b5 	.word	0x080025b5
 8002494:	080025b5 	.word	0x080025b5
 8002498:	080025b5 	.word	0x080025b5
 800249c:	08002533 	.word	0x08002533
 80024a0:	080025b5 	.word	0x080025b5
 80024a4:	080025b5 	.word	0x080025b5
 80024a8:	080025b5 	.word	0x080025b5
 80024ac:	08002573 	.word	0x08002573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f9f4 	bl	80028a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0208 	orr.w	r2, r2, #8
 80024ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6999      	ldr	r1, [r3, #24]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	619a      	str	r2, [r3, #24]
      break;
 80024ee:	e062      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fa3a 	bl	8002970 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6999      	ldr	r1, [r3, #24]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	619a      	str	r2, [r3, #24]
      break;
 8002530:	e041      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fa85 	bl	8002a48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0208 	orr.w	r2, r2, #8
 800254c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0204 	bic.w	r2, r2, #4
 800255c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69d9      	ldr	r1, [r3, #28]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	61da      	str	r2, [r3, #28]
      break;
 8002570:	e021      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 facf 	bl	8002b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	021a      	lsls	r2, r3, #8
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	61da      	str	r2, [r3, #28]
      break;
 80025b2:	e000      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80025b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIM_ConfigClockSource+0x18>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e0a6      	b.n	8002736 <HAL_TIM_ConfigClockSource+0x166>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002606:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800260e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b40      	cmp	r3, #64	; 0x40
 800261e:	d067      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0x120>
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d80b      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x6c>
 8002624:	2b10      	cmp	r3, #16
 8002626:	d073      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0x140>
 8002628:	2b10      	cmp	r3, #16
 800262a:	d802      	bhi.n	8002632 <HAL_TIM_ConfigClockSource+0x62>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d06f      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002630:	e078      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002632:	2b20      	cmp	r3, #32
 8002634:	d06c      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0x140>
 8002636:	2b30      	cmp	r3, #48	; 0x30
 8002638:	d06a      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800263a:	e073      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800263c:	2b70      	cmp	r3, #112	; 0x70
 800263e:	d00d      	beq.n	800265c <HAL_TIM_ConfigClockSource+0x8c>
 8002640:	2b70      	cmp	r3, #112	; 0x70
 8002642:	d804      	bhi.n	800264e <HAL_TIM_ConfigClockSource+0x7e>
 8002644:	2b50      	cmp	r3, #80	; 0x50
 8002646:	d033      	beq.n	80026b0 <HAL_TIM_ConfigClockSource+0xe0>
 8002648:	2b60      	cmp	r3, #96	; 0x60
 800264a:	d041      	beq.n	80026d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800264c:	e06a      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800264e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002652:	d066      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x152>
 8002654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002658:	d017      	beq.n	800268a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800265a:	e063      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	6899      	ldr	r1, [r3, #8]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f000 fc3e 	bl	8002eec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800267e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	609a      	str	r2, [r3, #8]
      break;
 8002688:	e04c      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f000 fc27 	bl	8002eec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ac:	609a      	str	r2, [r3, #8]
      break;
 80026ae:	e039      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	461a      	mov	r2, r3
 80026be:	f000 fae5 	bl	8002c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2150      	movs	r1, #80	; 0x50
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fbf4 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 80026ce:	e029      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	461a      	mov	r2, r3
 80026de:	f000 fb41 	bl	8002d64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2160      	movs	r1, #96	; 0x60
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fbe4 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 80026ee:	e019      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f000 fac5 	bl	8002c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2140      	movs	r1, #64	; 0x40
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fbd4 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 800270e:	e009      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f000 fbcb 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002720:	e000      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002722:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a34      	ldr	r2, [pc, #208]	; (8002888 <TIM_Base_SetConfig+0xe4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00f      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c2:	d00b      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a31      	ldr	r2, [pc, #196]	; (800288c <TIM_Base_SetConfig+0xe8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a30      	ldr	r2, [pc, #192]	; (8002890 <TIM_Base_SetConfig+0xec>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_Base_SetConfig+0x38>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <TIM_Base_SetConfig+0xf0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d108      	bne.n	80027ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a25      	ldr	r2, [pc, #148]	; (8002888 <TIM_Base_SetConfig+0xe4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01b      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d017      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a22      	ldr	r2, [pc, #136]	; (800288c <TIM_Base_SetConfig+0xe8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a21      	ldr	r2, [pc, #132]	; (8002890 <TIM_Base_SetConfig+0xec>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00f      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <TIM_Base_SetConfig+0xf0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00b      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <TIM_Base_SetConfig+0xf4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1e      	ldr	r2, [pc, #120]	; (800289c <TIM_Base_SetConfig+0xf8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d003      	beq.n	800282e <TIM_Base_SetConfig+0x8a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <TIM_Base_SetConfig+0xfc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <TIM_Base_SetConfig+0xe4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40000400 	.word	0x40000400
 8002890:	40000800 	.word	0x40000800
 8002894:	40000c00 	.word	0x40000c00
 8002898:	40014000 	.word	0x40014000
 800289c:	40014400 	.word	0x40014400
 80028a0:	40014800 	.word	0x40014800

080028a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	f023 0201 	bic.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0303 	bic.w	r3, r3, #3
 80028da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f023 0302 	bic.w	r3, r3, #2
 80028ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a1c      	ldr	r2, [pc, #112]	; (800296c <TIM_OC1_SetConfig+0xc8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10c      	bne.n	800291a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f023 0308 	bic.w	r3, r3, #8
 8002906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a13      	ldr	r2, [pc, #76]	; (800296c <TIM_OC1_SetConfig+0xc8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d111      	bne.n	8002946 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	621a      	str	r2, [r3, #32]
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40010000 	.word	0x40010000

08002970 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f023 0210 	bic.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f023 0320 	bic.w	r3, r3, #32
 80029ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <TIM_OC2_SetConfig+0xd4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d10d      	bne.n	80029ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <TIM_OC2_SetConfig+0xd4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d113      	bne.n	8002a1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	621a      	str	r2, [r3, #32]
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40010000 	.word	0x40010000

08002a48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <TIM_OC3_SetConfig+0xd0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10d      	bne.n	8002ac2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <TIM_OC3_SetConfig+0xd0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d113      	bne.n	8002af2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	621a      	str	r2, [r3, #32]
}
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40010000 	.word	0x40010000

08002b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	031b      	lsls	r3, r3, #12
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a10      	ldr	r2, [pc, #64]	; (8002bb8 <TIM_OC4_SetConfig+0x9c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d109      	bne.n	8002b90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	019b      	lsls	r3, r3, #6
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	621a      	str	r2, [r3, #32]
}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40010000 	.word	0x40010000

08002bbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f023 0201 	bic.w	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <TIM_TI1_SetConfig+0xbc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <TIM_TI1_SetConfig+0x56>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d00f      	beq.n	8002c12 <TIM_TI1_SetConfig+0x56>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <TIM_TI1_SetConfig+0xc0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00b      	beq.n	8002c12 <TIM_TI1_SetConfig+0x56>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <TIM_TI1_SetConfig+0xc4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <TIM_TI1_SetConfig+0x56>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <TIM_TI1_SetConfig+0xc8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_TI1_SetConfig+0x56>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a1e      	ldr	r2, [pc, #120]	; (8002c88 <TIM_TI1_SetConfig+0xcc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <TIM_TI1_SetConfig+0x5a>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <TIM_TI1_SetConfig+0x5c>
 8002c16:	2300      	movs	r3, #0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e003      	b.n	8002c36 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f023 030a 	bic.w	r3, r3, #10
 8002c50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f003 030a 	and.w	r3, r3, #10
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800
 8002c84:	40000c00 	.word	0x40000c00
 8002c88:	40014000 	.word	0x40014000

08002c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f023 0201 	bic.w	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f023 030a 	bic.w	r3, r3, #10
 8002cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b087      	sub	sp, #28
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f023 0210 	bic.w	r2, r3, #16
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	031b      	lsls	r3, r3, #12
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	621a      	str	r2, [r3, #32]
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f023 0210 	bic.w	r2, r3, #16
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	031b      	lsls	r3, r3, #12
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002da0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	621a      	str	r2, [r3, #32]
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 0303 	bic.w	r3, r3, #3
 8002df0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002e14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	621a      	str	r2, [r3, #32]
}
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e7a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	031b      	lsls	r3, r3, #12
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	031b      	lsls	r3, r3, #12
 8002e94:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f043 0307 	orr.w	r3, r3, #7
 8002ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	021a      	lsls	r2, r3, #8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	609a      	str	r2, [r3, #8]
}
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2201      	movs	r2, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	401a      	ands	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e050      	b.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d018      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d013      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a13      	ldr	r2, [pc, #76]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10c      	bne.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4313      	orrs	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40010000 	.word	0x40010000
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40014000 	.word	0x40014000

08003054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e03f      	b.n	800310e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f001 fb6c 	bl	8004780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	; 0x24
 80030ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fab3 	bl	800362c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	4613      	mov	r3, r2
 8003122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b20      	cmp	r3, #32
 800312e:	d140      	bne.n	80031b2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_UART_Receive_IT+0x26>
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e039      	b.n	80031b4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_UART_Receive_IT+0x38>
 800314a:	2302      	movs	r3, #2
 800314c:	e032      	b.n	80031b4 <HAL_UART_Receive_IT+0x9e>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2222      	movs	r2, #34	; 0x22
 8003172:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0220 	orr.w	r2, r2, #32
 80031ac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_UART_IRQHandler+0x52>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f98c 	bl	8003528 <UART_Receive_IT>
      return;
 8003210:	e0d1      	b.n	80033b6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80b0 	beq.w	800337a <HAL_UART_IRQHandler+0x1ba>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_UART_IRQHandler+0x70>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80a5 	beq.w	800337a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <HAL_UART_IRQHandler+0x90>
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_UART_IRQHandler+0xb0>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	f043 0202 	orr.w	r2, r3, #2
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_UART_IRQHandler+0xd0>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00f      	beq.n	80032ba <HAL_UART_IRQHandler+0xfa>
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <HAL_UART_IRQHandler+0xee>
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	f043 0208 	orr.w	r2, r3, #8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d078      	beq.n	80033b4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_UART_IRQHandler+0x11c>
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f926 	bl	8003528 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b40      	cmp	r3, #64	; 0x40
 80032e8:	bf0c      	ite	eq
 80032ea:	2301      	moveq	r3, #1
 80032ec:	2300      	movne	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <HAL_UART_IRQHandler+0x144>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d031      	beq.n	8003368 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f86f 	bl	80033e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d123      	bne.n	8003360 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003326:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	4a21      	ldr	r2, [pc, #132]	; (80033bc <HAL_UART_IRQHandler+0x1fc>)
 8003336:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd ffd0 	bl	80012e2 <HAL_DMA_Abort_IT>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d016      	beq.n	8003376 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003352:	4610      	mov	r0, r2
 8003354:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003356:	e00e      	b.n	8003376 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f83b 	bl	80033d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335e:	e00a      	b.n	8003376 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f837 	bl	80033d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003366:	e006      	b.n	8003376 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f833 	bl	80033d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003374:	e01e      	b.n	80033b4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003376:	bf00      	nop
    return;
 8003378:	e01c      	b.n	80033b4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_UART_IRQHandler+0x1d6>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f85c 	bl	800344c <UART_Transmit_IT>
    return;
 8003394:	e00f      	b.n	80033b6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_UART_IRQHandler+0x1f6>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f8a4 	bl	80034f8 <UART_EndTransmit_IT>
    return;
 80033b0:	bf00      	nop
 80033b2:	e000      	b.n	80033b6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80033b4:	bf00      	nop
  }
}
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	08003425 	.word	0x08003425

080033c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7ff ffc8 	bl	80033d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b21      	cmp	r3, #33	; 0x21
 800345e:	d144      	bne.n	80034ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003468:	d11a      	bne.n	80034a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800347e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	1c9a      	adds	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]
 8003492:	e00e      	b.n	80034b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	621a      	str	r2, [r3, #32]
 800349e:	e008      	b.n	80034b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	1c59      	adds	r1, r3, #1
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6211      	str	r1, [r2, #32]
 80034aa:	781a      	ldrb	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4619      	mov	r1, r3
 80034c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10f      	bne.n	80034e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e000      	b.n	80034ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80034ea:	2302      	movs	r3, #2
  }
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff51 	bl	80033c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b22      	cmp	r3, #34	; 0x22
 800353a:	d171      	bne.n	8003620 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d123      	bne.n	800358e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10e      	bne.n	8003572 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	b29b      	uxth	r3, r3
 800355c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	1c9a      	adds	r2, r3, #2
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
 8003570:	e029      	b.n	80035c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	b29b      	uxth	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
 800358c:	e01b      	b.n	80035c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6858      	ldr	r0, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	1c59      	adds	r1, r3, #1
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6291      	str	r1, [r2, #40]	; 0x28
 80035a6:	b2c2      	uxtb	r2, r0
 80035a8:	701a      	strb	r2, [r3, #0]
 80035aa:	e00c      	b.n	80035c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	1c58      	adds	r0, r3, #1
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	6288      	str	r0, [r1, #40]	; 0x28
 80035be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4619      	mov	r1, r3
 80035d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d120      	bne.n	800361c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0220 	bic.w	r2, r2, #32
 80035e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fce4 	bl	8003fe0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e002      	b.n	8003622 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e000      	b.n	8003622 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003630:	b085      	sub	sp, #20
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800366e:	f023 030c 	bic.w	r3, r3, #12
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	68f9      	ldr	r1, [r7, #12]
 8003678:	430b      	orrs	r3, r1
 800367a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699a      	ldr	r2, [r3, #24]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369a:	f040 818b 	bne.w	80039b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4ac1      	ldr	r2, [pc, #772]	; (80039a8 <UART_SetConfig+0x37c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d005      	beq.n	80036b4 <UART_SetConfig+0x88>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4abf      	ldr	r2, [pc, #764]	; (80039ac <UART_SetConfig+0x380>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	f040 80bd 	bne.w	800382e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036b4:	f7fe fc22 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 80036b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	461d      	mov	r5, r3
 80036be:	f04f 0600 	mov.w	r6, #0
 80036c2:	46a8      	mov	r8, r5
 80036c4:	46b1      	mov	r9, r6
 80036c6:	eb18 0308 	adds.w	r3, r8, r8
 80036ca:	eb49 0409 	adc.w	r4, r9, r9
 80036ce:	4698      	mov	r8, r3
 80036d0:	46a1      	mov	r9, r4
 80036d2:	eb18 0805 	adds.w	r8, r8, r5
 80036d6:	eb49 0906 	adc.w	r9, r9, r6
 80036da:	f04f 0100 	mov.w	r1, #0
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036ee:	4688      	mov	r8, r1
 80036f0:	4691      	mov	r9, r2
 80036f2:	eb18 0005 	adds.w	r0, r8, r5
 80036f6:	eb49 0106 	adc.w	r1, r9, r6
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	461d      	mov	r5, r3
 8003700:	f04f 0600 	mov.w	r6, #0
 8003704:	196b      	adds	r3, r5, r5
 8003706:	eb46 0406 	adc.w	r4, r6, r6
 800370a:	461a      	mov	r2, r3
 800370c:	4623      	mov	r3, r4
 800370e:	f7fd fac3 	bl	8000c98 <__aeabi_uldivmod>
 8003712:	4603      	mov	r3, r0
 8003714:	460c      	mov	r4, r1
 8003716:	461a      	mov	r2, r3
 8003718:	4ba5      	ldr	r3, [pc, #660]	; (80039b0 <UART_SetConfig+0x384>)
 800371a:	fba3 2302 	umull	r2, r3, r3, r2
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	461d      	mov	r5, r3
 8003728:	f04f 0600 	mov.w	r6, #0
 800372c:	46a9      	mov	r9, r5
 800372e:	46b2      	mov	sl, r6
 8003730:	eb19 0309 	adds.w	r3, r9, r9
 8003734:	eb4a 040a 	adc.w	r4, sl, sl
 8003738:	4699      	mov	r9, r3
 800373a:	46a2      	mov	sl, r4
 800373c:	eb19 0905 	adds.w	r9, r9, r5
 8003740:	eb4a 0a06 	adc.w	sl, sl, r6
 8003744:	f04f 0100 	mov.w	r1, #0
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003758:	4689      	mov	r9, r1
 800375a:	4692      	mov	sl, r2
 800375c:	eb19 0005 	adds.w	r0, r9, r5
 8003760:	eb4a 0106 	adc.w	r1, sl, r6
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	461d      	mov	r5, r3
 800376a:	f04f 0600 	mov.w	r6, #0
 800376e:	196b      	adds	r3, r5, r5
 8003770:	eb46 0406 	adc.w	r4, r6, r6
 8003774:	461a      	mov	r2, r3
 8003776:	4623      	mov	r3, r4
 8003778:	f7fd fa8e 	bl	8000c98 <__aeabi_uldivmod>
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	461a      	mov	r2, r3
 8003782:	4b8b      	ldr	r3, [pc, #556]	; (80039b0 <UART_SetConfig+0x384>)
 8003784:	fba3 1302 	umull	r1, r3, r3, r2
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	2164      	movs	r1, #100	; 0x64
 800378c:	fb01 f303 	mul.w	r3, r1, r3
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	3332      	adds	r3, #50	; 0x32
 8003796:	4a86      	ldr	r2, [pc, #536]	; (80039b0 <UART_SetConfig+0x384>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	095b      	lsrs	r3, r3, #5
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037a4:	4498      	add	r8, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	461d      	mov	r5, r3
 80037aa:	f04f 0600 	mov.w	r6, #0
 80037ae:	46a9      	mov	r9, r5
 80037b0:	46b2      	mov	sl, r6
 80037b2:	eb19 0309 	adds.w	r3, r9, r9
 80037b6:	eb4a 040a 	adc.w	r4, sl, sl
 80037ba:	4699      	mov	r9, r3
 80037bc:	46a2      	mov	sl, r4
 80037be:	eb19 0905 	adds.w	r9, r9, r5
 80037c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037da:	4689      	mov	r9, r1
 80037dc:	4692      	mov	sl, r2
 80037de:	eb19 0005 	adds.w	r0, r9, r5
 80037e2:	eb4a 0106 	adc.w	r1, sl, r6
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	461d      	mov	r5, r3
 80037ec:	f04f 0600 	mov.w	r6, #0
 80037f0:	196b      	adds	r3, r5, r5
 80037f2:	eb46 0406 	adc.w	r4, r6, r6
 80037f6:	461a      	mov	r2, r3
 80037f8:	4623      	mov	r3, r4
 80037fa:	f7fd fa4d 	bl	8000c98 <__aeabi_uldivmod>
 80037fe:	4603      	mov	r3, r0
 8003800:	460c      	mov	r4, r1
 8003802:	461a      	mov	r2, r3
 8003804:	4b6a      	ldr	r3, [pc, #424]	; (80039b0 <UART_SetConfig+0x384>)
 8003806:	fba3 1302 	umull	r1, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2164      	movs	r1, #100	; 0x64
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a65      	ldr	r2, [pc, #404]	; (80039b0 <UART_SetConfig+0x384>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 0207 	and.w	r2, r3, #7
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4442      	add	r2, r8
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	e26f      	b.n	8003d0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800382e:	f7fe fb51 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8003832:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	461d      	mov	r5, r3
 8003838:	f04f 0600 	mov.w	r6, #0
 800383c:	46a8      	mov	r8, r5
 800383e:	46b1      	mov	r9, r6
 8003840:	eb18 0308 	adds.w	r3, r8, r8
 8003844:	eb49 0409 	adc.w	r4, r9, r9
 8003848:	4698      	mov	r8, r3
 800384a:	46a1      	mov	r9, r4
 800384c:	eb18 0805 	adds.w	r8, r8, r5
 8003850:	eb49 0906 	adc.w	r9, r9, r6
 8003854:	f04f 0100 	mov.w	r1, #0
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003860:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003864:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003868:	4688      	mov	r8, r1
 800386a:	4691      	mov	r9, r2
 800386c:	eb18 0005 	adds.w	r0, r8, r5
 8003870:	eb49 0106 	adc.w	r1, r9, r6
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	461d      	mov	r5, r3
 800387a:	f04f 0600 	mov.w	r6, #0
 800387e:	196b      	adds	r3, r5, r5
 8003880:	eb46 0406 	adc.w	r4, r6, r6
 8003884:	461a      	mov	r2, r3
 8003886:	4623      	mov	r3, r4
 8003888:	f7fd fa06 	bl	8000c98 <__aeabi_uldivmod>
 800388c:	4603      	mov	r3, r0
 800388e:	460c      	mov	r4, r1
 8003890:	461a      	mov	r2, r3
 8003892:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <UART_SetConfig+0x384>)
 8003894:	fba3 2302 	umull	r2, r3, r3, r2
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	461d      	mov	r5, r3
 80038a2:	f04f 0600 	mov.w	r6, #0
 80038a6:	46a9      	mov	r9, r5
 80038a8:	46b2      	mov	sl, r6
 80038aa:	eb19 0309 	adds.w	r3, r9, r9
 80038ae:	eb4a 040a 	adc.w	r4, sl, sl
 80038b2:	4699      	mov	r9, r3
 80038b4:	46a2      	mov	sl, r4
 80038b6:	eb19 0905 	adds.w	r9, r9, r5
 80038ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038d2:	4689      	mov	r9, r1
 80038d4:	4692      	mov	sl, r2
 80038d6:	eb19 0005 	adds.w	r0, r9, r5
 80038da:	eb4a 0106 	adc.w	r1, sl, r6
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	461d      	mov	r5, r3
 80038e4:	f04f 0600 	mov.w	r6, #0
 80038e8:	196b      	adds	r3, r5, r5
 80038ea:	eb46 0406 	adc.w	r4, r6, r6
 80038ee:	461a      	mov	r2, r3
 80038f0:	4623      	mov	r3, r4
 80038f2:	f7fd f9d1 	bl	8000c98 <__aeabi_uldivmod>
 80038f6:	4603      	mov	r3, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <UART_SetConfig+0x384>)
 80038fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2164      	movs	r1, #100	; 0x64
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	3332      	adds	r3, #50	; 0x32
 8003910:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <UART_SetConfig+0x384>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800391e:	4498      	add	r8, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	461d      	mov	r5, r3
 8003924:	f04f 0600 	mov.w	r6, #0
 8003928:	46a9      	mov	r9, r5
 800392a:	46b2      	mov	sl, r6
 800392c:	eb19 0309 	adds.w	r3, r9, r9
 8003930:	eb4a 040a 	adc.w	r4, sl, sl
 8003934:	4699      	mov	r9, r3
 8003936:	46a2      	mov	sl, r4
 8003938:	eb19 0905 	adds.w	r9, r9, r5
 800393c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800394c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003950:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003954:	4689      	mov	r9, r1
 8003956:	4692      	mov	sl, r2
 8003958:	eb19 0005 	adds.w	r0, r9, r5
 800395c:	eb4a 0106 	adc.w	r1, sl, r6
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	461d      	mov	r5, r3
 8003966:	f04f 0600 	mov.w	r6, #0
 800396a:	196b      	adds	r3, r5, r5
 800396c:	eb46 0406 	adc.w	r4, r6, r6
 8003970:	461a      	mov	r2, r3
 8003972:	4623      	mov	r3, r4
 8003974:	f7fd f990 	bl	8000c98 <__aeabi_uldivmod>
 8003978:	4603      	mov	r3, r0
 800397a:	460c      	mov	r4, r1
 800397c:	461a      	mov	r2, r3
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <UART_SetConfig+0x384>)
 8003980:	fba3 1302 	umull	r1, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	2164      	movs	r1, #100	; 0x64
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	3332      	adds	r3, #50	; 0x32
 8003992:	4a07      	ldr	r2, [pc, #28]	; (80039b0 <UART_SetConfig+0x384>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	f003 0207 	and.w	r2, r3, #7
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4442      	add	r2, r8
 80039a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80039a6:	e1b2      	b.n	8003d0e <UART_SetConfig+0x6e2>
 80039a8:	40011000 	.word	0x40011000
 80039ac:	40011400 	.word	0x40011400
 80039b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4ad7      	ldr	r2, [pc, #860]	; (8003d18 <UART_SetConfig+0x6ec>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d005      	beq.n	80039ca <UART_SetConfig+0x39e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4ad6      	ldr	r2, [pc, #856]	; (8003d1c <UART_SetConfig+0x6f0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	f040 80d1 	bne.w	8003b6c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80039ca:	f7fe fa97 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 80039ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	469a      	mov	sl, r3
 80039d4:	f04f 0b00 	mov.w	fp, #0
 80039d8:	46d0      	mov	r8, sl
 80039da:	46d9      	mov	r9, fp
 80039dc:	eb18 0308 	adds.w	r3, r8, r8
 80039e0:	eb49 0409 	adc.w	r4, r9, r9
 80039e4:	4698      	mov	r8, r3
 80039e6:	46a1      	mov	r9, r4
 80039e8:	eb18 080a 	adds.w	r8, r8, sl
 80039ec:	eb49 090b 	adc.w	r9, r9, fp
 80039f0:	f04f 0100 	mov.w	r1, #0
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a04:	4688      	mov	r8, r1
 8003a06:	4691      	mov	r9, r2
 8003a08:	eb1a 0508 	adds.w	r5, sl, r8
 8003a0c:	eb4b 0609 	adc.w	r6, fp, r9
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4619      	mov	r1, r3
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	f04f 0400 	mov.w	r4, #0
 8003a22:	0094      	lsls	r4, r2, #2
 8003a24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a28:	008b      	lsls	r3, r1, #2
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4623      	mov	r3, r4
 8003a2e:	4628      	mov	r0, r5
 8003a30:	4631      	mov	r1, r6
 8003a32:	f7fd f931 	bl	8000c98 <__aeabi_uldivmod>
 8003a36:	4603      	mov	r3, r0
 8003a38:	460c      	mov	r4, r1
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4bb8      	ldr	r3, [pc, #736]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	469b      	mov	fp, r3
 8003a4c:	f04f 0c00 	mov.w	ip, #0
 8003a50:	46d9      	mov	r9, fp
 8003a52:	46e2      	mov	sl, ip
 8003a54:	eb19 0309 	adds.w	r3, r9, r9
 8003a58:	eb4a 040a 	adc.w	r4, sl, sl
 8003a5c:	4699      	mov	r9, r3
 8003a5e:	46a2      	mov	sl, r4
 8003a60:	eb19 090b 	adds.w	r9, r9, fp
 8003a64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a68:	f04f 0100 	mov.w	r1, #0
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a7c:	4689      	mov	r9, r1
 8003a7e:	4692      	mov	sl, r2
 8003a80:	eb1b 0509 	adds.w	r5, fp, r9
 8003a84:	eb4c 060a 	adc.w	r6, ip, sl
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	0094      	lsls	r4, r2, #2
 8003a9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003aa0:	008b      	lsls	r3, r1, #2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4623      	mov	r3, r4
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	4631      	mov	r1, r6
 8003aaa:	f7fd f8f5 	bl	8000c98 <__aeabi_uldivmod>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4b9a      	ldr	r3, [pc, #616]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2164      	movs	r1, #100	; 0x64
 8003abe:	fb01 f303 	mul.w	r3, r1, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	3332      	adds	r3, #50	; 0x32
 8003ac8:	4a95      	ldr	r2, [pc, #596]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad4:	4498      	add	r8, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	469b      	mov	fp, r3
 8003ada:	f04f 0c00 	mov.w	ip, #0
 8003ade:	46d9      	mov	r9, fp
 8003ae0:	46e2      	mov	sl, ip
 8003ae2:	eb19 0309 	adds.w	r3, r9, r9
 8003ae6:	eb4a 040a 	adc.w	r4, sl, sl
 8003aea:	4699      	mov	r9, r3
 8003aec:	46a2      	mov	sl, r4
 8003aee:	eb19 090b 	adds.w	r9, r9, fp
 8003af2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b0a:	4689      	mov	r9, r1
 8003b0c:	4692      	mov	sl, r2
 8003b0e:	eb1b 0509 	adds.w	r5, fp, r9
 8003b12:	eb4c 060a 	adc.w	r6, ip, sl
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	f04f 0400 	mov.w	r4, #0
 8003b28:	0094      	lsls	r4, r2, #2
 8003b2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b2e:	008b      	lsls	r3, r1, #2
 8003b30:	461a      	mov	r2, r3
 8003b32:	4623      	mov	r3, r4
 8003b34:	4628      	mov	r0, r5
 8003b36:	4631      	mov	r1, r6
 8003b38:	f7fd f8ae 	bl	8000c98 <__aeabi_uldivmod>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	460c      	mov	r4, r1
 8003b40:	461a      	mov	r2, r3
 8003b42:	4b77      	ldr	r3, [pc, #476]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003b44:	fba3 1302 	umull	r1, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	2164      	movs	r1, #100	; 0x64
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	3332      	adds	r3, #50	; 0x32
 8003b56:	4a72      	ldr	r2, [pc, #456]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003b58:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	f003 020f 	and.w	r2, r3, #15
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4442      	add	r2, r8
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	e0d0      	b.n	8003d0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f7fe f9b2 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8003b70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	469a      	mov	sl, r3
 8003b76:	f04f 0b00 	mov.w	fp, #0
 8003b7a:	46d0      	mov	r8, sl
 8003b7c:	46d9      	mov	r9, fp
 8003b7e:	eb18 0308 	adds.w	r3, r8, r8
 8003b82:	eb49 0409 	adc.w	r4, r9, r9
 8003b86:	4698      	mov	r8, r3
 8003b88:	46a1      	mov	r9, r4
 8003b8a:	eb18 080a 	adds.w	r8, r8, sl
 8003b8e:	eb49 090b 	adc.w	r9, r9, fp
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ba2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ba6:	4688      	mov	r8, r1
 8003ba8:	4691      	mov	r9, r2
 8003baa:	eb1a 0508 	adds.w	r5, sl, r8
 8003bae:	eb4b 0609 	adc.w	r6, fp, r9
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	f04f 0400 	mov.w	r4, #0
 8003bc4:	0094      	lsls	r4, r2, #2
 8003bc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bca:	008b      	lsls	r3, r1, #2
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	f7fd f860 	bl	8000c98 <__aeabi_uldivmod>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b50      	ldr	r3, [pc, #320]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003be0:	fba3 2302 	umull	r2, r3, r3, r2
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	469b      	mov	fp, r3
 8003bee:	f04f 0c00 	mov.w	ip, #0
 8003bf2:	46d9      	mov	r9, fp
 8003bf4:	46e2      	mov	sl, ip
 8003bf6:	eb19 0309 	adds.w	r3, r9, r9
 8003bfa:	eb4a 040a 	adc.w	r4, sl, sl
 8003bfe:	4699      	mov	r9, r3
 8003c00:	46a2      	mov	sl, r4
 8003c02:	eb19 090b 	adds.w	r9, r9, fp
 8003c06:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c1e:	4689      	mov	r9, r1
 8003c20:	4692      	mov	sl, r2
 8003c22:	eb1b 0509 	adds.w	r5, fp, r9
 8003c26:	eb4c 060a 	adc.w	r6, ip, sl
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	f04f 0400 	mov.w	r4, #0
 8003c3c:	0094      	lsls	r4, r2, #2
 8003c3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c42:	008b      	lsls	r3, r1, #2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4623      	mov	r3, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	f7fd f824 	bl	8000c98 <__aeabi_uldivmod>
 8003c50:	4603      	mov	r3, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b32      	ldr	r3, [pc, #200]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003c58:	fba3 1302 	umull	r1, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2164      	movs	r1, #100	; 0x64
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a2d      	ldr	r2, [pc, #180]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c76:	4498      	add	r8, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	469b      	mov	fp, r3
 8003c7c:	f04f 0c00 	mov.w	ip, #0
 8003c80:	46d9      	mov	r9, fp
 8003c82:	46e2      	mov	sl, ip
 8003c84:	eb19 0309 	adds.w	r3, r9, r9
 8003c88:	eb4a 040a 	adc.w	r4, sl, sl
 8003c8c:	4699      	mov	r9, r3
 8003c8e:	46a2      	mov	sl, r4
 8003c90:	eb19 090b 	adds.w	r9, r9, fp
 8003c94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ca8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cac:	4689      	mov	r9, r1
 8003cae:	4692      	mov	sl, r2
 8003cb0:	eb1b 0509 	adds.w	r5, fp, r9
 8003cb4:	eb4c 060a 	adc.w	r6, ip, sl
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	f04f 0400 	mov.w	r4, #0
 8003cca:	0094      	lsls	r4, r2, #2
 8003ccc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cd0:	008b      	lsls	r3, r1, #2
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4623      	mov	r3, r4
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	4631      	mov	r1, r6
 8003cda:	f7fc ffdd 	bl	8000c98 <__aeabi_uldivmod>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2164      	movs	r1, #100	; 0x64
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	3332      	adds	r3, #50	; 0x32
 8003cf8:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <UART_SetConfig+0x6f4>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	f003 020f 	and.w	r2, r3, #15
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4442      	add	r2, r8
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	e7ff      	b.n	8003d0e <UART_SetConfig+0x6e2>
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d18:	40011000 	.word	0x40011000
 8003d1c:	40011400 	.word	0x40011400
 8003d20:	51eb851f 	.word	0x51eb851f

08003d24 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	; 0x30
 8003d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	609a      	str	r2, [r3, #8]
 8003d36:	60da      	str	r2, [r3, #12]
 8003d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	4ba1      	ldr	r3, [pc, #644]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4aa0      	ldr	r2, [pc, #640]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d44:	f043 0310 	orr.w	r3, r3, #16
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b9e      	ldr	r3, [pc, #632]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	61bb      	str	r3, [r7, #24]
 8003d54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	4b9a      	ldr	r3, [pc, #616]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	4a99      	ldr	r2, [pc, #612]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d60:	f043 0304 	orr.w	r3, r3, #4
 8003d64:	6313      	str	r3, [r2, #48]	; 0x30
 8003d66:	4b97      	ldr	r3, [pc, #604]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	4b93      	ldr	r3, [pc, #588]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a92      	ldr	r2, [pc, #584]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b90      	ldr	r3, [pc, #576]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	4b8c      	ldr	r3, [pc, #560]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	4a8b      	ldr	r2, [pc, #556]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9e:	4b89      	ldr	r3, [pc, #548]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003daa:	2300      	movs	r3, #0
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	4b85      	ldr	r3, [pc, #532]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4a84      	ldr	r2, [pc, #528]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003db4:	f043 0302 	orr.w	r3, r3, #2
 8003db8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dba:	4b82      	ldr	r3, [pc, #520]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	4b7e      	ldr	r3, [pc, #504]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4a7d      	ldr	r2, [pc, #500]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd6:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <MX_GPIO_Init+0x2a0>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003de2:	2200      	movs	r2, #0
 8003de4:	2108      	movs	r1, #8
 8003de6:	4878      	ldr	r0, [pc, #480]	; (8003fc8 <MX_GPIO_Init+0x2a4>)
 8003de8:	f7fd fc20 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003dec:	2201      	movs	r2, #1
 8003dee:	2101      	movs	r1, #1
 8003df0:	4876      	ldr	r0, [pc, #472]	; (8003fcc <MX_GPIO_Init+0x2a8>)
 8003df2:	f7fd fc1b 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15 
 8003df6:	2200      	movs	r2, #0
 8003df8:	f64c 4110 	movw	r1, #52240	; 0xcc10
 8003dfc:	4874      	ldr	r0, [pc, #464]	; (8003fd0 <MX_GPIO_Init+0x2ac>)
 8003dfe:	f7fd fc15 	bl	800162c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e02:	2304      	movs	r3, #4
 8003e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e06:	2300      	movs	r3, #0
 8003e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e0e:	f107 031c 	add.w	r3, r7, #28
 8003e12:	4619      	mov	r1, r3
 8003e14:	486c      	ldr	r0, [pc, #432]	; (8003fc8 <MX_GPIO_Init+0x2a4>)
 8003e16:	f7fd fa87 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e26:	2300      	movs	r3, #0
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003e2a:	f107 031c 	add.w	r3, r7, #28
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4865      	ldr	r0, [pc, #404]	; (8003fc8 <MX_GPIO_Init+0x2a4>)
 8003e32:	f7fd fa79 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8003e36:	2332      	movs	r3, #50	; 0x32
 8003e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003e3a:	4b66      	ldr	r3, [pc, #408]	; (8003fd4 <MX_GPIO_Init+0x2b0>)
 8003e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e42:	f107 031c 	add.w	r3, r7, #28
 8003e46:	4619      	mov	r1, r3
 8003e48:	485f      	ldr	r0, [pc, #380]	; (8003fc8 <MX_GPIO_Init+0x2a4>)
 8003e4a:	f7fd fa6d 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e52:	2301      	movs	r3, #1
 8003e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003e5e:	f107 031c 	add.w	r3, r7, #28
 8003e62:	4619      	mov	r1, r3
 8003e64:	4859      	ldr	r0, [pc, #356]	; (8003fcc <MX_GPIO_Init+0x2a8>)
 8003e66:	f7fd fa5f 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003e7e:	f107 031c 	add.w	r3, r7, #28
 8003e82:	4619      	mov	r1, r3
 8003e84:	4851      	ldr	r0, [pc, #324]	; (8003fcc <MX_GPIO_Init+0x2a8>)
 8003e86:	f7fd fa4f 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003e8e:	4b51      	ldr	r3, [pc, #324]	; (8003fd4 <MX_GPIO_Init+0x2b0>)
 8003e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e96:	f107 031c 	add.w	r3, r7, #28
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	484e      	ldr	r0, [pc, #312]	; (8003fd8 <MX_GPIO_Init+0x2b4>)
 8003e9e:	f7fd fa43 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003eb2:	2306      	movs	r3, #6
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003eb6:	f107 031c 	add.w	r3, r7, #28
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4846      	ldr	r0, [pc, #280]	; (8003fd8 <MX_GPIO_Init+0x2b4>)
 8003ebe:	f7fd fa33 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8003ec2:	23a0      	movs	r3, #160	; 0xa0
 8003ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed6:	f107 031c 	add.w	r3, r7, #28
 8003eda:	4619      	mov	r1, r3
 8003edc:	483e      	ldr	r0, [pc, #248]	; (8003fd8 <MX_GPIO_Init+0x2b4>)
 8003ede:	f7fd fa23 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8003ee2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee8:	2302      	movs	r3, #2
 8003eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ef4:	2305      	movs	r3, #5
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef8:	f107 031c 	add.w	r3, r7, #28
 8003efc:	4619      	mov	r1, r3
 8003efe:	4837      	ldr	r0, [pc, #220]	; (8003fdc <MX_GPIO_Init+0x2b8>)
 8003f00:	f7fd fa12 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD14 PD15 
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15 
 8003f04:	f64c 4310 	movw	r3, #52240	; 0xcc10
 8003f08:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f12:	2300      	movs	r3, #0
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f16:	f107 031c 	add.w	r3, r7, #28
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	482c      	ldr	r0, [pc, #176]	; (8003fd0 <MX_GPIO_Init+0x2ac>)
 8003f1e:	f7fd fa03 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003f22:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f30:	2300      	movs	r3, #0
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f34:	2306      	movs	r3, #6
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4823      	ldr	r0, [pc, #140]	; (8003fcc <MX_GPIO_Init+0x2a8>)
 8003f40:	f7fd f9f2 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8003f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8003f52:	f107 031c 	add.w	r3, r7, #28
 8003f56:	4619      	mov	r1, r3
 8003f58:	481f      	ldr	r0, [pc, #124]	; (8003fd8 <MX_GPIO_Init+0x2b4>)
 8003f5a:	f7fd f9e5 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003f5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f64:	2302      	movs	r3, #2
 8003f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003f70:	230a      	movs	r3, #10
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f74:	f107 031c 	add.w	r3, r7, #28
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4817      	ldr	r0, [pc, #92]	; (8003fd8 <MX_GPIO_Init+0x2b4>)
 8003f7c:	f7fd f9d4 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003f80:	2320      	movs	r3, #32
 8003f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f84:	2300      	movs	r3, #0
 8003f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003f8c:	f107 031c 	add.w	r3, r7, #28
 8003f90:	4619      	mov	r1, r3
 8003f92:	480f      	ldr	r0, [pc, #60]	; (8003fd0 <MX_GPIO_Init+0x2ac>)
 8003f94:	f7fd f9c8 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003f98:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f9e:	2312      	movs	r3, #18
 8003fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003faa:	2304      	movs	r3, #4
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fae:	f107 031c 	add.w	r3, r7, #28
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4809      	ldr	r0, [pc, #36]	; (8003fdc <MX_GPIO_Init+0x2b8>)
 8003fb6:	f7fd f9b7 	bl	8001328 <HAL_GPIO_Init>

}
 8003fba:	bf00      	nop
 8003fbc:	3730      	adds	r7, #48	; 0x30
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	10120000 	.word	0x10120000
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40020400 	.word	0x40020400

08003fe0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	flag=1;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_UART_RxCpltCallback+0x20>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &Received, 1);
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4904      	ldr	r1, [pc, #16]	; (8004004 <HAL_UART_RxCpltCallback+0x24>)
 8003ff2:	4805      	ldr	r0, [pc, #20]	; (8004008 <HAL_UART_RxCpltCallback+0x28>)
 8003ff4:	f7ff f88f 	bl	8003116 <HAL_UART_Receive_IT>
 }
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000209 	.word	0x20000209
 8004004:	20000208 	.word	0x20000208
 8004008:	2000028c 	.word	0x2000028c

0800400c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	flag=0;
 8004010:	4b30      	ldr	r3, [pc, #192]	; (80040d4 <main+0xc8>)
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004016:	f7fc ffbf 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800401a:	f000 f865 	bl	80040e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800401e:	f7ff fe81 	bl	8003d24 <MX_GPIO_Init>
  MX_TIM3_Init();
 8004022:	f000 f987 	bl	8004334 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004026:	f000 fa2f 	bl	8004488 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800402a:	f000 fb7f 	bl	800472c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 800402e:	482a      	ldr	r0, [pc, #168]	; (80040d8 <main+0xcc>)
 8004030:	f7fd ffa3 	bl	8001f7a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8004034:	2100      	movs	r1, #0
 8004036:	4828      	ldr	r0, [pc, #160]	; (80040d8 <main+0xcc>)
 8004038:	f7fd fff8 	bl	800202c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800403c:	2104      	movs	r1, #4
 800403e:	4826      	ldr	r0, [pc, #152]	; (80040d8 <main+0xcc>)
 8004040:	f7fd fff4 	bl	800202c <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2, &Received, 1);
 8004044:	2201      	movs	r2, #1
 8004046:	4925      	ldr	r1, [pc, #148]	; (80040dc <main+0xd0>)
 8004048:	4825      	ldr	r0, [pc, #148]	; (80040e0 <main+0xd4>)
 800404a:	f7ff f864 	bl	8003116 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1){
 800404e:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <main+0xc8>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d137      	bne.n	80040c6 <main+0xba>
		  switch (atoi(&Received)){
 8004056:	4821      	ldr	r0, [pc, #132]	; (80040dc <main+0xd0>)
 8004058:	f000 fc0b 	bl	8004872 <atoi>
 800405c:	4603      	mov	r3, r0
 800405e:	2b03      	cmp	r3, #3
 8004060:	d82d      	bhi.n	80040be <main+0xb2>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <main+0x5c>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	08004079 	.word	0x08004079
 800406c:	080040cb 	.word	0x080040cb
 8004070:	080040cb 	.word	0x080040cb
 8004074:	080040cb 	.word	0x080040cb
		  case 0: // do przodu
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8004078:	2200      	movs	r2, #0
 800407a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800407e:	4819      	ldr	r0, [pc, #100]	; (80040e4 <main+0xd8>)
 8004080:	f7fd fad4 	bl	800162c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004084:	2201      	movs	r2, #1
 8004086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800408a:	4816      	ldr	r0, [pc, #88]	; (80040e4 <main+0xd8>)
 800408c:	f7fd face 	bl	800162c <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8004090:	2201      	movs	r2, #1
 8004092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004096:	4813      	ldr	r0, [pc, #76]	; (80040e4 <main+0xd8>)
 8004098:	f7fd fac8 	bl	800162c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800409c:	2200      	movs	r2, #0
 800409e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040a2:	4810      	ldr	r0, [pc, #64]	; (80040e4 <main+0xd8>)
 80040a4:	f7fd fac2 	bl	800162c <HAL_GPIO_WritePin>

			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,6000);
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <main+0xcc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f241 7270 	movw	r2, #6000	; 0x1770
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,6000);
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <main+0xcc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f241 7270 	movw	r2, #6000	; 0x1770
 80040ba:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 80040bc:	e006      	b.n	80040cc <main+0xc0>
		  case 3: // do tylu

			  break;

		  default:
			  flag = 0;
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <main+0xc8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
			  break;
 80040c4:	e002      	b.n	80040cc <main+0xc0>
		  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  }
 80040c6:	bf00      	nop
 80040c8:	e000      	b.n	80040cc <main+0xc0>
			  break;
 80040ca:	bf00      	nop
	  HAL_Delay(10);
 80040cc:	200a      	movs	r0, #10
 80040ce:	f7fc ffd5 	bl	800107c <HAL_Delay>
	  if(flag == 1){
 80040d2:	e7bc      	b.n	800404e <main+0x42>
 80040d4:	20000209 	.word	0x20000209
 80040d8:	2000020c 	.word	0x2000020c
 80040dc:	20000208 	.word	0x20000208
 80040e0:	2000028c 	.word	0x2000028c
 80040e4:	40020c00 	.word	0x40020c00

080040e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b094      	sub	sp, #80	; 0x50
 80040ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ee:	f107 0320 	add.w	r3, r7, #32
 80040f2:	2230      	movs	r2, #48	; 0x30
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fbea 	bl	80048d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040fc:	f107 030c 	add.w	r3, r7, #12
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800410c:	2300      	movs	r3, #0
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <SystemClock_Config+0xc8>)
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <SystemClock_Config+0xc8>)
 8004116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411a:	6413      	str	r3, [r2, #64]	; 0x40
 800411c:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <SystemClock_Config+0xc8>)
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004128:	2300      	movs	r3, #0
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <SystemClock_Config+0xcc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <SystemClock_Config+0xcc>)
 8004132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <SystemClock_Config+0xcc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004144:	2302      	movs	r3, #2
 8004146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004148:	2301      	movs	r3, #1
 800414a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800414c:	2310      	movs	r3, #16
 800414e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004150:	2302      	movs	r3, #2
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004154:	2300      	movs	r3, #0
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004158:	2308      	movs	r3, #8
 800415a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800415c:	2364      	movs	r3, #100	; 0x64
 800415e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004160:	2302      	movs	r3, #2
 8004162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004164:	2308      	movs	r3, #8
 8004166:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004168:	f107 0320 	add.w	r3, r7, #32
 800416c:	4618      	mov	r0, r3
 800416e:	f7fd fa77 	bl	8001660 <HAL_RCC_OscConfig>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004178:	f000 f81e 	bl	80041b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800417c:	230f      	movs	r3, #15
 800417e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004180:	2302      	movs	r3, #2
 8004182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800418c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004192:	f107 030c 	add.w	r3, r7, #12
 8004196:	2103      	movs	r1, #3
 8004198:	4618      	mov	r0, r3
 800419a:	f7fd fcd1 	bl	8001b40 <HAL_RCC_ClockConfig>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80041a4:	f000 f808 	bl	80041b8 <Error_Handler>
  }
}
 80041a8:	bf00      	nop
 80041aa:	3750      	adds	r7, #80	; 0x50
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40007000 	.word	0x40007000

080041b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <HAL_MspInit+0x4c>)
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	4a0f      	ldr	r2, [pc, #60]	; (8004214 <HAL_MspInit+0x4c>)
 80041d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041dc:	6453      	str	r3, [r2, #68]	; 0x44
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <HAL_MspInit+0x4c>)
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_MspInit+0x4c>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <HAL_MspInit+0x4c>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_MspInit+0x4c>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004206:	2007      	movs	r0, #7
 8004208:	f7fd f82a 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40023800 	.word	0x40023800

08004218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800422a:	e7fe      	b.n	800422a <HardFault_Handler+0x4>

0800422c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004230:	e7fe      	b.n	8004230 <MemManage_Handler+0x4>

08004232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004232:	b480      	push	{r7}
 8004234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004236:	e7fe      	b.n	8004236 <BusFault_Handler+0x4>

08004238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800423c:	e7fe      	b.n	800423c <UsageFault_Handler+0x4>

0800423e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800423e:	b480      	push	{r7}
 8004240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800426c:	f7fc fee6 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}

08004274 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004278:	4802      	ldr	r0, [pc, #8]	; (8004284 <TIM3_IRQHandler+0x10>)
 800427a:	f7fd ff3e 	bl	80020fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	2000024c 	.word	0x2000024c

08004288 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800428c:	4802      	ldr	r0, [pc, #8]	; (8004298 <TIM4_IRQHandler+0x10>)
 800428e:	f7fd ff34 	bl	80020fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	2000020c 	.word	0x2000020c

0800429c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042a0:	4802      	ldr	r0, [pc, #8]	; (80042ac <USART2_IRQHandler+0x10>)
 80042a2:	f7fe ff8d 	bl	80031c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	2000028c 	.word	0x2000028c

080042b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <_sbrk+0x50>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <_sbrk+0x16>
		heap_end = &end;
 80042c0:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <_sbrk+0x50>)
 80042c2:	4a10      	ldr	r2, [pc, #64]	; (8004304 <_sbrk+0x54>)
 80042c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <_sbrk+0x50>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <_sbrk+0x50>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	466a      	mov	r2, sp
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d907      	bls.n	80042ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80042da:	f000 facf 	bl	800487c <__errno>
 80042de:	4602      	mov	r2, r0
 80042e0:	230c      	movs	r3, #12
 80042e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
 80042e8:	e006      	b.n	80042f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <_sbrk+0x50>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	4a03      	ldr	r2, [pc, #12]	; (8004300 <_sbrk+0x50>)
 80042f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80042f6:	68fb      	ldr	r3, [r7, #12]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	200001f8 	.word	0x200001f8
 8004304:	200002d0 	.word	0x200002d0

08004308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <SystemInit+0x28>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	4a07      	ldr	r2, [pc, #28]	; (8004330 <SystemInit+0x28>)
 8004314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <SystemInit+0x28>)
 800431e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004322:	609a      	str	r2, [r3, #8]
#endif
}
 8004324:	bf00      	nop
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b092      	sub	sp, #72	; 0x48
 8004338:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800433a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004352:	f107 0320 	add.w	r3, r7, #32
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	605a      	str	r2, [r3, #4]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004360:	1d3b      	adds	r3, r7, #4
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	611a      	str	r2, [r3, #16]
 800436e:	615a      	str	r2, [r3, #20]
 8004370:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8004372:	4b43      	ldr	r3, [pc, #268]	; (8004480 <MX_TIM3_Init+0x14c>)
 8004374:	4a43      	ldr	r2, [pc, #268]	; (8004484 <MX_TIM3_Init+0x150>)
 8004376:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8004378:	4b41      	ldr	r3, [pc, #260]	; (8004480 <MX_TIM3_Init+0x14c>)
 800437a:	2263      	movs	r2, #99	; 0x63
 800437c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800437e:	4b40      	ldr	r3, [pc, #256]	; (8004480 <MX_TIM3_Init+0x14c>)
 8004380:	2200      	movs	r2, #0
 8004382:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8004384:	4b3e      	ldr	r3, [pc, #248]	; (8004480 <MX_TIM3_Init+0x14c>)
 8004386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800438a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800438c:	4b3c      	ldr	r3, [pc, #240]	; (8004480 <MX_TIM3_Init+0x14c>)
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004392:	4b3b      	ldr	r3, [pc, #236]	; (8004480 <MX_TIM3_Init+0x14c>)
 8004394:	2200      	movs	r2, #0
 8004396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004398:	4839      	ldr	r0, [pc, #228]	; (8004480 <MX_TIM3_Init+0x14c>)
 800439a:	f7fd fdc3 	bl	8001f24 <HAL_TIM_Base_Init>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80043a4:	f7ff ff08 	bl	80041b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80043ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043b2:	4619      	mov	r1, r3
 80043b4:	4832      	ldr	r0, [pc, #200]	; (8004480 <MX_TIM3_Init+0x14c>)
 80043b6:	f7fe f90b 	bl	80025d0 <HAL_TIM_ConfigClockSource>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80043c0:	f7ff fefa 	bl	80041b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80043c4:	482e      	ldr	r0, [pc, #184]	; (8004480 <MX_TIM3_Init+0x14c>)
 80043c6:	f7fd fe63 	bl	8002090 <HAL_TIM_IC_Init>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80043d0:	f7ff fef2 	bl	80041b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80043d4:	482a      	ldr	r0, [pc, #168]	; (8004480 <MX_TIM3_Init+0x14c>)
 80043d6:	f7fd fdf4 	bl	8001fc2 <HAL_TIM_PWM_Init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80043e0:	f7ff feea 	bl	80041b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043e4:	2300      	movs	r3, #0
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043f0:	4619      	mov	r1, r3
 80043f2:	4823      	ldr	r0, [pc, #140]	; (8004480 <MX_TIM3_Init+0x14c>)
 80043f4:	f7fe fdc0 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80043fe:	f7ff fedb 	bl	80041b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004406:	2301      	movs	r3, #1
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800440a:	2300      	movs	r3, #0
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004412:	f107 0320 	add.w	r3, r7, #32
 8004416:	2200      	movs	r2, #0
 8004418:	4619      	mov	r1, r3
 800441a:	4819      	ldr	r0, [pc, #100]	; (8004480 <MX_TIM3_Init+0x14c>)
 800441c:	f7fd ff75 	bl	800230a <HAL_TIM_IC_ConfigChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8004426:	f7ff fec7 	bl	80041b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800442a:	2302      	movs	r3, #2
 800442c:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800442e:	2302      	movs	r3, #2
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8004432:	f107 0320 	add.w	r3, r7, #32
 8004436:	2204      	movs	r2, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4811      	ldr	r0, [pc, #68]	; (8004480 <MX_TIM3_Init+0x14c>)
 800443c:	f7fd ff65 	bl	800230a <HAL_TIM_IC_ConfigChannel>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8004446:	f7ff feb7 	bl	80041b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800444a:	2360      	movs	r3, #96	; 0x60
 800444c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11;
 800444e:	230b      	movs	r3, #11
 8004450:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	2208      	movs	r2, #8
 800445e:	4619      	mov	r1, r3
 8004460:	4807      	ldr	r0, [pc, #28]	; (8004480 <MX_TIM3_Init+0x14c>)
 8004462:	f7fd ffef 	bl	8002444 <HAL_TIM_PWM_ConfigChannel>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_TIM3_Init+0x13c>
  {
    Error_Handler();
 800446c:	f7ff fea4 	bl	80041b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8004470:	4803      	ldr	r0, [pc, #12]	; (8004480 <MX_TIM3_Init+0x14c>)
 8004472:	f000 f8f9 	bl	8004668 <HAL_TIM_MspPostInit>

}
 8004476:	bf00      	nop
 8004478:	3748      	adds	r7, #72	; 0x48
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2000024c 	.word	0x2000024c
 8004484:	40000400 	.word	0x40000400

08004488 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	; 0x38
 800448c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800448e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	609a      	str	r2, [r3, #8]
 800449a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800449c:	f107 0320 	add.w	r3, r7, #32
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
 80044b4:	615a      	str	r2, [r3, #20]
 80044b6:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80044b8:	4b32      	ldr	r3, [pc, #200]	; (8004584 <MX_TIM4_Init+0xfc>)
 80044ba:	4a33      	ldr	r2, [pc, #204]	; (8004588 <MX_TIM4_Init+0x100>)
 80044bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200;
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <MX_TIM4_Init+0xfc>)
 80044c0:	22c8      	movs	r2, #200	; 0xc8
 80044c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c4:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <MX_TIM4_Init+0xfc>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80044ca:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <MX_TIM4_Init+0xfc>)
 80044cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80044d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044d2:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <MX_TIM4_Init+0xfc>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044d8:	4b2a      	ldr	r3, [pc, #168]	; (8004584 <MX_TIM4_Init+0xfc>)
 80044da:	2200      	movs	r2, #0
 80044dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044de:	4829      	ldr	r0, [pc, #164]	; (8004584 <MX_TIM4_Init+0xfc>)
 80044e0:	f7fd fd20 	bl	8001f24 <HAL_TIM_Base_Init>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80044ea:	f7ff fe65 	bl	80041b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80044f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044f8:	4619      	mov	r1, r3
 80044fa:	4822      	ldr	r0, [pc, #136]	; (8004584 <MX_TIM4_Init+0xfc>)
 80044fc:	f7fe f868 	bl	80025d0 <HAL_TIM_ConfigClockSource>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004506:	f7ff fe57 	bl	80041b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800450a:	481e      	ldr	r0, [pc, #120]	; (8004584 <MX_TIM4_Init+0xfc>)
 800450c:	f7fd fd59 	bl	8001fc2 <HAL_TIM_PWM_Init>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004516:	f7ff fe4f 	bl	80041b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004522:	f107 0320 	add.w	r3, r7, #32
 8004526:	4619      	mov	r1, r3
 8004528:	4816      	ldr	r0, [pc, #88]	; (8004584 <MX_TIM4_Init+0xfc>)
 800452a:	f7fe fd25 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004534:	f7ff fe40 	bl	80041b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004538:	2360      	movs	r3, #96	; 0x60
 800453a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004548:	1d3b      	adds	r3, r7, #4
 800454a:	2200      	movs	r2, #0
 800454c:	4619      	mov	r1, r3
 800454e:	480d      	ldr	r0, [pc, #52]	; (8004584 <MX_TIM4_Init+0xfc>)
 8004550:	f7fd ff78 	bl	8002444 <HAL_TIM_PWM_ConfigChannel>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800455a:	f7ff fe2d 	bl	80041b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800455e:	1d3b      	adds	r3, r7, #4
 8004560:	2204      	movs	r2, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4807      	ldr	r0, [pc, #28]	; (8004584 <MX_TIM4_Init+0xfc>)
 8004566:	f7fd ff6d 	bl	8002444 <HAL_TIM_PWM_ConfigChannel>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8004570:	f7ff fe22 	bl	80041b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8004574:	4803      	ldr	r0, [pc, #12]	; (8004584 <MX_TIM4_Init+0xfc>)
 8004576:	f000 f877 	bl	8004668 <HAL_TIM_MspPostInit>

}
 800457a:	bf00      	nop
 800457c:	3738      	adds	r7, #56	; 0x38
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	2000020c 	.word	0x2000020c
 8004588:	40000800 	.word	0x40000800

0800458c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004594:	f107 0314 	add.w	r3, r7, #20
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <HAL_TIM_Base_MspInit+0xcc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d134      	bne.n	8004618 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	4b2a      	ldr	r3, [pc, #168]	; (800465c <HAL_TIM_Base_MspInit+0xd0>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4a29      	ldr	r2, [pc, #164]	; (800465c <HAL_TIM_Base_MspInit+0xd0>)
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	6413      	str	r3, [r2, #64]	; 0x40
 80045be:	4b27      	ldr	r3, [pc, #156]	; (800465c <HAL_TIM_Base_MspInit+0xd0>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	4b23      	ldr	r3, [pc, #140]	; (800465c <HAL_TIM_Base_MspInit+0xd0>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <HAL_TIM_Base_MspInit+0xd0>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b20      	ldr	r3, [pc, #128]	; (800465c <HAL_TIM_Base_MspInit+0xd0>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80045e6:	2340      	movs	r3, #64	; 0x40
 80045e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ea:	2302      	movs	r3, #2
 80045ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f2:	2300      	movs	r3, #0
 80045f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80045f6:	2302      	movs	r3, #2
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fa:	f107 0314 	add.w	r3, r7, #20
 80045fe:	4619      	mov	r1, r3
 8004600:	4817      	ldr	r0, [pc, #92]	; (8004660 <HAL_TIM_Base_MspInit+0xd4>)
 8004602:	f7fc fe91 	bl	8001328 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004606:	2200      	movs	r2, #0
 8004608:	2100      	movs	r1, #0
 800460a:	201d      	movs	r0, #29
 800460c:	f7fc fe33 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004610:	201d      	movs	r0, #29
 8004612:	f7fc fe4c 	bl	80012ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004616:	e01a      	b.n	800464e <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM4)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a11      	ldr	r2, [pc, #68]	; (8004664 <HAL_TIM_Base_MspInit+0xd8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d115      	bne.n	800464e <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	4b0d      	ldr	r3, [pc, #52]	; (800465c <HAL_TIM_Base_MspInit+0xd0>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a0c      	ldr	r2, [pc, #48]	; (800465c <HAL_TIM_Base_MspInit+0xd0>)
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <HAL_TIM_Base_MspInit+0xd0>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800463e:	2200      	movs	r2, #0
 8004640:	2100      	movs	r1, #0
 8004642:	201e      	movs	r0, #30
 8004644:	f7fc fe17 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004648:	201e      	movs	r0, #30
 800464a:	f7fc fe30 	bl	80012ae <HAL_NVIC_EnableIRQ>
}
 800464e:	bf00      	nop
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40000400 	.word	0x40000400
 800465c:	40023800 	.word	0x40023800
 8004660:	40020000 	.word	0x40020000
 8004664:	40000800 	.word	0x40000800

08004668 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a24      	ldr	r2, [pc, #144]	; (8004718 <HAL_TIM_MspPostInit+0xb0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d11e      	bne.n	80046c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_TIM_MspPostInit+0xb4>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a22      	ldr	r2, [pc, #136]	; (800471c <HAL_TIM_MspPostInit+0xb4>)
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b20      	ldr	r3, [pc, #128]	; (800471c <HAL_TIM_MspPostInit+0xb4>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046a6:	2301      	movs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046aa:	2302      	movs	r3, #2
 80046ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b2:	2300      	movs	r3, #0
 80046b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046b6:	2302      	movs	r3, #2
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ba:	f107 0314 	add.w	r3, r7, #20
 80046be:	4619      	mov	r1, r3
 80046c0:	4817      	ldr	r0, [pc, #92]	; (8004720 <HAL_TIM_MspPostInit+0xb8>)
 80046c2:	f7fc fe31 	bl	8001328 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80046c6:	e023      	b.n	8004710 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a15      	ldr	r2, [pc, #84]	; (8004724 <HAL_TIM_MspPostInit+0xbc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d11e      	bne.n	8004710 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <HAL_TIM_MspPostInit+0xb4>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	4a10      	ldr	r2, [pc, #64]	; (800471c <HAL_TIM_MspPostInit+0xb4>)
 80046dc:	f043 0308 	orr.w	r3, r3, #8
 80046e0:	6313      	str	r3, [r2, #48]	; 0x30
 80046e2:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_TIM_MspPostInit+0xb4>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80046ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80046f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f4:	2302      	movs	r3, #2
 80046f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046fc:	2300      	movs	r3, #0
 80046fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004700:	2302      	movs	r3, #2
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004704:	f107 0314 	add.w	r3, r7, #20
 8004708:	4619      	mov	r1, r3
 800470a:	4807      	ldr	r0, [pc, #28]	; (8004728 <HAL_TIM_MspPostInit+0xc0>)
 800470c:	f7fc fe0c 	bl	8001328 <HAL_GPIO_Init>
}
 8004710:	bf00      	nop
 8004712:	3728      	adds	r7, #40	; 0x28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40000400 	.word	0x40000400
 800471c:	40023800 	.word	0x40023800
 8004720:	40020400 	.word	0x40020400
 8004724:	40000800 	.word	0x40000800
 8004728:	40020c00 	.word	0x40020c00

0800472c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <MX_USART2_UART_Init+0x4c>)
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <MX_USART2_UART_Init+0x50>)
 8004734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004736:	4b10      	ldr	r3, [pc, #64]	; (8004778 <MX_USART2_UART_Init+0x4c>)
 8004738:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800473c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <MX_USART2_UART_Init+0x4c>)
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <MX_USART2_UART_Init+0x4c>)
 8004746:	2200      	movs	r2, #0
 8004748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <MX_USART2_UART_Init+0x4c>)
 800474c:	2200      	movs	r2, #0
 800474e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <MX_USART2_UART_Init+0x4c>)
 8004752:	220c      	movs	r2, #12
 8004754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <MX_USART2_UART_Init+0x4c>)
 8004758:	2200      	movs	r2, #0
 800475a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <MX_USART2_UART_Init+0x4c>)
 800475e:	2200      	movs	r2, #0
 8004760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004762:	4805      	ldr	r0, [pc, #20]	; (8004778 <MX_USART2_UART_Init+0x4c>)
 8004764:	f7fe fc8a 	bl	800307c <HAL_UART_Init>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800476e:	f7ff fd23 	bl	80041b8 <Error_Handler>
  }

}
 8004772:	bf00      	nop
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	2000028c 	.word	0x2000028c
 800477c:	40004400 	.word	0x40004400

08004780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08a      	sub	sp, #40	; 0x28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	60da      	str	r2, [r3, #12]
 8004796:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <HAL_UART_MspInit+0x94>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d133      	bne.n	800480a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_UART_MspInit+0x98>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_UART_MspInit+0x98>)
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_UART_MspInit+0x98>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <HAL_UART_MspInit+0x98>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	4a14      	ldr	r2, [pc, #80]	; (8004818 <HAL_UART_MspInit+0x98>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6313      	str	r3, [r2, #48]	; 0x30
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_UART_MspInit+0x98>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047da:	230c      	movs	r3, #12
 80047dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047de:	2302      	movs	r3, #2
 80047e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e6:	2303      	movs	r3, #3
 80047e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80047ea:	2307      	movs	r3, #7
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ee:	f107 0314 	add.w	r3, r7, #20
 80047f2:	4619      	mov	r1, r3
 80047f4:	4809      	ldr	r0, [pc, #36]	; (800481c <HAL_UART_MspInit+0x9c>)
 80047f6:	f7fc fd97 	bl	8001328 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80047fa:	2200      	movs	r2, #0
 80047fc:	2100      	movs	r1, #0
 80047fe:	2026      	movs	r0, #38	; 0x26
 8004800:	f7fc fd39 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004804:	2026      	movs	r0, #38	; 0x26
 8004806:	f7fc fd52 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800480a:	bf00      	nop
 800480c:	3728      	adds	r7, #40	; 0x28
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40004400 	.word	0x40004400
 8004818:	40023800 	.word	0x40023800
 800481c:	40020000 	.word	0x40020000

08004820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004858 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004824:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004826:	e003      	b.n	8004830 <LoopCopyDataInit>

08004828 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800482a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800482c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800482e:	3104      	adds	r1, #4

08004830 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004830:	480b      	ldr	r0, [pc, #44]	; (8004860 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004834:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004836:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004838:	d3f6      	bcc.n	8004828 <CopyDataInit>
  ldr  r2, =_sbss
 800483a:	4a0b      	ldr	r2, [pc, #44]	; (8004868 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800483c:	e002      	b.n	8004844 <LoopFillZerobss>

0800483e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800483e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004840:	f842 3b04 	str.w	r3, [r2], #4

08004844 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004846:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004848:	d3f9      	bcc.n	800483e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800484a:	f7ff fd5d 	bl	8004308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800484e:	f000 f81b 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004852:	f7ff fbdb 	bl	800400c <main>
  bx  lr    
 8004856:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004858:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800485c:	08008670 	.word	0x08008670
  ldr  r0, =_sdata
 8004860:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004864:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8004868:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800486c:	200002d0 	.word	0x200002d0

08004870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004870:	e7fe      	b.n	8004870 <ADC_IRQHandler>

08004872 <atoi>:
 8004872:	220a      	movs	r2, #10
 8004874:	2100      	movs	r1, #0
 8004876:	f001 bd45 	b.w	8006304 <strtol>
	...

0800487c <__errno>:
 800487c:	4b01      	ldr	r3, [pc, #4]	; (8004884 <__errno+0x8>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	2000000c 	.word	0x2000000c

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4e0d      	ldr	r6, [pc, #52]	; (80048c0 <__libc_init_array+0x38>)
 800488c:	4c0d      	ldr	r4, [pc, #52]	; (80048c4 <__libc_init_array+0x3c>)
 800488e:	1ba4      	subs	r4, r4, r6
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	2500      	movs	r5, #0
 8004894:	42a5      	cmp	r5, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	4e0b      	ldr	r6, [pc, #44]	; (80048c8 <__libc_init_array+0x40>)
 800489a:	4c0c      	ldr	r4, [pc, #48]	; (80048cc <__libc_init_array+0x44>)
 800489c:	f003 fd6a 	bl	8008374 <_init>
 80048a0:	1ba4      	subs	r4, r4, r6
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	2500      	movs	r5, #0
 80048a6:	42a5      	cmp	r5, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048b0:	4798      	blx	r3
 80048b2:	3501      	adds	r5, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048ba:	4798      	blx	r3
 80048bc:	3501      	adds	r5, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	08008668 	.word	0x08008668
 80048c4:	08008668 	.word	0x08008668
 80048c8:	08008668 	.word	0x08008668
 80048cc:	0800866c 	.word	0x0800866c

080048d0 <memset>:
 80048d0:	4402      	add	r2, r0
 80048d2:	4603      	mov	r3, r0
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d100      	bne.n	80048da <memset+0xa>
 80048d8:	4770      	bx	lr
 80048da:	f803 1b01 	strb.w	r1, [r3], #1
 80048de:	e7f9      	b.n	80048d4 <memset+0x4>

080048e0 <__cvt>:
 80048e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	ec55 4b10 	vmov	r4, r5, d0
 80048e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80048ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	460e      	mov	r6, r1
 80048f2:	4691      	mov	r9, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	bfb8      	it	lt
 80048f8:	4622      	movlt	r2, r4
 80048fa:	462b      	mov	r3, r5
 80048fc:	f027 0720 	bic.w	r7, r7, #32
 8004900:	bfbb      	ittet	lt
 8004902:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004906:	461d      	movlt	r5, r3
 8004908:	2300      	movge	r3, #0
 800490a:	232d      	movlt	r3, #45	; 0x2d
 800490c:	bfb8      	it	lt
 800490e:	4614      	movlt	r4, r2
 8004910:	2f46      	cmp	r7, #70	; 0x46
 8004912:	700b      	strb	r3, [r1, #0]
 8004914:	d004      	beq.n	8004920 <__cvt+0x40>
 8004916:	2f45      	cmp	r7, #69	; 0x45
 8004918:	d100      	bne.n	800491c <__cvt+0x3c>
 800491a:	3601      	adds	r6, #1
 800491c:	2102      	movs	r1, #2
 800491e:	e000      	b.n	8004922 <__cvt+0x42>
 8004920:	2103      	movs	r1, #3
 8004922:	ab03      	add	r3, sp, #12
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	ab02      	add	r3, sp, #8
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	4632      	mov	r2, r6
 800492c:	4653      	mov	r3, sl
 800492e:	ec45 4b10 	vmov	d0, r4, r5
 8004932:	f001 fd89 	bl	8006448 <_dtoa_r>
 8004936:	2f47      	cmp	r7, #71	; 0x47
 8004938:	4680      	mov	r8, r0
 800493a:	d102      	bne.n	8004942 <__cvt+0x62>
 800493c:	f019 0f01 	tst.w	r9, #1
 8004940:	d026      	beq.n	8004990 <__cvt+0xb0>
 8004942:	2f46      	cmp	r7, #70	; 0x46
 8004944:	eb08 0906 	add.w	r9, r8, r6
 8004948:	d111      	bne.n	800496e <__cvt+0x8e>
 800494a:	f898 3000 	ldrb.w	r3, [r8]
 800494e:	2b30      	cmp	r3, #48	; 0x30
 8004950:	d10a      	bne.n	8004968 <__cvt+0x88>
 8004952:	2200      	movs	r2, #0
 8004954:	2300      	movs	r3, #0
 8004956:	4620      	mov	r0, r4
 8004958:	4629      	mov	r1, r5
 800495a:	f7fc f8bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800495e:	b918      	cbnz	r0, 8004968 <__cvt+0x88>
 8004960:	f1c6 0601 	rsb	r6, r6, #1
 8004964:	f8ca 6000 	str.w	r6, [sl]
 8004968:	f8da 3000 	ldr.w	r3, [sl]
 800496c:	4499      	add	r9, r3
 800496e:	2200      	movs	r2, #0
 8004970:	2300      	movs	r3, #0
 8004972:	4620      	mov	r0, r4
 8004974:	4629      	mov	r1, r5
 8004976:	f7fc f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800497a:	b938      	cbnz	r0, 800498c <__cvt+0xac>
 800497c:	2230      	movs	r2, #48	; 0x30
 800497e:	9b03      	ldr	r3, [sp, #12]
 8004980:	454b      	cmp	r3, r9
 8004982:	d205      	bcs.n	8004990 <__cvt+0xb0>
 8004984:	1c59      	adds	r1, r3, #1
 8004986:	9103      	str	r1, [sp, #12]
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e7f8      	b.n	800497e <__cvt+0x9e>
 800498c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004990:	9b03      	ldr	r3, [sp, #12]
 8004992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004994:	eba3 0308 	sub.w	r3, r3, r8
 8004998:	4640      	mov	r0, r8
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	b004      	add	sp, #16
 800499e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080049a2 <__exponent>:
 80049a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049a4:	2900      	cmp	r1, #0
 80049a6:	4604      	mov	r4, r0
 80049a8:	bfba      	itte	lt
 80049aa:	4249      	neglt	r1, r1
 80049ac:	232d      	movlt	r3, #45	; 0x2d
 80049ae:	232b      	movge	r3, #43	; 0x2b
 80049b0:	2909      	cmp	r1, #9
 80049b2:	f804 2b02 	strb.w	r2, [r4], #2
 80049b6:	7043      	strb	r3, [r0, #1]
 80049b8:	dd20      	ble.n	80049fc <__exponent+0x5a>
 80049ba:	f10d 0307 	add.w	r3, sp, #7
 80049be:	461f      	mov	r7, r3
 80049c0:	260a      	movs	r6, #10
 80049c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80049c6:	fb06 1115 	mls	r1, r6, r5, r1
 80049ca:	3130      	adds	r1, #48	; 0x30
 80049cc:	2d09      	cmp	r5, #9
 80049ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049d2:	f103 32ff 	add.w	r2, r3, #4294967295
 80049d6:	4629      	mov	r1, r5
 80049d8:	dc09      	bgt.n	80049ee <__exponent+0x4c>
 80049da:	3130      	adds	r1, #48	; 0x30
 80049dc:	3b02      	subs	r3, #2
 80049de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049e2:	42bb      	cmp	r3, r7
 80049e4:	4622      	mov	r2, r4
 80049e6:	d304      	bcc.n	80049f2 <__exponent+0x50>
 80049e8:	1a10      	subs	r0, r2, r0
 80049ea:	b003      	add	sp, #12
 80049ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ee:	4613      	mov	r3, r2
 80049f0:	e7e7      	b.n	80049c2 <__exponent+0x20>
 80049f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f6:	f804 2b01 	strb.w	r2, [r4], #1
 80049fa:	e7f2      	b.n	80049e2 <__exponent+0x40>
 80049fc:	2330      	movs	r3, #48	; 0x30
 80049fe:	4419      	add	r1, r3
 8004a00:	7083      	strb	r3, [r0, #2]
 8004a02:	1d02      	adds	r2, r0, #4
 8004a04:	70c1      	strb	r1, [r0, #3]
 8004a06:	e7ef      	b.n	80049e8 <__exponent+0x46>

08004a08 <_printf_float>:
 8004a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0c:	b08d      	sub	sp, #52	; 0x34
 8004a0e:	460c      	mov	r4, r1
 8004a10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004a14:	4616      	mov	r6, r2
 8004a16:	461f      	mov	r7, r3
 8004a18:	4605      	mov	r5, r0
 8004a1a:	f002 fdf9 	bl	8007610 <_localeconv_r>
 8004a1e:	6803      	ldr	r3, [r0, #0]
 8004a20:	9304      	str	r3, [sp, #16]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fb fbdc 	bl	80001e0 <strlen>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a30:	9005      	str	r0, [sp, #20]
 8004a32:	3307      	adds	r3, #7
 8004a34:	f023 0307 	bic.w	r3, r3, #7
 8004a38:	f103 0208 	add.w	r2, r3, #8
 8004a3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a40:	f8d4 b000 	ldr.w	fp, [r4]
 8004a44:	f8c8 2000 	str.w	r2, [r8]
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a58:	9307      	str	r3, [sp, #28]
 8004a5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a62:	4ba7      	ldr	r3, [pc, #668]	; (8004d00 <_printf_float+0x2f8>)
 8004a64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a68:	f7fc f868 	bl	8000b3c <__aeabi_dcmpun>
 8004a6c:	bb70      	cbnz	r0, 8004acc <_printf_float+0xc4>
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	4ba3      	ldr	r3, [pc, #652]	; (8004d00 <_printf_float+0x2f8>)
 8004a74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a78:	f7fc f842 	bl	8000b00 <__aeabi_dcmple>
 8004a7c:	bb30      	cbnz	r0, 8004acc <_printf_float+0xc4>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2300      	movs	r3, #0
 8004a82:	4640      	mov	r0, r8
 8004a84:	4649      	mov	r1, r9
 8004a86:	f7fc f831 	bl	8000aec <__aeabi_dcmplt>
 8004a8a:	b110      	cbz	r0, 8004a92 <_printf_float+0x8a>
 8004a8c:	232d      	movs	r3, #45	; 0x2d
 8004a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a92:	4a9c      	ldr	r2, [pc, #624]	; (8004d04 <_printf_float+0x2fc>)
 8004a94:	4b9c      	ldr	r3, [pc, #624]	; (8004d08 <_printf_float+0x300>)
 8004a96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004a9a:	bf8c      	ite	hi
 8004a9c:	4690      	movhi	r8, r2
 8004a9e:	4698      	movls	r8, r3
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	f02b 0204 	bic.w	r2, fp, #4
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	6022      	str	r2, [r4, #0]
 8004aaa:	f04f 0900 	mov.w	r9, #0
 8004aae:	9700      	str	r7, [sp, #0]
 8004ab0:	4633      	mov	r3, r6
 8004ab2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 f9e6 	bl	8004e88 <_printf_common>
 8004abc:	3001      	adds	r0, #1
 8004abe:	f040 808d 	bne.w	8004bdc <_printf_float+0x1d4>
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac6:	b00d      	add	sp, #52	; 0x34
 8004ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	f7fc f832 	bl	8000b3c <__aeabi_dcmpun>
 8004ad8:	b110      	cbz	r0, 8004ae0 <_printf_float+0xd8>
 8004ada:	4a8c      	ldr	r2, [pc, #560]	; (8004d0c <_printf_float+0x304>)
 8004adc:	4b8c      	ldr	r3, [pc, #560]	; (8004d10 <_printf_float+0x308>)
 8004ade:	e7da      	b.n	8004a96 <_printf_float+0x8e>
 8004ae0:	6861      	ldr	r1, [r4, #4]
 8004ae2:	1c4b      	adds	r3, r1, #1
 8004ae4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004ae8:	a80a      	add	r0, sp, #40	; 0x28
 8004aea:	d13e      	bne.n	8004b6a <_printf_float+0x162>
 8004aec:	2306      	movs	r3, #6
 8004aee:	6063      	str	r3, [r4, #4]
 8004af0:	2300      	movs	r3, #0
 8004af2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004af6:	ab09      	add	r3, sp, #36	; 0x24
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	ec49 8b10 	vmov	d0, r8, r9
 8004afe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b02:	6022      	str	r2, [r4, #0]
 8004b04:	f8cd a004 	str.w	sl, [sp, #4]
 8004b08:	6861      	ldr	r1, [r4, #4]
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f7ff fee8 	bl	80048e0 <__cvt>
 8004b10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004b14:	2b47      	cmp	r3, #71	; 0x47
 8004b16:	4680      	mov	r8, r0
 8004b18:	d109      	bne.n	8004b2e <_printf_float+0x126>
 8004b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1c:	1cd8      	adds	r0, r3, #3
 8004b1e:	db02      	blt.n	8004b26 <_printf_float+0x11e>
 8004b20:	6862      	ldr	r2, [r4, #4]
 8004b22:	4293      	cmp	r3, r2
 8004b24:	dd47      	ble.n	8004bb6 <_printf_float+0x1ae>
 8004b26:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b2a:	fa5f fa8a 	uxtb.w	sl, sl
 8004b2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004b32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b34:	d824      	bhi.n	8004b80 <_printf_float+0x178>
 8004b36:	3901      	subs	r1, #1
 8004b38:	4652      	mov	r2, sl
 8004b3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b3e:	9109      	str	r1, [sp, #36]	; 0x24
 8004b40:	f7ff ff2f 	bl	80049a2 <__exponent>
 8004b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b46:	1813      	adds	r3, r2, r0
 8004b48:	2a01      	cmp	r2, #1
 8004b4a:	4681      	mov	r9, r0
 8004b4c:	6123      	str	r3, [r4, #16]
 8004b4e:	dc02      	bgt.n	8004b56 <_printf_float+0x14e>
 8004b50:	6822      	ldr	r2, [r4, #0]
 8004b52:	07d1      	lsls	r1, r2, #31
 8004b54:	d501      	bpl.n	8004b5a <_printf_float+0x152>
 8004b56:	3301      	adds	r3, #1
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0a5      	beq.n	8004aae <_printf_float+0xa6>
 8004b62:	232d      	movs	r3, #45	; 0x2d
 8004b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b68:	e7a1      	b.n	8004aae <_printf_float+0xa6>
 8004b6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004b6e:	f000 8177 	beq.w	8004e60 <_printf_float+0x458>
 8004b72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004b76:	d1bb      	bne.n	8004af0 <_printf_float+0xe8>
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	d1b9      	bne.n	8004af0 <_printf_float+0xe8>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e7b6      	b.n	8004aee <_printf_float+0xe6>
 8004b80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004b84:	d119      	bne.n	8004bba <_printf_float+0x1b2>
 8004b86:	2900      	cmp	r1, #0
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	dd0c      	ble.n	8004ba6 <_printf_float+0x19e>
 8004b8c:	6121      	str	r1, [r4, #16]
 8004b8e:	b913      	cbnz	r3, 8004b96 <_printf_float+0x18e>
 8004b90:	6822      	ldr	r2, [r4, #0]
 8004b92:	07d2      	lsls	r2, r2, #31
 8004b94:	d502      	bpl.n	8004b9c <_printf_float+0x194>
 8004b96:	3301      	adds	r3, #1
 8004b98:	440b      	add	r3, r1
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ba0:	f04f 0900 	mov.w	r9, #0
 8004ba4:	e7d9      	b.n	8004b5a <_printf_float+0x152>
 8004ba6:	b913      	cbnz	r3, 8004bae <_printf_float+0x1a6>
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	07d0      	lsls	r0, r2, #31
 8004bac:	d501      	bpl.n	8004bb2 <_printf_float+0x1aa>
 8004bae:	3302      	adds	r3, #2
 8004bb0:	e7f3      	b.n	8004b9a <_printf_float+0x192>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e7f1      	b.n	8004b9a <_printf_float+0x192>
 8004bb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004bba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	db05      	blt.n	8004bce <_printf_float+0x1c6>
 8004bc2:	6822      	ldr	r2, [r4, #0]
 8004bc4:	6123      	str	r3, [r4, #16]
 8004bc6:	07d1      	lsls	r1, r2, #31
 8004bc8:	d5e8      	bpl.n	8004b9c <_printf_float+0x194>
 8004bca:	3301      	adds	r3, #1
 8004bcc:	e7e5      	b.n	8004b9a <_printf_float+0x192>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bfd4      	ite	le
 8004bd2:	f1c3 0302 	rsble	r3, r3, #2
 8004bd6:	2301      	movgt	r3, #1
 8004bd8:	4413      	add	r3, r2
 8004bda:	e7de      	b.n	8004b9a <_printf_float+0x192>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	055a      	lsls	r2, r3, #21
 8004be0:	d407      	bmi.n	8004bf2 <_printf_float+0x1ea>
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	4642      	mov	r2, r8
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	d12b      	bne.n	8004c48 <_printf_float+0x240>
 8004bf0:	e767      	b.n	8004ac2 <_printf_float+0xba>
 8004bf2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004bf6:	f240 80dc 	bls.w	8004db2 <_printf_float+0x3aa>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c02:	f7fb ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	d033      	beq.n	8004c72 <_printf_float+0x26a>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4a41      	ldr	r2, [pc, #260]	; (8004d14 <_printf_float+0x30c>)
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	f43f af54 	beq.w	8004ac2 <_printf_float+0xba>
 8004c1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	db02      	blt.n	8004c28 <_printf_float+0x220>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	07d8      	lsls	r0, r3, #31
 8004c26:	d50f      	bpl.n	8004c48 <_printf_float+0x240>
 8004c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	f43f af45 	beq.w	8004ac2 <_printf_float+0xba>
 8004c38:	f04f 0800 	mov.w	r8, #0
 8004c3c:	f104 091a 	add.w	r9, r4, #26
 8004c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	4543      	cmp	r3, r8
 8004c46:	dc09      	bgt.n	8004c5c <_printf_float+0x254>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	079b      	lsls	r3, r3, #30
 8004c4c:	f100 8103 	bmi.w	8004e56 <_printf_float+0x44e>
 8004c50:	68e0      	ldr	r0, [r4, #12]
 8004c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c54:	4298      	cmp	r0, r3
 8004c56:	bfb8      	it	lt
 8004c58:	4618      	movlt	r0, r3
 8004c5a:	e734      	b.n	8004ac6 <_printf_float+0xbe>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	464a      	mov	r2, r9
 8004c60:	4631      	mov	r1, r6
 8004c62:	4628      	mov	r0, r5
 8004c64:	47b8      	blx	r7
 8004c66:	3001      	adds	r0, #1
 8004c68:	f43f af2b 	beq.w	8004ac2 <_printf_float+0xba>
 8004c6c:	f108 0801 	add.w	r8, r8, #1
 8004c70:	e7e6      	b.n	8004c40 <_printf_float+0x238>
 8004c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dc2b      	bgt.n	8004cd0 <_printf_float+0x2c8>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <_printf_float+0x30c>)
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	f43f af1d 	beq.w	8004ac2 <_printf_float+0xba>
 8004c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c8a:	b923      	cbnz	r3, 8004c96 <_printf_float+0x28e>
 8004c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c8e:	b913      	cbnz	r3, 8004c96 <_printf_float+0x28e>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07d9      	lsls	r1, r3, #31
 8004c94:	d5d8      	bpl.n	8004c48 <_printf_float+0x240>
 8004c96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b8      	blx	r7
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f af0e 	beq.w	8004ac2 <_printf_float+0xba>
 8004ca6:	f04f 0900 	mov.w	r9, #0
 8004caa:	f104 0a1a 	add.w	sl, r4, #26
 8004cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	454b      	cmp	r3, r9
 8004cb4:	dc01      	bgt.n	8004cba <_printf_float+0x2b2>
 8004cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb8:	e794      	b.n	8004be4 <_printf_float+0x1dc>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4652      	mov	r2, sl
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	47b8      	blx	r7
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f43f aefc 	beq.w	8004ac2 <_printf_float+0xba>
 8004cca:	f109 0901 	add.w	r9, r9, #1
 8004cce:	e7ee      	b.n	8004cae <_printf_float+0x2a6>
 8004cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	bfa8      	it	ge
 8004cd8:	461a      	movge	r2, r3
 8004cda:	2a00      	cmp	r2, #0
 8004cdc:	4691      	mov	r9, r2
 8004cde:	dd07      	ble.n	8004cf0 <_printf_float+0x2e8>
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	47b8      	blx	r7
 8004cea:	3001      	adds	r0, #1
 8004cec:	f43f aee9 	beq.w	8004ac2 <_printf_float+0xba>
 8004cf0:	f104 031a 	add.w	r3, r4, #26
 8004cf4:	f04f 0b00 	mov.w	fp, #0
 8004cf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cfc:	9306      	str	r3, [sp, #24]
 8004cfe:	e015      	b.n	8004d2c <_printf_float+0x324>
 8004d00:	7fefffff 	.word	0x7fefffff
 8004d04:	080083ac 	.word	0x080083ac
 8004d08:	080083a8 	.word	0x080083a8
 8004d0c:	080083b4 	.word	0x080083b4
 8004d10:	080083b0 	.word	0x080083b0
 8004d14:	080083b8 	.word	0x080083b8
 8004d18:	2301      	movs	r3, #1
 8004d1a:	9a06      	ldr	r2, [sp, #24]
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f aecd 	beq.w	8004ac2 <_printf_float+0xba>
 8004d28:	f10b 0b01 	add.w	fp, fp, #1
 8004d2c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d30:	ebaa 0309 	sub.w	r3, sl, r9
 8004d34:	455b      	cmp	r3, fp
 8004d36:	dcef      	bgt.n	8004d18 <_printf_float+0x310>
 8004d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	44d0      	add	r8, sl
 8004d40:	db15      	blt.n	8004d6e <_printf_float+0x366>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	07da      	lsls	r2, r3, #31
 8004d46:	d412      	bmi.n	8004d6e <_printf_float+0x366>
 8004d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d4c:	eba3 020a 	sub.w	r2, r3, sl
 8004d50:	eba3 0a01 	sub.w	sl, r3, r1
 8004d54:	4592      	cmp	sl, r2
 8004d56:	bfa8      	it	ge
 8004d58:	4692      	movge	sl, r2
 8004d5a:	f1ba 0f00 	cmp.w	sl, #0
 8004d5e:	dc0e      	bgt.n	8004d7e <_printf_float+0x376>
 8004d60:	f04f 0800 	mov.w	r8, #0
 8004d64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d68:	f104 091a 	add.w	r9, r4, #26
 8004d6c:	e019      	b.n	8004da2 <_printf_float+0x39a>
 8004d6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d72:	4631      	mov	r1, r6
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d1e5      	bne.n	8004d48 <_printf_float+0x340>
 8004d7c:	e6a1      	b.n	8004ac2 <_printf_float+0xba>
 8004d7e:	4653      	mov	r3, sl
 8004d80:	4642      	mov	r2, r8
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b8      	blx	r7
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d1e9      	bne.n	8004d60 <_printf_float+0x358>
 8004d8c:	e699      	b.n	8004ac2 <_printf_float+0xba>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	464a      	mov	r2, r9
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	f43f ae92 	beq.w	8004ac2 <_printf_float+0xba>
 8004d9e:	f108 0801 	add.w	r8, r8, #1
 8004da2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	eba3 030a 	sub.w	r3, r3, sl
 8004dac:	4543      	cmp	r3, r8
 8004dae:	dcee      	bgt.n	8004d8e <_printf_float+0x386>
 8004db0:	e74a      	b.n	8004c48 <_printf_float+0x240>
 8004db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004db4:	2a01      	cmp	r2, #1
 8004db6:	dc01      	bgt.n	8004dbc <_printf_float+0x3b4>
 8004db8:	07db      	lsls	r3, r3, #31
 8004dba:	d53a      	bpl.n	8004e32 <_printf_float+0x42a>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	47b8      	blx	r7
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	f43f ae7b 	beq.w	8004ac2 <_printf_float+0xba>
 8004dcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b8      	blx	r7
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	f108 0801 	add.w	r8, r8, #1
 8004ddc:	f43f ae71 	beq.w	8004ac2 <_printf_float+0xba>
 8004de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004de2:	2200      	movs	r2, #0
 8004de4:	f103 3aff 	add.w	sl, r3, #4294967295
 8004de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dec:	2300      	movs	r3, #0
 8004dee:	f7fb fe73 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df2:	b9c8      	cbnz	r0, 8004e28 <_printf_float+0x420>
 8004df4:	4653      	mov	r3, sl
 8004df6:	4642      	mov	r2, r8
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	47b8      	blx	r7
 8004dfe:	3001      	adds	r0, #1
 8004e00:	d10e      	bne.n	8004e20 <_printf_float+0x418>
 8004e02:	e65e      	b.n	8004ac2 <_printf_float+0xba>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4652      	mov	r2, sl
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f ae57 	beq.w	8004ac2 <_printf_float+0xba>
 8004e14:	f108 0801 	add.w	r8, r8, #1
 8004e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	4543      	cmp	r3, r8
 8004e1e:	dcf1      	bgt.n	8004e04 <_printf_float+0x3fc>
 8004e20:	464b      	mov	r3, r9
 8004e22:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e26:	e6de      	b.n	8004be6 <_printf_float+0x1de>
 8004e28:	f04f 0800 	mov.w	r8, #0
 8004e2c:	f104 0a1a 	add.w	sl, r4, #26
 8004e30:	e7f2      	b.n	8004e18 <_printf_float+0x410>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e7df      	b.n	8004df6 <_printf_float+0x3ee>
 8004e36:	2301      	movs	r3, #1
 8004e38:	464a      	mov	r2, r9
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b8      	blx	r7
 8004e40:	3001      	adds	r0, #1
 8004e42:	f43f ae3e 	beq.w	8004ac2 <_printf_float+0xba>
 8004e46:	f108 0801 	add.w	r8, r8, #1
 8004e4a:	68e3      	ldr	r3, [r4, #12]
 8004e4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	4543      	cmp	r3, r8
 8004e52:	dcf0      	bgt.n	8004e36 <_printf_float+0x42e>
 8004e54:	e6fc      	b.n	8004c50 <_printf_float+0x248>
 8004e56:	f04f 0800 	mov.w	r8, #0
 8004e5a:	f104 0919 	add.w	r9, r4, #25
 8004e5e:	e7f4      	b.n	8004e4a <_printf_float+0x442>
 8004e60:	2900      	cmp	r1, #0
 8004e62:	f43f ae8b 	beq.w	8004b7c <_printf_float+0x174>
 8004e66:	2300      	movs	r3, #0
 8004e68:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004e6c:	ab09      	add	r3, sp, #36	; 0x24
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	ec49 8b10 	vmov	d0, r8, r9
 8004e74:	6022      	str	r2, [r4, #0]
 8004e76:	f8cd a004 	str.w	sl, [sp, #4]
 8004e7a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f7ff fd2e 	bl	80048e0 <__cvt>
 8004e84:	4680      	mov	r8, r0
 8004e86:	e648      	b.n	8004b1a <_printf_float+0x112>

08004e88 <_printf_common>:
 8004e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e8c:	4691      	mov	r9, r2
 8004e8e:	461f      	mov	r7, r3
 8004e90:	688a      	ldr	r2, [r1, #8]
 8004e92:	690b      	ldr	r3, [r1, #16]
 8004e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	bfb8      	it	lt
 8004e9c:	4613      	movlt	r3, r2
 8004e9e:	f8c9 3000 	str.w	r3, [r9]
 8004ea2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	b112      	cbz	r2, 8004eb2 <_printf_common+0x2a>
 8004eac:	3301      	adds	r3, #1
 8004eae:	f8c9 3000 	str.w	r3, [r9]
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	0699      	lsls	r1, r3, #26
 8004eb6:	bf42      	ittt	mi
 8004eb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ebc:	3302      	addmi	r3, #2
 8004ebe:	f8c9 3000 	strmi.w	r3, [r9]
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	f015 0506 	ands.w	r5, r5, #6
 8004ec8:	d107      	bne.n	8004eda <_printf_common+0x52>
 8004eca:	f104 0a19 	add.w	sl, r4, #25
 8004ece:	68e3      	ldr	r3, [r4, #12]
 8004ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	42ab      	cmp	r3, r5
 8004ed8:	dc28      	bgt.n	8004f2c <_printf_common+0xa4>
 8004eda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	3300      	adds	r3, #0
 8004ee2:	bf18      	it	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	0692      	lsls	r2, r2, #26
 8004ee8:	d42d      	bmi.n	8004f46 <_printf_common+0xbe>
 8004eea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eee:	4639      	mov	r1, r7
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	47c0      	blx	r8
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d020      	beq.n	8004f3a <_printf_common+0xb2>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	68e5      	ldr	r5, [r4, #12]
 8004efc:	f8d9 2000 	ldr.w	r2, [r9]
 8004f00:	f003 0306 	and.w	r3, r3, #6
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	bf08      	it	eq
 8004f08:	1aad      	subeq	r5, r5, r2
 8004f0a:	68a3      	ldr	r3, [r4, #8]
 8004f0c:	6922      	ldr	r2, [r4, #16]
 8004f0e:	bf0c      	ite	eq
 8004f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f14:	2500      	movne	r5, #0
 8004f16:	4293      	cmp	r3, r2
 8004f18:	bfc4      	itt	gt
 8004f1a:	1a9b      	subgt	r3, r3, r2
 8004f1c:	18ed      	addgt	r5, r5, r3
 8004f1e:	f04f 0900 	mov.w	r9, #0
 8004f22:	341a      	adds	r4, #26
 8004f24:	454d      	cmp	r5, r9
 8004f26:	d11a      	bne.n	8004f5e <_printf_common+0xd6>
 8004f28:	2000      	movs	r0, #0
 8004f2a:	e008      	b.n	8004f3e <_printf_common+0xb6>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4652      	mov	r2, sl
 8004f30:	4639      	mov	r1, r7
 8004f32:	4630      	mov	r0, r6
 8004f34:	47c0      	blx	r8
 8004f36:	3001      	adds	r0, #1
 8004f38:	d103      	bne.n	8004f42 <_printf_common+0xba>
 8004f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f42:	3501      	adds	r5, #1
 8004f44:	e7c3      	b.n	8004ece <_printf_common+0x46>
 8004f46:	18e1      	adds	r1, r4, r3
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	2030      	movs	r0, #48	; 0x30
 8004f4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f50:	4422      	add	r2, r4
 8004f52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	e7c5      	b.n	8004eea <_printf_common+0x62>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4622      	mov	r2, r4
 8004f62:	4639      	mov	r1, r7
 8004f64:	4630      	mov	r0, r6
 8004f66:	47c0      	blx	r8
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d0e6      	beq.n	8004f3a <_printf_common+0xb2>
 8004f6c:	f109 0901 	add.w	r9, r9, #1
 8004f70:	e7d8      	b.n	8004f24 <_printf_common+0x9c>
	...

08004f74 <_printf_i>:
 8004f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	7e09      	ldrb	r1, [r1, #24]
 8004f80:	b085      	sub	sp, #20
 8004f82:	296e      	cmp	r1, #110	; 0x6e
 8004f84:	4617      	mov	r7, r2
 8004f86:	4606      	mov	r6, r0
 8004f88:	4698      	mov	r8, r3
 8004f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f8c:	f000 80b3 	beq.w	80050f6 <_printf_i+0x182>
 8004f90:	d822      	bhi.n	8004fd8 <_printf_i+0x64>
 8004f92:	2963      	cmp	r1, #99	; 0x63
 8004f94:	d036      	beq.n	8005004 <_printf_i+0x90>
 8004f96:	d80a      	bhi.n	8004fae <_printf_i+0x3a>
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	f000 80b9 	beq.w	8005110 <_printf_i+0x19c>
 8004f9e:	2958      	cmp	r1, #88	; 0x58
 8004fa0:	f000 8083 	beq.w	80050aa <_printf_i+0x136>
 8004fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004fac:	e032      	b.n	8005014 <_printf_i+0xa0>
 8004fae:	2964      	cmp	r1, #100	; 0x64
 8004fb0:	d001      	beq.n	8004fb6 <_printf_i+0x42>
 8004fb2:	2969      	cmp	r1, #105	; 0x69
 8004fb4:	d1f6      	bne.n	8004fa4 <_printf_i+0x30>
 8004fb6:	6820      	ldr	r0, [r4, #0]
 8004fb8:	6813      	ldr	r3, [r2, #0]
 8004fba:	0605      	lsls	r5, r0, #24
 8004fbc:	f103 0104 	add.w	r1, r3, #4
 8004fc0:	d52a      	bpl.n	8005018 <_printf_i+0xa4>
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6011      	str	r1, [r2, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da03      	bge.n	8004fd2 <_printf_i+0x5e>
 8004fca:	222d      	movs	r2, #45	; 0x2d
 8004fcc:	425b      	negs	r3, r3
 8004fce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fd2:	486f      	ldr	r0, [pc, #444]	; (8005190 <_printf_i+0x21c>)
 8004fd4:	220a      	movs	r2, #10
 8004fd6:	e039      	b.n	800504c <_printf_i+0xd8>
 8004fd8:	2973      	cmp	r1, #115	; 0x73
 8004fda:	f000 809d 	beq.w	8005118 <_printf_i+0x1a4>
 8004fde:	d808      	bhi.n	8004ff2 <_printf_i+0x7e>
 8004fe0:	296f      	cmp	r1, #111	; 0x6f
 8004fe2:	d020      	beq.n	8005026 <_printf_i+0xb2>
 8004fe4:	2970      	cmp	r1, #112	; 0x70
 8004fe6:	d1dd      	bne.n	8004fa4 <_printf_i+0x30>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f043 0320 	orr.w	r3, r3, #32
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	e003      	b.n	8004ffa <_printf_i+0x86>
 8004ff2:	2975      	cmp	r1, #117	; 0x75
 8004ff4:	d017      	beq.n	8005026 <_printf_i+0xb2>
 8004ff6:	2978      	cmp	r1, #120	; 0x78
 8004ff8:	d1d4      	bne.n	8004fa4 <_printf_i+0x30>
 8004ffa:	2378      	movs	r3, #120	; 0x78
 8004ffc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005000:	4864      	ldr	r0, [pc, #400]	; (8005194 <_printf_i+0x220>)
 8005002:	e055      	b.n	80050b0 <_printf_i+0x13c>
 8005004:	6813      	ldr	r3, [r2, #0]
 8005006:	1d19      	adds	r1, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6011      	str	r1, [r2, #0]
 800500c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005014:	2301      	movs	r3, #1
 8005016:	e08c      	b.n	8005132 <_printf_i+0x1be>
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6011      	str	r1, [r2, #0]
 800501c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005020:	bf18      	it	ne
 8005022:	b21b      	sxthne	r3, r3
 8005024:	e7cf      	b.n	8004fc6 <_printf_i+0x52>
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	6825      	ldr	r5, [r4, #0]
 800502a:	1d18      	adds	r0, r3, #4
 800502c:	6010      	str	r0, [r2, #0]
 800502e:	0628      	lsls	r0, r5, #24
 8005030:	d501      	bpl.n	8005036 <_printf_i+0xc2>
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	e002      	b.n	800503c <_printf_i+0xc8>
 8005036:	0668      	lsls	r0, r5, #25
 8005038:	d5fb      	bpl.n	8005032 <_printf_i+0xbe>
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	4854      	ldr	r0, [pc, #336]	; (8005190 <_printf_i+0x21c>)
 800503e:	296f      	cmp	r1, #111	; 0x6f
 8005040:	bf14      	ite	ne
 8005042:	220a      	movne	r2, #10
 8005044:	2208      	moveq	r2, #8
 8005046:	2100      	movs	r1, #0
 8005048:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800504c:	6865      	ldr	r5, [r4, #4]
 800504e:	60a5      	str	r5, [r4, #8]
 8005050:	2d00      	cmp	r5, #0
 8005052:	f2c0 8095 	blt.w	8005180 <_printf_i+0x20c>
 8005056:	6821      	ldr	r1, [r4, #0]
 8005058:	f021 0104 	bic.w	r1, r1, #4
 800505c:	6021      	str	r1, [r4, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d13d      	bne.n	80050de <_printf_i+0x16a>
 8005062:	2d00      	cmp	r5, #0
 8005064:	f040 808e 	bne.w	8005184 <_printf_i+0x210>
 8005068:	4665      	mov	r5, ip
 800506a:	2a08      	cmp	r2, #8
 800506c:	d10b      	bne.n	8005086 <_printf_i+0x112>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	07db      	lsls	r3, r3, #31
 8005072:	d508      	bpl.n	8005086 <_printf_i+0x112>
 8005074:	6923      	ldr	r3, [r4, #16]
 8005076:	6862      	ldr	r2, [r4, #4]
 8005078:	429a      	cmp	r2, r3
 800507a:	bfde      	ittt	le
 800507c:	2330      	movle	r3, #48	; 0x30
 800507e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005082:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005086:	ebac 0305 	sub.w	r3, ip, r5
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	f8cd 8000 	str.w	r8, [sp]
 8005090:	463b      	mov	r3, r7
 8005092:	aa03      	add	r2, sp, #12
 8005094:	4621      	mov	r1, r4
 8005096:	4630      	mov	r0, r6
 8005098:	f7ff fef6 	bl	8004e88 <_printf_common>
 800509c:	3001      	adds	r0, #1
 800509e:	d14d      	bne.n	800513c <_printf_i+0x1c8>
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	b005      	add	sp, #20
 80050a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050aa:	4839      	ldr	r0, [pc, #228]	; (8005190 <_printf_i+0x21c>)
 80050ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050b0:	6813      	ldr	r3, [r2, #0]
 80050b2:	6821      	ldr	r1, [r4, #0]
 80050b4:	1d1d      	adds	r5, r3, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6015      	str	r5, [r2, #0]
 80050ba:	060a      	lsls	r2, r1, #24
 80050bc:	d50b      	bpl.n	80050d6 <_printf_i+0x162>
 80050be:	07ca      	lsls	r2, r1, #31
 80050c0:	bf44      	itt	mi
 80050c2:	f041 0120 	orrmi.w	r1, r1, #32
 80050c6:	6021      	strmi	r1, [r4, #0]
 80050c8:	b91b      	cbnz	r3, 80050d2 <_printf_i+0x15e>
 80050ca:	6822      	ldr	r2, [r4, #0]
 80050cc:	f022 0220 	bic.w	r2, r2, #32
 80050d0:	6022      	str	r2, [r4, #0]
 80050d2:	2210      	movs	r2, #16
 80050d4:	e7b7      	b.n	8005046 <_printf_i+0xd2>
 80050d6:	064d      	lsls	r5, r1, #25
 80050d8:	bf48      	it	mi
 80050da:	b29b      	uxthmi	r3, r3
 80050dc:	e7ef      	b.n	80050be <_printf_i+0x14a>
 80050de:	4665      	mov	r5, ip
 80050e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80050e4:	fb02 3311 	mls	r3, r2, r1, r3
 80050e8:	5cc3      	ldrb	r3, [r0, r3]
 80050ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050ee:	460b      	mov	r3, r1
 80050f0:	2900      	cmp	r1, #0
 80050f2:	d1f5      	bne.n	80050e0 <_printf_i+0x16c>
 80050f4:	e7b9      	b.n	800506a <_printf_i+0xf6>
 80050f6:	6813      	ldr	r3, [r2, #0]
 80050f8:	6825      	ldr	r5, [r4, #0]
 80050fa:	6961      	ldr	r1, [r4, #20]
 80050fc:	1d18      	adds	r0, r3, #4
 80050fe:	6010      	str	r0, [r2, #0]
 8005100:	0628      	lsls	r0, r5, #24
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	d501      	bpl.n	800510a <_printf_i+0x196>
 8005106:	6019      	str	r1, [r3, #0]
 8005108:	e002      	b.n	8005110 <_printf_i+0x19c>
 800510a:	066a      	lsls	r2, r5, #25
 800510c:	d5fb      	bpl.n	8005106 <_printf_i+0x192>
 800510e:	8019      	strh	r1, [r3, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	4665      	mov	r5, ip
 8005116:	e7b9      	b.n	800508c <_printf_i+0x118>
 8005118:	6813      	ldr	r3, [r2, #0]
 800511a:	1d19      	adds	r1, r3, #4
 800511c:	6011      	str	r1, [r2, #0]
 800511e:	681d      	ldr	r5, [r3, #0]
 8005120:	6862      	ldr	r2, [r4, #4]
 8005122:	2100      	movs	r1, #0
 8005124:	4628      	mov	r0, r5
 8005126:	f7fb f863 	bl	80001f0 <memchr>
 800512a:	b108      	cbz	r0, 8005130 <_printf_i+0x1bc>
 800512c:	1b40      	subs	r0, r0, r5
 800512e:	6060      	str	r0, [r4, #4]
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	6123      	str	r3, [r4, #16]
 8005134:	2300      	movs	r3, #0
 8005136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800513a:	e7a7      	b.n	800508c <_printf_i+0x118>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	462a      	mov	r2, r5
 8005140:	4639      	mov	r1, r7
 8005142:	4630      	mov	r0, r6
 8005144:	47c0      	blx	r8
 8005146:	3001      	adds	r0, #1
 8005148:	d0aa      	beq.n	80050a0 <_printf_i+0x12c>
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	079b      	lsls	r3, r3, #30
 800514e:	d413      	bmi.n	8005178 <_printf_i+0x204>
 8005150:	68e0      	ldr	r0, [r4, #12]
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	4298      	cmp	r0, r3
 8005156:	bfb8      	it	lt
 8005158:	4618      	movlt	r0, r3
 800515a:	e7a3      	b.n	80050a4 <_printf_i+0x130>
 800515c:	2301      	movs	r3, #1
 800515e:	464a      	mov	r2, r9
 8005160:	4639      	mov	r1, r7
 8005162:	4630      	mov	r0, r6
 8005164:	47c0      	blx	r8
 8005166:	3001      	adds	r0, #1
 8005168:	d09a      	beq.n	80050a0 <_printf_i+0x12c>
 800516a:	3501      	adds	r5, #1
 800516c:	68e3      	ldr	r3, [r4, #12]
 800516e:	9a03      	ldr	r2, [sp, #12]
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	42ab      	cmp	r3, r5
 8005174:	dcf2      	bgt.n	800515c <_printf_i+0x1e8>
 8005176:	e7eb      	b.n	8005150 <_printf_i+0x1dc>
 8005178:	2500      	movs	r5, #0
 800517a:	f104 0919 	add.w	r9, r4, #25
 800517e:	e7f5      	b.n	800516c <_printf_i+0x1f8>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1ac      	bne.n	80050de <_printf_i+0x16a>
 8005184:	7803      	ldrb	r3, [r0, #0]
 8005186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800518a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800518e:	e76c      	b.n	800506a <_printf_i+0xf6>
 8005190:	080083ba 	.word	0x080083ba
 8005194:	080083cb 	.word	0x080083cb

08005198 <_scanf_float>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	469a      	mov	sl, r3
 800519e:	688b      	ldr	r3, [r1, #8]
 80051a0:	4616      	mov	r6, r2
 80051a2:	1e5a      	subs	r2, r3, #1
 80051a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80051a8:	b087      	sub	sp, #28
 80051aa:	bf83      	ittte	hi
 80051ac:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80051b0:	189b      	addhi	r3, r3, r2
 80051b2:	9301      	strhi	r3, [sp, #4]
 80051b4:	2300      	movls	r3, #0
 80051b6:	bf86      	itte	hi
 80051b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051bc:	608b      	strhi	r3, [r1, #8]
 80051be:	9301      	strls	r3, [sp, #4]
 80051c0:	680b      	ldr	r3, [r1, #0]
 80051c2:	4688      	mov	r8, r1
 80051c4:	f04f 0b00 	mov.w	fp, #0
 80051c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80051cc:	f848 3b1c 	str.w	r3, [r8], #28
 80051d0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80051d4:	4607      	mov	r7, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	4645      	mov	r5, r8
 80051da:	465a      	mov	r2, fp
 80051dc:	46d9      	mov	r9, fp
 80051de:	f8cd b008 	str.w	fp, [sp, #8]
 80051e2:	68a1      	ldr	r1, [r4, #8]
 80051e4:	b181      	cbz	r1, 8005208 <_scanf_float+0x70>
 80051e6:	6833      	ldr	r3, [r6, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b49      	cmp	r3, #73	; 0x49
 80051ec:	d071      	beq.n	80052d2 <_scanf_float+0x13a>
 80051ee:	d84d      	bhi.n	800528c <_scanf_float+0xf4>
 80051f0:	2b39      	cmp	r3, #57	; 0x39
 80051f2:	d840      	bhi.n	8005276 <_scanf_float+0xde>
 80051f4:	2b31      	cmp	r3, #49	; 0x31
 80051f6:	f080 8088 	bcs.w	800530a <_scanf_float+0x172>
 80051fa:	2b2d      	cmp	r3, #45	; 0x2d
 80051fc:	f000 8090 	beq.w	8005320 <_scanf_float+0x188>
 8005200:	d815      	bhi.n	800522e <_scanf_float+0x96>
 8005202:	2b2b      	cmp	r3, #43	; 0x2b
 8005204:	f000 808c 	beq.w	8005320 <_scanf_float+0x188>
 8005208:	f1b9 0f00 	cmp.w	r9, #0
 800520c:	d003      	beq.n	8005216 <_scanf_float+0x7e>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	3a01      	subs	r2, #1
 8005218:	2a01      	cmp	r2, #1
 800521a:	f200 80ea 	bhi.w	80053f2 <_scanf_float+0x25a>
 800521e:	4545      	cmp	r5, r8
 8005220:	f200 80dc 	bhi.w	80053dc <_scanf_float+0x244>
 8005224:	2601      	movs	r6, #1
 8005226:	4630      	mov	r0, r6
 8005228:	b007      	add	sp, #28
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522e:	2b2e      	cmp	r3, #46	; 0x2e
 8005230:	f000 809f 	beq.w	8005372 <_scanf_float+0x1da>
 8005234:	2b30      	cmp	r3, #48	; 0x30
 8005236:	d1e7      	bne.n	8005208 <_scanf_float+0x70>
 8005238:	6820      	ldr	r0, [r4, #0]
 800523a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800523e:	d064      	beq.n	800530a <_scanf_float+0x172>
 8005240:	9b01      	ldr	r3, [sp, #4]
 8005242:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005246:	6020      	str	r0, [r4, #0]
 8005248:	f109 0901 	add.w	r9, r9, #1
 800524c:	b11b      	cbz	r3, 8005256 <_scanf_float+0xbe>
 800524e:	3b01      	subs	r3, #1
 8005250:	3101      	adds	r1, #1
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	60a1      	str	r1, [r4, #8]
 8005256:	68a3      	ldr	r3, [r4, #8]
 8005258:	3b01      	subs	r3, #1
 800525a:	60a3      	str	r3, [r4, #8]
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	3301      	adds	r3, #1
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	6873      	ldr	r3, [r6, #4]
 8005264:	3b01      	subs	r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	6073      	str	r3, [r6, #4]
 800526a:	f340 80ac 	ble.w	80053c6 <_scanf_float+0x22e>
 800526e:	6833      	ldr	r3, [r6, #0]
 8005270:	3301      	adds	r3, #1
 8005272:	6033      	str	r3, [r6, #0]
 8005274:	e7b5      	b.n	80051e2 <_scanf_float+0x4a>
 8005276:	2b45      	cmp	r3, #69	; 0x45
 8005278:	f000 8085 	beq.w	8005386 <_scanf_float+0x1ee>
 800527c:	2b46      	cmp	r3, #70	; 0x46
 800527e:	d06a      	beq.n	8005356 <_scanf_float+0x1be>
 8005280:	2b41      	cmp	r3, #65	; 0x41
 8005282:	d1c1      	bne.n	8005208 <_scanf_float+0x70>
 8005284:	2a01      	cmp	r2, #1
 8005286:	d1bf      	bne.n	8005208 <_scanf_float+0x70>
 8005288:	2202      	movs	r2, #2
 800528a:	e046      	b.n	800531a <_scanf_float+0x182>
 800528c:	2b65      	cmp	r3, #101	; 0x65
 800528e:	d07a      	beq.n	8005386 <_scanf_float+0x1ee>
 8005290:	d818      	bhi.n	80052c4 <_scanf_float+0x12c>
 8005292:	2b54      	cmp	r3, #84	; 0x54
 8005294:	d066      	beq.n	8005364 <_scanf_float+0x1cc>
 8005296:	d811      	bhi.n	80052bc <_scanf_float+0x124>
 8005298:	2b4e      	cmp	r3, #78	; 0x4e
 800529a:	d1b5      	bne.n	8005208 <_scanf_float+0x70>
 800529c:	2a00      	cmp	r2, #0
 800529e:	d146      	bne.n	800532e <_scanf_float+0x196>
 80052a0:	f1b9 0f00 	cmp.w	r9, #0
 80052a4:	d145      	bne.n	8005332 <_scanf_float+0x19a>
 80052a6:	6821      	ldr	r1, [r4, #0]
 80052a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80052ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80052b0:	d13f      	bne.n	8005332 <_scanf_float+0x19a>
 80052b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80052b6:	6021      	str	r1, [r4, #0]
 80052b8:	2201      	movs	r2, #1
 80052ba:	e02e      	b.n	800531a <_scanf_float+0x182>
 80052bc:	2b59      	cmp	r3, #89	; 0x59
 80052be:	d01e      	beq.n	80052fe <_scanf_float+0x166>
 80052c0:	2b61      	cmp	r3, #97	; 0x61
 80052c2:	e7de      	b.n	8005282 <_scanf_float+0xea>
 80052c4:	2b6e      	cmp	r3, #110	; 0x6e
 80052c6:	d0e9      	beq.n	800529c <_scanf_float+0x104>
 80052c8:	d815      	bhi.n	80052f6 <_scanf_float+0x15e>
 80052ca:	2b66      	cmp	r3, #102	; 0x66
 80052cc:	d043      	beq.n	8005356 <_scanf_float+0x1be>
 80052ce:	2b69      	cmp	r3, #105	; 0x69
 80052d0:	d19a      	bne.n	8005208 <_scanf_float+0x70>
 80052d2:	f1bb 0f00 	cmp.w	fp, #0
 80052d6:	d138      	bne.n	800534a <_scanf_float+0x1b2>
 80052d8:	f1b9 0f00 	cmp.w	r9, #0
 80052dc:	d197      	bne.n	800520e <_scanf_float+0x76>
 80052de:	6821      	ldr	r1, [r4, #0]
 80052e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80052e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80052e8:	d195      	bne.n	8005216 <_scanf_float+0x7e>
 80052ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80052ee:	6021      	str	r1, [r4, #0]
 80052f0:	f04f 0b01 	mov.w	fp, #1
 80052f4:	e011      	b.n	800531a <_scanf_float+0x182>
 80052f6:	2b74      	cmp	r3, #116	; 0x74
 80052f8:	d034      	beq.n	8005364 <_scanf_float+0x1cc>
 80052fa:	2b79      	cmp	r3, #121	; 0x79
 80052fc:	d184      	bne.n	8005208 <_scanf_float+0x70>
 80052fe:	f1bb 0f07 	cmp.w	fp, #7
 8005302:	d181      	bne.n	8005208 <_scanf_float+0x70>
 8005304:	f04f 0b08 	mov.w	fp, #8
 8005308:	e007      	b.n	800531a <_scanf_float+0x182>
 800530a:	eb12 0f0b 	cmn.w	r2, fp
 800530e:	f47f af7b 	bne.w	8005208 <_scanf_float+0x70>
 8005312:	6821      	ldr	r1, [r4, #0]
 8005314:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005318:	6021      	str	r1, [r4, #0]
 800531a:	702b      	strb	r3, [r5, #0]
 800531c:	3501      	adds	r5, #1
 800531e:	e79a      	b.n	8005256 <_scanf_float+0xbe>
 8005320:	6821      	ldr	r1, [r4, #0]
 8005322:	0608      	lsls	r0, r1, #24
 8005324:	f57f af70 	bpl.w	8005208 <_scanf_float+0x70>
 8005328:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800532c:	e7f4      	b.n	8005318 <_scanf_float+0x180>
 800532e:	2a02      	cmp	r2, #2
 8005330:	d047      	beq.n	80053c2 <_scanf_float+0x22a>
 8005332:	f1bb 0f01 	cmp.w	fp, #1
 8005336:	d003      	beq.n	8005340 <_scanf_float+0x1a8>
 8005338:	f1bb 0f04 	cmp.w	fp, #4
 800533c:	f47f af64 	bne.w	8005208 <_scanf_float+0x70>
 8005340:	f10b 0b01 	add.w	fp, fp, #1
 8005344:	fa5f fb8b 	uxtb.w	fp, fp
 8005348:	e7e7      	b.n	800531a <_scanf_float+0x182>
 800534a:	f1bb 0f03 	cmp.w	fp, #3
 800534e:	d0f7      	beq.n	8005340 <_scanf_float+0x1a8>
 8005350:	f1bb 0f05 	cmp.w	fp, #5
 8005354:	e7f2      	b.n	800533c <_scanf_float+0x1a4>
 8005356:	f1bb 0f02 	cmp.w	fp, #2
 800535a:	f47f af55 	bne.w	8005208 <_scanf_float+0x70>
 800535e:	f04f 0b03 	mov.w	fp, #3
 8005362:	e7da      	b.n	800531a <_scanf_float+0x182>
 8005364:	f1bb 0f06 	cmp.w	fp, #6
 8005368:	f47f af4e 	bne.w	8005208 <_scanf_float+0x70>
 800536c:	f04f 0b07 	mov.w	fp, #7
 8005370:	e7d3      	b.n	800531a <_scanf_float+0x182>
 8005372:	6821      	ldr	r1, [r4, #0]
 8005374:	0588      	lsls	r0, r1, #22
 8005376:	f57f af47 	bpl.w	8005208 <_scanf_float+0x70>
 800537a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800537e:	6021      	str	r1, [r4, #0]
 8005380:	f8cd 9008 	str.w	r9, [sp, #8]
 8005384:	e7c9      	b.n	800531a <_scanf_float+0x182>
 8005386:	6821      	ldr	r1, [r4, #0]
 8005388:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800538c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005390:	d006      	beq.n	80053a0 <_scanf_float+0x208>
 8005392:	0548      	lsls	r0, r1, #21
 8005394:	f57f af38 	bpl.w	8005208 <_scanf_float+0x70>
 8005398:	f1b9 0f00 	cmp.w	r9, #0
 800539c:	f43f af3b 	beq.w	8005216 <_scanf_float+0x7e>
 80053a0:	0588      	lsls	r0, r1, #22
 80053a2:	bf58      	it	pl
 80053a4:	9802      	ldrpl	r0, [sp, #8]
 80053a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80053aa:	bf58      	it	pl
 80053ac:	eba9 0000 	subpl.w	r0, r9, r0
 80053b0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80053b4:	bf58      	it	pl
 80053b6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80053ba:	6021      	str	r1, [r4, #0]
 80053bc:	f04f 0900 	mov.w	r9, #0
 80053c0:	e7ab      	b.n	800531a <_scanf_float+0x182>
 80053c2:	2203      	movs	r2, #3
 80053c4:	e7a9      	b.n	800531a <_scanf_float+0x182>
 80053c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053ca:	9205      	str	r2, [sp, #20]
 80053cc:	4631      	mov	r1, r6
 80053ce:	4638      	mov	r0, r7
 80053d0:	4798      	blx	r3
 80053d2:	9a05      	ldr	r2, [sp, #20]
 80053d4:	2800      	cmp	r0, #0
 80053d6:	f43f af04 	beq.w	80051e2 <_scanf_float+0x4a>
 80053da:	e715      	b.n	8005208 <_scanf_float+0x70>
 80053dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80053e4:	4632      	mov	r2, r6
 80053e6:	4638      	mov	r0, r7
 80053e8:	4798      	blx	r3
 80053ea:	6923      	ldr	r3, [r4, #16]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	e715      	b.n	800521e <_scanf_float+0x86>
 80053f2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80053f6:	2b06      	cmp	r3, #6
 80053f8:	d80a      	bhi.n	8005410 <_scanf_float+0x278>
 80053fa:	f1bb 0f02 	cmp.w	fp, #2
 80053fe:	d968      	bls.n	80054d2 <_scanf_float+0x33a>
 8005400:	f1ab 0b03 	sub.w	fp, fp, #3
 8005404:	fa5f fb8b 	uxtb.w	fp, fp
 8005408:	eba5 0b0b 	sub.w	fp, r5, fp
 800540c:	455d      	cmp	r5, fp
 800540e:	d14b      	bne.n	80054a8 <_scanf_float+0x310>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	05da      	lsls	r2, r3, #23
 8005414:	d51f      	bpl.n	8005456 <_scanf_float+0x2be>
 8005416:	055b      	lsls	r3, r3, #21
 8005418:	d468      	bmi.n	80054ec <_scanf_float+0x354>
 800541a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800541e:	6923      	ldr	r3, [r4, #16]
 8005420:	2965      	cmp	r1, #101	; 0x65
 8005422:	f103 33ff 	add.w	r3, r3, #4294967295
 8005426:	f105 3bff 	add.w	fp, r5, #4294967295
 800542a:	6123      	str	r3, [r4, #16]
 800542c:	d00d      	beq.n	800544a <_scanf_float+0x2b2>
 800542e:	2945      	cmp	r1, #69	; 0x45
 8005430:	d00b      	beq.n	800544a <_scanf_float+0x2b2>
 8005432:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005436:	4632      	mov	r2, r6
 8005438:	4638      	mov	r0, r7
 800543a:	4798      	blx	r3
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005442:	3b01      	subs	r3, #1
 8005444:	f1a5 0b02 	sub.w	fp, r5, #2
 8005448:	6123      	str	r3, [r4, #16]
 800544a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800544e:	4632      	mov	r2, r6
 8005450:	4638      	mov	r0, r7
 8005452:	4798      	blx	r3
 8005454:	465d      	mov	r5, fp
 8005456:	6826      	ldr	r6, [r4, #0]
 8005458:	f016 0610 	ands.w	r6, r6, #16
 800545c:	d17a      	bne.n	8005554 <_scanf_float+0x3bc>
 800545e:	702e      	strb	r6, [r5, #0]
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546a:	d142      	bne.n	80054f2 <_scanf_float+0x35a>
 800546c:	9b02      	ldr	r3, [sp, #8]
 800546e:	eba9 0303 	sub.w	r3, r9, r3
 8005472:	425a      	negs	r2, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d149      	bne.n	800550c <_scanf_float+0x374>
 8005478:	2200      	movs	r2, #0
 800547a:	4641      	mov	r1, r8
 800547c:	4638      	mov	r0, r7
 800547e:	f000 fea3 	bl	80061c8 <_strtod_r>
 8005482:	6825      	ldr	r5, [r4, #0]
 8005484:	f8da 3000 	ldr.w	r3, [sl]
 8005488:	f015 0f02 	tst.w	r5, #2
 800548c:	f103 0204 	add.w	r2, r3, #4
 8005490:	ec59 8b10 	vmov	r8, r9, d0
 8005494:	f8ca 2000 	str.w	r2, [sl]
 8005498:	d043      	beq.n	8005522 <_scanf_float+0x38a>
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	e9c3 8900 	strd	r8, r9, [r3]
 80054a0:	68e3      	ldr	r3, [r4, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60e3      	str	r3, [r4, #12]
 80054a6:	e6be      	b.n	8005226 <_scanf_float+0x8e>
 80054a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80054b0:	4632      	mov	r2, r6
 80054b2:	4638      	mov	r0, r7
 80054b4:	4798      	blx	r3
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	6123      	str	r3, [r4, #16]
 80054bc:	e7a6      	b.n	800540c <_scanf_float+0x274>
 80054be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054c2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80054c6:	4632      	mov	r2, r6
 80054c8:	4638      	mov	r0, r7
 80054ca:	4798      	blx	r3
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	6123      	str	r3, [r4, #16]
 80054d2:	4545      	cmp	r5, r8
 80054d4:	d8f3      	bhi.n	80054be <_scanf_float+0x326>
 80054d6:	e6a5      	b.n	8005224 <_scanf_float+0x8c>
 80054d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80054e0:	4632      	mov	r2, r6
 80054e2:	4638      	mov	r0, r7
 80054e4:	4798      	blx	r3
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	4545      	cmp	r5, r8
 80054ee:	d8f3      	bhi.n	80054d8 <_scanf_float+0x340>
 80054f0:	e698      	b.n	8005224 <_scanf_float+0x8c>
 80054f2:	9b03      	ldr	r3, [sp, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0bf      	beq.n	8005478 <_scanf_float+0x2e0>
 80054f8:	9904      	ldr	r1, [sp, #16]
 80054fa:	230a      	movs	r3, #10
 80054fc:	4632      	mov	r2, r6
 80054fe:	3101      	adds	r1, #1
 8005500:	4638      	mov	r0, r7
 8005502:	f000 feed 	bl	80062e0 <_strtol_r>
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	9d04      	ldr	r5, [sp, #16]
 800550a:	1ac2      	subs	r2, r0, r3
 800550c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005510:	429d      	cmp	r5, r3
 8005512:	bf28      	it	cs
 8005514:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005518:	490f      	ldr	r1, [pc, #60]	; (8005558 <_scanf_float+0x3c0>)
 800551a:	4628      	mov	r0, r5
 800551c:	f000 f824 	bl	8005568 <siprintf>
 8005520:	e7aa      	b.n	8005478 <_scanf_float+0x2e0>
 8005522:	f015 0504 	ands.w	r5, r5, #4
 8005526:	d1b8      	bne.n	800549a <_scanf_float+0x302>
 8005528:	681f      	ldr	r7, [r3, #0]
 800552a:	ee10 2a10 	vmov	r2, s0
 800552e:	464b      	mov	r3, r9
 8005530:	ee10 0a10 	vmov	r0, s0
 8005534:	4649      	mov	r1, r9
 8005536:	f7fb fb01 	bl	8000b3c <__aeabi_dcmpun>
 800553a:	b128      	cbz	r0, 8005548 <_scanf_float+0x3b0>
 800553c:	4628      	mov	r0, r5
 800553e:	f000 f80d 	bl	800555c <nanf>
 8005542:	ed87 0a00 	vstr	s0, [r7]
 8005546:	e7ab      	b.n	80054a0 <_scanf_float+0x308>
 8005548:	4640      	mov	r0, r8
 800554a:	4649      	mov	r1, r9
 800554c:	f7fb fb54 	bl	8000bf8 <__aeabi_d2f>
 8005550:	6038      	str	r0, [r7, #0]
 8005552:	e7a5      	b.n	80054a0 <_scanf_float+0x308>
 8005554:	2600      	movs	r6, #0
 8005556:	e666      	b.n	8005226 <_scanf_float+0x8e>
 8005558:	080083dc 	.word	0x080083dc

0800555c <nanf>:
 800555c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005564 <nanf+0x8>
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	7fc00000 	.word	0x7fc00000

08005568 <siprintf>:
 8005568:	b40e      	push	{r1, r2, r3}
 800556a:	b500      	push	{lr}
 800556c:	b09c      	sub	sp, #112	; 0x70
 800556e:	ab1d      	add	r3, sp, #116	; 0x74
 8005570:	9002      	str	r0, [sp, #8]
 8005572:	9006      	str	r0, [sp, #24]
 8005574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005578:	4809      	ldr	r0, [pc, #36]	; (80055a0 <siprintf+0x38>)
 800557a:	9107      	str	r1, [sp, #28]
 800557c:	9104      	str	r1, [sp, #16]
 800557e:	4909      	ldr	r1, [pc, #36]	; (80055a4 <siprintf+0x3c>)
 8005580:	f853 2b04 	ldr.w	r2, [r3], #4
 8005584:	9105      	str	r1, [sp, #20]
 8005586:	6800      	ldr	r0, [r0, #0]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	a902      	add	r1, sp, #8
 800558c:	f002 fd82 	bl	8008094 <_svfiprintf_r>
 8005590:	9b02      	ldr	r3, [sp, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	b01c      	add	sp, #112	; 0x70
 8005598:	f85d eb04 	ldr.w	lr, [sp], #4
 800559c:	b003      	add	sp, #12
 800559e:	4770      	bx	lr
 80055a0:	2000000c 	.word	0x2000000c
 80055a4:	ffff0208 	.word	0xffff0208

080055a8 <sulp>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4604      	mov	r4, r0
 80055ac:	460d      	mov	r5, r1
 80055ae:	ec45 4b10 	vmov	d0, r4, r5
 80055b2:	4616      	mov	r6, r2
 80055b4:	f002 fb2a 	bl	8007c0c <__ulp>
 80055b8:	ec51 0b10 	vmov	r0, r1, d0
 80055bc:	b17e      	cbz	r6, 80055de <sulp+0x36>
 80055be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80055c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	dd09      	ble.n	80055de <sulp+0x36>
 80055ca:	051b      	lsls	r3, r3, #20
 80055cc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80055d0:	2400      	movs	r4, #0
 80055d2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80055d6:	4622      	mov	r2, r4
 80055d8:	462b      	mov	r3, r5
 80055da:	f7fb f815 	bl	8000608 <__aeabi_dmul>
 80055de:	bd70      	pop	{r4, r5, r6, pc}

080055e0 <_strtod_l>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	461f      	mov	r7, r3
 80055e6:	b0a1      	sub	sp, #132	; 0x84
 80055e8:	2300      	movs	r3, #0
 80055ea:	4681      	mov	r9, r0
 80055ec:	4638      	mov	r0, r7
 80055ee:	460e      	mov	r6, r1
 80055f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80055f2:	931c      	str	r3, [sp, #112]	; 0x70
 80055f4:	f002 f809 	bl	800760a <__localeconv_l>
 80055f8:	4680      	mov	r8, r0
 80055fa:	6800      	ldr	r0, [r0, #0]
 80055fc:	f7fa fdf0 	bl	80001e0 <strlen>
 8005600:	f04f 0a00 	mov.w	sl, #0
 8005604:	4604      	mov	r4, r0
 8005606:	f04f 0b00 	mov.w	fp, #0
 800560a:	961b      	str	r6, [sp, #108]	; 0x6c
 800560c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	2a0d      	cmp	r2, #13
 8005612:	d832      	bhi.n	800567a <_strtod_l+0x9a>
 8005614:	2a09      	cmp	r2, #9
 8005616:	d236      	bcs.n	8005686 <_strtod_l+0xa6>
 8005618:	2a00      	cmp	r2, #0
 800561a:	d03e      	beq.n	800569a <_strtod_l+0xba>
 800561c:	2300      	movs	r3, #0
 800561e:	930d      	str	r3, [sp, #52]	; 0x34
 8005620:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005622:	782b      	ldrb	r3, [r5, #0]
 8005624:	2b30      	cmp	r3, #48	; 0x30
 8005626:	f040 80ac 	bne.w	8005782 <_strtod_l+0x1a2>
 800562a:	786b      	ldrb	r3, [r5, #1]
 800562c:	2b58      	cmp	r3, #88	; 0x58
 800562e:	d001      	beq.n	8005634 <_strtod_l+0x54>
 8005630:	2b78      	cmp	r3, #120	; 0x78
 8005632:	d167      	bne.n	8005704 <_strtod_l+0x124>
 8005634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	ab1c      	add	r3, sp, #112	; 0x70
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	9702      	str	r7, [sp, #8]
 800563e:	ab1d      	add	r3, sp, #116	; 0x74
 8005640:	4a88      	ldr	r2, [pc, #544]	; (8005864 <_strtod_l+0x284>)
 8005642:	a91b      	add	r1, sp, #108	; 0x6c
 8005644:	4648      	mov	r0, r9
 8005646:	f001 fd06 	bl	8007056 <__gethex>
 800564a:	f010 0407 	ands.w	r4, r0, #7
 800564e:	4606      	mov	r6, r0
 8005650:	d005      	beq.n	800565e <_strtod_l+0x7e>
 8005652:	2c06      	cmp	r4, #6
 8005654:	d12b      	bne.n	80056ae <_strtod_l+0xce>
 8005656:	3501      	adds	r5, #1
 8005658:	2300      	movs	r3, #0
 800565a:	951b      	str	r5, [sp, #108]	; 0x6c
 800565c:	930d      	str	r3, [sp, #52]	; 0x34
 800565e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005660:	2b00      	cmp	r3, #0
 8005662:	f040 859a 	bne.w	800619a <_strtod_l+0xbba>
 8005666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005668:	b1e3      	cbz	r3, 80056a4 <_strtod_l+0xc4>
 800566a:	4652      	mov	r2, sl
 800566c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005670:	ec43 2b10 	vmov	d0, r2, r3
 8005674:	b021      	add	sp, #132	; 0x84
 8005676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567a:	2a2b      	cmp	r2, #43	; 0x2b
 800567c:	d015      	beq.n	80056aa <_strtod_l+0xca>
 800567e:	2a2d      	cmp	r2, #45	; 0x2d
 8005680:	d004      	beq.n	800568c <_strtod_l+0xac>
 8005682:	2a20      	cmp	r2, #32
 8005684:	d1ca      	bne.n	800561c <_strtod_l+0x3c>
 8005686:	3301      	adds	r3, #1
 8005688:	931b      	str	r3, [sp, #108]	; 0x6c
 800568a:	e7bf      	b.n	800560c <_strtod_l+0x2c>
 800568c:	2201      	movs	r2, #1
 800568e:	920d      	str	r2, [sp, #52]	; 0x34
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	921b      	str	r2, [sp, #108]	; 0x6c
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1c2      	bne.n	8005620 <_strtod_l+0x40>
 800569a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800569c:	961b      	str	r6, [sp, #108]	; 0x6c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 8579 	bne.w	8006196 <_strtod_l+0xbb6>
 80056a4:	4652      	mov	r2, sl
 80056a6:	465b      	mov	r3, fp
 80056a8:	e7e2      	b.n	8005670 <_strtod_l+0x90>
 80056aa:	2200      	movs	r2, #0
 80056ac:	e7ef      	b.n	800568e <_strtod_l+0xae>
 80056ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80056b0:	b13a      	cbz	r2, 80056c2 <_strtod_l+0xe2>
 80056b2:	2135      	movs	r1, #53	; 0x35
 80056b4:	a81e      	add	r0, sp, #120	; 0x78
 80056b6:	f002 fba1 	bl	8007dfc <__copybits>
 80056ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80056bc:	4648      	mov	r0, r9
 80056be:	f002 f80e 	bl	80076de <_Bfree>
 80056c2:	3c01      	subs	r4, #1
 80056c4:	2c04      	cmp	r4, #4
 80056c6:	d806      	bhi.n	80056d6 <_strtod_l+0xf6>
 80056c8:	e8df f004 	tbb	[pc, r4]
 80056cc:	1714030a 	.word	0x1714030a
 80056d0:	0a          	.byte	0x0a
 80056d1:	00          	.byte	0x00
 80056d2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80056d6:	0730      	lsls	r0, r6, #28
 80056d8:	d5c1      	bpl.n	800565e <_strtod_l+0x7e>
 80056da:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80056de:	e7be      	b.n	800565e <_strtod_l+0x7e>
 80056e0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80056e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80056e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80056ea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80056ee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80056f2:	e7f0      	b.n	80056d6 <_strtod_l+0xf6>
 80056f4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005868 <_strtod_l+0x288>
 80056f8:	e7ed      	b.n	80056d6 <_strtod_l+0xf6>
 80056fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80056fe:	f04f 3aff 	mov.w	sl, #4294967295
 8005702:	e7e8      	b.n	80056d6 <_strtod_l+0xf6>
 8005704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	921b      	str	r2, [sp, #108]	; 0x6c
 800570a:	785b      	ldrb	r3, [r3, #1]
 800570c:	2b30      	cmp	r3, #48	; 0x30
 800570e:	d0f9      	beq.n	8005704 <_strtod_l+0x124>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0a4      	beq.n	800565e <_strtod_l+0x7e>
 8005714:	2301      	movs	r3, #1
 8005716:	2500      	movs	r5, #0
 8005718:	9306      	str	r3, [sp, #24]
 800571a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800571c:	9308      	str	r3, [sp, #32]
 800571e:	9507      	str	r5, [sp, #28]
 8005720:	9505      	str	r5, [sp, #20]
 8005722:	220a      	movs	r2, #10
 8005724:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005726:	7807      	ldrb	r7, [r0, #0]
 8005728:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800572c:	b2d9      	uxtb	r1, r3
 800572e:	2909      	cmp	r1, #9
 8005730:	d929      	bls.n	8005786 <_strtod_l+0x1a6>
 8005732:	4622      	mov	r2, r4
 8005734:	f8d8 1000 	ldr.w	r1, [r8]
 8005738:	f002 fdb4 	bl	80082a4 <strncmp>
 800573c:	2800      	cmp	r0, #0
 800573e:	d031      	beq.n	80057a4 <_strtod_l+0x1c4>
 8005740:	2000      	movs	r0, #0
 8005742:	9c05      	ldr	r4, [sp, #20]
 8005744:	9004      	str	r0, [sp, #16]
 8005746:	463b      	mov	r3, r7
 8005748:	4602      	mov	r2, r0
 800574a:	2b65      	cmp	r3, #101	; 0x65
 800574c:	d001      	beq.n	8005752 <_strtod_l+0x172>
 800574e:	2b45      	cmp	r3, #69	; 0x45
 8005750:	d114      	bne.n	800577c <_strtod_l+0x19c>
 8005752:	b924      	cbnz	r4, 800575e <_strtod_l+0x17e>
 8005754:	b910      	cbnz	r0, 800575c <_strtod_l+0x17c>
 8005756:	9b06      	ldr	r3, [sp, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d09e      	beq.n	800569a <_strtod_l+0xba>
 800575c:	2400      	movs	r4, #0
 800575e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005760:	1c73      	adds	r3, r6, #1
 8005762:	931b      	str	r3, [sp, #108]	; 0x6c
 8005764:	7873      	ldrb	r3, [r6, #1]
 8005766:	2b2b      	cmp	r3, #43	; 0x2b
 8005768:	d078      	beq.n	800585c <_strtod_l+0x27c>
 800576a:	2b2d      	cmp	r3, #45	; 0x2d
 800576c:	d070      	beq.n	8005850 <_strtod_l+0x270>
 800576e:	f04f 0c00 	mov.w	ip, #0
 8005772:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005776:	2f09      	cmp	r7, #9
 8005778:	d97c      	bls.n	8005874 <_strtod_l+0x294>
 800577a:	961b      	str	r6, [sp, #108]	; 0x6c
 800577c:	f04f 0e00 	mov.w	lr, #0
 8005780:	e09a      	b.n	80058b8 <_strtod_l+0x2d8>
 8005782:	2300      	movs	r3, #0
 8005784:	e7c7      	b.n	8005716 <_strtod_l+0x136>
 8005786:	9905      	ldr	r1, [sp, #20]
 8005788:	2908      	cmp	r1, #8
 800578a:	bfdd      	ittte	le
 800578c:	9907      	ldrle	r1, [sp, #28]
 800578e:	fb02 3301 	mlale	r3, r2, r1, r3
 8005792:	9307      	strle	r3, [sp, #28]
 8005794:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005798:	9b05      	ldr	r3, [sp, #20]
 800579a:	3001      	adds	r0, #1
 800579c:	3301      	adds	r3, #1
 800579e:	9305      	str	r3, [sp, #20]
 80057a0:	901b      	str	r0, [sp, #108]	; 0x6c
 80057a2:	e7bf      	b.n	8005724 <_strtod_l+0x144>
 80057a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80057a6:	191a      	adds	r2, r3, r4
 80057a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80057aa:	9a05      	ldr	r2, [sp, #20]
 80057ac:	5d1b      	ldrb	r3, [r3, r4]
 80057ae:	2a00      	cmp	r2, #0
 80057b0:	d037      	beq.n	8005822 <_strtod_l+0x242>
 80057b2:	9c05      	ldr	r4, [sp, #20]
 80057b4:	4602      	mov	r2, r0
 80057b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80057ba:	2909      	cmp	r1, #9
 80057bc:	d913      	bls.n	80057e6 <_strtod_l+0x206>
 80057be:	2101      	movs	r1, #1
 80057c0:	9104      	str	r1, [sp, #16]
 80057c2:	e7c2      	b.n	800574a <_strtod_l+0x16a>
 80057c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	3001      	adds	r0, #1
 80057ce:	2b30      	cmp	r3, #48	; 0x30
 80057d0:	d0f8      	beq.n	80057c4 <_strtod_l+0x1e4>
 80057d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80057d6:	2a08      	cmp	r2, #8
 80057d8:	f200 84e4 	bhi.w	80061a4 <_strtod_l+0xbc4>
 80057dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80057de:	9208      	str	r2, [sp, #32]
 80057e0:	4602      	mov	r2, r0
 80057e2:	2000      	movs	r0, #0
 80057e4:	4604      	mov	r4, r0
 80057e6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80057ea:	f100 0101 	add.w	r1, r0, #1
 80057ee:	d012      	beq.n	8005816 <_strtod_l+0x236>
 80057f0:	440a      	add	r2, r1
 80057f2:	eb00 0c04 	add.w	ip, r0, r4
 80057f6:	4621      	mov	r1, r4
 80057f8:	270a      	movs	r7, #10
 80057fa:	458c      	cmp	ip, r1
 80057fc:	d113      	bne.n	8005826 <_strtod_l+0x246>
 80057fe:	1821      	adds	r1, r4, r0
 8005800:	2908      	cmp	r1, #8
 8005802:	f104 0401 	add.w	r4, r4, #1
 8005806:	4404      	add	r4, r0
 8005808:	dc19      	bgt.n	800583e <_strtod_l+0x25e>
 800580a:	9b07      	ldr	r3, [sp, #28]
 800580c:	210a      	movs	r1, #10
 800580e:	fb01 e303 	mla	r3, r1, r3, lr
 8005812:	9307      	str	r3, [sp, #28]
 8005814:	2100      	movs	r1, #0
 8005816:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005818:	1c58      	adds	r0, r3, #1
 800581a:	901b      	str	r0, [sp, #108]	; 0x6c
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	4608      	mov	r0, r1
 8005820:	e7c9      	b.n	80057b6 <_strtod_l+0x1d6>
 8005822:	9805      	ldr	r0, [sp, #20]
 8005824:	e7d3      	b.n	80057ce <_strtod_l+0x1ee>
 8005826:	2908      	cmp	r1, #8
 8005828:	f101 0101 	add.w	r1, r1, #1
 800582c:	dc03      	bgt.n	8005836 <_strtod_l+0x256>
 800582e:	9b07      	ldr	r3, [sp, #28]
 8005830:	437b      	muls	r3, r7
 8005832:	9307      	str	r3, [sp, #28]
 8005834:	e7e1      	b.n	80057fa <_strtod_l+0x21a>
 8005836:	2910      	cmp	r1, #16
 8005838:	bfd8      	it	le
 800583a:	437d      	mulle	r5, r7
 800583c:	e7dd      	b.n	80057fa <_strtod_l+0x21a>
 800583e:	2c10      	cmp	r4, #16
 8005840:	bfdc      	itt	le
 8005842:	210a      	movle	r1, #10
 8005844:	fb01 e505 	mlale	r5, r1, r5, lr
 8005848:	e7e4      	b.n	8005814 <_strtod_l+0x234>
 800584a:	2301      	movs	r3, #1
 800584c:	9304      	str	r3, [sp, #16]
 800584e:	e781      	b.n	8005754 <_strtod_l+0x174>
 8005850:	f04f 0c01 	mov.w	ip, #1
 8005854:	1cb3      	adds	r3, r6, #2
 8005856:	931b      	str	r3, [sp, #108]	; 0x6c
 8005858:	78b3      	ldrb	r3, [r6, #2]
 800585a:	e78a      	b.n	8005772 <_strtod_l+0x192>
 800585c:	f04f 0c00 	mov.w	ip, #0
 8005860:	e7f8      	b.n	8005854 <_strtod_l+0x274>
 8005862:	bf00      	nop
 8005864:	080083e4 	.word	0x080083e4
 8005868:	7ff00000 	.word	0x7ff00000
 800586c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800586e:	1c5f      	adds	r7, r3, #1
 8005870:	971b      	str	r7, [sp, #108]	; 0x6c
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d0f9      	beq.n	800586c <_strtod_l+0x28c>
 8005878:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800587c:	2f08      	cmp	r7, #8
 800587e:	f63f af7d 	bhi.w	800577c <_strtod_l+0x19c>
 8005882:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005886:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005888:	930a      	str	r3, [sp, #40]	; 0x28
 800588a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800588c:	1c5f      	adds	r7, r3, #1
 800588e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005896:	f1b8 0f09 	cmp.w	r8, #9
 800589a:	d937      	bls.n	800590c <_strtod_l+0x32c>
 800589c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800589e:	1a7f      	subs	r7, r7, r1
 80058a0:	2f08      	cmp	r7, #8
 80058a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80058a6:	dc37      	bgt.n	8005918 <_strtod_l+0x338>
 80058a8:	45be      	cmp	lr, r7
 80058aa:	bfa8      	it	ge
 80058ac:	46be      	movge	lr, r7
 80058ae:	f1bc 0f00 	cmp.w	ip, #0
 80058b2:	d001      	beq.n	80058b8 <_strtod_l+0x2d8>
 80058b4:	f1ce 0e00 	rsb	lr, lr, #0
 80058b8:	2c00      	cmp	r4, #0
 80058ba:	d151      	bne.n	8005960 <_strtod_l+0x380>
 80058bc:	2800      	cmp	r0, #0
 80058be:	f47f aece 	bne.w	800565e <_strtod_l+0x7e>
 80058c2:	9a06      	ldr	r2, [sp, #24]
 80058c4:	2a00      	cmp	r2, #0
 80058c6:	f47f aeca 	bne.w	800565e <_strtod_l+0x7e>
 80058ca:	9a04      	ldr	r2, [sp, #16]
 80058cc:	2a00      	cmp	r2, #0
 80058ce:	f47f aee4 	bne.w	800569a <_strtod_l+0xba>
 80058d2:	2b4e      	cmp	r3, #78	; 0x4e
 80058d4:	d027      	beq.n	8005926 <_strtod_l+0x346>
 80058d6:	dc21      	bgt.n	800591c <_strtod_l+0x33c>
 80058d8:	2b49      	cmp	r3, #73	; 0x49
 80058da:	f47f aede 	bne.w	800569a <_strtod_l+0xba>
 80058de:	49a0      	ldr	r1, [pc, #640]	; (8005b60 <_strtod_l+0x580>)
 80058e0:	a81b      	add	r0, sp, #108	; 0x6c
 80058e2:	f001 fdeb 	bl	80074bc <__match>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	f43f aed7 	beq.w	800569a <_strtod_l+0xba>
 80058ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058ee:	499d      	ldr	r1, [pc, #628]	; (8005b64 <_strtod_l+0x584>)
 80058f0:	3b01      	subs	r3, #1
 80058f2:	a81b      	add	r0, sp, #108	; 0x6c
 80058f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80058f6:	f001 fde1 	bl	80074bc <__match>
 80058fa:	b910      	cbnz	r0, 8005902 <_strtod_l+0x322>
 80058fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058fe:	3301      	adds	r3, #1
 8005900:	931b      	str	r3, [sp, #108]	; 0x6c
 8005902:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005b78 <_strtod_l+0x598>
 8005906:	f04f 0a00 	mov.w	sl, #0
 800590a:	e6a8      	b.n	800565e <_strtod_l+0x7e>
 800590c:	210a      	movs	r1, #10
 800590e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005912:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005916:	e7b8      	b.n	800588a <_strtod_l+0x2aa>
 8005918:	46be      	mov	lr, r7
 800591a:	e7c8      	b.n	80058ae <_strtod_l+0x2ce>
 800591c:	2b69      	cmp	r3, #105	; 0x69
 800591e:	d0de      	beq.n	80058de <_strtod_l+0x2fe>
 8005920:	2b6e      	cmp	r3, #110	; 0x6e
 8005922:	f47f aeba 	bne.w	800569a <_strtod_l+0xba>
 8005926:	4990      	ldr	r1, [pc, #576]	; (8005b68 <_strtod_l+0x588>)
 8005928:	a81b      	add	r0, sp, #108	; 0x6c
 800592a:	f001 fdc7 	bl	80074bc <__match>
 800592e:	2800      	cmp	r0, #0
 8005930:	f43f aeb3 	beq.w	800569a <_strtod_l+0xba>
 8005934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b28      	cmp	r3, #40	; 0x28
 800593a:	d10e      	bne.n	800595a <_strtod_l+0x37a>
 800593c:	aa1e      	add	r2, sp, #120	; 0x78
 800593e:	498b      	ldr	r1, [pc, #556]	; (8005b6c <_strtod_l+0x58c>)
 8005940:	a81b      	add	r0, sp, #108	; 0x6c
 8005942:	f001 fdcf 	bl	80074e4 <__hexnan>
 8005946:	2805      	cmp	r0, #5
 8005948:	d107      	bne.n	800595a <_strtod_l+0x37a>
 800594a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800594c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005950:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005954:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005958:	e681      	b.n	800565e <_strtod_l+0x7e>
 800595a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005b80 <_strtod_l+0x5a0>
 800595e:	e7d2      	b.n	8005906 <_strtod_l+0x326>
 8005960:	ebae 0302 	sub.w	r3, lr, r2
 8005964:	9306      	str	r3, [sp, #24]
 8005966:	9b05      	ldr	r3, [sp, #20]
 8005968:	9807      	ldr	r0, [sp, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	bf08      	it	eq
 800596e:	4623      	moveq	r3, r4
 8005970:	2c10      	cmp	r4, #16
 8005972:	9305      	str	r3, [sp, #20]
 8005974:	46a0      	mov	r8, r4
 8005976:	bfa8      	it	ge
 8005978:	f04f 0810 	movge.w	r8, #16
 800597c:	f7fa fdca 	bl	8000514 <__aeabi_ui2d>
 8005980:	2c09      	cmp	r4, #9
 8005982:	4682      	mov	sl, r0
 8005984:	468b      	mov	fp, r1
 8005986:	dc13      	bgt.n	80059b0 <_strtod_l+0x3d0>
 8005988:	9b06      	ldr	r3, [sp, #24]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f43f ae67 	beq.w	800565e <_strtod_l+0x7e>
 8005990:	9b06      	ldr	r3, [sp, #24]
 8005992:	dd7a      	ble.n	8005a8a <_strtod_l+0x4aa>
 8005994:	2b16      	cmp	r3, #22
 8005996:	dc61      	bgt.n	8005a5c <_strtod_l+0x47c>
 8005998:	4a75      	ldr	r2, [pc, #468]	; (8005b70 <_strtod_l+0x590>)
 800599a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800599e:	e9de 0100 	ldrd	r0, r1, [lr]
 80059a2:	4652      	mov	r2, sl
 80059a4:	465b      	mov	r3, fp
 80059a6:	f7fa fe2f 	bl	8000608 <__aeabi_dmul>
 80059aa:	4682      	mov	sl, r0
 80059ac:	468b      	mov	fp, r1
 80059ae:	e656      	b.n	800565e <_strtod_l+0x7e>
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <_strtod_l+0x590>)
 80059b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80059b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80059ba:	f7fa fe25 	bl	8000608 <__aeabi_dmul>
 80059be:	4606      	mov	r6, r0
 80059c0:	4628      	mov	r0, r5
 80059c2:	460f      	mov	r7, r1
 80059c4:	f7fa fda6 	bl	8000514 <__aeabi_ui2d>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4630      	mov	r0, r6
 80059ce:	4639      	mov	r1, r7
 80059d0:	f7fa fc64 	bl	800029c <__adddf3>
 80059d4:	2c0f      	cmp	r4, #15
 80059d6:	4682      	mov	sl, r0
 80059d8:	468b      	mov	fp, r1
 80059da:	ddd5      	ble.n	8005988 <_strtod_l+0x3a8>
 80059dc:	9b06      	ldr	r3, [sp, #24]
 80059de:	eba4 0808 	sub.w	r8, r4, r8
 80059e2:	4498      	add	r8, r3
 80059e4:	f1b8 0f00 	cmp.w	r8, #0
 80059e8:	f340 8096 	ble.w	8005b18 <_strtod_l+0x538>
 80059ec:	f018 030f 	ands.w	r3, r8, #15
 80059f0:	d00a      	beq.n	8005a08 <_strtod_l+0x428>
 80059f2:	495f      	ldr	r1, [pc, #380]	; (8005b70 <_strtod_l+0x590>)
 80059f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80059f8:	4652      	mov	r2, sl
 80059fa:	465b      	mov	r3, fp
 80059fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a00:	f7fa fe02 	bl	8000608 <__aeabi_dmul>
 8005a04:	4682      	mov	sl, r0
 8005a06:	468b      	mov	fp, r1
 8005a08:	f038 080f 	bics.w	r8, r8, #15
 8005a0c:	d073      	beq.n	8005af6 <_strtod_l+0x516>
 8005a0e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005a12:	dd47      	ble.n	8005aa4 <_strtod_l+0x4c4>
 8005a14:	2400      	movs	r4, #0
 8005a16:	46a0      	mov	r8, r4
 8005a18:	9407      	str	r4, [sp, #28]
 8005a1a:	9405      	str	r4, [sp, #20]
 8005a1c:	2322      	movs	r3, #34	; 0x22
 8005a1e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005b78 <_strtod_l+0x598>
 8005a22:	f8c9 3000 	str.w	r3, [r9]
 8005a26:	f04f 0a00 	mov.w	sl, #0
 8005a2a:	9b07      	ldr	r3, [sp, #28]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f43f ae16 	beq.w	800565e <_strtod_l+0x7e>
 8005a32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a34:	4648      	mov	r0, r9
 8005a36:	f001 fe52 	bl	80076de <_Bfree>
 8005a3a:	9905      	ldr	r1, [sp, #20]
 8005a3c:	4648      	mov	r0, r9
 8005a3e:	f001 fe4e 	bl	80076de <_Bfree>
 8005a42:	4641      	mov	r1, r8
 8005a44:	4648      	mov	r0, r9
 8005a46:	f001 fe4a 	bl	80076de <_Bfree>
 8005a4a:	9907      	ldr	r1, [sp, #28]
 8005a4c:	4648      	mov	r0, r9
 8005a4e:	f001 fe46 	bl	80076de <_Bfree>
 8005a52:	4621      	mov	r1, r4
 8005a54:	4648      	mov	r0, r9
 8005a56:	f001 fe42 	bl	80076de <_Bfree>
 8005a5a:	e600      	b.n	800565e <_strtod_l+0x7e>
 8005a5c:	9a06      	ldr	r2, [sp, #24]
 8005a5e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005a62:	4293      	cmp	r3, r2
 8005a64:	dbba      	blt.n	80059dc <_strtod_l+0x3fc>
 8005a66:	4d42      	ldr	r5, [pc, #264]	; (8005b70 <_strtod_l+0x590>)
 8005a68:	f1c4 040f 	rsb	r4, r4, #15
 8005a6c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005a70:	4652      	mov	r2, sl
 8005a72:	465b      	mov	r3, fp
 8005a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a78:	f7fa fdc6 	bl	8000608 <__aeabi_dmul>
 8005a7c:	9b06      	ldr	r3, [sp, #24]
 8005a7e:	1b1c      	subs	r4, r3, r4
 8005a80:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005a84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a88:	e78d      	b.n	80059a6 <_strtod_l+0x3c6>
 8005a8a:	f113 0f16 	cmn.w	r3, #22
 8005a8e:	dba5      	blt.n	80059dc <_strtod_l+0x3fc>
 8005a90:	4a37      	ldr	r2, [pc, #220]	; (8005b70 <_strtod_l+0x590>)
 8005a92:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005a96:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005a9a:	4650      	mov	r0, sl
 8005a9c:	4659      	mov	r1, fp
 8005a9e:	f7fa fedd 	bl	800085c <__aeabi_ddiv>
 8005aa2:	e782      	b.n	80059aa <_strtod_l+0x3ca>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4e33      	ldr	r6, [pc, #204]	; (8005b74 <_strtod_l+0x594>)
 8005aa8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005aac:	4650      	mov	r0, sl
 8005aae:	4659      	mov	r1, fp
 8005ab0:	461d      	mov	r5, r3
 8005ab2:	f1b8 0f01 	cmp.w	r8, #1
 8005ab6:	dc21      	bgt.n	8005afc <_strtod_l+0x51c>
 8005ab8:	b10b      	cbz	r3, 8005abe <_strtod_l+0x4de>
 8005aba:	4682      	mov	sl, r0
 8005abc:	468b      	mov	fp, r1
 8005abe:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <_strtod_l+0x594>)
 8005ac0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005ac4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005ac8:	4652      	mov	r2, sl
 8005aca:	465b      	mov	r3, fp
 8005acc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005ad0:	f7fa fd9a 	bl	8000608 <__aeabi_dmul>
 8005ad4:	4b28      	ldr	r3, [pc, #160]	; (8005b78 <_strtod_l+0x598>)
 8005ad6:	460a      	mov	r2, r1
 8005ad8:	400b      	ands	r3, r1
 8005ada:	4928      	ldr	r1, [pc, #160]	; (8005b7c <_strtod_l+0x59c>)
 8005adc:	428b      	cmp	r3, r1
 8005ade:	4682      	mov	sl, r0
 8005ae0:	d898      	bhi.n	8005a14 <_strtod_l+0x434>
 8005ae2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005ae6:	428b      	cmp	r3, r1
 8005ae8:	bf86      	itte	hi
 8005aea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005b84 <_strtod_l+0x5a4>
 8005aee:	f04f 3aff 	movhi.w	sl, #4294967295
 8005af2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005af6:	2300      	movs	r3, #0
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	e077      	b.n	8005bec <_strtod_l+0x60c>
 8005afc:	f018 0f01 	tst.w	r8, #1
 8005b00:	d006      	beq.n	8005b10 <_strtod_l+0x530>
 8005b02:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f7fa fd7d 	bl	8000608 <__aeabi_dmul>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	3501      	adds	r5, #1
 8005b12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b16:	e7cc      	b.n	8005ab2 <_strtod_l+0x4d2>
 8005b18:	d0ed      	beq.n	8005af6 <_strtod_l+0x516>
 8005b1a:	f1c8 0800 	rsb	r8, r8, #0
 8005b1e:	f018 020f 	ands.w	r2, r8, #15
 8005b22:	d00a      	beq.n	8005b3a <_strtod_l+0x55a>
 8005b24:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <_strtod_l+0x590>)
 8005b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	f7fa fe93 	bl	800085c <__aeabi_ddiv>
 8005b36:	4682      	mov	sl, r0
 8005b38:	468b      	mov	fp, r1
 8005b3a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005b3e:	d0da      	beq.n	8005af6 <_strtod_l+0x516>
 8005b40:	f1b8 0f1f 	cmp.w	r8, #31
 8005b44:	dd20      	ble.n	8005b88 <_strtod_l+0x5a8>
 8005b46:	2400      	movs	r4, #0
 8005b48:	46a0      	mov	r8, r4
 8005b4a:	9407      	str	r4, [sp, #28]
 8005b4c:	9405      	str	r4, [sp, #20]
 8005b4e:	2322      	movs	r3, #34	; 0x22
 8005b50:	f04f 0a00 	mov.w	sl, #0
 8005b54:	f04f 0b00 	mov.w	fp, #0
 8005b58:	f8c9 3000 	str.w	r3, [r9]
 8005b5c:	e765      	b.n	8005a2a <_strtod_l+0x44a>
 8005b5e:	bf00      	nop
 8005b60:	080083ad 	.word	0x080083ad
 8005b64:	0800843b 	.word	0x0800843b
 8005b68:	080083b5 	.word	0x080083b5
 8005b6c:	080083f8 	.word	0x080083f8
 8005b70:	08008478 	.word	0x08008478
 8005b74:	08008450 	.word	0x08008450
 8005b78:	7ff00000 	.word	0x7ff00000
 8005b7c:	7ca00000 	.word	0x7ca00000
 8005b80:	fff80000 	.word	0xfff80000
 8005b84:	7fefffff 	.word	0x7fefffff
 8005b88:	f018 0310 	ands.w	r3, r8, #16
 8005b8c:	bf18      	it	ne
 8005b8e:	236a      	movne	r3, #106	; 0x6a
 8005b90:	4da0      	ldr	r5, [pc, #640]	; (8005e14 <_strtod_l+0x834>)
 8005b92:	9304      	str	r3, [sp, #16]
 8005b94:	4650      	mov	r0, sl
 8005b96:	4659      	mov	r1, fp
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f1b8 0f00 	cmp.w	r8, #0
 8005b9e:	f300 810a 	bgt.w	8005db6 <_strtod_l+0x7d6>
 8005ba2:	b10b      	cbz	r3, 8005ba8 <_strtod_l+0x5c8>
 8005ba4:	4682      	mov	sl, r0
 8005ba6:	468b      	mov	fp, r1
 8005ba8:	9b04      	ldr	r3, [sp, #16]
 8005baa:	b1bb      	cbz	r3, 8005bdc <_strtod_l+0x5fc>
 8005bac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005bb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	4659      	mov	r1, fp
 8005bb8:	dd10      	ble.n	8005bdc <_strtod_l+0x5fc>
 8005bba:	2b1f      	cmp	r3, #31
 8005bbc:	f340 8107 	ble.w	8005dce <_strtod_l+0x7ee>
 8005bc0:	2b34      	cmp	r3, #52	; 0x34
 8005bc2:	bfde      	ittt	le
 8005bc4:	3b20      	suble	r3, #32
 8005bc6:	f04f 32ff 	movle.w	r2, #4294967295
 8005bca:	fa02 f303 	lslle.w	r3, r2, r3
 8005bce:	f04f 0a00 	mov.w	sl, #0
 8005bd2:	bfcc      	ite	gt
 8005bd4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005bd8:	ea03 0b01 	andle.w	fp, r3, r1
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	4650      	mov	r0, sl
 8005be2:	4659      	mov	r1, fp
 8005be4:	f7fa ff78 	bl	8000ad8 <__aeabi_dcmpeq>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d1ac      	bne.n	8005b46 <_strtod_l+0x566>
 8005bec:	9b07      	ldr	r3, [sp, #28]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	9a05      	ldr	r2, [sp, #20]
 8005bf2:	9908      	ldr	r1, [sp, #32]
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	4648      	mov	r0, r9
 8005bf8:	f001 fdc3 	bl	8007782 <__s2b>
 8005bfc:	9007      	str	r0, [sp, #28]
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	f43f af08 	beq.w	8005a14 <_strtod_l+0x434>
 8005c04:	9a06      	ldr	r2, [sp, #24]
 8005c06:	9b06      	ldr	r3, [sp, #24]
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	f1c3 0300 	rsb	r3, r3, #0
 8005c0e:	bfa8      	it	ge
 8005c10:	2300      	movge	r3, #0
 8005c12:	930e      	str	r3, [sp, #56]	; 0x38
 8005c14:	2400      	movs	r4, #0
 8005c16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005c1a:	9316      	str	r3, [sp, #88]	; 0x58
 8005c1c:	46a0      	mov	r8, r4
 8005c1e:	9b07      	ldr	r3, [sp, #28]
 8005c20:	4648      	mov	r0, r9
 8005c22:	6859      	ldr	r1, [r3, #4]
 8005c24:	f001 fd27 	bl	8007676 <_Balloc>
 8005c28:	9005      	str	r0, [sp, #20]
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f43f aef6 	beq.w	8005a1c <_strtod_l+0x43c>
 8005c30:	9b07      	ldr	r3, [sp, #28]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	3202      	adds	r2, #2
 8005c36:	f103 010c 	add.w	r1, r3, #12
 8005c3a:	0092      	lsls	r2, r2, #2
 8005c3c:	300c      	adds	r0, #12
 8005c3e:	f001 fd0f 	bl	8007660 <memcpy>
 8005c42:	aa1e      	add	r2, sp, #120	; 0x78
 8005c44:	a91d      	add	r1, sp, #116	; 0x74
 8005c46:	ec4b ab10 	vmov	d0, sl, fp
 8005c4a:	4648      	mov	r0, r9
 8005c4c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005c50:	f002 f852 	bl	8007cf8 <__d2b>
 8005c54:	901c      	str	r0, [sp, #112]	; 0x70
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f43f aee0 	beq.w	8005a1c <_strtod_l+0x43c>
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4648      	mov	r0, r9
 8005c60:	f001 fe1b 	bl	800789a <__i2b>
 8005c64:	4680      	mov	r8, r0
 8005c66:	2800      	cmp	r0, #0
 8005c68:	f43f aed8 	beq.w	8005a1c <_strtod_l+0x43c>
 8005c6c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005c6e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c70:	2e00      	cmp	r6, #0
 8005c72:	bfab      	itete	ge
 8005c74:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005c76:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005c78:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005c7a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005c7c:	bfac      	ite	ge
 8005c7e:	18f7      	addge	r7, r6, r3
 8005c80:	1b9d      	sublt	r5, r3, r6
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	1af6      	subs	r6, r6, r3
 8005c86:	4416      	add	r6, r2
 8005c88:	4b63      	ldr	r3, [pc, #396]	; (8005e18 <_strtod_l+0x838>)
 8005c8a:	3e01      	subs	r6, #1
 8005c8c:	429e      	cmp	r6, r3
 8005c8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005c92:	f280 80af 	bge.w	8005df4 <_strtod_l+0x814>
 8005c96:	1b9b      	subs	r3, r3, r6
 8005c98:	2b1f      	cmp	r3, #31
 8005c9a:	eba2 0203 	sub.w	r2, r2, r3
 8005c9e:	f04f 0101 	mov.w	r1, #1
 8005ca2:	f300 809b 	bgt.w	8005ddc <_strtod_l+0x7fc>
 8005ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8005caa:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cac:	2300      	movs	r3, #0
 8005cae:	930a      	str	r3, [sp, #40]	; 0x28
 8005cb0:	18be      	adds	r6, r7, r2
 8005cb2:	9b04      	ldr	r3, [sp, #16]
 8005cb4:	42b7      	cmp	r7, r6
 8005cb6:	4415      	add	r5, r2
 8005cb8:	441d      	add	r5, r3
 8005cba:	463b      	mov	r3, r7
 8005cbc:	bfa8      	it	ge
 8005cbe:	4633      	movge	r3, r6
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	bfa8      	it	ge
 8005cc4:	462b      	movge	r3, r5
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfc2      	ittt	gt
 8005cca:	1af6      	subgt	r6, r6, r3
 8005ccc:	1aed      	subgt	r5, r5, r3
 8005cce:	1aff      	subgt	r7, r7, r3
 8005cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cd2:	b1bb      	cbz	r3, 8005d04 <_strtod_l+0x724>
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4648      	mov	r0, r9
 8005cda:	f001 fe7d 	bl	80079d8 <__pow5mult>
 8005cde:	4680      	mov	r8, r0
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	f43f ae9b 	beq.w	8005a1c <_strtod_l+0x43c>
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005cea:	4648      	mov	r0, r9
 8005cec:	f001 fdde 	bl	80078ac <__multiply>
 8005cf0:	900c      	str	r0, [sp, #48]	; 0x30
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f43f ae92 	beq.w	8005a1c <_strtod_l+0x43c>
 8005cf8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005cfa:	4648      	mov	r0, r9
 8005cfc:	f001 fcef 	bl	80076de <_Bfree>
 8005d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d02:	931c      	str	r3, [sp, #112]	; 0x70
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	dc7a      	bgt.n	8005dfe <_strtod_l+0x81e>
 8005d08:	9b06      	ldr	r3, [sp, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	dd08      	ble.n	8005d20 <_strtod_l+0x740>
 8005d0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d10:	9905      	ldr	r1, [sp, #20]
 8005d12:	4648      	mov	r0, r9
 8005d14:	f001 fe60 	bl	80079d8 <__pow5mult>
 8005d18:	9005      	str	r0, [sp, #20]
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f43f ae7e 	beq.w	8005a1c <_strtod_l+0x43c>
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	dd08      	ble.n	8005d36 <_strtod_l+0x756>
 8005d24:	462a      	mov	r2, r5
 8005d26:	9905      	ldr	r1, [sp, #20]
 8005d28:	4648      	mov	r0, r9
 8005d2a:	f001 fea3 	bl	8007a74 <__lshift>
 8005d2e:	9005      	str	r0, [sp, #20]
 8005d30:	2800      	cmp	r0, #0
 8005d32:	f43f ae73 	beq.w	8005a1c <_strtod_l+0x43c>
 8005d36:	2f00      	cmp	r7, #0
 8005d38:	dd08      	ble.n	8005d4c <_strtod_l+0x76c>
 8005d3a:	4641      	mov	r1, r8
 8005d3c:	463a      	mov	r2, r7
 8005d3e:	4648      	mov	r0, r9
 8005d40:	f001 fe98 	bl	8007a74 <__lshift>
 8005d44:	4680      	mov	r8, r0
 8005d46:	2800      	cmp	r0, #0
 8005d48:	f43f ae68 	beq.w	8005a1c <_strtod_l+0x43c>
 8005d4c:	9a05      	ldr	r2, [sp, #20]
 8005d4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d50:	4648      	mov	r0, r9
 8005d52:	f001 fefd 	bl	8007b50 <__mdiff>
 8005d56:	4604      	mov	r4, r0
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f43f ae5f 	beq.w	8005a1c <_strtod_l+0x43c>
 8005d5e:	68c3      	ldr	r3, [r0, #12]
 8005d60:	930c      	str	r3, [sp, #48]	; 0x30
 8005d62:	2300      	movs	r3, #0
 8005d64:	60c3      	str	r3, [r0, #12]
 8005d66:	4641      	mov	r1, r8
 8005d68:	f001 fed8 	bl	8007b1c <__mcmp>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	da55      	bge.n	8005e1c <_strtod_l+0x83c>
 8005d70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d72:	b9e3      	cbnz	r3, 8005dae <_strtod_l+0x7ce>
 8005d74:	f1ba 0f00 	cmp.w	sl, #0
 8005d78:	d119      	bne.n	8005dae <_strtod_l+0x7ce>
 8005d7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d7e:	b9b3      	cbnz	r3, 8005dae <_strtod_l+0x7ce>
 8005d80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d84:	0d1b      	lsrs	r3, r3, #20
 8005d86:	051b      	lsls	r3, r3, #20
 8005d88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005d8c:	d90f      	bls.n	8005dae <_strtod_l+0x7ce>
 8005d8e:	6963      	ldr	r3, [r4, #20]
 8005d90:	b913      	cbnz	r3, 8005d98 <_strtod_l+0x7b8>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	dd0a      	ble.n	8005dae <_strtod_l+0x7ce>
 8005d98:	4621      	mov	r1, r4
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	4648      	mov	r0, r9
 8005d9e:	f001 fe69 	bl	8007a74 <__lshift>
 8005da2:	4641      	mov	r1, r8
 8005da4:	4604      	mov	r4, r0
 8005da6:	f001 feb9 	bl	8007b1c <__mcmp>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	dc67      	bgt.n	8005e7e <_strtod_l+0x89e>
 8005dae:	9b04      	ldr	r3, [sp, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d171      	bne.n	8005e98 <_strtod_l+0x8b8>
 8005db4:	e63d      	b.n	8005a32 <_strtod_l+0x452>
 8005db6:	f018 0f01 	tst.w	r8, #1
 8005dba:	d004      	beq.n	8005dc6 <_strtod_l+0x7e6>
 8005dbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dc0:	f7fa fc22 	bl	8000608 <__aeabi_dmul>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005dca:	3508      	adds	r5, #8
 8005dcc:	e6e5      	b.n	8005b9a <_strtod_l+0x5ba>
 8005dce:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	ea03 0a0a 	and.w	sl, r3, sl
 8005dda:	e6ff      	b.n	8005bdc <_strtod_l+0x5fc>
 8005ddc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005de0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8005de4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005de8:	36e2      	adds	r6, #226	; 0xe2
 8005dea:	fa01 f306 	lsl.w	r3, r1, r6
 8005dee:	930a      	str	r3, [sp, #40]	; 0x28
 8005df0:	910f      	str	r1, [sp, #60]	; 0x3c
 8005df2:	e75d      	b.n	8005cb0 <_strtod_l+0x6d0>
 8005df4:	2300      	movs	r3, #0
 8005df6:	930a      	str	r3, [sp, #40]	; 0x28
 8005df8:	2301      	movs	r3, #1
 8005dfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dfc:	e758      	b.n	8005cb0 <_strtod_l+0x6d0>
 8005dfe:	4632      	mov	r2, r6
 8005e00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e02:	4648      	mov	r0, r9
 8005e04:	f001 fe36 	bl	8007a74 <__lshift>
 8005e08:	901c      	str	r0, [sp, #112]	; 0x70
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	f47f af7c 	bne.w	8005d08 <_strtod_l+0x728>
 8005e10:	e604      	b.n	8005a1c <_strtod_l+0x43c>
 8005e12:	bf00      	nop
 8005e14:	08008410 	.word	0x08008410
 8005e18:	fffffc02 	.word	0xfffffc02
 8005e1c:	465d      	mov	r5, fp
 8005e1e:	f040 8086 	bne.w	8005f2e <_strtod_l+0x94e>
 8005e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e28:	b32a      	cbz	r2, 8005e76 <_strtod_l+0x896>
 8005e2a:	4aaf      	ldr	r2, [pc, #700]	; (80060e8 <_strtod_l+0xb08>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d153      	bne.n	8005ed8 <_strtod_l+0x8f8>
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	4650      	mov	r0, sl
 8005e34:	b1d3      	cbz	r3, 8005e6c <_strtod_l+0x88c>
 8005e36:	4aad      	ldr	r2, [pc, #692]	; (80060ec <_strtod_l+0xb0c>)
 8005e38:	402a      	ands	r2, r5
 8005e3a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005e3e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e42:	d816      	bhi.n	8005e72 <_strtod_l+0x892>
 8005e44:	0d12      	lsrs	r2, r2, #20
 8005e46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4e:	4298      	cmp	r0, r3
 8005e50:	d142      	bne.n	8005ed8 <_strtod_l+0x8f8>
 8005e52:	4ba7      	ldr	r3, [pc, #668]	; (80060f0 <_strtod_l+0xb10>)
 8005e54:	429d      	cmp	r5, r3
 8005e56:	d102      	bne.n	8005e5e <_strtod_l+0x87e>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f43f addf 	beq.w	8005a1c <_strtod_l+0x43c>
 8005e5e:	4ba3      	ldr	r3, [pc, #652]	; (80060ec <_strtod_l+0xb0c>)
 8005e60:	402b      	ands	r3, r5
 8005e62:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005e66:	f04f 0a00 	mov.w	sl, #0
 8005e6a:	e7a0      	b.n	8005dae <_strtod_l+0x7ce>
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e70:	e7ed      	b.n	8005e4e <_strtod_l+0x86e>
 8005e72:	460b      	mov	r3, r1
 8005e74:	e7eb      	b.n	8005e4e <_strtod_l+0x86e>
 8005e76:	bb7b      	cbnz	r3, 8005ed8 <_strtod_l+0x8f8>
 8005e78:	f1ba 0f00 	cmp.w	sl, #0
 8005e7c:	d12c      	bne.n	8005ed8 <_strtod_l+0x8f8>
 8005e7e:	9904      	ldr	r1, [sp, #16]
 8005e80:	4a9a      	ldr	r2, [pc, #616]	; (80060ec <_strtod_l+0xb0c>)
 8005e82:	465b      	mov	r3, fp
 8005e84:	b1f1      	cbz	r1, 8005ec4 <_strtod_l+0x8e4>
 8005e86:	ea02 010b 	and.w	r1, r2, fp
 8005e8a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005e8e:	dc19      	bgt.n	8005ec4 <_strtod_l+0x8e4>
 8005e90:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005e94:	f77f ae5b 	ble.w	8005b4e <_strtod_l+0x56e>
 8005e98:	4a96      	ldr	r2, [pc, #600]	; (80060f4 <_strtod_l+0xb14>)
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	4659      	mov	r1, fp
 8005ea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005ea8:	f7fa fbae 	bl	8000608 <__aeabi_dmul>
 8005eac:	4682      	mov	sl, r0
 8005eae:	468b      	mov	fp, r1
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	f47f adbe 	bne.w	8005a32 <_strtod_l+0x452>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	f47f adbb 	bne.w	8005a32 <_strtod_l+0x452>
 8005ebc:	2322      	movs	r3, #34	; 0x22
 8005ebe:	f8c9 3000 	str.w	r3, [r9]
 8005ec2:	e5b6      	b.n	8005a32 <_strtod_l+0x452>
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005eca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005ece:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005ed2:	f04f 3aff 	mov.w	sl, #4294967295
 8005ed6:	e76a      	b.n	8005dae <_strtod_l+0x7ce>
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eda:	b193      	cbz	r3, 8005f02 <_strtod_l+0x922>
 8005edc:	422b      	tst	r3, r5
 8005ede:	f43f af66 	beq.w	8005dae <_strtod_l+0x7ce>
 8005ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee4:	9a04      	ldr	r2, [sp, #16]
 8005ee6:	4650      	mov	r0, sl
 8005ee8:	4659      	mov	r1, fp
 8005eea:	b173      	cbz	r3, 8005f0a <_strtod_l+0x92a>
 8005eec:	f7ff fb5c 	bl	80055a8 <sulp>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ef8:	f7fa f9d0 	bl	800029c <__adddf3>
 8005efc:	4682      	mov	sl, r0
 8005efe:	468b      	mov	fp, r1
 8005f00:	e755      	b.n	8005dae <_strtod_l+0x7ce>
 8005f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f04:	ea13 0f0a 	tst.w	r3, sl
 8005f08:	e7e9      	b.n	8005ede <_strtod_l+0x8fe>
 8005f0a:	f7ff fb4d 	bl	80055a8 <sulp>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f16:	f7fa f9bf 	bl	8000298 <__aeabi_dsub>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4682      	mov	sl, r0
 8005f20:	468b      	mov	fp, r1
 8005f22:	f7fa fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	f47f ae11 	bne.w	8005b4e <_strtod_l+0x56e>
 8005f2c:	e73f      	b.n	8005dae <_strtod_l+0x7ce>
 8005f2e:	4641      	mov	r1, r8
 8005f30:	4620      	mov	r0, r4
 8005f32:	f001 ff30 	bl	8007d96 <__ratio>
 8005f36:	ec57 6b10 	vmov	r6, r7, d0
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f40:	ee10 0a10 	vmov	r0, s0
 8005f44:	4639      	mov	r1, r7
 8005f46:	f7fa fddb 	bl	8000b00 <__aeabi_dcmple>
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	d077      	beq.n	800603e <_strtod_l+0xa5e>
 8005f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d04a      	beq.n	8005fea <_strtod_l+0xa0a>
 8005f54:	4b68      	ldr	r3, [pc, #416]	; (80060f8 <_strtod_l+0xb18>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005f5c:	4f66      	ldr	r7, [pc, #408]	; (80060f8 <_strtod_l+0xb18>)
 8005f5e:	2600      	movs	r6, #0
 8005f60:	4b62      	ldr	r3, [pc, #392]	; (80060ec <_strtod_l+0xb0c>)
 8005f62:	402b      	ands	r3, r5
 8005f64:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f68:	4b64      	ldr	r3, [pc, #400]	; (80060fc <_strtod_l+0xb1c>)
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	f040 80ce 	bne.w	800610c <_strtod_l+0xb2c>
 8005f70:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f78:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005f7c:	ec4b ab10 	vmov	d0, sl, fp
 8005f80:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005f84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f88:	f001 fe40 	bl	8007c0c <__ulp>
 8005f8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f90:	ec53 2b10 	vmov	r2, r3, d0
 8005f94:	f7fa fb38 	bl	8000608 <__aeabi_dmul>
 8005f98:	4652      	mov	r2, sl
 8005f9a:	465b      	mov	r3, fp
 8005f9c:	f7fa f97e 	bl	800029c <__adddf3>
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4952      	ldr	r1, [pc, #328]	; (80060ec <_strtod_l+0xb0c>)
 8005fa4:	4a56      	ldr	r2, [pc, #344]	; (8006100 <_strtod_l+0xb20>)
 8005fa6:	4019      	ands	r1, r3
 8005fa8:	4291      	cmp	r1, r2
 8005faa:	4682      	mov	sl, r0
 8005fac:	d95b      	bls.n	8006066 <_strtod_l+0xa86>
 8005fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d103      	bne.n	8005fc0 <_strtod_l+0x9e0>
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	f43f ad2e 	beq.w	8005a1c <_strtod_l+0x43c>
 8005fc0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80060f0 <_strtod_l+0xb10>
 8005fc4:	f04f 3aff 	mov.w	sl, #4294967295
 8005fc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fca:	4648      	mov	r0, r9
 8005fcc:	f001 fb87 	bl	80076de <_Bfree>
 8005fd0:	9905      	ldr	r1, [sp, #20]
 8005fd2:	4648      	mov	r0, r9
 8005fd4:	f001 fb83 	bl	80076de <_Bfree>
 8005fd8:	4641      	mov	r1, r8
 8005fda:	4648      	mov	r0, r9
 8005fdc:	f001 fb7f 	bl	80076de <_Bfree>
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	4648      	mov	r0, r9
 8005fe4:	f001 fb7b 	bl	80076de <_Bfree>
 8005fe8:	e619      	b.n	8005c1e <_strtod_l+0x63e>
 8005fea:	f1ba 0f00 	cmp.w	sl, #0
 8005fee:	d11a      	bne.n	8006026 <_strtod_l+0xa46>
 8005ff0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ff4:	b9eb      	cbnz	r3, 8006032 <_strtod_l+0xa52>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4b3f      	ldr	r3, [pc, #252]	; (80060f8 <_strtod_l+0xb18>)
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	f7fa fd75 	bl	8000aec <__aeabi_dcmplt>
 8006002:	b9c8      	cbnz	r0, 8006038 <_strtod_l+0xa58>
 8006004:	4630      	mov	r0, r6
 8006006:	4639      	mov	r1, r7
 8006008:	2200      	movs	r2, #0
 800600a:	4b3e      	ldr	r3, [pc, #248]	; (8006104 <_strtod_l+0xb24>)
 800600c:	f7fa fafc 	bl	8000608 <__aeabi_dmul>
 8006010:	4606      	mov	r6, r0
 8006012:	460f      	mov	r7, r1
 8006014:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006018:	9618      	str	r6, [sp, #96]	; 0x60
 800601a:	9319      	str	r3, [sp, #100]	; 0x64
 800601c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006020:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006024:	e79c      	b.n	8005f60 <_strtod_l+0x980>
 8006026:	f1ba 0f01 	cmp.w	sl, #1
 800602a:	d102      	bne.n	8006032 <_strtod_l+0xa52>
 800602c:	2d00      	cmp	r5, #0
 800602e:	f43f ad8e 	beq.w	8005b4e <_strtod_l+0x56e>
 8006032:	2200      	movs	r2, #0
 8006034:	4b34      	ldr	r3, [pc, #208]	; (8006108 <_strtod_l+0xb28>)
 8006036:	e78f      	b.n	8005f58 <_strtod_l+0x978>
 8006038:	2600      	movs	r6, #0
 800603a:	4f32      	ldr	r7, [pc, #200]	; (8006104 <_strtod_l+0xb24>)
 800603c:	e7ea      	b.n	8006014 <_strtod_l+0xa34>
 800603e:	4b31      	ldr	r3, [pc, #196]	; (8006104 <_strtod_l+0xb24>)
 8006040:	4630      	mov	r0, r6
 8006042:	4639      	mov	r1, r7
 8006044:	2200      	movs	r2, #0
 8006046:	f7fa fadf 	bl	8000608 <__aeabi_dmul>
 800604a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800604c:	4606      	mov	r6, r0
 800604e:	460f      	mov	r7, r1
 8006050:	b933      	cbnz	r3, 8006060 <_strtod_l+0xa80>
 8006052:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006056:	9010      	str	r0, [sp, #64]	; 0x40
 8006058:	9311      	str	r3, [sp, #68]	; 0x44
 800605a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800605e:	e7df      	b.n	8006020 <_strtod_l+0xa40>
 8006060:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006064:	e7f9      	b.n	800605a <_strtod_l+0xa7a>
 8006066:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800606a:	9b04      	ldr	r3, [sp, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1ab      	bne.n	8005fc8 <_strtod_l+0x9e8>
 8006070:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006074:	0d1b      	lsrs	r3, r3, #20
 8006076:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006078:	051b      	lsls	r3, r3, #20
 800607a:	429a      	cmp	r2, r3
 800607c:	465d      	mov	r5, fp
 800607e:	d1a3      	bne.n	8005fc8 <_strtod_l+0x9e8>
 8006080:	4639      	mov	r1, r7
 8006082:	4630      	mov	r0, r6
 8006084:	f7fa fd70 	bl	8000b68 <__aeabi_d2iz>
 8006088:	f7fa fa54 	bl	8000534 <__aeabi_i2d>
 800608c:	460b      	mov	r3, r1
 800608e:	4602      	mov	r2, r0
 8006090:	4639      	mov	r1, r7
 8006092:	4630      	mov	r0, r6
 8006094:	f7fa f900 	bl	8000298 <__aeabi_dsub>
 8006098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800609a:	4606      	mov	r6, r0
 800609c:	460f      	mov	r7, r1
 800609e:	b933      	cbnz	r3, 80060ae <_strtod_l+0xace>
 80060a0:	f1ba 0f00 	cmp.w	sl, #0
 80060a4:	d103      	bne.n	80060ae <_strtod_l+0xace>
 80060a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	d06d      	beq.n	800618a <_strtod_l+0xbaa>
 80060ae:	a30a      	add	r3, pc, #40	; (adr r3, 80060d8 <_strtod_l+0xaf8>)
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	4630      	mov	r0, r6
 80060b6:	4639      	mov	r1, r7
 80060b8:	f7fa fd18 	bl	8000aec <__aeabi_dcmplt>
 80060bc:	2800      	cmp	r0, #0
 80060be:	f47f acb8 	bne.w	8005a32 <_strtod_l+0x452>
 80060c2:	a307      	add	r3, pc, #28	; (adr r3, 80060e0 <_strtod_l+0xb00>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	4630      	mov	r0, r6
 80060ca:	4639      	mov	r1, r7
 80060cc:	f7fa fd2c 	bl	8000b28 <__aeabi_dcmpgt>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f43f af79 	beq.w	8005fc8 <_strtod_l+0x9e8>
 80060d6:	e4ac      	b.n	8005a32 <_strtod_l+0x452>
 80060d8:	94a03595 	.word	0x94a03595
 80060dc:	3fdfffff 	.word	0x3fdfffff
 80060e0:	35afe535 	.word	0x35afe535
 80060e4:	3fe00000 	.word	0x3fe00000
 80060e8:	000fffff 	.word	0x000fffff
 80060ec:	7ff00000 	.word	0x7ff00000
 80060f0:	7fefffff 	.word	0x7fefffff
 80060f4:	39500000 	.word	0x39500000
 80060f8:	3ff00000 	.word	0x3ff00000
 80060fc:	7fe00000 	.word	0x7fe00000
 8006100:	7c9fffff 	.word	0x7c9fffff
 8006104:	3fe00000 	.word	0x3fe00000
 8006108:	bff00000 	.word	0xbff00000
 800610c:	9b04      	ldr	r3, [sp, #16]
 800610e:	b333      	cbz	r3, 800615e <_strtod_l+0xb7e>
 8006110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006112:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006116:	d822      	bhi.n	800615e <_strtod_l+0xb7e>
 8006118:	a327      	add	r3, pc, #156	; (adr r3, 80061b8 <_strtod_l+0xbd8>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	4630      	mov	r0, r6
 8006120:	4639      	mov	r1, r7
 8006122:	f7fa fced 	bl	8000b00 <__aeabi_dcmple>
 8006126:	b1a0      	cbz	r0, 8006152 <_strtod_l+0xb72>
 8006128:	4639      	mov	r1, r7
 800612a:	4630      	mov	r0, r6
 800612c:	f7fa fd44 	bl	8000bb8 <__aeabi_d2uiz>
 8006130:	2800      	cmp	r0, #0
 8006132:	bf08      	it	eq
 8006134:	2001      	moveq	r0, #1
 8006136:	f7fa f9ed 	bl	8000514 <__aeabi_ui2d>
 800613a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800613c:	4606      	mov	r6, r0
 800613e:	460f      	mov	r7, r1
 8006140:	bb03      	cbnz	r3, 8006184 <_strtod_l+0xba4>
 8006142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006146:	9012      	str	r0, [sp, #72]	; 0x48
 8006148:	9313      	str	r3, [sp, #76]	; 0x4c
 800614a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800614e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006154:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006156:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	930b      	str	r3, [sp, #44]	; 0x2c
 800615e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006162:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006166:	f001 fd51 	bl	8007c0c <__ulp>
 800616a:	4650      	mov	r0, sl
 800616c:	ec53 2b10 	vmov	r2, r3, d0
 8006170:	4659      	mov	r1, fp
 8006172:	f7fa fa49 	bl	8000608 <__aeabi_dmul>
 8006176:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800617a:	f7fa f88f 	bl	800029c <__adddf3>
 800617e:	4682      	mov	sl, r0
 8006180:	468b      	mov	fp, r1
 8006182:	e772      	b.n	800606a <_strtod_l+0xa8a>
 8006184:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006188:	e7df      	b.n	800614a <_strtod_l+0xb6a>
 800618a:	a30d      	add	r3, pc, #52	; (adr r3, 80061c0 <_strtod_l+0xbe0>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f7fa fcac 	bl	8000aec <__aeabi_dcmplt>
 8006194:	e79c      	b.n	80060d0 <_strtod_l+0xaf0>
 8006196:	2300      	movs	r3, #0
 8006198:	930d      	str	r3, [sp, #52]	; 0x34
 800619a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800619c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	f7ff ba61 	b.w	8005666 <_strtod_l+0x86>
 80061a4:	2b65      	cmp	r3, #101	; 0x65
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f43f ab4e 	beq.w	800584a <_strtod_l+0x26a>
 80061ae:	2101      	movs	r1, #1
 80061b0:	4614      	mov	r4, r2
 80061b2:	9104      	str	r1, [sp, #16]
 80061b4:	f7ff bacb 	b.w	800574e <_strtod_l+0x16e>
 80061b8:	ffc00000 	.word	0xffc00000
 80061bc:	41dfffff 	.word	0x41dfffff
 80061c0:	94a03595 	.word	0x94a03595
 80061c4:	3fcfffff 	.word	0x3fcfffff

080061c8 <_strtod_r>:
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <_strtod_r+0x18>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	b410      	push	{r4}
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	4c04      	ldr	r4, [pc, #16]	; (80061e4 <_strtod_r+0x1c>)
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bf08      	it	eq
 80061d6:	4623      	moveq	r3, r4
 80061d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061dc:	f7ff ba00 	b.w	80055e0 <_strtod_l>
 80061e0:	2000000c 	.word	0x2000000c
 80061e4:	20000070 	.word	0x20000070

080061e8 <_strtol_l.isra.0>:
 80061e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	4680      	mov	r8, r0
 80061ee:	4689      	mov	r9, r1
 80061f0:	4692      	mov	sl, r2
 80061f2:	461e      	mov	r6, r3
 80061f4:	460f      	mov	r7, r1
 80061f6:	463d      	mov	r5, r7
 80061f8:	9808      	ldr	r0, [sp, #32]
 80061fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061fe:	f001 fa01 	bl	8007604 <__locale_ctype_ptr_l>
 8006202:	4420      	add	r0, r4
 8006204:	7843      	ldrb	r3, [r0, #1]
 8006206:	f013 0308 	ands.w	r3, r3, #8
 800620a:	d132      	bne.n	8006272 <_strtol_l.isra.0+0x8a>
 800620c:	2c2d      	cmp	r4, #45	; 0x2d
 800620e:	d132      	bne.n	8006276 <_strtol_l.isra.0+0x8e>
 8006210:	787c      	ldrb	r4, [r7, #1]
 8006212:	1cbd      	adds	r5, r7, #2
 8006214:	2201      	movs	r2, #1
 8006216:	2e00      	cmp	r6, #0
 8006218:	d05d      	beq.n	80062d6 <_strtol_l.isra.0+0xee>
 800621a:	2e10      	cmp	r6, #16
 800621c:	d109      	bne.n	8006232 <_strtol_l.isra.0+0x4a>
 800621e:	2c30      	cmp	r4, #48	; 0x30
 8006220:	d107      	bne.n	8006232 <_strtol_l.isra.0+0x4a>
 8006222:	782b      	ldrb	r3, [r5, #0]
 8006224:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006228:	2b58      	cmp	r3, #88	; 0x58
 800622a:	d14f      	bne.n	80062cc <_strtol_l.isra.0+0xe4>
 800622c:	786c      	ldrb	r4, [r5, #1]
 800622e:	2610      	movs	r6, #16
 8006230:	3502      	adds	r5, #2
 8006232:	2a00      	cmp	r2, #0
 8006234:	bf14      	ite	ne
 8006236:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800623a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800623e:	2700      	movs	r7, #0
 8006240:	fbb1 fcf6 	udiv	ip, r1, r6
 8006244:	4638      	mov	r0, r7
 8006246:	fb06 1e1c 	mls	lr, r6, ip, r1
 800624a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800624e:	2b09      	cmp	r3, #9
 8006250:	d817      	bhi.n	8006282 <_strtol_l.isra.0+0x9a>
 8006252:	461c      	mov	r4, r3
 8006254:	42a6      	cmp	r6, r4
 8006256:	dd23      	ble.n	80062a0 <_strtol_l.isra.0+0xb8>
 8006258:	1c7b      	adds	r3, r7, #1
 800625a:	d007      	beq.n	800626c <_strtol_l.isra.0+0x84>
 800625c:	4584      	cmp	ip, r0
 800625e:	d31c      	bcc.n	800629a <_strtol_l.isra.0+0xb2>
 8006260:	d101      	bne.n	8006266 <_strtol_l.isra.0+0x7e>
 8006262:	45a6      	cmp	lr, r4
 8006264:	db19      	blt.n	800629a <_strtol_l.isra.0+0xb2>
 8006266:	fb00 4006 	mla	r0, r0, r6, r4
 800626a:	2701      	movs	r7, #1
 800626c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006270:	e7eb      	b.n	800624a <_strtol_l.isra.0+0x62>
 8006272:	462f      	mov	r7, r5
 8006274:	e7bf      	b.n	80061f6 <_strtol_l.isra.0+0xe>
 8006276:	2c2b      	cmp	r4, #43	; 0x2b
 8006278:	bf04      	itt	eq
 800627a:	1cbd      	addeq	r5, r7, #2
 800627c:	787c      	ldrbeq	r4, [r7, #1]
 800627e:	461a      	mov	r2, r3
 8006280:	e7c9      	b.n	8006216 <_strtol_l.isra.0+0x2e>
 8006282:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006286:	2b19      	cmp	r3, #25
 8006288:	d801      	bhi.n	800628e <_strtol_l.isra.0+0xa6>
 800628a:	3c37      	subs	r4, #55	; 0x37
 800628c:	e7e2      	b.n	8006254 <_strtol_l.isra.0+0x6c>
 800628e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006292:	2b19      	cmp	r3, #25
 8006294:	d804      	bhi.n	80062a0 <_strtol_l.isra.0+0xb8>
 8006296:	3c57      	subs	r4, #87	; 0x57
 8006298:	e7dc      	b.n	8006254 <_strtol_l.isra.0+0x6c>
 800629a:	f04f 37ff 	mov.w	r7, #4294967295
 800629e:	e7e5      	b.n	800626c <_strtol_l.isra.0+0x84>
 80062a0:	1c7b      	adds	r3, r7, #1
 80062a2:	d108      	bne.n	80062b6 <_strtol_l.isra.0+0xce>
 80062a4:	2322      	movs	r3, #34	; 0x22
 80062a6:	f8c8 3000 	str.w	r3, [r8]
 80062aa:	4608      	mov	r0, r1
 80062ac:	f1ba 0f00 	cmp.w	sl, #0
 80062b0:	d107      	bne.n	80062c2 <_strtol_l.isra.0+0xda>
 80062b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b6:	b102      	cbz	r2, 80062ba <_strtol_l.isra.0+0xd2>
 80062b8:	4240      	negs	r0, r0
 80062ba:	f1ba 0f00 	cmp.w	sl, #0
 80062be:	d0f8      	beq.n	80062b2 <_strtol_l.isra.0+0xca>
 80062c0:	b10f      	cbz	r7, 80062c6 <_strtol_l.isra.0+0xde>
 80062c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80062c6:	f8ca 9000 	str.w	r9, [sl]
 80062ca:	e7f2      	b.n	80062b2 <_strtol_l.isra.0+0xca>
 80062cc:	2430      	movs	r4, #48	; 0x30
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	d1af      	bne.n	8006232 <_strtol_l.isra.0+0x4a>
 80062d2:	2608      	movs	r6, #8
 80062d4:	e7ad      	b.n	8006232 <_strtol_l.isra.0+0x4a>
 80062d6:	2c30      	cmp	r4, #48	; 0x30
 80062d8:	d0a3      	beq.n	8006222 <_strtol_l.isra.0+0x3a>
 80062da:	260a      	movs	r6, #10
 80062dc:	e7a9      	b.n	8006232 <_strtol_l.isra.0+0x4a>
	...

080062e0 <_strtol_r>:
 80062e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062e2:	4c06      	ldr	r4, [pc, #24]	; (80062fc <_strtol_r+0x1c>)
 80062e4:	4d06      	ldr	r5, [pc, #24]	; (8006300 <_strtol_r+0x20>)
 80062e6:	6824      	ldr	r4, [r4, #0]
 80062e8:	6a24      	ldr	r4, [r4, #32]
 80062ea:	2c00      	cmp	r4, #0
 80062ec:	bf08      	it	eq
 80062ee:	462c      	moveq	r4, r5
 80062f0:	9400      	str	r4, [sp, #0]
 80062f2:	f7ff ff79 	bl	80061e8 <_strtol_l.isra.0>
 80062f6:	b003      	add	sp, #12
 80062f8:	bd30      	pop	{r4, r5, pc}
 80062fa:	bf00      	nop
 80062fc:	2000000c 	.word	0x2000000c
 8006300:	20000070 	.word	0x20000070

08006304 <strtol>:
 8006304:	4b08      	ldr	r3, [pc, #32]	; (8006328 <strtol+0x24>)
 8006306:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006308:	681c      	ldr	r4, [r3, #0]
 800630a:	4d08      	ldr	r5, [pc, #32]	; (800632c <strtol+0x28>)
 800630c:	6a23      	ldr	r3, [r4, #32]
 800630e:	2b00      	cmp	r3, #0
 8006310:	bf08      	it	eq
 8006312:	462b      	moveq	r3, r5
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	460a      	mov	r2, r1
 800631a:	4601      	mov	r1, r0
 800631c:	4620      	mov	r0, r4
 800631e:	f7ff ff63 	bl	80061e8 <_strtol_l.isra.0>
 8006322:	b003      	add	sp, #12
 8006324:	bd30      	pop	{r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	2000000c 	.word	0x2000000c
 800632c:	20000070 	.word	0x20000070

08006330 <quorem>:
 8006330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	6903      	ldr	r3, [r0, #16]
 8006336:	690c      	ldr	r4, [r1, #16]
 8006338:	42a3      	cmp	r3, r4
 800633a:	4680      	mov	r8, r0
 800633c:	f2c0 8082 	blt.w	8006444 <quorem+0x114>
 8006340:	3c01      	subs	r4, #1
 8006342:	f101 0714 	add.w	r7, r1, #20
 8006346:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800634a:	f100 0614 	add.w	r6, r0, #20
 800634e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006352:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006356:	eb06 030c 	add.w	r3, r6, ip
 800635a:	3501      	adds	r5, #1
 800635c:	eb07 090c 	add.w	r9, r7, ip
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	fbb0 f5f5 	udiv	r5, r0, r5
 8006366:	b395      	cbz	r5, 80063ce <quorem+0x9e>
 8006368:	f04f 0a00 	mov.w	sl, #0
 800636c:	4638      	mov	r0, r7
 800636e:	46b6      	mov	lr, r6
 8006370:	46d3      	mov	fp, sl
 8006372:	f850 2b04 	ldr.w	r2, [r0], #4
 8006376:	b293      	uxth	r3, r2
 8006378:	fb05 a303 	mla	r3, r5, r3, sl
 800637c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006380:	b29b      	uxth	r3, r3
 8006382:	ebab 0303 	sub.w	r3, fp, r3
 8006386:	0c12      	lsrs	r2, r2, #16
 8006388:	f8de b000 	ldr.w	fp, [lr]
 800638c:	fb05 a202 	mla	r2, r5, r2, sl
 8006390:	fa13 f38b 	uxtah	r3, r3, fp
 8006394:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006398:	fa1f fb82 	uxth.w	fp, r2
 800639c:	f8de 2000 	ldr.w	r2, [lr]
 80063a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80063a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ae:	4581      	cmp	r9, r0
 80063b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80063b4:	f84e 3b04 	str.w	r3, [lr], #4
 80063b8:	d2db      	bcs.n	8006372 <quorem+0x42>
 80063ba:	f856 300c 	ldr.w	r3, [r6, ip]
 80063be:	b933      	cbnz	r3, 80063ce <quorem+0x9e>
 80063c0:	9b01      	ldr	r3, [sp, #4]
 80063c2:	3b04      	subs	r3, #4
 80063c4:	429e      	cmp	r6, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	d330      	bcc.n	800642c <quorem+0xfc>
 80063ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80063ce:	4640      	mov	r0, r8
 80063d0:	f001 fba4 	bl	8007b1c <__mcmp>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	db25      	blt.n	8006424 <quorem+0xf4>
 80063d8:	3501      	adds	r5, #1
 80063da:	4630      	mov	r0, r6
 80063dc:	f04f 0c00 	mov.w	ip, #0
 80063e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80063e4:	f8d0 e000 	ldr.w	lr, [r0]
 80063e8:	b293      	uxth	r3, r2
 80063ea:	ebac 0303 	sub.w	r3, ip, r3
 80063ee:	0c12      	lsrs	r2, r2, #16
 80063f0:	fa13 f38e 	uxtah	r3, r3, lr
 80063f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006402:	45b9      	cmp	r9, r7
 8006404:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006408:	f840 3b04 	str.w	r3, [r0], #4
 800640c:	d2e8      	bcs.n	80063e0 <quorem+0xb0>
 800640e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006412:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006416:	b92a      	cbnz	r2, 8006424 <quorem+0xf4>
 8006418:	3b04      	subs	r3, #4
 800641a:	429e      	cmp	r6, r3
 800641c:	461a      	mov	r2, r3
 800641e:	d30b      	bcc.n	8006438 <quorem+0x108>
 8006420:	f8c8 4010 	str.w	r4, [r8, #16]
 8006424:	4628      	mov	r0, r5
 8006426:	b003      	add	sp, #12
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	3b04      	subs	r3, #4
 8006430:	2a00      	cmp	r2, #0
 8006432:	d1ca      	bne.n	80063ca <quorem+0x9a>
 8006434:	3c01      	subs	r4, #1
 8006436:	e7c5      	b.n	80063c4 <quorem+0x94>
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	3b04      	subs	r3, #4
 800643c:	2a00      	cmp	r2, #0
 800643e:	d1ef      	bne.n	8006420 <quorem+0xf0>
 8006440:	3c01      	subs	r4, #1
 8006442:	e7ea      	b.n	800641a <quorem+0xea>
 8006444:	2000      	movs	r0, #0
 8006446:	e7ee      	b.n	8006426 <quorem+0xf6>

08006448 <_dtoa_r>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	ec57 6b10 	vmov	r6, r7, d0
 8006450:	b097      	sub	sp, #92	; 0x5c
 8006452:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006454:	9106      	str	r1, [sp, #24]
 8006456:	4604      	mov	r4, r0
 8006458:	920b      	str	r2, [sp, #44]	; 0x2c
 800645a:	9312      	str	r3, [sp, #72]	; 0x48
 800645c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006460:	e9cd 6700 	strd	r6, r7, [sp]
 8006464:	b93d      	cbnz	r5, 8006476 <_dtoa_r+0x2e>
 8006466:	2010      	movs	r0, #16
 8006468:	f001 f8e0 	bl	800762c <malloc>
 800646c:	6260      	str	r0, [r4, #36]	; 0x24
 800646e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006472:	6005      	str	r5, [r0, #0]
 8006474:	60c5      	str	r5, [r0, #12]
 8006476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006478:	6819      	ldr	r1, [r3, #0]
 800647a:	b151      	cbz	r1, 8006492 <_dtoa_r+0x4a>
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	604a      	str	r2, [r1, #4]
 8006480:	2301      	movs	r3, #1
 8006482:	4093      	lsls	r3, r2
 8006484:	608b      	str	r3, [r1, #8]
 8006486:	4620      	mov	r0, r4
 8006488:	f001 f929 	bl	80076de <_Bfree>
 800648c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	1e3b      	subs	r3, r7, #0
 8006494:	bfbb      	ittet	lt
 8006496:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800649a:	9301      	strlt	r3, [sp, #4]
 800649c:	2300      	movge	r3, #0
 800649e:	2201      	movlt	r2, #1
 80064a0:	bfac      	ite	ge
 80064a2:	f8c8 3000 	strge.w	r3, [r8]
 80064a6:	f8c8 2000 	strlt.w	r2, [r8]
 80064aa:	4baf      	ldr	r3, [pc, #700]	; (8006768 <_dtoa_r+0x320>)
 80064ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80064b0:	ea33 0308 	bics.w	r3, r3, r8
 80064b4:	d114      	bne.n	80064e0 <_dtoa_r+0x98>
 80064b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	9b00      	ldr	r3, [sp, #0]
 80064c0:	b923      	cbnz	r3, 80064cc <_dtoa_r+0x84>
 80064c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f000 8542 	beq.w	8006f50 <_dtoa_r+0xb08>
 80064cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800677c <_dtoa_r+0x334>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8544 	beq.w	8006f60 <_dtoa_r+0xb18>
 80064d8:	f10b 0303 	add.w	r3, fp, #3
 80064dc:	f000 bd3e 	b.w	8006f5c <_dtoa_r+0xb14>
 80064e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80064e4:	2200      	movs	r2, #0
 80064e6:	2300      	movs	r3, #0
 80064e8:	4630      	mov	r0, r6
 80064ea:	4639      	mov	r1, r7
 80064ec:	f7fa faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80064f0:	4681      	mov	r9, r0
 80064f2:	b168      	cbz	r0, 8006510 <_dtoa_r+0xc8>
 80064f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064f6:	2301      	movs	r3, #1
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8524 	beq.w	8006f4a <_dtoa_r+0xb02>
 8006502:	4b9a      	ldr	r3, [pc, #616]	; (800676c <_dtoa_r+0x324>)
 8006504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006506:	f103 3bff 	add.w	fp, r3, #4294967295
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	f000 bd28 	b.w	8006f60 <_dtoa_r+0xb18>
 8006510:	aa14      	add	r2, sp, #80	; 0x50
 8006512:	a915      	add	r1, sp, #84	; 0x54
 8006514:	ec47 6b10 	vmov	d0, r6, r7
 8006518:	4620      	mov	r0, r4
 800651a:	f001 fbed 	bl	8007cf8 <__d2b>
 800651e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006522:	9004      	str	r0, [sp, #16]
 8006524:	2d00      	cmp	r5, #0
 8006526:	d07c      	beq.n	8006622 <_dtoa_r+0x1da>
 8006528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800652c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006530:	46b2      	mov	sl, r6
 8006532:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800653a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800653e:	2200      	movs	r2, #0
 8006540:	4b8b      	ldr	r3, [pc, #556]	; (8006770 <_dtoa_r+0x328>)
 8006542:	4650      	mov	r0, sl
 8006544:	4659      	mov	r1, fp
 8006546:	f7f9 fea7 	bl	8000298 <__aeabi_dsub>
 800654a:	a381      	add	r3, pc, #516	; (adr r3, 8006750 <_dtoa_r+0x308>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f7fa f85a 	bl	8000608 <__aeabi_dmul>
 8006554:	a380      	add	r3, pc, #512	; (adr r3, 8006758 <_dtoa_r+0x310>)
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	f7f9 fe9f 	bl	800029c <__adddf3>
 800655e:	4606      	mov	r6, r0
 8006560:	4628      	mov	r0, r5
 8006562:	460f      	mov	r7, r1
 8006564:	f7f9 ffe6 	bl	8000534 <__aeabi_i2d>
 8006568:	a37d      	add	r3, pc, #500	; (adr r3, 8006760 <_dtoa_r+0x318>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7fa f84b 	bl	8000608 <__aeabi_dmul>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4630      	mov	r0, r6
 8006578:	4639      	mov	r1, r7
 800657a:	f7f9 fe8f 	bl	800029c <__adddf3>
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	f7fa faf1 	bl	8000b68 <__aeabi_d2iz>
 8006586:	2200      	movs	r2, #0
 8006588:	4682      	mov	sl, r0
 800658a:	2300      	movs	r3, #0
 800658c:	4630      	mov	r0, r6
 800658e:	4639      	mov	r1, r7
 8006590:	f7fa faac 	bl	8000aec <__aeabi_dcmplt>
 8006594:	b148      	cbz	r0, 80065aa <_dtoa_r+0x162>
 8006596:	4650      	mov	r0, sl
 8006598:	f7f9 ffcc 	bl	8000534 <__aeabi_i2d>
 800659c:	4632      	mov	r2, r6
 800659e:	463b      	mov	r3, r7
 80065a0:	f7fa fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80065a4:	b908      	cbnz	r0, 80065aa <_dtoa_r+0x162>
 80065a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065aa:	f1ba 0f16 	cmp.w	sl, #22
 80065ae:	d859      	bhi.n	8006664 <_dtoa_r+0x21c>
 80065b0:	4970      	ldr	r1, [pc, #448]	; (8006774 <_dtoa_r+0x32c>)
 80065b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80065b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065be:	f7fa fab3 	bl	8000b28 <__aeabi_dcmpgt>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d050      	beq.n	8006668 <_dtoa_r+0x220>
 80065c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065ca:	2300      	movs	r3, #0
 80065cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80065ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065d0:	1b5d      	subs	r5, r3, r5
 80065d2:	f1b5 0801 	subs.w	r8, r5, #1
 80065d6:	bf49      	itett	mi
 80065d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80065dc:	2300      	movpl	r3, #0
 80065de:	9305      	strmi	r3, [sp, #20]
 80065e0:	f04f 0800 	movmi.w	r8, #0
 80065e4:	bf58      	it	pl
 80065e6:	9305      	strpl	r3, [sp, #20]
 80065e8:	f1ba 0f00 	cmp.w	sl, #0
 80065ec:	db3e      	blt.n	800666c <_dtoa_r+0x224>
 80065ee:	2300      	movs	r3, #0
 80065f0:	44d0      	add	r8, sl
 80065f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	f200 8090 	bhi.w	8006720 <_dtoa_r+0x2d8>
 8006600:	2b05      	cmp	r3, #5
 8006602:	bfc4      	itt	gt
 8006604:	3b04      	subgt	r3, #4
 8006606:	9306      	strgt	r3, [sp, #24]
 8006608:	9b06      	ldr	r3, [sp, #24]
 800660a:	f1a3 0302 	sub.w	r3, r3, #2
 800660e:	bfcc      	ite	gt
 8006610:	2500      	movgt	r5, #0
 8006612:	2501      	movle	r5, #1
 8006614:	2b03      	cmp	r3, #3
 8006616:	f200 808f 	bhi.w	8006738 <_dtoa_r+0x2f0>
 800661a:	e8df f003 	tbb	[pc, r3]
 800661e:	7f7d      	.short	0x7f7d
 8006620:	7131      	.short	0x7131
 8006622:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006626:	441d      	add	r5, r3
 8006628:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800662c:	2820      	cmp	r0, #32
 800662e:	dd13      	ble.n	8006658 <_dtoa_r+0x210>
 8006630:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006634:	9b00      	ldr	r3, [sp, #0]
 8006636:	fa08 f800 	lsl.w	r8, r8, r0
 800663a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800663e:	fa23 f000 	lsr.w	r0, r3, r0
 8006642:	ea48 0000 	orr.w	r0, r8, r0
 8006646:	f7f9 ff65 	bl	8000514 <__aeabi_ui2d>
 800664a:	2301      	movs	r3, #1
 800664c:	4682      	mov	sl, r0
 800664e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006652:	3d01      	subs	r5, #1
 8006654:	9313      	str	r3, [sp, #76]	; 0x4c
 8006656:	e772      	b.n	800653e <_dtoa_r+0xf6>
 8006658:	9b00      	ldr	r3, [sp, #0]
 800665a:	f1c0 0020 	rsb	r0, r0, #32
 800665e:	fa03 f000 	lsl.w	r0, r3, r0
 8006662:	e7f0      	b.n	8006646 <_dtoa_r+0x1fe>
 8006664:	2301      	movs	r3, #1
 8006666:	e7b1      	b.n	80065cc <_dtoa_r+0x184>
 8006668:	900f      	str	r0, [sp, #60]	; 0x3c
 800666a:	e7b0      	b.n	80065ce <_dtoa_r+0x186>
 800666c:	9b05      	ldr	r3, [sp, #20]
 800666e:	eba3 030a 	sub.w	r3, r3, sl
 8006672:	9305      	str	r3, [sp, #20]
 8006674:	f1ca 0300 	rsb	r3, sl, #0
 8006678:	9307      	str	r3, [sp, #28]
 800667a:	2300      	movs	r3, #0
 800667c:	930e      	str	r3, [sp, #56]	; 0x38
 800667e:	e7bb      	b.n	80065f8 <_dtoa_r+0x1b0>
 8006680:	2301      	movs	r3, #1
 8006682:	930a      	str	r3, [sp, #40]	; 0x28
 8006684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006686:	2b00      	cmp	r3, #0
 8006688:	dd59      	ble.n	800673e <_dtoa_r+0x2f6>
 800668a:	9302      	str	r3, [sp, #8]
 800668c:	4699      	mov	r9, r3
 800668e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006690:	2200      	movs	r2, #0
 8006692:	6072      	str	r2, [r6, #4]
 8006694:	2204      	movs	r2, #4
 8006696:	f102 0014 	add.w	r0, r2, #20
 800669a:	4298      	cmp	r0, r3
 800669c:	6871      	ldr	r1, [r6, #4]
 800669e:	d953      	bls.n	8006748 <_dtoa_r+0x300>
 80066a0:	4620      	mov	r0, r4
 80066a2:	f000 ffe8 	bl	8007676 <_Balloc>
 80066a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066a8:	6030      	str	r0, [r6, #0]
 80066aa:	f1b9 0f0e 	cmp.w	r9, #14
 80066ae:	f8d3 b000 	ldr.w	fp, [r3]
 80066b2:	f200 80e6 	bhi.w	8006882 <_dtoa_r+0x43a>
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	f000 80e3 	beq.w	8006882 <_dtoa_r+0x43a>
 80066bc:	ed9d 7b00 	vldr	d7, [sp]
 80066c0:	f1ba 0f00 	cmp.w	sl, #0
 80066c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80066c8:	dd74      	ble.n	80067b4 <_dtoa_r+0x36c>
 80066ca:	4a2a      	ldr	r2, [pc, #168]	; (8006774 <_dtoa_r+0x32c>)
 80066cc:	f00a 030f 	and.w	r3, sl, #15
 80066d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066d4:	ed93 7b00 	vldr	d7, [r3]
 80066d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80066dc:	06f0      	lsls	r0, r6, #27
 80066de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80066e2:	d565      	bpl.n	80067b0 <_dtoa_r+0x368>
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <_dtoa_r+0x330>)
 80066e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066ee:	f7fa f8b5 	bl	800085c <__aeabi_ddiv>
 80066f2:	e9cd 0100 	strd	r0, r1, [sp]
 80066f6:	f006 060f 	and.w	r6, r6, #15
 80066fa:	2503      	movs	r5, #3
 80066fc:	4f1e      	ldr	r7, [pc, #120]	; (8006778 <_dtoa_r+0x330>)
 80066fe:	e04c      	b.n	800679a <_dtoa_r+0x352>
 8006700:	2301      	movs	r3, #1
 8006702:	930a      	str	r3, [sp, #40]	; 0x28
 8006704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006706:	4453      	add	r3, sl
 8006708:	f103 0901 	add.w	r9, r3, #1
 800670c:	9302      	str	r3, [sp, #8]
 800670e:	464b      	mov	r3, r9
 8006710:	2b01      	cmp	r3, #1
 8006712:	bfb8      	it	lt
 8006714:	2301      	movlt	r3, #1
 8006716:	e7ba      	b.n	800668e <_dtoa_r+0x246>
 8006718:	2300      	movs	r3, #0
 800671a:	e7b2      	b.n	8006682 <_dtoa_r+0x23a>
 800671c:	2300      	movs	r3, #0
 800671e:	e7f0      	b.n	8006702 <_dtoa_r+0x2ba>
 8006720:	2501      	movs	r5, #1
 8006722:	2300      	movs	r3, #0
 8006724:	9306      	str	r3, [sp, #24]
 8006726:	950a      	str	r5, [sp, #40]	; 0x28
 8006728:	f04f 33ff 	mov.w	r3, #4294967295
 800672c:	9302      	str	r3, [sp, #8]
 800672e:	4699      	mov	r9, r3
 8006730:	2200      	movs	r2, #0
 8006732:	2312      	movs	r3, #18
 8006734:	920b      	str	r2, [sp, #44]	; 0x2c
 8006736:	e7aa      	b.n	800668e <_dtoa_r+0x246>
 8006738:	2301      	movs	r3, #1
 800673a:	930a      	str	r3, [sp, #40]	; 0x28
 800673c:	e7f4      	b.n	8006728 <_dtoa_r+0x2e0>
 800673e:	2301      	movs	r3, #1
 8006740:	9302      	str	r3, [sp, #8]
 8006742:	4699      	mov	r9, r3
 8006744:	461a      	mov	r2, r3
 8006746:	e7f5      	b.n	8006734 <_dtoa_r+0x2ec>
 8006748:	3101      	adds	r1, #1
 800674a:	6071      	str	r1, [r6, #4]
 800674c:	0052      	lsls	r2, r2, #1
 800674e:	e7a2      	b.n	8006696 <_dtoa_r+0x24e>
 8006750:	636f4361 	.word	0x636f4361
 8006754:	3fd287a7 	.word	0x3fd287a7
 8006758:	8b60c8b3 	.word	0x8b60c8b3
 800675c:	3fc68a28 	.word	0x3fc68a28
 8006760:	509f79fb 	.word	0x509f79fb
 8006764:	3fd34413 	.word	0x3fd34413
 8006768:	7ff00000 	.word	0x7ff00000
 800676c:	080083b9 	.word	0x080083b9
 8006770:	3ff80000 	.word	0x3ff80000
 8006774:	08008478 	.word	0x08008478
 8006778:	08008450 	.word	0x08008450
 800677c:	08008441 	.word	0x08008441
 8006780:	07f1      	lsls	r1, r6, #31
 8006782:	d508      	bpl.n	8006796 <_dtoa_r+0x34e>
 8006784:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800678c:	f7f9 ff3c 	bl	8000608 <__aeabi_dmul>
 8006790:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006794:	3501      	adds	r5, #1
 8006796:	1076      	asrs	r6, r6, #1
 8006798:	3708      	adds	r7, #8
 800679a:	2e00      	cmp	r6, #0
 800679c:	d1f0      	bne.n	8006780 <_dtoa_r+0x338>
 800679e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067a6:	f7fa f859 	bl	800085c <__aeabi_ddiv>
 80067aa:	e9cd 0100 	strd	r0, r1, [sp]
 80067ae:	e01a      	b.n	80067e6 <_dtoa_r+0x39e>
 80067b0:	2502      	movs	r5, #2
 80067b2:	e7a3      	b.n	80066fc <_dtoa_r+0x2b4>
 80067b4:	f000 80a0 	beq.w	80068f8 <_dtoa_r+0x4b0>
 80067b8:	f1ca 0600 	rsb	r6, sl, #0
 80067bc:	4b9f      	ldr	r3, [pc, #636]	; (8006a3c <_dtoa_r+0x5f4>)
 80067be:	4fa0      	ldr	r7, [pc, #640]	; (8006a40 <_dtoa_r+0x5f8>)
 80067c0:	f006 020f 	and.w	r2, r6, #15
 80067c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067d0:	f7f9 ff1a 	bl	8000608 <__aeabi_dmul>
 80067d4:	e9cd 0100 	strd	r0, r1, [sp]
 80067d8:	1136      	asrs	r6, r6, #4
 80067da:	2300      	movs	r3, #0
 80067dc:	2502      	movs	r5, #2
 80067de:	2e00      	cmp	r6, #0
 80067e0:	d17f      	bne.n	80068e2 <_dtoa_r+0x49a>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e1      	bne.n	80067aa <_dtoa_r+0x362>
 80067e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8087 	beq.w	80068fc <_dtoa_r+0x4b4>
 80067ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80067f2:	2200      	movs	r2, #0
 80067f4:	4b93      	ldr	r3, [pc, #588]	; (8006a44 <_dtoa_r+0x5fc>)
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7fa f977 	bl	8000aec <__aeabi_dcmplt>
 80067fe:	2800      	cmp	r0, #0
 8006800:	d07c      	beq.n	80068fc <_dtoa_r+0x4b4>
 8006802:	f1b9 0f00 	cmp.w	r9, #0
 8006806:	d079      	beq.n	80068fc <_dtoa_r+0x4b4>
 8006808:	9b02      	ldr	r3, [sp, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	dd35      	ble.n	800687a <_dtoa_r+0x432>
 800680e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006812:	9308      	str	r3, [sp, #32]
 8006814:	4639      	mov	r1, r7
 8006816:	2200      	movs	r2, #0
 8006818:	4b8b      	ldr	r3, [pc, #556]	; (8006a48 <_dtoa_r+0x600>)
 800681a:	4630      	mov	r0, r6
 800681c:	f7f9 fef4 	bl	8000608 <__aeabi_dmul>
 8006820:	e9cd 0100 	strd	r0, r1, [sp]
 8006824:	9f02      	ldr	r7, [sp, #8]
 8006826:	3501      	adds	r5, #1
 8006828:	4628      	mov	r0, r5
 800682a:	f7f9 fe83 	bl	8000534 <__aeabi_i2d>
 800682e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006832:	f7f9 fee9 	bl	8000608 <__aeabi_dmul>
 8006836:	2200      	movs	r2, #0
 8006838:	4b84      	ldr	r3, [pc, #528]	; (8006a4c <_dtoa_r+0x604>)
 800683a:	f7f9 fd2f 	bl	800029c <__adddf3>
 800683e:	4605      	mov	r5, r0
 8006840:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006844:	2f00      	cmp	r7, #0
 8006846:	d15d      	bne.n	8006904 <_dtoa_r+0x4bc>
 8006848:	2200      	movs	r2, #0
 800684a:	4b81      	ldr	r3, [pc, #516]	; (8006a50 <_dtoa_r+0x608>)
 800684c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006850:	f7f9 fd22 	bl	8000298 <__aeabi_dsub>
 8006854:	462a      	mov	r2, r5
 8006856:	4633      	mov	r3, r6
 8006858:	e9cd 0100 	strd	r0, r1, [sp]
 800685c:	f7fa f964 	bl	8000b28 <__aeabi_dcmpgt>
 8006860:	2800      	cmp	r0, #0
 8006862:	f040 8288 	bne.w	8006d76 <_dtoa_r+0x92e>
 8006866:	462a      	mov	r2, r5
 8006868:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800686c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006870:	f7fa f93c 	bl	8000aec <__aeabi_dcmplt>
 8006874:	2800      	cmp	r0, #0
 8006876:	f040 827c 	bne.w	8006d72 <_dtoa_r+0x92a>
 800687a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800687e:	e9cd 2300 	strd	r2, r3, [sp]
 8006882:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006884:	2b00      	cmp	r3, #0
 8006886:	f2c0 8150 	blt.w	8006b2a <_dtoa_r+0x6e2>
 800688a:	f1ba 0f0e 	cmp.w	sl, #14
 800688e:	f300 814c 	bgt.w	8006b2a <_dtoa_r+0x6e2>
 8006892:	4b6a      	ldr	r3, [pc, #424]	; (8006a3c <_dtoa_r+0x5f4>)
 8006894:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006898:	ed93 7b00 	vldr	d7, [r3]
 800689c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068a4:	f280 80d8 	bge.w	8006a58 <_dtoa_r+0x610>
 80068a8:	f1b9 0f00 	cmp.w	r9, #0
 80068ac:	f300 80d4 	bgt.w	8006a58 <_dtoa_r+0x610>
 80068b0:	f040 825e 	bne.w	8006d70 <_dtoa_r+0x928>
 80068b4:	2200      	movs	r2, #0
 80068b6:	4b66      	ldr	r3, [pc, #408]	; (8006a50 <_dtoa_r+0x608>)
 80068b8:	ec51 0b17 	vmov	r0, r1, d7
 80068bc:	f7f9 fea4 	bl	8000608 <__aeabi_dmul>
 80068c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068c4:	f7fa f926 	bl	8000b14 <__aeabi_dcmpge>
 80068c8:	464f      	mov	r7, r9
 80068ca:	464e      	mov	r6, r9
 80068cc:	2800      	cmp	r0, #0
 80068ce:	f040 8234 	bne.w	8006d3a <_dtoa_r+0x8f2>
 80068d2:	2331      	movs	r3, #49	; 0x31
 80068d4:	f10b 0501 	add.w	r5, fp, #1
 80068d8:	f88b 3000 	strb.w	r3, [fp]
 80068dc:	f10a 0a01 	add.w	sl, sl, #1
 80068e0:	e22f      	b.n	8006d42 <_dtoa_r+0x8fa>
 80068e2:	07f2      	lsls	r2, r6, #31
 80068e4:	d505      	bpl.n	80068f2 <_dtoa_r+0x4aa>
 80068e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ea:	f7f9 fe8d 	bl	8000608 <__aeabi_dmul>
 80068ee:	3501      	adds	r5, #1
 80068f0:	2301      	movs	r3, #1
 80068f2:	1076      	asrs	r6, r6, #1
 80068f4:	3708      	adds	r7, #8
 80068f6:	e772      	b.n	80067de <_dtoa_r+0x396>
 80068f8:	2502      	movs	r5, #2
 80068fa:	e774      	b.n	80067e6 <_dtoa_r+0x39e>
 80068fc:	f8cd a020 	str.w	sl, [sp, #32]
 8006900:	464f      	mov	r7, r9
 8006902:	e791      	b.n	8006828 <_dtoa_r+0x3e0>
 8006904:	4b4d      	ldr	r3, [pc, #308]	; (8006a3c <_dtoa_r+0x5f4>)
 8006906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800690a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800690e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	d047      	beq.n	80069a4 <_dtoa_r+0x55c>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	2000      	movs	r0, #0
 800691a:	494e      	ldr	r1, [pc, #312]	; (8006a54 <_dtoa_r+0x60c>)
 800691c:	f7f9 ff9e 	bl	800085c <__aeabi_ddiv>
 8006920:	462a      	mov	r2, r5
 8006922:	4633      	mov	r3, r6
 8006924:	f7f9 fcb8 	bl	8000298 <__aeabi_dsub>
 8006928:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800692c:	465d      	mov	r5, fp
 800692e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006932:	f7fa f919 	bl	8000b68 <__aeabi_d2iz>
 8006936:	4606      	mov	r6, r0
 8006938:	f7f9 fdfc 	bl	8000534 <__aeabi_i2d>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006944:	f7f9 fca8 	bl	8000298 <__aeabi_dsub>
 8006948:	3630      	adds	r6, #48	; 0x30
 800694a:	f805 6b01 	strb.w	r6, [r5], #1
 800694e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006952:	e9cd 0100 	strd	r0, r1, [sp]
 8006956:	f7fa f8c9 	bl	8000aec <__aeabi_dcmplt>
 800695a:	2800      	cmp	r0, #0
 800695c:	d163      	bne.n	8006a26 <_dtoa_r+0x5de>
 800695e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006962:	2000      	movs	r0, #0
 8006964:	4937      	ldr	r1, [pc, #220]	; (8006a44 <_dtoa_r+0x5fc>)
 8006966:	f7f9 fc97 	bl	8000298 <__aeabi_dsub>
 800696a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800696e:	f7fa f8bd 	bl	8000aec <__aeabi_dcmplt>
 8006972:	2800      	cmp	r0, #0
 8006974:	f040 80b7 	bne.w	8006ae6 <_dtoa_r+0x69e>
 8006978:	eba5 030b 	sub.w	r3, r5, fp
 800697c:	429f      	cmp	r7, r3
 800697e:	f77f af7c 	ble.w	800687a <_dtoa_r+0x432>
 8006982:	2200      	movs	r2, #0
 8006984:	4b30      	ldr	r3, [pc, #192]	; (8006a48 <_dtoa_r+0x600>)
 8006986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800698a:	f7f9 fe3d 	bl	8000608 <__aeabi_dmul>
 800698e:	2200      	movs	r2, #0
 8006990:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006994:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <_dtoa_r+0x600>)
 8006996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800699a:	f7f9 fe35 	bl	8000608 <__aeabi_dmul>
 800699e:	e9cd 0100 	strd	r0, r1, [sp]
 80069a2:	e7c4      	b.n	800692e <_dtoa_r+0x4e6>
 80069a4:	462a      	mov	r2, r5
 80069a6:	4633      	mov	r3, r6
 80069a8:	f7f9 fe2e 	bl	8000608 <__aeabi_dmul>
 80069ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80069b0:	eb0b 0507 	add.w	r5, fp, r7
 80069b4:	465e      	mov	r6, fp
 80069b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069ba:	f7fa f8d5 	bl	8000b68 <__aeabi_d2iz>
 80069be:	4607      	mov	r7, r0
 80069c0:	f7f9 fdb8 	bl	8000534 <__aeabi_i2d>
 80069c4:	3730      	adds	r7, #48	; 0x30
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069ce:	f7f9 fc63 	bl	8000298 <__aeabi_dsub>
 80069d2:	f806 7b01 	strb.w	r7, [r6], #1
 80069d6:	42ae      	cmp	r6, r5
 80069d8:	e9cd 0100 	strd	r0, r1, [sp]
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	d126      	bne.n	8006a30 <_dtoa_r+0x5e8>
 80069e2:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <_dtoa_r+0x60c>)
 80069e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069e8:	f7f9 fc58 	bl	800029c <__adddf3>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069f4:	f7fa f898 	bl	8000b28 <__aeabi_dcmpgt>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d174      	bne.n	8006ae6 <_dtoa_r+0x69e>
 80069fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a00:	2000      	movs	r0, #0
 8006a02:	4914      	ldr	r1, [pc, #80]	; (8006a54 <_dtoa_r+0x60c>)
 8006a04:	f7f9 fc48 	bl	8000298 <__aeabi_dsub>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a10:	f7fa f86c 	bl	8000aec <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	f43f af30 	beq.w	800687a <_dtoa_r+0x432>
 8006a1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a1e:	2b30      	cmp	r3, #48	; 0x30
 8006a20:	f105 32ff 	add.w	r2, r5, #4294967295
 8006a24:	d002      	beq.n	8006a2c <_dtoa_r+0x5e4>
 8006a26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a2a:	e04a      	b.n	8006ac2 <_dtoa_r+0x67a>
 8006a2c:	4615      	mov	r5, r2
 8006a2e:	e7f4      	b.n	8006a1a <_dtoa_r+0x5d2>
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <_dtoa_r+0x600>)
 8006a32:	f7f9 fde9 	bl	8000608 <__aeabi_dmul>
 8006a36:	e9cd 0100 	strd	r0, r1, [sp]
 8006a3a:	e7bc      	b.n	80069b6 <_dtoa_r+0x56e>
 8006a3c:	08008478 	.word	0x08008478
 8006a40:	08008450 	.word	0x08008450
 8006a44:	3ff00000 	.word	0x3ff00000
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	401c0000 	.word	0x401c0000
 8006a50:	40140000 	.word	0x40140000
 8006a54:	3fe00000 	.word	0x3fe00000
 8006a58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a5c:	465d      	mov	r5, fp
 8006a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a62:	4630      	mov	r0, r6
 8006a64:	4639      	mov	r1, r7
 8006a66:	f7f9 fef9 	bl	800085c <__aeabi_ddiv>
 8006a6a:	f7fa f87d 	bl	8000b68 <__aeabi_d2iz>
 8006a6e:	4680      	mov	r8, r0
 8006a70:	f7f9 fd60 	bl	8000534 <__aeabi_i2d>
 8006a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a78:	f7f9 fdc6 	bl	8000608 <__aeabi_dmul>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4630      	mov	r0, r6
 8006a82:	4639      	mov	r1, r7
 8006a84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006a88:	f7f9 fc06 	bl	8000298 <__aeabi_dsub>
 8006a8c:	f805 6b01 	strb.w	r6, [r5], #1
 8006a90:	eba5 060b 	sub.w	r6, r5, fp
 8006a94:	45b1      	cmp	r9, r6
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	d139      	bne.n	8006b10 <_dtoa_r+0x6c8>
 8006a9c:	f7f9 fbfe 	bl	800029c <__adddf3>
 8006aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	460f      	mov	r7, r1
 8006aa8:	f7fa f83e 	bl	8000b28 <__aeabi_dcmpgt>
 8006aac:	b9c8      	cbnz	r0, 8006ae2 <_dtoa_r+0x69a>
 8006aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	f7fa f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aba:	b110      	cbz	r0, 8006ac2 <_dtoa_r+0x67a>
 8006abc:	f018 0f01 	tst.w	r8, #1
 8006ac0:	d10f      	bne.n	8006ae2 <_dtoa_r+0x69a>
 8006ac2:	9904      	ldr	r1, [sp, #16]
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fe0a 	bl	80076de <_Bfree>
 8006aca:	2300      	movs	r3, #0
 8006acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ace:	702b      	strb	r3, [r5, #0]
 8006ad0:	f10a 0301 	add.w	r3, sl, #1
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8241 	beq.w	8006f60 <_dtoa_r+0xb18>
 8006ade:	601d      	str	r5, [r3, #0]
 8006ae0:	e23e      	b.n	8006f60 <_dtoa_r+0xb18>
 8006ae2:	f8cd a020 	str.w	sl, [sp, #32]
 8006ae6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006aea:	2a39      	cmp	r2, #57	; 0x39
 8006aec:	f105 33ff 	add.w	r3, r5, #4294967295
 8006af0:	d108      	bne.n	8006b04 <_dtoa_r+0x6bc>
 8006af2:	459b      	cmp	fp, r3
 8006af4:	d10a      	bne.n	8006b0c <_dtoa_r+0x6c4>
 8006af6:	9b08      	ldr	r3, [sp, #32]
 8006af8:	3301      	adds	r3, #1
 8006afa:	9308      	str	r3, [sp, #32]
 8006afc:	2330      	movs	r3, #48	; 0x30
 8006afe:	f88b 3000 	strb.w	r3, [fp]
 8006b02:	465b      	mov	r3, fp
 8006b04:	781a      	ldrb	r2, [r3, #0]
 8006b06:	3201      	adds	r2, #1
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	e78c      	b.n	8006a26 <_dtoa_r+0x5de>
 8006b0c:	461d      	mov	r5, r3
 8006b0e:	e7ea      	b.n	8006ae6 <_dtoa_r+0x69e>
 8006b10:	2200      	movs	r2, #0
 8006b12:	4b9b      	ldr	r3, [pc, #620]	; (8006d80 <_dtoa_r+0x938>)
 8006b14:	f7f9 fd78 	bl	8000608 <__aeabi_dmul>
 8006b18:	2200      	movs	r2, #0
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	460f      	mov	r7, r1
 8006b20:	f7f9 ffda 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d09a      	beq.n	8006a5e <_dtoa_r+0x616>
 8006b28:	e7cb      	b.n	8006ac2 <_dtoa_r+0x67a>
 8006b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b2c:	2a00      	cmp	r2, #0
 8006b2e:	f000 808b 	beq.w	8006c48 <_dtoa_r+0x800>
 8006b32:	9a06      	ldr	r2, [sp, #24]
 8006b34:	2a01      	cmp	r2, #1
 8006b36:	dc6e      	bgt.n	8006c16 <_dtoa_r+0x7ce>
 8006b38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d067      	beq.n	8006c0e <_dtoa_r+0x7c6>
 8006b3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b42:	9f07      	ldr	r7, [sp, #28]
 8006b44:	9d05      	ldr	r5, [sp, #20]
 8006b46:	9a05      	ldr	r2, [sp, #20]
 8006b48:	2101      	movs	r1, #1
 8006b4a:	441a      	add	r2, r3
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	9205      	str	r2, [sp, #20]
 8006b50:	4498      	add	r8, r3
 8006b52:	f000 fea2 	bl	800789a <__i2b>
 8006b56:	4606      	mov	r6, r0
 8006b58:	2d00      	cmp	r5, #0
 8006b5a:	dd0c      	ble.n	8006b76 <_dtoa_r+0x72e>
 8006b5c:	f1b8 0f00 	cmp.w	r8, #0
 8006b60:	dd09      	ble.n	8006b76 <_dtoa_r+0x72e>
 8006b62:	4545      	cmp	r5, r8
 8006b64:	9a05      	ldr	r2, [sp, #20]
 8006b66:	462b      	mov	r3, r5
 8006b68:	bfa8      	it	ge
 8006b6a:	4643      	movge	r3, r8
 8006b6c:	1ad2      	subs	r2, r2, r3
 8006b6e:	9205      	str	r2, [sp, #20]
 8006b70:	1aed      	subs	r5, r5, r3
 8006b72:	eba8 0803 	sub.w	r8, r8, r3
 8006b76:	9b07      	ldr	r3, [sp, #28]
 8006b78:	b1eb      	cbz	r3, 8006bb6 <_dtoa_r+0x76e>
 8006b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d067      	beq.n	8006c50 <_dtoa_r+0x808>
 8006b80:	b18f      	cbz	r7, 8006ba6 <_dtoa_r+0x75e>
 8006b82:	4631      	mov	r1, r6
 8006b84:	463a      	mov	r2, r7
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 ff26 	bl	80079d8 <__pow5mult>
 8006b8c:	9a04      	ldr	r2, [sp, #16]
 8006b8e:	4601      	mov	r1, r0
 8006b90:	4606      	mov	r6, r0
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 fe8a 	bl	80078ac <__multiply>
 8006b98:	9904      	ldr	r1, [sp, #16]
 8006b9a:	9008      	str	r0, [sp, #32]
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fd9e 	bl	80076de <_Bfree>
 8006ba2:	9b08      	ldr	r3, [sp, #32]
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	9b07      	ldr	r3, [sp, #28]
 8006ba8:	1bda      	subs	r2, r3, r7
 8006baa:	d004      	beq.n	8006bb6 <_dtoa_r+0x76e>
 8006bac:	9904      	ldr	r1, [sp, #16]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 ff12 	bl	80079d8 <__pow5mult>
 8006bb4:	9004      	str	r0, [sp, #16]
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fe6e 	bl	800789a <__i2b>
 8006bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 81d0 	beq.w	8006f68 <_dtoa_r+0xb20>
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4601      	mov	r1, r0
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 ff03 	bl	80079d8 <__pow5mult>
 8006bd2:	9b06      	ldr	r3, [sp, #24]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	4607      	mov	r7, r0
 8006bd8:	dc40      	bgt.n	8006c5c <_dtoa_r+0x814>
 8006bda:	9b00      	ldr	r3, [sp, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d139      	bne.n	8006c54 <_dtoa_r+0x80c>
 8006be0:	9b01      	ldr	r3, [sp, #4]
 8006be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d136      	bne.n	8006c58 <_dtoa_r+0x810>
 8006bea:	9b01      	ldr	r3, [sp, #4]
 8006bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bf0:	0d1b      	lsrs	r3, r3, #20
 8006bf2:	051b      	lsls	r3, r3, #20
 8006bf4:	b12b      	cbz	r3, 8006c02 <_dtoa_r+0x7ba>
 8006bf6:	9b05      	ldr	r3, [sp, #20]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	f108 0801 	add.w	r8, r8, #1
 8006c00:	2301      	movs	r3, #1
 8006c02:	9307      	str	r3, [sp, #28]
 8006c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d12a      	bne.n	8006c60 <_dtoa_r+0x818>
 8006c0a:	2001      	movs	r0, #1
 8006c0c:	e030      	b.n	8006c70 <_dtoa_r+0x828>
 8006c0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c14:	e795      	b.n	8006b42 <_dtoa_r+0x6fa>
 8006c16:	9b07      	ldr	r3, [sp, #28]
 8006c18:	f109 37ff 	add.w	r7, r9, #4294967295
 8006c1c:	42bb      	cmp	r3, r7
 8006c1e:	bfbf      	itttt	lt
 8006c20:	9b07      	ldrlt	r3, [sp, #28]
 8006c22:	9707      	strlt	r7, [sp, #28]
 8006c24:	1afa      	sublt	r2, r7, r3
 8006c26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006c28:	bfbb      	ittet	lt
 8006c2a:	189b      	addlt	r3, r3, r2
 8006c2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006c2e:	1bdf      	subge	r7, r3, r7
 8006c30:	2700      	movlt	r7, #0
 8006c32:	f1b9 0f00 	cmp.w	r9, #0
 8006c36:	bfb5      	itete	lt
 8006c38:	9b05      	ldrlt	r3, [sp, #20]
 8006c3a:	9d05      	ldrge	r5, [sp, #20]
 8006c3c:	eba3 0509 	sublt.w	r5, r3, r9
 8006c40:	464b      	movge	r3, r9
 8006c42:	bfb8      	it	lt
 8006c44:	2300      	movlt	r3, #0
 8006c46:	e77e      	b.n	8006b46 <_dtoa_r+0x6fe>
 8006c48:	9f07      	ldr	r7, [sp, #28]
 8006c4a:	9d05      	ldr	r5, [sp, #20]
 8006c4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006c4e:	e783      	b.n	8006b58 <_dtoa_r+0x710>
 8006c50:	9a07      	ldr	r2, [sp, #28]
 8006c52:	e7ab      	b.n	8006bac <_dtoa_r+0x764>
 8006c54:	2300      	movs	r3, #0
 8006c56:	e7d4      	b.n	8006c02 <_dtoa_r+0x7ba>
 8006c58:	9b00      	ldr	r3, [sp, #0]
 8006c5a:	e7d2      	b.n	8006c02 <_dtoa_r+0x7ba>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9307      	str	r3, [sp, #28]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006c66:	6918      	ldr	r0, [r3, #16]
 8006c68:	f000 fdc9 	bl	80077fe <__hi0bits>
 8006c6c:	f1c0 0020 	rsb	r0, r0, #32
 8006c70:	4440      	add	r0, r8
 8006c72:	f010 001f 	ands.w	r0, r0, #31
 8006c76:	d047      	beq.n	8006d08 <_dtoa_r+0x8c0>
 8006c78:	f1c0 0320 	rsb	r3, r0, #32
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	dd3b      	ble.n	8006cf8 <_dtoa_r+0x8b0>
 8006c80:	9b05      	ldr	r3, [sp, #20]
 8006c82:	f1c0 001c 	rsb	r0, r0, #28
 8006c86:	4403      	add	r3, r0
 8006c88:	9305      	str	r3, [sp, #20]
 8006c8a:	4405      	add	r5, r0
 8006c8c:	4480      	add	r8, r0
 8006c8e:	9b05      	ldr	r3, [sp, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dd05      	ble.n	8006ca0 <_dtoa_r+0x858>
 8006c94:	461a      	mov	r2, r3
 8006c96:	9904      	ldr	r1, [sp, #16]
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 feeb 	bl	8007a74 <__lshift>
 8006c9e:	9004      	str	r0, [sp, #16]
 8006ca0:	f1b8 0f00 	cmp.w	r8, #0
 8006ca4:	dd05      	ble.n	8006cb2 <_dtoa_r+0x86a>
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	4642      	mov	r2, r8
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fee2 	bl	8007a74 <__lshift>
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cb4:	b353      	cbz	r3, 8006d0c <_dtoa_r+0x8c4>
 8006cb6:	4639      	mov	r1, r7
 8006cb8:	9804      	ldr	r0, [sp, #16]
 8006cba:	f000 ff2f 	bl	8007b1c <__mcmp>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	da24      	bge.n	8006d0c <_dtoa_r+0x8c4>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	9904      	ldr	r1, [sp, #16]
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 fd1f 	bl	800770c <__multadd>
 8006cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd0:	9004      	str	r0, [sp, #16]
 8006cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 814d 	beq.w	8006f76 <_dtoa_r+0xb2e>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4631      	mov	r1, r6
 8006ce0:	220a      	movs	r2, #10
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 fd12 	bl	800770c <__multadd>
 8006ce8:	9b02      	ldr	r3, [sp, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	4606      	mov	r6, r0
 8006cee:	dc4f      	bgt.n	8006d90 <_dtoa_r+0x948>
 8006cf0:	9b06      	ldr	r3, [sp, #24]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	dd4c      	ble.n	8006d90 <_dtoa_r+0x948>
 8006cf6:	e011      	b.n	8006d1c <_dtoa_r+0x8d4>
 8006cf8:	d0c9      	beq.n	8006c8e <_dtoa_r+0x846>
 8006cfa:	9a05      	ldr	r2, [sp, #20]
 8006cfc:	331c      	adds	r3, #28
 8006cfe:	441a      	add	r2, r3
 8006d00:	9205      	str	r2, [sp, #20]
 8006d02:	441d      	add	r5, r3
 8006d04:	4498      	add	r8, r3
 8006d06:	e7c2      	b.n	8006c8e <_dtoa_r+0x846>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	e7f6      	b.n	8006cfa <_dtoa_r+0x8b2>
 8006d0c:	f1b9 0f00 	cmp.w	r9, #0
 8006d10:	dc38      	bgt.n	8006d84 <_dtoa_r+0x93c>
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	dd35      	ble.n	8006d84 <_dtoa_r+0x93c>
 8006d18:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d1c:	9b02      	ldr	r3, [sp, #8]
 8006d1e:	b963      	cbnz	r3, 8006d3a <_dtoa_r+0x8f2>
 8006d20:	4639      	mov	r1, r7
 8006d22:	2205      	movs	r2, #5
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 fcf1 	bl	800770c <__multadd>
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	9804      	ldr	r0, [sp, #16]
 8006d30:	f000 fef4 	bl	8007b1c <__mcmp>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	f73f adcc 	bgt.w	80068d2 <_dtoa_r+0x48a>
 8006d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d3c:	465d      	mov	r5, fp
 8006d3e:	ea6f 0a03 	mvn.w	sl, r3
 8006d42:	f04f 0900 	mov.w	r9, #0
 8006d46:	4639      	mov	r1, r7
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 fcc8 	bl	80076de <_Bfree>
 8006d4e:	2e00      	cmp	r6, #0
 8006d50:	f43f aeb7 	beq.w	8006ac2 <_dtoa_r+0x67a>
 8006d54:	f1b9 0f00 	cmp.w	r9, #0
 8006d58:	d005      	beq.n	8006d66 <_dtoa_r+0x91e>
 8006d5a:	45b1      	cmp	r9, r6
 8006d5c:	d003      	beq.n	8006d66 <_dtoa_r+0x91e>
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 fcbc 	bl	80076de <_Bfree>
 8006d66:	4631      	mov	r1, r6
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 fcb8 	bl	80076de <_Bfree>
 8006d6e:	e6a8      	b.n	8006ac2 <_dtoa_r+0x67a>
 8006d70:	2700      	movs	r7, #0
 8006d72:	463e      	mov	r6, r7
 8006d74:	e7e1      	b.n	8006d3a <_dtoa_r+0x8f2>
 8006d76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006d7a:	463e      	mov	r6, r7
 8006d7c:	e5a9      	b.n	80068d2 <_dtoa_r+0x48a>
 8006d7e:	bf00      	nop
 8006d80:	40240000 	.word	0x40240000
 8006d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d86:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 80fa 	beq.w	8006f84 <_dtoa_r+0xb3c>
 8006d90:	2d00      	cmp	r5, #0
 8006d92:	dd05      	ble.n	8006da0 <_dtoa_r+0x958>
 8006d94:	4631      	mov	r1, r6
 8006d96:	462a      	mov	r2, r5
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fe6b 	bl	8007a74 <__lshift>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	9b07      	ldr	r3, [sp, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d04c      	beq.n	8006e40 <_dtoa_r+0x9f8>
 8006da6:	6871      	ldr	r1, [r6, #4]
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fc64 	bl	8007676 <_Balloc>
 8006dae:	6932      	ldr	r2, [r6, #16]
 8006db0:	3202      	adds	r2, #2
 8006db2:	4605      	mov	r5, r0
 8006db4:	0092      	lsls	r2, r2, #2
 8006db6:	f106 010c 	add.w	r1, r6, #12
 8006dba:	300c      	adds	r0, #12
 8006dbc:	f000 fc50 	bl	8007660 <memcpy>
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f000 fe55 	bl	8007a74 <__lshift>
 8006dca:	9b00      	ldr	r3, [sp, #0]
 8006dcc:	f8cd b014 	str.w	fp, [sp, #20]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	46b1      	mov	r9, r6
 8006dd6:	9307      	str	r3, [sp, #28]
 8006dd8:	4606      	mov	r6, r0
 8006dda:	4639      	mov	r1, r7
 8006ddc:	9804      	ldr	r0, [sp, #16]
 8006dde:	f7ff faa7 	bl	8006330 <quorem>
 8006de2:	4649      	mov	r1, r9
 8006de4:	4605      	mov	r5, r0
 8006de6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006dea:	9804      	ldr	r0, [sp, #16]
 8006dec:	f000 fe96 	bl	8007b1c <__mcmp>
 8006df0:	4632      	mov	r2, r6
 8006df2:	9000      	str	r0, [sp, #0]
 8006df4:	4639      	mov	r1, r7
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 feaa 	bl	8007b50 <__mdiff>
 8006dfc:	68c3      	ldr	r3, [r0, #12]
 8006dfe:	4602      	mov	r2, r0
 8006e00:	bb03      	cbnz	r3, 8006e44 <_dtoa_r+0x9fc>
 8006e02:	4601      	mov	r1, r0
 8006e04:	9008      	str	r0, [sp, #32]
 8006e06:	9804      	ldr	r0, [sp, #16]
 8006e08:	f000 fe88 	bl	8007b1c <__mcmp>
 8006e0c:	9a08      	ldr	r2, [sp, #32]
 8006e0e:	4603      	mov	r3, r0
 8006e10:	4611      	mov	r1, r2
 8006e12:	4620      	mov	r0, r4
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	f000 fc62 	bl	80076de <_Bfree>
 8006e1a:	9b08      	ldr	r3, [sp, #32]
 8006e1c:	b9a3      	cbnz	r3, 8006e48 <_dtoa_r+0xa00>
 8006e1e:	9a06      	ldr	r2, [sp, #24]
 8006e20:	b992      	cbnz	r2, 8006e48 <_dtoa_r+0xa00>
 8006e22:	9a07      	ldr	r2, [sp, #28]
 8006e24:	b982      	cbnz	r2, 8006e48 <_dtoa_r+0xa00>
 8006e26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e2a:	d029      	beq.n	8006e80 <_dtoa_r+0xa38>
 8006e2c:	9b00      	ldr	r3, [sp, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	dd01      	ble.n	8006e36 <_dtoa_r+0x9ee>
 8006e32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006e36:	9b05      	ldr	r3, [sp, #20]
 8006e38:	1c5d      	adds	r5, r3, #1
 8006e3a:	f883 8000 	strb.w	r8, [r3]
 8006e3e:	e782      	b.n	8006d46 <_dtoa_r+0x8fe>
 8006e40:	4630      	mov	r0, r6
 8006e42:	e7c2      	b.n	8006dca <_dtoa_r+0x982>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e7e3      	b.n	8006e10 <_dtoa_r+0x9c8>
 8006e48:	9a00      	ldr	r2, [sp, #0]
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	db04      	blt.n	8006e58 <_dtoa_r+0xa10>
 8006e4e:	d125      	bne.n	8006e9c <_dtoa_r+0xa54>
 8006e50:	9a06      	ldr	r2, [sp, #24]
 8006e52:	bb1a      	cbnz	r2, 8006e9c <_dtoa_r+0xa54>
 8006e54:	9a07      	ldr	r2, [sp, #28]
 8006e56:	bb0a      	cbnz	r2, 8006e9c <_dtoa_r+0xa54>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	ddec      	ble.n	8006e36 <_dtoa_r+0x9ee>
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	9904      	ldr	r1, [sp, #16]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fe07 	bl	8007a74 <__lshift>
 8006e66:	4639      	mov	r1, r7
 8006e68:	9004      	str	r0, [sp, #16]
 8006e6a:	f000 fe57 	bl	8007b1c <__mcmp>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	dc03      	bgt.n	8006e7a <_dtoa_r+0xa32>
 8006e72:	d1e0      	bne.n	8006e36 <_dtoa_r+0x9ee>
 8006e74:	f018 0f01 	tst.w	r8, #1
 8006e78:	d0dd      	beq.n	8006e36 <_dtoa_r+0x9ee>
 8006e7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006e7e:	d1d8      	bne.n	8006e32 <_dtoa_r+0x9ea>
 8006e80:	9b05      	ldr	r3, [sp, #20]
 8006e82:	9a05      	ldr	r2, [sp, #20]
 8006e84:	1c5d      	adds	r5, r3, #1
 8006e86:	2339      	movs	r3, #57	; 0x39
 8006e88:	7013      	strb	r3, [r2, #0]
 8006e8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e8e:	2b39      	cmp	r3, #57	; 0x39
 8006e90:	f105 32ff 	add.w	r2, r5, #4294967295
 8006e94:	d04f      	beq.n	8006f36 <_dtoa_r+0xaee>
 8006e96:	3301      	adds	r3, #1
 8006e98:	7013      	strb	r3, [r2, #0]
 8006e9a:	e754      	b.n	8006d46 <_dtoa_r+0x8fe>
 8006e9c:	9a05      	ldr	r2, [sp, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f102 0501 	add.w	r5, r2, #1
 8006ea4:	dd06      	ble.n	8006eb4 <_dtoa_r+0xa6c>
 8006ea6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006eaa:	d0e9      	beq.n	8006e80 <_dtoa_r+0xa38>
 8006eac:	f108 0801 	add.w	r8, r8, #1
 8006eb0:	9b05      	ldr	r3, [sp, #20]
 8006eb2:	e7c2      	b.n	8006e3a <_dtoa_r+0x9f2>
 8006eb4:	9a02      	ldr	r2, [sp, #8]
 8006eb6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006eba:	eba5 030b 	sub.w	r3, r5, fp
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d021      	beq.n	8006f06 <_dtoa_r+0xabe>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	220a      	movs	r2, #10
 8006ec6:	9904      	ldr	r1, [sp, #16]
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fc1f 	bl	800770c <__multadd>
 8006ece:	45b1      	cmp	r9, r6
 8006ed0:	9004      	str	r0, [sp, #16]
 8006ed2:	f04f 0300 	mov.w	r3, #0
 8006ed6:	f04f 020a 	mov.w	r2, #10
 8006eda:	4649      	mov	r1, r9
 8006edc:	4620      	mov	r0, r4
 8006ede:	d105      	bne.n	8006eec <_dtoa_r+0xaa4>
 8006ee0:	f000 fc14 	bl	800770c <__multadd>
 8006ee4:	4681      	mov	r9, r0
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	9505      	str	r5, [sp, #20]
 8006eea:	e776      	b.n	8006dda <_dtoa_r+0x992>
 8006eec:	f000 fc0e 	bl	800770c <__multadd>
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4681      	mov	r9, r0
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	220a      	movs	r2, #10
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fc07 	bl	800770c <__multadd>
 8006efe:	4606      	mov	r6, r0
 8006f00:	e7f2      	b.n	8006ee8 <_dtoa_r+0xaa0>
 8006f02:	f04f 0900 	mov.w	r9, #0
 8006f06:	2201      	movs	r2, #1
 8006f08:	9904      	ldr	r1, [sp, #16]
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 fdb2 	bl	8007a74 <__lshift>
 8006f10:	4639      	mov	r1, r7
 8006f12:	9004      	str	r0, [sp, #16]
 8006f14:	f000 fe02 	bl	8007b1c <__mcmp>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	dcb6      	bgt.n	8006e8a <_dtoa_r+0xa42>
 8006f1c:	d102      	bne.n	8006f24 <_dtoa_r+0xadc>
 8006f1e:	f018 0f01 	tst.w	r8, #1
 8006f22:	d1b2      	bne.n	8006e8a <_dtoa_r+0xa42>
 8006f24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f28:	2b30      	cmp	r3, #48	; 0x30
 8006f2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006f2e:	f47f af0a 	bne.w	8006d46 <_dtoa_r+0x8fe>
 8006f32:	4615      	mov	r5, r2
 8006f34:	e7f6      	b.n	8006f24 <_dtoa_r+0xadc>
 8006f36:	4593      	cmp	fp, r2
 8006f38:	d105      	bne.n	8006f46 <_dtoa_r+0xafe>
 8006f3a:	2331      	movs	r3, #49	; 0x31
 8006f3c:	f10a 0a01 	add.w	sl, sl, #1
 8006f40:	f88b 3000 	strb.w	r3, [fp]
 8006f44:	e6ff      	b.n	8006d46 <_dtoa_r+0x8fe>
 8006f46:	4615      	mov	r5, r2
 8006f48:	e79f      	b.n	8006e8a <_dtoa_r+0xa42>
 8006f4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006fb0 <_dtoa_r+0xb68>
 8006f4e:	e007      	b.n	8006f60 <_dtoa_r+0xb18>
 8006f50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006fb4 <_dtoa_r+0xb6c>
 8006f56:	b11b      	cbz	r3, 8006f60 <_dtoa_r+0xb18>
 8006f58:	f10b 0308 	add.w	r3, fp, #8
 8006f5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	4658      	mov	r0, fp
 8006f62:	b017      	add	sp, #92	; 0x5c
 8006f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	f77f ae35 	ble.w	8006bda <_dtoa_r+0x792>
 8006f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f72:	9307      	str	r3, [sp, #28]
 8006f74:	e649      	b.n	8006c0a <_dtoa_r+0x7c2>
 8006f76:	9b02      	ldr	r3, [sp, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	dc03      	bgt.n	8006f84 <_dtoa_r+0xb3c>
 8006f7c:	9b06      	ldr	r3, [sp, #24]
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	f73f aecc 	bgt.w	8006d1c <_dtoa_r+0x8d4>
 8006f84:	465d      	mov	r5, fp
 8006f86:	4639      	mov	r1, r7
 8006f88:	9804      	ldr	r0, [sp, #16]
 8006f8a:	f7ff f9d1 	bl	8006330 <quorem>
 8006f8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006f92:	f805 8b01 	strb.w	r8, [r5], #1
 8006f96:	9a02      	ldr	r2, [sp, #8]
 8006f98:	eba5 030b 	sub.w	r3, r5, fp
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	ddb0      	ble.n	8006f02 <_dtoa_r+0xaba>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	220a      	movs	r2, #10
 8006fa4:	9904      	ldr	r1, [sp, #16]
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 fbb0 	bl	800770c <__multadd>
 8006fac:	9004      	str	r0, [sp, #16]
 8006fae:	e7ea      	b.n	8006f86 <_dtoa_r+0xb3e>
 8006fb0:	080083b8 	.word	0x080083b8
 8006fb4:	08008438 	.word	0x08008438

08006fb8 <rshift>:
 8006fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fba:	6906      	ldr	r6, [r0, #16]
 8006fbc:	114b      	asrs	r3, r1, #5
 8006fbe:	429e      	cmp	r6, r3
 8006fc0:	f100 0414 	add.w	r4, r0, #20
 8006fc4:	dd30      	ble.n	8007028 <rshift+0x70>
 8006fc6:	f011 011f 	ands.w	r1, r1, #31
 8006fca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006fce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006fd2:	d108      	bne.n	8006fe6 <rshift+0x2e>
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	42b2      	cmp	r2, r6
 8006fd8:	460b      	mov	r3, r1
 8006fda:	d211      	bcs.n	8007000 <rshift+0x48>
 8006fdc:	f852 3b04 	ldr.w	r3, [r2], #4
 8006fe0:	f841 3b04 	str.w	r3, [r1], #4
 8006fe4:	e7f7      	b.n	8006fd6 <rshift+0x1e>
 8006fe6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006fea:	f1c1 0c20 	rsb	ip, r1, #32
 8006fee:	40cd      	lsrs	r5, r1
 8006ff0:	3204      	adds	r2, #4
 8006ff2:	4623      	mov	r3, r4
 8006ff4:	42b2      	cmp	r2, r6
 8006ff6:	4617      	mov	r7, r2
 8006ff8:	d30c      	bcc.n	8007014 <rshift+0x5c>
 8006ffa:	601d      	str	r5, [r3, #0]
 8006ffc:	b105      	cbz	r5, 8007000 <rshift+0x48>
 8006ffe:	3304      	adds	r3, #4
 8007000:	1b1a      	subs	r2, r3, r4
 8007002:	42a3      	cmp	r3, r4
 8007004:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007008:	bf08      	it	eq
 800700a:	2300      	moveq	r3, #0
 800700c:	6102      	str	r2, [r0, #16]
 800700e:	bf08      	it	eq
 8007010:	6143      	streq	r3, [r0, #20]
 8007012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007014:	683f      	ldr	r7, [r7, #0]
 8007016:	fa07 f70c 	lsl.w	r7, r7, ip
 800701a:	433d      	orrs	r5, r7
 800701c:	f843 5b04 	str.w	r5, [r3], #4
 8007020:	f852 5b04 	ldr.w	r5, [r2], #4
 8007024:	40cd      	lsrs	r5, r1
 8007026:	e7e5      	b.n	8006ff4 <rshift+0x3c>
 8007028:	4623      	mov	r3, r4
 800702a:	e7e9      	b.n	8007000 <rshift+0x48>

0800702c <__hexdig_fun>:
 800702c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007030:	2b09      	cmp	r3, #9
 8007032:	d802      	bhi.n	800703a <__hexdig_fun+0xe>
 8007034:	3820      	subs	r0, #32
 8007036:	b2c0      	uxtb	r0, r0
 8007038:	4770      	bx	lr
 800703a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800703e:	2b05      	cmp	r3, #5
 8007040:	d801      	bhi.n	8007046 <__hexdig_fun+0x1a>
 8007042:	3847      	subs	r0, #71	; 0x47
 8007044:	e7f7      	b.n	8007036 <__hexdig_fun+0xa>
 8007046:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800704a:	2b05      	cmp	r3, #5
 800704c:	d801      	bhi.n	8007052 <__hexdig_fun+0x26>
 800704e:	3827      	subs	r0, #39	; 0x27
 8007050:	e7f1      	b.n	8007036 <__hexdig_fun+0xa>
 8007052:	2000      	movs	r0, #0
 8007054:	4770      	bx	lr

08007056 <__gethex>:
 8007056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	b08b      	sub	sp, #44	; 0x2c
 800705c:	468a      	mov	sl, r1
 800705e:	9002      	str	r0, [sp, #8]
 8007060:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007062:	9306      	str	r3, [sp, #24]
 8007064:	4690      	mov	r8, r2
 8007066:	f000 fad0 	bl	800760a <__localeconv_l>
 800706a:	6803      	ldr	r3, [r0, #0]
 800706c:	9303      	str	r3, [sp, #12]
 800706e:	4618      	mov	r0, r3
 8007070:	f7f9 f8b6 	bl	80001e0 <strlen>
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	9001      	str	r0, [sp, #4]
 8007078:	4403      	add	r3, r0
 800707a:	f04f 0b00 	mov.w	fp, #0
 800707e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007082:	9307      	str	r3, [sp, #28]
 8007084:	f8da 3000 	ldr.w	r3, [sl]
 8007088:	3302      	adds	r3, #2
 800708a:	461f      	mov	r7, r3
 800708c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007090:	2830      	cmp	r0, #48	; 0x30
 8007092:	d06c      	beq.n	800716e <__gethex+0x118>
 8007094:	f7ff ffca 	bl	800702c <__hexdig_fun>
 8007098:	4604      	mov	r4, r0
 800709a:	2800      	cmp	r0, #0
 800709c:	d16a      	bne.n	8007174 <__gethex+0x11e>
 800709e:	9a01      	ldr	r2, [sp, #4]
 80070a0:	9903      	ldr	r1, [sp, #12]
 80070a2:	4638      	mov	r0, r7
 80070a4:	f001 f8fe 	bl	80082a4 <strncmp>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d166      	bne.n	800717a <__gethex+0x124>
 80070ac:	9b01      	ldr	r3, [sp, #4]
 80070ae:	5cf8      	ldrb	r0, [r7, r3]
 80070b0:	18fe      	adds	r6, r7, r3
 80070b2:	f7ff ffbb 	bl	800702c <__hexdig_fun>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d062      	beq.n	8007180 <__gethex+0x12a>
 80070ba:	4633      	mov	r3, r6
 80070bc:	7818      	ldrb	r0, [r3, #0]
 80070be:	2830      	cmp	r0, #48	; 0x30
 80070c0:	461f      	mov	r7, r3
 80070c2:	f103 0301 	add.w	r3, r3, #1
 80070c6:	d0f9      	beq.n	80070bc <__gethex+0x66>
 80070c8:	f7ff ffb0 	bl	800702c <__hexdig_fun>
 80070cc:	fab0 f580 	clz	r5, r0
 80070d0:	096d      	lsrs	r5, r5, #5
 80070d2:	4634      	mov	r4, r6
 80070d4:	f04f 0b01 	mov.w	fp, #1
 80070d8:	463a      	mov	r2, r7
 80070da:	4616      	mov	r6, r2
 80070dc:	3201      	adds	r2, #1
 80070de:	7830      	ldrb	r0, [r6, #0]
 80070e0:	f7ff ffa4 	bl	800702c <__hexdig_fun>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d1f8      	bne.n	80070da <__gethex+0x84>
 80070e8:	9a01      	ldr	r2, [sp, #4]
 80070ea:	9903      	ldr	r1, [sp, #12]
 80070ec:	4630      	mov	r0, r6
 80070ee:	f001 f8d9 	bl	80082a4 <strncmp>
 80070f2:	b950      	cbnz	r0, 800710a <__gethex+0xb4>
 80070f4:	b954      	cbnz	r4, 800710c <__gethex+0xb6>
 80070f6:	9b01      	ldr	r3, [sp, #4]
 80070f8:	18f4      	adds	r4, r6, r3
 80070fa:	4622      	mov	r2, r4
 80070fc:	4616      	mov	r6, r2
 80070fe:	3201      	adds	r2, #1
 8007100:	7830      	ldrb	r0, [r6, #0]
 8007102:	f7ff ff93 	bl	800702c <__hexdig_fun>
 8007106:	2800      	cmp	r0, #0
 8007108:	d1f8      	bne.n	80070fc <__gethex+0xa6>
 800710a:	b10c      	cbz	r4, 8007110 <__gethex+0xba>
 800710c:	1ba4      	subs	r4, r4, r6
 800710e:	00a4      	lsls	r4, r4, #2
 8007110:	7833      	ldrb	r3, [r6, #0]
 8007112:	2b50      	cmp	r3, #80	; 0x50
 8007114:	d001      	beq.n	800711a <__gethex+0xc4>
 8007116:	2b70      	cmp	r3, #112	; 0x70
 8007118:	d140      	bne.n	800719c <__gethex+0x146>
 800711a:	7873      	ldrb	r3, [r6, #1]
 800711c:	2b2b      	cmp	r3, #43	; 0x2b
 800711e:	d031      	beq.n	8007184 <__gethex+0x12e>
 8007120:	2b2d      	cmp	r3, #45	; 0x2d
 8007122:	d033      	beq.n	800718c <__gethex+0x136>
 8007124:	1c71      	adds	r1, r6, #1
 8007126:	f04f 0900 	mov.w	r9, #0
 800712a:	7808      	ldrb	r0, [r1, #0]
 800712c:	f7ff ff7e 	bl	800702c <__hexdig_fun>
 8007130:	1e43      	subs	r3, r0, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b18      	cmp	r3, #24
 8007136:	d831      	bhi.n	800719c <__gethex+0x146>
 8007138:	f1a0 0210 	sub.w	r2, r0, #16
 800713c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007140:	f7ff ff74 	bl	800702c <__hexdig_fun>
 8007144:	1e43      	subs	r3, r0, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b18      	cmp	r3, #24
 800714a:	d922      	bls.n	8007192 <__gethex+0x13c>
 800714c:	f1b9 0f00 	cmp.w	r9, #0
 8007150:	d000      	beq.n	8007154 <__gethex+0xfe>
 8007152:	4252      	negs	r2, r2
 8007154:	4414      	add	r4, r2
 8007156:	f8ca 1000 	str.w	r1, [sl]
 800715a:	b30d      	cbz	r5, 80071a0 <__gethex+0x14a>
 800715c:	f1bb 0f00 	cmp.w	fp, #0
 8007160:	bf0c      	ite	eq
 8007162:	2706      	moveq	r7, #6
 8007164:	2700      	movne	r7, #0
 8007166:	4638      	mov	r0, r7
 8007168:	b00b      	add	sp, #44	; 0x2c
 800716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716e:	f10b 0b01 	add.w	fp, fp, #1
 8007172:	e78a      	b.n	800708a <__gethex+0x34>
 8007174:	2500      	movs	r5, #0
 8007176:	462c      	mov	r4, r5
 8007178:	e7ae      	b.n	80070d8 <__gethex+0x82>
 800717a:	463e      	mov	r6, r7
 800717c:	2501      	movs	r5, #1
 800717e:	e7c7      	b.n	8007110 <__gethex+0xba>
 8007180:	4604      	mov	r4, r0
 8007182:	e7fb      	b.n	800717c <__gethex+0x126>
 8007184:	f04f 0900 	mov.w	r9, #0
 8007188:	1cb1      	adds	r1, r6, #2
 800718a:	e7ce      	b.n	800712a <__gethex+0xd4>
 800718c:	f04f 0901 	mov.w	r9, #1
 8007190:	e7fa      	b.n	8007188 <__gethex+0x132>
 8007192:	230a      	movs	r3, #10
 8007194:	fb03 0202 	mla	r2, r3, r2, r0
 8007198:	3a10      	subs	r2, #16
 800719a:	e7cf      	b.n	800713c <__gethex+0xe6>
 800719c:	4631      	mov	r1, r6
 800719e:	e7da      	b.n	8007156 <__gethex+0x100>
 80071a0:	1bf3      	subs	r3, r6, r7
 80071a2:	3b01      	subs	r3, #1
 80071a4:	4629      	mov	r1, r5
 80071a6:	2b07      	cmp	r3, #7
 80071a8:	dc49      	bgt.n	800723e <__gethex+0x1e8>
 80071aa:	9802      	ldr	r0, [sp, #8]
 80071ac:	f000 fa63 	bl	8007676 <_Balloc>
 80071b0:	9b01      	ldr	r3, [sp, #4]
 80071b2:	f100 0914 	add.w	r9, r0, #20
 80071b6:	f04f 0b00 	mov.w	fp, #0
 80071ba:	f1c3 0301 	rsb	r3, r3, #1
 80071be:	4605      	mov	r5, r0
 80071c0:	f8cd 9010 	str.w	r9, [sp, #16]
 80071c4:	46da      	mov	sl, fp
 80071c6:	9308      	str	r3, [sp, #32]
 80071c8:	42b7      	cmp	r7, r6
 80071ca:	d33b      	bcc.n	8007244 <__gethex+0x1ee>
 80071cc:	9804      	ldr	r0, [sp, #16]
 80071ce:	f840 ab04 	str.w	sl, [r0], #4
 80071d2:	eba0 0009 	sub.w	r0, r0, r9
 80071d6:	1080      	asrs	r0, r0, #2
 80071d8:	6128      	str	r0, [r5, #16]
 80071da:	0147      	lsls	r7, r0, #5
 80071dc:	4650      	mov	r0, sl
 80071de:	f000 fb0e 	bl	80077fe <__hi0bits>
 80071e2:	f8d8 6000 	ldr.w	r6, [r8]
 80071e6:	1a3f      	subs	r7, r7, r0
 80071e8:	42b7      	cmp	r7, r6
 80071ea:	dd64      	ble.n	80072b6 <__gethex+0x260>
 80071ec:	1bbf      	subs	r7, r7, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 fe1d 	bl	8007e30 <__any_on>
 80071f6:	4682      	mov	sl, r0
 80071f8:	b178      	cbz	r0, 800721a <__gethex+0x1c4>
 80071fa:	1e7b      	subs	r3, r7, #1
 80071fc:	1159      	asrs	r1, r3, #5
 80071fe:	f003 021f 	and.w	r2, r3, #31
 8007202:	f04f 0a01 	mov.w	sl, #1
 8007206:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800720a:	fa0a f202 	lsl.w	r2, sl, r2
 800720e:	420a      	tst	r2, r1
 8007210:	d003      	beq.n	800721a <__gethex+0x1c4>
 8007212:	4553      	cmp	r3, sl
 8007214:	dc46      	bgt.n	80072a4 <__gethex+0x24e>
 8007216:	f04f 0a02 	mov.w	sl, #2
 800721a:	4639      	mov	r1, r7
 800721c:	4628      	mov	r0, r5
 800721e:	f7ff fecb 	bl	8006fb8 <rshift>
 8007222:	443c      	add	r4, r7
 8007224:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007228:	42a3      	cmp	r3, r4
 800722a:	da52      	bge.n	80072d2 <__gethex+0x27c>
 800722c:	4629      	mov	r1, r5
 800722e:	9802      	ldr	r0, [sp, #8]
 8007230:	f000 fa55 	bl	80076de <_Bfree>
 8007234:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007236:	2300      	movs	r3, #0
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	27a3      	movs	r7, #163	; 0xa3
 800723c:	e793      	b.n	8007166 <__gethex+0x110>
 800723e:	3101      	adds	r1, #1
 8007240:	105b      	asrs	r3, r3, #1
 8007242:	e7b0      	b.n	80071a6 <__gethex+0x150>
 8007244:	1e73      	subs	r3, r6, #1
 8007246:	9305      	str	r3, [sp, #20]
 8007248:	9a07      	ldr	r2, [sp, #28]
 800724a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800724e:	4293      	cmp	r3, r2
 8007250:	d018      	beq.n	8007284 <__gethex+0x22e>
 8007252:	f1bb 0f20 	cmp.w	fp, #32
 8007256:	d107      	bne.n	8007268 <__gethex+0x212>
 8007258:	9b04      	ldr	r3, [sp, #16]
 800725a:	f8c3 a000 	str.w	sl, [r3]
 800725e:	3304      	adds	r3, #4
 8007260:	f04f 0a00 	mov.w	sl, #0
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	46d3      	mov	fp, sl
 8007268:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800726c:	f7ff fede 	bl	800702c <__hexdig_fun>
 8007270:	f000 000f 	and.w	r0, r0, #15
 8007274:	fa00 f00b 	lsl.w	r0, r0, fp
 8007278:	ea4a 0a00 	orr.w	sl, sl, r0
 800727c:	f10b 0b04 	add.w	fp, fp, #4
 8007280:	9b05      	ldr	r3, [sp, #20]
 8007282:	e00d      	b.n	80072a0 <__gethex+0x24a>
 8007284:	9b05      	ldr	r3, [sp, #20]
 8007286:	9a08      	ldr	r2, [sp, #32]
 8007288:	4413      	add	r3, r2
 800728a:	42bb      	cmp	r3, r7
 800728c:	d3e1      	bcc.n	8007252 <__gethex+0x1fc>
 800728e:	4618      	mov	r0, r3
 8007290:	9a01      	ldr	r2, [sp, #4]
 8007292:	9903      	ldr	r1, [sp, #12]
 8007294:	9309      	str	r3, [sp, #36]	; 0x24
 8007296:	f001 f805 	bl	80082a4 <strncmp>
 800729a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800729c:	2800      	cmp	r0, #0
 800729e:	d1d8      	bne.n	8007252 <__gethex+0x1fc>
 80072a0:	461e      	mov	r6, r3
 80072a2:	e791      	b.n	80071c8 <__gethex+0x172>
 80072a4:	1eb9      	subs	r1, r7, #2
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fdc2 	bl	8007e30 <__any_on>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d0b2      	beq.n	8007216 <__gethex+0x1c0>
 80072b0:	f04f 0a03 	mov.w	sl, #3
 80072b4:	e7b1      	b.n	800721a <__gethex+0x1c4>
 80072b6:	da09      	bge.n	80072cc <__gethex+0x276>
 80072b8:	1bf7      	subs	r7, r6, r7
 80072ba:	4629      	mov	r1, r5
 80072bc:	463a      	mov	r2, r7
 80072be:	9802      	ldr	r0, [sp, #8]
 80072c0:	f000 fbd8 	bl	8007a74 <__lshift>
 80072c4:	1be4      	subs	r4, r4, r7
 80072c6:	4605      	mov	r5, r0
 80072c8:	f100 0914 	add.w	r9, r0, #20
 80072cc:	f04f 0a00 	mov.w	sl, #0
 80072d0:	e7a8      	b.n	8007224 <__gethex+0x1ce>
 80072d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80072d6:	42a0      	cmp	r0, r4
 80072d8:	dd6a      	ble.n	80073b0 <__gethex+0x35a>
 80072da:	1b04      	subs	r4, r0, r4
 80072dc:	42a6      	cmp	r6, r4
 80072de:	dc2e      	bgt.n	800733e <__gethex+0x2e8>
 80072e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d022      	beq.n	800732e <__gethex+0x2d8>
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d024      	beq.n	8007336 <__gethex+0x2e0>
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d115      	bne.n	800731c <__gethex+0x2c6>
 80072f0:	42a6      	cmp	r6, r4
 80072f2:	d113      	bne.n	800731c <__gethex+0x2c6>
 80072f4:	2e01      	cmp	r6, #1
 80072f6:	dc0b      	bgt.n	8007310 <__gethex+0x2ba>
 80072f8:	9a06      	ldr	r2, [sp, #24]
 80072fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	2301      	movs	r3, #1
 8007302:	612b      	str	r3, [r5, #16]
 8007304:	f8c9 3000 	str.w	r3, [r9]
 8007308:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800730a:	2762      	movs	r7, #98	; 0x62
 800730c:	601d      	str	r5, [r3, #0]
 800730e:	e72a      	b.n	8007166 <__gethex+0x110>
 8007310:	1e71      	subs	r1, r6, #1
 8007312:	4628      	mov	r0, r5
 8007314:	f000 fd8c 	bl	8007e30 <__any_on>
 8007318:	2800      	cmp	r0, #0
 800731a:	d1ed      	bne.n	80072f8 <__gethex+0x2a2>
 800731c:	4629      	mov	r1, r5
 800731e:	9802      	ldr	r0, [sp, #8]
 8007320:	f000 f9dd 	bl	80076de <_Bfree>
 8007324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007326:	2300      	movs	r3, #0
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	2750      	movs	r7, #80	; 0x50
 800732c:	e71b      	b.n	8007166 <__gethex+0x110>
 800732e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0e1      	beq.n	80072f8 <__gethex+0x2a2>
 8007334:	e7f2      	b.n	800731c <__gethex+0x2c6>
 8007336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1dd      	bne.n	80072f8 <__gethex+0x2a2>
 800733c:	e7ee      	b.n	800731c <__gethex+0x2c6>
 800733e:	1e67      	subs	r7, r4, #1
 8007340:	f1ba 0f00 	cmp.w	sl, #0
 8007344:	d131      	bne.n	80073aa <__gethex+0x354>
 8007346:	b127      	cbz	r7, 8007352 <__gethex+0x2fc>
 8007348:	4639      	mov	r1, r7
 800734a:	4628      	mov	r0, r5
 800734c:	f000 fd70 	bl	8007e30 <__any_on>
 8007350:	4682      	mov	sl, r0
 8007352:	117a      	asrs	r2, r7, #5
 8007354:	2301      	movs	r3, #1
 8007356:	f007 071f 	and.w	r7, r7, #31
 800735a:	fa03 f707 	lsl.w	r7, r3, r7
 800735e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007362:	4621      	mov	r1, r4
 8007364:	421f      	tst	r7, r3
 8007366:	4628      	mov	r0, r5
 8007368:	bf18      	it	ne
 800736a:	f04a 0a02 	orrne.w	sl, sl, #2
 800736e:	1b36      	subs	r6, r6, r4
 8007370:	f7ff fe22 	bl	8006fb8 <rshift>
 8007374:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007378:	2702      	movs	r7, #2
 800737a:	f1ba 0f00 	cmp.w	sl, #0
 800737e:	d048      	beq.n	8007412 <__gethex+0x3bc>
 8007380:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007384:	2b02      	cmp	r3, #2
 8007386:	d015      	beq.n	80073b4 <__gethex+0x35e>
 8007388:	2b03      	cmp	r3, #3
 800738a:	d017      	beq.n	80073bc <__gethex+0x366>
 800738c:	2b01      	cmp	r3, #1
 800738e:	d109      	bne.n	80073a4 <__gethex+0x34e>
 8007390:	f01a 0f02 	tst.w	sl, #2
 8007394:	d006      	beq.n	80073a4 <__gethex+0x34e>
 8007396:	f8d9 3000 	ldr.w	r3, [r9]
 800739a:	ea4a 0a03 	orr.w	sl, sl, r3
 800739e:	f01a 0f01 	tst.w	sl, #1
 80073a2:	d10e      	bne.n	80073c2 <__gethex+0x36c>
 80073a4:	f047 0710 	orr.w	r7, r7, #16
 80073a8:	e033      	b.n	8007412 <__gethex+0x3bc>
 80073aa:	f04f 0a01 	mov.w	sl, #1
 80073ae:	e7d0      	b.n	8007352 <__gethex+0x2fc>
 80073b0:	2701      	movs	r7, #1
 80073b2:	e7e2      	b.n	800737a <__gethex+0x324>
 80073b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073b6:	f1c3 0301 	rsb	r3, r3, #1
 80073ba:	9315      	str	r3, [sp, #84]	; 0x54
 80073bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0f0      	beq.n	80073a4 <__gethex+0x34e>
 80073c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80073c6:	f105 0314 	add.w	r3, r5, #20
 80073ca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80073ce:	eb03 010a 	add.w	r1, r3, sl
 80073d2:	f04f 0c00 	mov.w	ip, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80073e0:	d01c      	beq.n	800741c <__gethex+0x3c6>
 80073e2:	3201      	adds	r2, #1
 80073e4:	6002      	str	r2, [r0, #0]
 80073e6:	2f02      	cmp	r7, #2
 80073e8:	f105 0314 	add.w	r3, r5, #20
 80073ec:	d138      	bne.n	8007460 <__gethex+0x40a>
 80073ee:	f8d8 2000 	ldr.w	r2, [r8]
 80073f2:	3a01      	subs	r2, #1
 80073f4:	42b2      	cmp	r2, r6
 80073f6:	d10a      	bne.n	800740e <__gethex+0x3b8>
 80073f8:	1171      	asrs	r1, r6, #5
 80073fa:	2201      	movs	r2, #1
 80073fc:	f006 061f 	and.w	r6, r6, #31
 8007400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007404:	fa02 f606 	lsl.w	r6, r2, r6
 8007408:	421e      	tst	r6, r3
 800740a:	bf18      	it	ne
 800740c:	4617      	movne	r7, r2
 800740e:	f047 0720 	orr.w	r7, r7, #32
 8007412:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007414:	601d      	str	r5, [r3, #0]
 8007416:	9b06      	ldr	r3, [sp, #24]
 8007418:	601c      	str	r4, [r3, #0]
 800741a:	e6a4      	b.n	8007166 <__gethex+0x110>
 800741c:	4299      	cmp	r1, r3
 800741e:	f843 cc04 	str.w	ip, [r3, #-4]
 8007422:	d8d8      	bhi.n	80073d6 <__gethex+0x380>
 8007424:	68ab      	ldr	r3, [r5, #8]
 8007426:	4599      	cmp	r9, r3
 8007428:	db12      	blt.n	8007450 <__gethex+0x3fa>
 800742a:	6869      	ldr	r1, [r5, #4]
 800742c:	9802      	ldr	r0, [sp, #8]
 800742e:	3101      	adds	r1, #1
 8007430:	f000 f921 	bl	8007676 <_Balloc>
 8007434:	692a      	ldr	r2, [r5, #16]
 8007436:	3202      	adds	r2, #2
 8007438:	f105 010c 	add.w	r1, r5, #12
 800743c:	4683      	mov	fp, r0
 800743e:	0092      	lsls	r2, r2, #2
 8007440:	300c      	adds	r0, #12
 8007442:	f000 f90d 	bl	8007660 <memcpy>
 8007446:	4629      	mov	r1, r5
 8007448:	9802      	ldr	r0, [sp, #8]
 800744a:	f000 f948 	bl	80076de <_Bfree>
 800744e:	465d      	mov	r5, fp
 8007450:	692b      	ldr	r3, [r5, #16]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007458:	612a      	str	r2, [r5, #16]
 800745a:	2201      	movs	r2, #1
 800745c:	615a      	str	r2, [r3, #20]
 800745e:	e7c2      	b.n	80073e6 <__gethex+0x390>
 8007460:	692a      	ldr	r2, [r5, #16]
 8007462:	454a      	cmp	r2, r9
 8007464:	dd0b      	ble.n	800747e <__gethex+0x428>
 8007466:	2101      	movs	r1, #1
 8007468:	4628      	mov	r0, r5
 800746a:	f7ff fda5 	bl	8006fb8 <rshift>
 800746e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007472:	3401      	adds	r4, #1
 8007474:	42a3      	cmp	r3, r4
 8007476:	f6ff aed9 	blt.w	800722c <__gethex+0x1d6>
 800747a:	2701      	movs	r7, #1
 800747c:	e7c7      	b.n	800740e <__gethex+0x3b8>
 800747e:	f016 061f 	ands.w	r6, r6, #31
 8007482:	d0fa      	beq.n	800747a <__gethex+0x424>
 8007484:	449a      	add	sl, r3
 8007486:	f1c6 0620 	rsb	r6, r6, #32
 800748a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800748e:	f000 f9b6 	bl	80077fe <__hi0bits>
 8007492:	42b0      	cmp	r0, r6
 8007494:	dbe7      	blt.n	8007466 <__gethex+0x410>
 8007496:	e7f0      	b.n	800747a <__gethex+0x424>

08007498 <L_shift>:
 8007498:	f1c2 0208 	rsb	r2, r2, #8
 800749c:	0092      	lsls	r2, r2, #2
 800749e:	b570      	push	{r4, r5, r6, lr}
 80074a0:	f1c2 0620 	rsb	r6, r2, #32
 80074a4:	6843      	ldr	r3, [r0, #4]
 80074a6:	6804      	ldr	r4, [r0, #0]
 80074a8:	fa03 f506 	lsl.w	r5, r3, r6
 80074ac:	432c      	orrs	r4, r5
 80074ae:	40d3      	lsrs	r3, r2
 80074b0:	6004      	str	r4, [r0, #0]
 80074b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80074b6:	4288      	cmp	r0, r1
 80074b8:	d3f4      	bcc.n	80074a4 <L_shift+0xc>
 80074ba:	bd70      	pop	{r4, r5, r6, pc}

080074bc <__match>:
 80074bc:	b530      	push	{r4, r5, lr}
 80074be:	6803      	ldr	r3, [r0, #0]
 80074c0:	3301      	adds	r3, #1
 80074c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074c6:	b914      	cbnz	r4, 80074ce <__match+0x12>
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	2001      	movs	r0, #1
 80074cc:	bd30      	pop	{r4, r5, pc}
 80074ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80074d6:	2d19      	cmp	r5, #25
 80074d8:	bf98      	it	ls
 80074da:	3220      	addls	r2, #32
 80074dc:	42a2      	cmp	r2, r4
 80074de:	d0f0      	beq.n	80074c2 <__match+0x6>
 80074e0:	2000      	movs	r0, #0
 80074e2:	e7f3      	b.n	80074cc <__match+0x10>

080074e4 <__hexnan>:
 80074e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	680b      	ldr	r3, [r1, #0]
 80074ea:	6801      	ldr	r1, [r0, #0]
 80074ec:	115f      	asrs	r7, r3, #5
 80074ee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80074f2:	f013 031f 	ands.w	r3, r3, #31
 80074f6:	b087      	sub	sp, #28
 80074f8:	bf18      	it	ne
 80074fa:	3704      	addne	r7, #4
 80074fc:	2500      	movs	r5, #0
 80074fe:	1f3e      	subs	r6, r7, #4
 8007500:	4682      	mov	sl, r0
 8007502:	4690      	mov	r8, r2
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	f847 5c04 	str.w	r5, [r7, #-4]
 800750a:	46b1      	mov	r9, r6
 800750c:	4634      	mov	r4, r6
 800750e:	9502      	str	r5, [sp, #8]
 8007510:	46ab      	mov	fp, r5
 8007512:	784a      	ldrb	r2, [r1, #1]
 8007514:	1c4b      	adds	r3, r1, #1
 8007516:	9303      	str	r3, [sp, #12]
 8007518:	b342      	cbz	r2, 800756c <__hexnan+0x88>
 800751a:	4610      	mov	r0, r2
 800751c:	9105      	str	r1, [sp, #20]
 800751e:	9204      	str	r2, [sp, #16]
 8007520:	f7ff fd84 	bl	800702c <__hexdig_fun>
 8007524:	2800      	cmp	r0, #0
 8007526:	d143      	bne.n	80075b0 <__hexnan+0xcc>
 8007528:	9a04      	ldr	r2, [sp, #16]
 800752a:	9905      	ldr	r1, [sp, #20]
 800752c:	2a20      	cmp	r2, #32
 800752e:	d818      	bhi.n	8007562 <__hexnan+0x7e>
 8007530:	9b02      	ldr	r3, [sp, #8]
 8007532:	459b      	cmp	fp, r3
 8007534:	dd13      	ble.n	800755e <__hexnan+0x7a>
 8007536:	454c      	cmp	r4, r9
 8007538:	d206      	bcs.n	8007548 <__hexnan+0x64>
 800753a:	2d07      	cmp	r5, #7
 800753c:	dc04      	bgt.n	8007548 <__hexnan+0x64>
 800753e:	462a      	mov	r2, r5
 8007540:	4649      	mov	r1, r9
 8007542:	4620      	mov	r0, r4
 8007544:	f7ff ffa8 	bl	8007498 <L_shift>
 8007548:	4544      	cmp	r4, r8
 800754a:	d944      	bls.n	80075d6 <__hexnan+0xf2>
 800754c:	2300      	movs	r3, #0
 800754e:	f1a4 0904 	sub.w	r9, r4, #4
 8007552:	f844 3c04 	str.w	r3, [r4, #-4]
 8007556:	f8cd b008 	str.w	fp, [sp, #8]
 800755a:	464c      	mov	r4, r9
 800755c:	461d      	mov	r5, r3
 800755e:	9903      	ldr	r1, [sp, #12]
 8007560:	e7d7      	b.n	8007512 <__hexnan+0x2e>
 8007562:	2a29      	cmp	r2, #41	; 0x29
 8007564:	d14a      	bne.n	80075fc <__hexnan+0x118>
 8007566:	3102      	adds	r1, #2
 8007568:	f8ca 1000 	str.w	r1, [sl]
 800756c:	f1bb 0f00 	cmp.w	fp, #0
 8007570:	d044      	beq.n	80075fc <__hexnan+0x118>
 8007572:	454c      	cmp	r4, r9
 8007574:	d206      	bcs.n	8007584 <__hexnan+0xa0>
 8007576:	2d07      	cmp	r5, #7
 8007578:	dc04      	bgt.n	8007584 <__hexnan+0xa0>
 800757a:	462a      	mov	r2, r5
 800757c:	4649      	mov	r1, r9
 800757e:	4620      	mov	r0, r4
 8007580:	f7ff ff8a 	bl	8007498 <L_shift>
 8007584:	4544      	cmp	r4, r8
 8007586:	d928      	bls.n	80075da <__hexnan+0xf6>
 8007588:	4643      	mov	r3, r8
 800758a:	f854 2b04 	ldr.w	r2, [r4], #4
 800758e:	f843 2b04 	str.w	r2, [r3], #4
 8007592:	42a6      	cmp	r6, r4
 8007594:	d2f9      	bcs.n	800758a <__hexnan+0xa6>
 8007596:	2200      	movs	r2, #0
 8007598:	f843 2b04 	str.w	r2, [r3], #4
 800759c:	429e      	cmp	r6, r3
 800759e:	d2fb      	bcs.n	8007598 <__hexnan+0xb4>
 80075a0:	6833      	ldr	r3, [r6, #0]
 80075a2:	b91b      	cbnz	r3, 80075ac <__hexnan+0xc8>
 80075a4:	4546      	cmp	r6, r8
 80075a6:	d127      	bne.n	80075f8 <__hexnan+0x114>
 80075a8:	2301      	movs	r3, #1
 80075aa:	6033      	str	r3, [r6, #0]
 80075ac:	2005      	movs	r0, #5
 80075ae:	e026      	b.n	80075fe <__hexnan+0x11a>
 80075b0:	3501      	adds	r5, #1
 80075b2:	2d08      	cmp	r5, #8
 80075b4:	f10b 0b01 	add.w	fp, fp, #1
 80075b8:	dd06      	ble.n	80075c8 <__hexnan+0xe4>
 80075ba:	4544      	cmp	r4, r8
 80075bc:	d9cf      	bls.n	800755e <__hexnan+0x7a>
 80075be:	2300      	movs	r3, #0
 80075c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80075c4:	2501      	movs	r5, #1
 80075c6:	3c04      	subs	r4, #4
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	f000 000f 	and.w	r0, r0, #15
 80075ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80075d2:	6020      	str	r0, [r4, #0]
 80075d4:	e7c3      	b.n	800755e <__hexnan+0x7a>
 80075d6:	2508      	movs	r5, #8
 80075d8:	e7c1      	b.n	800755e <__hexnan+0x7a>
 80075da:	9b01      	ldr	r3, [sp, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0df      	beq.n	80075a0 <__hexnan+0xbc>
 80075e0:	f04f 32ff 	mov.w	r2, #4294967295
 80075e4:	f1c3 0320 	rsb	r3, r3, #32
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80075f0:	401a      	ands	r2, r3
 80075f2:	f847 2c04 	str.w	r2, [r7, #-4]
 80075f6:	e7d3      	b.n	80075a0 <__hexnan+0xbc>
 80075f8:	3e04      	subs	r6, #4
 80075fa:	e7d1      	b.n	80075a0 <__hexnan+0xbc>
 80075fc:	2004      	movs	r0, #4
 80075fe:	b007      	add	sp, #28
 8007600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007604 <__locale_ctype_ptr_l>:
 8007604:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007608:	4770      	bx	lr

0800760a <__localeconv_l>:
 800760a:	30f0      	adds	r0, #240	; 0xf0
 800760c:	4770      	bx	lr
	...

08007610 <_localeconv_r>:
 8007610:	4b04      	ldr	r3, [pc, #16]	; (8007624 <_localeconv_r+0x14>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6a18      	ldr	r0, [r3, #32]
 8007616:	4b04      	ldr	r3, [pc, #16]	; (8007628 <_localeconv_r+0x18>)
 8007618:	2800      	cmp	r0, #0
 800761a:	bf08      	it	eq
 800761c:	4618      	moveq	r0, r3
 800761e:	30f0      	adds	r0, #240	; 0xf0
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	2000000c 	.word	0x2000000c
 8007628:	20000070 	.word	0x20000070

0800762c <malloc>:
 800762c:	4b02      	ldr	r3, [pc, #8]	; (8007638 <malloc+0xc>)
 800762e:	4601      	mov	r1, r0
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	f000 bc7b 	b.w	8007f2c <_malloc_r>
 8007636:	bf00      	nop
 8007638:	2000000c 	.word	0x2000000c

0800763c <__ascii_mbtowc>:
 800763c:	b082      	sub	sp, #8
 800763e:	b901      	cbnz	r1, 8007642 <__ascii_mbtowc+0x6>
 8007640:	a901      	add	r1, sp, #4
 8007642:	b142      	cbz	r2, 8007656 <__ascii_mbtowc+0x1a>
 8007644:	b14b      	cbz	r3, 800765a <__ascii_mbtowc+0x1e>
 8007646:	7813      	ldrb	r3, [r2, #0]
 8007648:	600b      	str	r3, [r1, #0]
 800764a:	7812      	ldrb	r2, [r2, #0]
 800764c:	1c10      	adds	r0, r2, #0
 800764e:	bf18      	it	ne
 8007650:	2001      	movne	r0, #1
 8007652:	b002      	add	sp, #8
 8007654:	4770      	bx	lr
 8007656:	4610      	mov	r0, r2
 8007658:	e7fb      	b.n	8007652 <__ascii_mbtowc+0x16>
 800765a:	f06f 0001 	mvn.w	r0, #1
 800765e:	e7f8      	b.n	8007652 <__ascii_mbtowc+0x16>

08007660 <memcpy>:
 8007660:	b510      	push	{r4, lr}
 8007662:	1e43      	subs	r3, r0, #1
 8007664:	440a      	add	r2, r1
 8007666:	4291      	cmp	r1, r2
 8007668:	d100      	bne.n	800766c <memcpy+0xc>
 800766a:	bd10      	pop	{r4, pc}
 800766c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007670:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007674:	e7f7      	b.n	8007666 <memcpy+0x6>

08007676 <_Balloc>:
 8007676:	b570      	push	{r4, r5, r6, lr}
 8007678:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800767a:	4604      	mov	r4, r0
 800767c:	460e      	mov	r6, r1
 800767e:	b93d      	cbnz	r5, 8007690 <_Balloc+0x1a>
 8007680:	2010      	movs	r0, #16
 8007682:	f7ff ffd3 	bl	800762c <malloc>
 8007686:	6260      	str	r0, [r4, #36]	; 0x24
 8007688:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800768c:	6005      	str	r5, [r0, #0]
 800768e:	60c5      	str	r5, [r0, #12]
 8007690:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007692:	68eb      	ldr	r3, [r5, #12]
 8007694:	b183      	cbz	r3, 80076b8 <_Balloc+0x42>
 8007696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800769e:	b9b8      	cbnz	r0, 80076d0 <_Balloc+0x5a>
 80076a0:	2101      	movs	r1, #1
 80076a2:	fa01 f506 	lsl.w	r5, r1, r6
 80076a6:	1d6a      	adds	r2, r5, #5
 80076a8:	0092      	lsls	r2, r2, #2
 80076aa:	4620      	mov	r0, r4
 80076ac:	f000 fbe1 	bl	8007e72 <_calloc_r>
 80076b0:	b160      	cbz	r0, 80076cc <_Balloc+0x56>
 80076b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80076b6:	e00e      	b.n	80076d6 <_Balloc+0x60>
 80076b8:	2221      	movs	r2, #33	; 0x21
 80076ba:	2104      	movs	r1, #4
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 fbd8 	bl	8007e72 <_calloc_r>
 80076c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076c4:	60e8      	str	r0, [r5, #12]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1e4      	bne.n	8007696 <_Balloc+0x20>
 80076cc:	2000      	movs	r0, #0
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	6802      	ldr	r2, [r0, #0]
 80076d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80076d6:	2300      	movs	r3, #0
 80076d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076dc:	e7f7      	b.n	80076ce <_Balloc+0x58>

080076de <_Bfree>:
 80076de:	b570      	push	{r4, r5, r6, lr}
 80076e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80076e2:	4606      	mov	r6, r0
 80076e4:	460d      	mov	r5, r1
 80076e6:	b93c      	cbnz	r4, 80076f8 <_Bfree+0x1a>
 80076e8:	2010      	movs	r0, #16
 80076ea:	f7ff ff9f 	bl	800762c <malloc>
 80076ee:	6270      	str	r0, [r6, #36]	; 0x24
 80076f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076f4:	6004      	str	r4, [r0, #0]
 80076f6:	60c4      	str	r4, [r0, #12]
 80076f8:	b13d      	cbz	r5, 800770a <_Bfree+0x2c>
 80076fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80076fc:	686a      	ldr	r2, [r5, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007704:	6029      	str	r1, [r5, #0]
 8007706:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800770a:	bd70      	pop	{r4, r5, r6, pc}

0800770c <__multadd>:
 800770c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007710:	690d      	ldr	r5, [r1, #16]
 8007712:	461f      	mov	r7, r3
 8007714:	4606      	mov	r6, r0
 8007716:	460c      	mov	r4, r1
 8007718:	f101 0c14 	add.w	ip, r1, #20
 800771c:	2300      	movs	r3, #0
 800771e:	f8dc 0000 	ldr.w	r0, [ip]
 8007722:	b281      	uxth	r1, r0
 8007724:	fb02 7101 	mla	r1, r2, r1, r7
 8007728:	0c0f      	lsrs	r7, r1, #16
 800772a:	0c00      	lsrs	r0, r0, #16
 800772c:	fb02 7000 	mla	r0, r2, r0, r7
 8007730:	b289      	uxth	r1, r1
 8007732:	3301      	adds	r3, #1
 8007734:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007738:	429d      	cmp	r5, r3
 800773a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800773e:	f84c 1b04 	str.w	r1, [ip], #4
 8007742:	dcec      	bgt.n	800771e <__multadd+0x12>
 8007744:	b1d7      	cbz	r7, 800777c <__multadd+0x70>
 8007746:	68a3      	ldr	r3, [r4, #8]
 8007748:	42ab      	cmp	r3, r5
 800774a:	dc12      	bgt.n	8007772 <__multadd+0x66>
 800774c:	6861      	ldr	r1, [r4, #4]
 800774e:	4630      	mov	r0, r6
 8007750:	3101      	adds	r1, #1
 8007752:	f7ff ff90 	bl	8007676 <_Balloc>
 8007756:	6922      	ldr	r2, [r4, #16]
 8007758:	3202      	adds	r2, #2
 800775a:	f104 010c 	add.w	r1, r4, #12
 800775e:	4680      	mov	r8, r0
 8007760:	0092      	lsls	r2, r2, #2
 8007762:	300c      	adds	r0, #12
 8007764:	f7ff ff7c 	bl	8007660 <memcpy>
 8007768:	4621      	mov	r1, r4
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff ffb7 	bl	80076de <_Bfree>
 8007770:	4644      	mov	r4, r8
 8007772:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007776:	3501      	adds	r5, #1
 8007778:	615f      	str	r7, [r3, #20]
 800777a:	6125      	str	r5, [r4, #16]
 800777c:	4620      	mov	r0, r4
 800777e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007782 <__s2b>:
 8007782:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007786:	460c      	mov	r4, r1
 8007788:	4615      	mov	r5, r2
 800778a:	461f      	mov	r7, r3
 800778c:	2209      	movs	r2, #9
 800778e:	3308      	adds	r3, #8
 8007790:	4606      	mov	r6, r0
 8007792:	fb93 f3f2 	sdiv	r3, r3, r2
 8007796:	2100      	movs	r1, #0
 8007798:	2201      	movs	r2, #1
 800779a:	429a      	cmp	r2, r3
 800779c:	db20      	blt.n	80077e0 <__s2b+0x5e>
 800779e:	4630      	mov	r0, r6
 80077a0:	f7ff ff69 	bl	8007676 <_Balloc>
 80077a4:	9b08      	ldr	r3, [sp, #32]
 80077a6:	6143      	str	r3, [r0, #20]
 80077a8:	2d09      	cmp	r5, #9
 80077aa:	f04f 0301 	mov.w	r3, #1
 80077ae:	6103      	str	r3, [r0, #16]
 80077b0:	dd19      	ble.n	80077e6 <__s2b+0x64>
 80077b2:	f104 0809 	add.w	r8, r4, #9
 80077b6:	46c1      	mov	r9, r8
 80077b8:	442c      	add	r4, r5
 80077ba:	f819 3b01 	ldrb.w	r3, [r9], #1
 80077be:	4601      	mov	r1, r0
 80077c0:	3b30      	subs	r3, #48	; 0x30
 80077c2:	220a      	movs	r2, #10
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff ffa1 	bl	800770c <__multadd>
 80077ca:	45a1      	cmp	r9, r4
 80077cc:	d1f5      	bne.n	80077ba <__s2b+0x38>
 80077ce:	eb08 0405 	add.w	r4, r8, r5
 80077d2:	3c08      	subs	r4, #8
 80077d4:	1b2d      	subs	r5, r5, r4
 80077d6:	1963      	adds	r3, r4, r5
 80077d8:	42bb      	cmp	r3, r7
 80077da:	db07      	blt.n	80077ec <__s2b+0x6a>
 80077dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e0:	0052      	lsls	r2, r2, #1
 80077e2:	3101      	adds	r1, #1
 80077e4:	e7d9      	b.n	800779a <__s2b+0x18>
 80077e6:	340a      	adds	r4, #10
 80077e8:	2509      	movs	r5, #9
 80077ea:	e7f3      	b.n	80077d4 <__s2b+0x52>
 80077ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80077f0:	4601      	mov	r1, r0
 80077f2:	3b30      	subs	r3, #48	; 0x30
 80077f4:	220a      	movs	r2, #10
 80077f6:	4630      	mov	r0, r6
 80077f8:	f7ff ff88 	bl	800770c <__multadd>
 80077fc:	e7eb      	b.n	80077d6 <__s2b+0x54>

080077fe <__hi0bits>:
 80077fe:	0c02      	lsrs	r2, r0, #16
 8007800:	0412      	lsls	r2, r2, #16
 8007802:	4603      	mov	r3, r0
 8007804:	b9b2      	cbnz	r2, 8007834 <__hi0bits+0x36>
 8007806:	0403      	lsls	r3, r0, #16
 8007808:	2010      	movs	r0, #16
 800780a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800780e:	bf04      	itt	eq
 8007810:	021b      	lsleq	r3, r3, #8
 8007812:	3008      	addeq	r0, #8
 8007814:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007818:	bf04      	itt	eq
 800781a:	011b      	lsleq	r3, r3, #4
 800781c:	3004      	addeq	r0, #4
 800781e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007822:	bf04      	itt	eq
 8007824:	009b      	lsleq	r3, r3, #2
 8007826:	3002      	addeq	r0, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	db06      	blt.n	800783a <__hi0bits+0x3c>
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	d503      	bpl.n	8007838 <__hi0bits+0x3a>
 8007830:	3001      	adds	r0, #1
 8007832:	4770      	bx	lr
 8007834:	2000      	movs	r0, #0
 8007836:	e7e8      	b.n	800780a <__hi0bits+0xc>
 8007838:	2020      	movs	r0, #32
 800783a:	4770      	bx	lr

0800783c <__lo0bits>:
 800783c:	6803      	ldr	r3, [r0, #0]
 800783e:	f013 0207 	ands.w	r2, r3, #7
 8007842:	4601      	mov	r1, r0
 8007844:	d00b      	beq.n	800785e <__lo0bits+0x22>
 8007846:	07da      	lsls	r2, r3, #31
 8007848:	d423      	bmi.n	8007892 <__lo0bits+0x56>
 800784a:	0798      	lsls	r0, r3, #30
 800784c:	bf49      	itett	mi
 800784e:	085b      	lsrmi	r3, r3, #1
 8007850:	089b      	lsrpl	r3, r3, #2
 8007852:	2001      	movmi	r0, #1
 8007854:	600b      	strmi	r3, [r1, #0]
 8007856:	bf5c      	itt	pl
 8007858:	600b      	strpl	r3, [r1, #0]
 800785a:	2002      	movpl	r0, #2
 800785c:	4770      	bx	lr
 800785e:	b298      	uxth	r0, r3
 8007860:	b9a8      	cbnz	r0, 800788e <__lo0bits+0x52>
 8007862:	0c1b      	lsrs	r3, r3, #16
 8007864:	2010      	movs	r0, #16
 8007866:	f013 0fff 	tst.w	r3, #255	; 0xff
 800786a:	bf04      	itt	eq
 800786c:	0a1b      	lsreq	r3, r3, #8
 800786e:	3008      	addeq	r0, #8
 8007870:	071a      	lsls	r2, r3, #28
 8007872:	bf04      	itt	eq
 8007874:	091b      	lsreq	r3, r3, #4
 8007876:	3004      	addeq	r0, #4
 8007878:	079a      	lsls	r2, r3, #30
 800787a:	bf04      	itt	eq
 800787c:	089b      	lsreq	r3, r3, #2
 800787e:	3002      	addeq	r0, #2
 8007880:	07da      	lsls	r2, r3, #31
 8007882:	d402      	bmi.n	800788a <__lo0bits+0x4e>
 8007884:	085b      	lsrs	r3, r3, #1
 8007886:	d006      	beq.n	8007896 <__lo0bits+0x5a>
 8007888:	3001      	adds	r0, #1
 800788a:	600b      	str	r3, [r1, #0]
 800788c:	4770      	bx	lr
 800788e:	4610      	mov	r0, r2
 8007890:	e7e9      	b.n	8007866 <__lo0bits+0x2a>
 8007892:	2000      	movs	r0, #0
 8007894:	4770      	bx	lr
 8007896:	2020      	movs	r0, #32
 8007898:	4770      	bx	lr

0800789a <__i2b>:
 800789a:	b510      	push	{r4, lr}
 800789c:	460c      	mov	r4, r1
 800789e:	2101      	movs	r1, #1
 80078a0:	f7ff fee9 	bl	8007676 <_Balloc>
 80078a4:	2201      	movs	r2, #1
 80078a6:	6144      	str	r4, [r0, #20]
 80078a8:	6102      	str	r2, [r0, #16]
 80078aa:	bd10      	pop	{r4, pc}

080078ac <__multiply>:
 80078ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	4614      	mov	r4, r2
 80078b2:	690a      	ldr	r2, [r1, #16]
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	bfb8      	it	lt
 80078ba:	460b      	movlt	r3, r1
 80078bc:	4688      	mov	r8, r1
 80078be:	bfbc      	itt	lt
 80078c0:	46a0      	movlt	r8, r4
 80078c2:	461c      	movlt	r4, r3
 80078c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80078c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80078cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078d4:	eb07 0609 	add.w	r6, r7, r9
 80078d8:	42b3      	cmp	r3, r6
 80078da:	bfb8      	it	lt
 80078dc:	3101      	addlt	r1, #1
 80078de:	f7ff feca 	bl	8007676 <_Balloc>
 80078e2:	f100 0514 	add.w	r5, r0, #20
 80078e6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80078ea:	462b      	mov	r3, r5
 80078ec:	2200      	movs	r2, #0
 80078ee:	4573      	cmp	r3, lr
 80078f0:	d316      	bcc.n	8007920 <__multiply+0x74>
 80078f2:	f104 0214 	add.w	r2, r4, #20
 80078f6:	f108 0114 	add.w	r1, r8, #20
 80078fa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80078fe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	9b00      	ldr	r3, [sp, #0]
 8007906:	9201      	str	r2, [sp, #4]
 8007908:	4293      	cmp	r3, r2
 800790a:	d80c      	bhi.n	8007926 <__multiply+0x7a>
 800790c:	2e00      	cmp	r6, #0
 800790e:	dd03      	ble.n	8007918 <__multiply+0x6c>
 8007910:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007914:	2b00      	cmp	r3, #0
 8007916:	d05d      	beq.n	80079d4 <__multiply+0x128>
 8007918:	6106      	str	r6, [r0, #16]
 800791a:	b003      	add	sp, #12
 800791c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007920:	f843 2b04 	str.w	r2, [r3], #4
 8007924:	e7e3      	b.n	80078ee <__multiply+0x42>
 8007926:	f8b2 b000 	ldrh.w	fp, [r2]
 800792a:	f1bb 0f00 	cmp.w	fp, #0
 800792e:	d023      	beq.n	8007978 <__multiply+0xcc>
 8007930:	4689      	mov	r9, r1
 8007932:	46ac      	mov	ip, r5
 8007934:	f04f 0800 	mov.w	r8, #0
 8007938:	f859 4b04 	ldr.w	r4, [r9], #4
 800793c:	f8dc a000 	ldr.w	sl, [ip]
 8007940:	b2a3      	uxth	r3, r4
 8007942:	fa1f fa8a 	uxth.w	sl, sl
 8007946:	fb0b a303 	mla	r3, fp, r3, sl
 800794a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800794e:	f8dc 4000 	ldr.w	r4, [ip]
 8007952:	4443      	add	r3, r8
 8007954:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007958:	fb0b 840a 	mla	r4, fp, sl, r8
 800795c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007960:	46e2      	mov	sl, ip
 8007962:	b29b      	uxth	r3, r3
 8007964:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007968:	454f      	cmp	r7, r9
 800796a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800796e:	f84a 3b04 	str.w	r3, [sl], #4
 8007972:	d82b      	bhi.n	80079cc <__multiply+0x120>
 8007974:	f8cc 8004 	str.w	r8, [ip, #4]
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800797e:	3204      	adds	r2, #4
 8007980:	f1ba 0f00 	cmp.w	sl, #0
 8007984:	d020      	beq.n	80079c8 <__multiply+0x11c>
 8007986:	682b      	ldr	r3, [r5, #0]
 8007988:	4689      	mov	r9, r1
 800798a:	46a8      	mov	r8, r5
 800798c:	f04f 0b00 	mov.w	fp, #0
 8007990:	f8b9 c000 	ldrh.w	ip, [r9]
 8007994:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007998:	fb0a 440c 	mla	r4, sl, ip, r4
 800799c:	445c      	add	r4, fp
 800799e:	46c4      	mov	ip, r8
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80079a6:	f84c 3b04 	str.w	r3, [ip], #4
 80079aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80079ae:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80079b2:	0c1b      	lsrs	r3, r3, #16
 80079b4:	fb0a b303 	mla	r3, sl, r3, fp
 80079b8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80079bc:	454f      	cmp	r7, r9
 80079be:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80079c2:	d805      	bhi.n	80079d0 <__multiply+0x124>
 80079c4:	f8c8 3004 	str.w	r3, [r8, #4]
 80079c8:	3504      	adds	r5, #4
 80079ca:	e79b      	b.n	8007904 <__multiply+0x58>
 80079cc:	46d4      	mov	ip, sl
 80079ce:	e7b3      	b.n	8007938 <__multiply+0x8c>
 80079d0:	46e0      	mov	r8, ip
 80079d2:	e7dd      	b.n	8007990 <__multiply+0xe4>
 80079d4:	3e01      	subs	r6, #1
 80079d6:	e799      	b.n	800790c <__multiply+0x60>

080079d8 <__pow5mult>:
 80079d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	4615      	mov	r5, r2
 80079de:	f012 0203 	ands.w	r2, r2, #3
 80079e2:	4606      	mov	r6, r0
 80079e4:	460f      	mov	r7, r1
 80079e6:	d007      	beq.n	80079f8 <__pow5mult+0x20>
 80079e8:	3a01      	subs	r2, #1
 80079ea:	4c21      	ldr	r4, [pc, #132]	; (8007a70 <__pow5mult+0x98>)
 80079ec:	2300      	movs	r3, #0
 80079ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079f2:	f7ff fe8b 	bl	800770c <__multadd>
 80079f6:	4607      	mov	r7, r0
 80079f8:	10ad      	asrs	r5, r5, #2
 80079fa:	d035      	beq.n	8007a68 <__pow5mult+0x90>
 80079fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079fe:	b93c      	cbnz	r4, 8007a10 <__pow5mult+0x38>
 8007a00:	2010      	movs	r0, #16
 8007a02:	f7ff fe13 	bl	800762c <malloc>
 8007a06:	6270      	str	r0, [r6, #36]	; 0x24
 8007a08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a0c:	6004      	str	r4, [r0, #0]
 8007a0e:	60c4      	str	r4, [r0, #12]
 8007a10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a18:	b94c      	cbnz	r4, 8007a2e <__pow5mult+0x56>
 8007a1a:	f240 2171 	movw	r1, #625	; 0x271
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7ff ff3b 	bl	800789a <__i2b>
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	6003      	str	r3, [r0, #0]
 8007a2e:	f04f 0800 	mov.w	r8, #0
 8007a32:	07eb      	lsls	r3, r5, #31
 8007a34:	d50a      	bpl.n	8007a4c <__pow5mult+0x74>
 8007a36:	4639      	mov	r1, r7
 8007a38:	4622      	mov	r2, r4
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7ff ff36 	bl	80078ac <__multiply>
 8007a40:	4639      	mov	r1, r7
 8007a42:	4681      	mov	r9, r0
 8007a44:	4630      	mov	r0, r6
 8007a46:	f7ff fe4a 	bl	80076de <_Bfree>
 8007a4a:	464f      	mov	r7, r9
 8007a4c:	106d      	asrs	r5, r5, #1
 8007a4e:	d00b      	beq.n	8007a68 <__pow5mult+0x90>
 8007a50:	6820      	ldr	r0, [r4, #0]
 8007a52:	b938      	cbnz	r0, 8007a64 <__pow5mult+0x8c>
 8007a54:	4622      	mov	r2, r4
 8007a56:	4621      	mov	r1, r4
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f7ff ff27 	bl	80078ac <__multiply>
 8007a5e:	6020      	str	r0, [r4, #0]
 8007a60:	f8c0 8000 	str.w	r8, [r0]
 8007a64:	4604      	mov	r4, r0
 8007a66:	e7e4      	b.n	8007a32 <__pow5mult+0x5a>
 8007a68:	4638      	mov	r0, r7
 8007a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6e:	bf00      	nop
 8007a70:	08008540 	.word	0x08008540

08007a74 <__lshift>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	460c      	mov	r4, r1
 8007a7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	6849      	ldr	r1, [r1, #4]
 8007a82:	eb0a 0903 	add.w	r9, sl, r3
 8007a86:	68a3      	ldr	r3, [r4, #8]
 8007a88:	4607      	mov	r7, r0
 8007a8a:	4616      	mov	r6, r2
 8007a8c:	f109 0501 	add.w	r5, r9, #1
 8007a90:	42ab      	cmp	r3, r5
 8007a92:	db32      	blt.n	8007afa <__lshift+0x86>
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff fdee 	bl	8007676 <_Balloc>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	f100 0114 	add.w	r1, r0, #20
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	4553      	cmp	r3, sl
 8007aa6:	db2b      	blt.n	8007b00 <__lshift+0x8c>
 8007aa8:	6920      	ldr	r0, [r4, #16]
 8007aaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007aae:	f104 0314 	add.w	r3, r4, #20
 8007ab2:	f016 021f 	ands.w	r2, r6, #31
 8007ab6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007aba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007abe:	d025      	beq.n	8007b0c <__lshift+0x98>
 8007ac0:	f1c2 0e20 	rsb	lr, r2, #32
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	681e      	ldr	r6, [r3, #0]
 8007ac8:	468a      	mov	sl, r1
 8007aca:	4096      	lsls	r6, r2
 8007acc:	4330      	orrs	r0, r6
 8007ace:	f84a 0b04 	str.w	r0, [sl], #4
 8007ad2:	f853 0b04 	ldr.w	r0, [r3], #4
 8007ad6:	459c      	cmp	ip, r3
 8007ad8:	fa20 f00e 	lsr.w	r0, r0, lr
 8007adc:	d814      	bhi.n	8007b08 <__lshift+0x94>
 8007ade:	6048      	str	r0, [r1, #4]
 8007ae0:	b108      	cbz	r0, 8007ae6 <__lshift+0x72>
 8007ae2:	f109 0502 	add.w	r5, r9, #2
 8007ae6:	3d01      	subs	r5, #1
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f8c8 5010 	str.w	r5, [r8, #16]
 8007aee:	4621      	mov	r1, r4
 8007af0:	f7ff fdf5 	bl	80076de <_Bfree>
 8007af4:	4640      	mov	r0, r8
 8007af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afa:	3101      	adds	r1, #1
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	e7c7      	b.n	8007a90 <__lshift+0x1c>
 8007b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007b04:	3301      	adds	r3, #1
 8007b06:	e7cd      	b.n	8007aa4 <__lshift+0x30>
 8007b08:	4651      	mov	r1, sl
 8007b0a:	e7dc      	b.n	8007ac6 <__lshift+0x52>
 8007b0c:	3904      	subs	r1, #4
 8007b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b12:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b16:	459c      	cmp	ip, r3
 8007b18:	d8f9      	bhi.n	8007b0e <__lshift+0x9a>
 8007b1a:	e7e4      	b.n	8007ae6 <__lshift+0x72>

08007b1c <__mcmp>:
 8007b1c:	6903      	ldr	r3, [r0, #16]
 8007b1e:	690a      	ldr	r2, [r1, #16]
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	b530      	push	{r4, r5, lr}
 8007b24:	d10c      	bne.n	8007b40 <__mcmp+0x24>
 8007b26:	0092      	lsls	r2, r2, #2
 8007b28:	3014      	adds	r0, #20
 8007b2a:	3114      	adds	r1, #20
 8007b2c:	1884      	adds	r4, r0, r2
 8007b2e:	4411      	add	r1, r2
 8007b30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b38:	4295      	cmp	r5, r2
 8007b3a:	d003      	beq.n	8007b44 <__mcmp+0x28>
 8007b3c:	d305      	bcc.n	8007b4a <__mcmp+0x2e>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4618      	mov	r0, r3
 8007b42:	bd30      	pop	{r4, r5, pc}
 8007b44:	42a0      	cmp	r0, r4
 8007b46:	d3f3      	bcc.n	8007b30 <__mcmp+0x14>
 8007b48:	e7fa      	b.n	8007b40 <__mcmp+0x24>
 8007b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4e:	e7f7      	b.n	8007b40 <__mcmp+0x24>

08007b50 <__mdiff>:
 8007b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b54:	460d      	mov	r5, r1
 8007b56:	4607      	mov	r7, r0
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	f7ff ffdd 	bl	8007b1c <__mcmp>
 8007b62:	1e06      	subs	r6, r0, #0
 8007b64:	d108      	bne.n	8007b78 <__mdiff+0x28>
 8007b66:	4631      	mov	r1, r6
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7ff fd84 	bl	8007676 <_Balloc>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b78:	bfa4      	itt	ge
 8007b7a:	4623      	movge	r3, r4
 8007b7c:	462c      	movge	r4, r5
 8007b7e:	4638      	mov	r0, r7
 8007b80:	6861      	ldr	r1, [r4, #4]
 8007b82:	bfa6      	itte	ge
 8007b84:	461d      	movge	r5, r3
 8007b86:	2600      	movge	r6, #0
 8007b88:	2601      	movlt	r6, #1
 8007b8a:	f7ff fd74 	bl	8007676 <_Balloc>
 8007b8e:	692b      	ldr	r3, [r5, #16]
 8007b90:	60c6      	str	r6, [r0, #12]
 8007b92:	6926      	ldr	r6, [r4, #16]
 8007b94:	f105 0914 	add.w	r9, r5, #20
 8007b98:	f104 0214 	add.w	r2, r4, #20
 8007b9c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007ba0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007ba4:	f100 0514 	add.w	r5, r0, #20
 8007ba8:	f04f 0e00 	mov.w	lr, #0
 8007bac:	f852 ab04 	ldr.w	sl, [r2], #4
 8007bb0:	f859 4b04 	ldr.w	r4, [r9], #4
 8007bb4:	fa1e f18a 	uxtah	r1, lr, sl
 8007bb8:	b2a3      	uxth	r3, r4
 8007bba:	1ac9      	subs	r1, r1, r3
 8007bbc:	0c23      	lsrs	r3, r4, #16
 8007bbe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007bc2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007bc6:	b289      	uxth	r1, r1
 8007bc8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007bcc:	45c8      	cmp	r8, r9
 8007bce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007bd2:	4694      	mov	ip, r2
 8007bd4:	f845 3b04 	str.w	r3, [r5], #4
 8007bd8:	d8e8      	bhi.n	8007bac <__mdiff+0x5c>
 8007bda:	45bc      	cmp	ip, r7
 8007bdc:	d304      	bcc.n	8007be8 <__mdiff+0x98>
 8007bde:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007be2:	b183      	cbz	r3, 8007c06 <__mdiff+0xb6>
 8007be4:	6106      	str	r6, [r0, #16]
 8007be6:	e7c5      	b.n	8007b74 <__mdiff+0x24>
 8007be8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007bec:	fa1e f381 	uxtah	r3, lr, r1
 8007bf0:	141a      	asrs	r2, r3, #16
 8007bf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bfc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007c00:	f845 3b04 	str.w	r3, [r5], #4
 8007c04:	e7e9      	b.n	8007bda <__mdiff+0x8a>
 8007c06:	3e01      	subs	r6, #1
 8007c08:	e7e9      	b.n	8007bde <__mdiff+0x8e>
	...

08007c0c <__ulp>:
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <__ulp+0x4c>)
 8007c0e:	ee10 2a90 	vmov	r2, s1
 8007c12:	401a      	ands	r2, r3
 8007c14:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dd04      	ble.n	8007c26 <__ulp+0x1a>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	4619      	mov	r1, r3
 8007c20:	ec41 0b10 	vmov	d0, r0, r1
 8007c24:	4770      	bx	lr
 8007c26:	425b      	negs	r3, r3
 8007c28:	151b      	asrs	r3, r3, #20
 8007c2a:	2b13      	cmp	r3, #19
 8007c2c:	f04f 0000 	mov.w	r0, #0
 8007c30:	f04f 0100 	mov.w	r1, #0
 8007c34:	dc04      	bgt.n	8007c40 <__ulp+0x34>
 8007c36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c3a:	fa42 f103 	asr.w	r1, r2, r3
 8007c3e:	e7ef      	b.n	8007c20 <__ulp+0x14>
 8007c40:	3b14      	subs	r3, #20
 8007c42:	2b1e      	cmp	r3, #30
 8007c44:	f04f 0201 	mov.w	r2, #1
 8007c48:	bfda      	itte	le
 8007c4a:	f1c3 031f 	rsble	r3, r3, #31
 8007c4e:	fa02 f303 	lslle.w	r3, r2, r3
 8007c52:	4613      	movgt	r3, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	e7e3      	b.n	8007c20 <__ulp+0x14>
 8007c58:	7ff00000 	.word	0x7ff00000

08007c5c <__b2d>:
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	6905      	ldr	r5, [r0, #16]
 8007c60:	f100 0714 	add.w	r7, r0, #20
 8007c64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007c68:	1f2e      	subs	r6, r5, #4
 8007c6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f7ff fdc5 	bl	80077fe <__hi0bits>
 8007c74:	f1c0 0320 	rsb	r3, r0, #32
 8007c78:	280a      	cmp	r0, #10
 8007c7a:	600b      	str	r3, [r1, #0]
 8007c7c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007cf4 <__b2d+0x98>
 8007c80:	dc14      	bgt.n	8007cac <__b2d+0x50>
 8007c82:	f1c0 0e0b 	rsb	lr, r0, #11
 8007c86:	fa24 f10e 	lsr.w	r1, r4, lr
 8007c8a:	42b7      	cmp	r7, r6
 8007c8c:	ea41 030c 	orr.w	r3, r1, ip
 8007c90:	bf34      	ite	cc
 8007c92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c96:	2100      	movcs	r1, #0
 8007c98:	3015      	adds	r0, #21
 8007c9a:	fa04 f000 	lsl.w	r0, r4, r0
 8007c9e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007ca2:	ea40 0201 	orr.w	r2, r0, r1
 8007ca6:	ec43 2b10 	vmov	d0, r2, r3
 8007caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cac:	42b7      	cmp	r7, r6
 8007cae:	bf3a      	itte	cc
 8007cb0:	f1a5 0608 	subcc.w	r6, r5, #8
 8007cb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007cb8:	2100      	movcs	r1, #0
 8007cba:	380b      	subs	r0, #11
 8007cbc:	d015      	beq.n	8007cea <__b2d+0x8e>
 8007cbe:	4084      	lsls	r4, r0
 8007cc0:	f1c0 0520 	rsb	r5, r0, #32
 8007cc4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007cc8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007ccc:	42be      	cmp	r6, r7
 8007cce:	fa21 fc05 	lsr.w	ip, r1, r5
 8007cd2:	ea44 030c 	orr.w	r3, r4, ip
 8007cd6:	bf8c      	ite	hi
 8007cd8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007cdc:	2400      	movls	r4, #0
 8007cde:	fa01 f000 	lsl.w	r0, r1, r0
 8007ce2:	40ec      	lsrs	r4, r5
 8007ce4:	ea40 0204 	orr.w	r2, r0, r4
 8007ce8:	e7dd      	b.n	8007ca6 <__b2d+0x4a>
 8007cea:	ea44 030c 	orr.w	r3, r4, ip
 8007cee:	460a      	mov	r2, r1
 8007cf0:	e7d9      	b.n	8007ca6 <__b2d+0x4a>
 8007cf2:	bf00      	nop
 8007cf4:	3ff00000 	.word	0x3ff00000

08007cf8 <__d2b>:
 8007cf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	460e      	mov	r6, r1
 8007cfe:	2101      	movs	r1, #1
 8007d00:	ec59 8b10 	vmov	r8, r9, d0
 8007d04:	4615      	mov	r5, r2
 8007d06:	f7ff fcb6 	bl	8007676 <_Balloc>
 8007d0a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007d0e:	4607      	mov	r7, r0
 8007d10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d14:	bb34      	cbnz	r4, 8007d64 <__d2b+0x6c>
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	f1b8 0300 	subs.w	r3, r8, #0
 8007d1c:	d027      	beq.n	8007d6e <__d2b+0x76>
 8007d1e:	a802      	add	r0, sp, #8
 8007d20:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007d24:	f7ff fd8a 	bl	800783c <__lo0bits>
 8007d28:	9900      	ldr	r1, [sp, #0]
 8007d2a:	b1f0      	cbz	r0, 8007d6a <__d2b+0x72>
 8007d2c:	9a01      	ldr	r2, [sp, #4]
 8007d2e:	f1c0 0320 	rsb	r3, r0, #32
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	430b      	orrs	r3, r1
 8007d38:	40c2      	lsrs	r2, r0
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	9201      	str	r2, [sp, #4]
 8007d3e:	9b01      	ldr	r3, [sp, #4]
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	bf14      	ite	ne
 8007d46:	2102      	movne	r1, #2
 8007d48:	2101      	moveq	r1, #1
 8007d4a:	6139      	str	r1, [r7, #16]
 8007d4c:	b1c4      	cbz	r4, 8007d80 <__d2b+0x88>
 8007d4e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007d52:	4404      	add	r4, r0
 8007d54:	6034      	str	r4, [r6, #0]
 8007d56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d5a:	6028      	str	r0, [r5, #0]
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	b003      	add	sp, #12
 8007d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d68:	e7d5      	b.n	8007d16 <__d2b+0x1e>
 8007d6a:	6179      	str	r1, [r7, #20]
 8007d6c:	e7e7      	b.n	8007d3e <__d2b+0x46>
 8007d6e:	a801      	add	r0, sp, #4
 8007d70:	f7ff fd64 	bl	800783c <__lo0bits>
 8007d74:	9b01      	ldr	r3, [sp, #4]
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	2101      	movs	r1, #1
 8007d7a:	6139      	str	r1, [r7, #16]
 8007d7c:	3020      	adds	r0, #32
 8007d7e:	e7e5      	b.n	8007d4c <__d2b+0x54>
 8007d80:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007d84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d88:	6030      	str	r0, [r6, #0]
 8007d8a:	6918      	ldr	r0, [r3, #16]
 8007d8c:	f7ff fd37 	bl	80077fe <__hi0bits>
 8007d90:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007d94:	e7e1      	b.n	8007d5a <__d2b+0x62>

08007d96 <__ratio>:
 8007d96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	4688      	mov	r8, r1
 8007d9c:	4669      	mov	r1, sp
 8007d9e:	4681      	mov	r9, r0
 8007da0:	f7ff ff5c 	bl	8007c5c <__b2d>
 8007da4:	a901      	add	r1, sp, #4
 8007da6:	4640      	mov	r0, r8
 8007da8:	ec57 6b10 	vmov	r6, r7, d0
 8007dac:	f7ff ff56 	bl	8007c5c <__b2d>
 8007db0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007db4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007db8:	eba3 0c02 	sub.w	ip, r3, r2
 8007dbc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007dc0:	1a9b      	subs	r3, r3, r2
 8007dc2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007dc6:	ec5b ab10 	vmov	sl, fp, d0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	bfce      	itee	gt
 8007dce:	463a      	movgt	r2, r7
 8007dd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007dd4:	465a      	movle	r2, fp
 8007dd6:	4659      	mov	r1, fp
 8007dd8:	463d      	mov	r5, r7
 8007dda:	bfd4      	ite	le
 8007ddc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007de0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007de4:	4630      	mov	r0, r6
 8007de6:	ee10 2a10 	vmov	r2, s0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4629      	mov	r1, r5
 8007dee:	f7f8 fd35 	bl	800085c <__aeabi_ddiv>
 8007df2:	ec41 0b10 	vmov	d0, r0, r1
 8007df6:	b003      	add	sp, #12
 8007df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dfc <__copybits>:
 8007dfc:	3901      	subs	r1, #1
 8007dfe:	b510      	push	{r4, lr}
 8007e00:	1149      	asrs	r1, r1, #5
 8007e02:	6914      	ldr	r4, [r2, #16]
 8007e04:	3101      	adds	r1, #1
 8007e06:	f102 0314 	add.w	r3, r2, #20
 8007e0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	4602      	mov	r2, r0
 8007e16:	d303      	bcc.n	8007e20 <__copybits+0x24>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	428a      	cmp	r2, r1
 8007e1c:	d305      	bcc.n	8007e2a <__copybits+0x2e>
 8007e1e:	bd10      	pop	{r4, pc}
 8007e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e24:	f840 2b04 	str.w	r2, [r0], #4
 8007e28:	e7f3      	b.n	8007e12 <__copybits+0x16>
 8007e2a:	f842 3b04 	str.w	r3, [r2], #4
 8007e2e:	e7f4      	b.n	8007e1a <__copybits+0x1e>

08007e30 <__any_on>:
 8007e30:	f100 0214 	add.w	r2, r0, #20
 8007e34:	6900      	ldr	r0, [r0, #16]
 8007e36:	114b      	asrs	r3, r1, #5
 8007e38:	4298      	cmp	r0, r3
 8007e3a:	b510      	push	{r4, lr}
 8007e3c:	db11      	blt.n	8007e62 <__any_on+0x32>
 8007e3e:	dd0a      	ble.n	8007e56 <__any_on+0x26>
 8007e40:	f011 011f 	ands.w	r1, r1, #31
 8007e44:	d007      	beq.n	8007e56 <__any_on+0x26>
 8007e46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e4a:	fa24 f001 	lsr.w	r0, r4, r1
 8007e4e:	fa00 f101 	lsl.w	r1, r0, r1
 8007e52:	428c      	cmp	r4, r1
 8007e54:	d10b      	bne.n	8007e6e <__any_on+0x3e>
 8007e56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d803      	bhi.n	8007e66 <__any_on+0x36>
 8007e5e:	2000      	movs	r0, #0
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	4603      	mov	r3, r0
 8007e64:	e7f7      	b.n	8007e56 <__any_on+0x26>
 8007e66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e6a:	2900      	cmp	r1, #0
 8007e6c:	d0f5      	beq.n	8007e5a <__any_on+0x2a>
 8007e6e:	2001      	movs	r0, #1
 8007e70:	e7f6      	b.n	8007e60 <__any_on+0x30>

08007e72 <_calloc_r>:
 8007e72:	b538      	push	{r3, r4, r5, lr}
 8007e74:	fb02 f401 	mul.w	r4, r2, r1
 8007e78:	4621      	mov	r1, r4
 8007e7a:	f000 f857 	bl	8007f2c <_malloc_r>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	b118      	cbz	r0, 8007e8a <_calloc_r+0x18>
 8007e82:	4622      	mov	r2, r4
 8007e84:	2100      	movs	r1, #0
 8007e86:	f7fc fd23 	bl	80048d0 <memset>
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007e90 <_free_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4605      	mov	r5, r0
 8007e94:	2900      	cmp	r1, #0
 8007e96:	d045      	beq.n	8007f24 <_free_r+0x94>
 8007e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e9c:	1f0c      	subs	r4, r1, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bfb8      	it	lt
 8007ea2:	18e4      	addlt	r4, r4, r3
 8007ea4:	f000 fa36 	bl	8008314 <__malloc_lock>
 8007ea8:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <_free_r+0x98>)
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	4610      	mov	r0, r2
 8007eae:	b933      	cbnz	r3, 8007ebe <_free_r+0x2e>
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6014      	str	r4, [r2, #0]
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eba:	f000 ba2c 	b.w	8008316 <__malloc_unlock>
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	d90c      	bls.n	8007edc <_free_r+0x4c>
 8007ec2:	6821      	ldr	r1, [r4, #0]
 8007ec4:	1862      	adds	r2, r4, r1
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	bf04      	itt	eq
 8007eca:	681a      	ldreq	r2, [r3, #0]
 8007ecc:	685b      	ldreq	r3, [r3, #4]
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	bf04      	itt	eq
 8007ed2:	1852      	addeq	r2, r2, r1
 8007ed4:	6022      	streq	r2, [r4, #0]
 8007ed6:	6004      	str	r4, [r0, #0]
 8007ed8:	e7ec      	b.n	8007eb4 <_free_r+0x24>
 8007eda:	4613      	mov	r3, r2
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	b10a      	cbz	r2, 8007ee4 <_free_r+0x54>
 8007ee0:	42a2      	cmp	r2, r4
 8007ee2:	d9fa      	bls.n	8007eda <_free_r+0x4a>
 8007ee4:	6819      	ldr	r1, [r3, #0]
 8007ee6:	1858      	adds	r0, r3, r1
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d10b      	bne.n	8007f04 <_free_r+0x74>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	4401      	add	r1, r0
 8007ef0:	1858      	adds	r0, r3, r1
 8007ef2:	4282      	cmp	r2, r0
 8007ef4:	6019      	str	r1, [r3, #0]
 8007ef6:	d1dd      	bne.n	8007eb4 <_free_r+0x24>
 8007ef8:	6810      	ldr	r0, [r2, #0]
 8007efa:	6852      	ldr	r2, [r2, #4]
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	4401      	add	r1, r0
 8007f00:	6019      	str	r1, [r3, #0]
 8007f02:	e7d7      	b.n	8007eb4 <_free_r+0x24>
 8007f04:	d902      	bls.n	8007f0c <_free_r+0x7c>
 8007f06:	230c      	movs	r3, #12
 8007f08:	602b      	str	r3, [r5, #0]
 8007f0a:	e7d3      	b.n	8007eb4 <_free_r+0x24>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	1821      	adds	r1, r4, r0
 8007f10:	428a      	cmp	r2, r1
 8007f12:	bf04      	itt	eq
 8007f14:	6811      	ldreq	r1, [r2, #0]
 8007f16:	6852      	ldreq	r2, [r2, #4]
 8007f18:	6062      	str	r2, [r4, #4]
 8007f1a:	bf04      	itt	eq
 8007f1c:	1809      	addeq	r1, r1, r0
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	605c      	str	r4, [r3, #4]
 8007f22:	e7c7      	b.n	8007eb4 <_free_r+0x24>
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	200001fc 	.word	0x200001fc

08007f2c <_malloc_r>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	1ccd      	adds	r5, r1, #3
 8007f30:	f025 0503 	bic.w	r5, r5, #3
 8007f34:	3508      	adds	r5, #8
 8007f36:	2d0c      	cmp	r5, #12
 8007f38:	bf38      	it	cc
 8007f3a:	250c      	movcc	r5, #12
 8007f3c:	2d00      	cmp	r5, #0
 8007f3e:	4606      	mov	r6, r0
 8007f40:	db01      	blt.n	8007f46 <_malloc_r+0x1a>
 8007f42:	42a9      	cmp	r1, r5
 8007f44:	d903      	bls.n	8007f4e <_malloc_r+0x22>
 8007f46:	230c      	movs	r3, #12
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	bd70      	pop	{r4, r5, r6, pc}
 8007f4e:	f000 f9e1 	bl	8008314 <__malloc_lock>
 8007f52:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <_malloc_r+0xac>)
 8007f54:	6814      	ldr	r4, [r2, #0]
 8007f56:	4621      	mov	r1, r4
 8007f58:	b991      	cbnz	r1, 8007f80 <_malloc_r+0x54>
 8007f5a:	4c20      	ldr	r4, [pc, #128]	; (8007fdc <_malloc_r+0xb0>)
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	b91b      	cbnz	r3, 8007f68 <_malloc_r+0x3c>
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 f98f 	bl	8008284 <_sbrk_r>
 8007f66:	6020      	str	r0, [r4, #0]
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f000 f98a 	bl	8008284 <_sbrk_r>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d124      	bne.n	8007fbe <_malloc_r+0x92>
 8007f74:	230c      	movs	r3, #12
 8007f76:	6033      	str	r3, [r6, #0]
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f9cc 	bl	8008316 <__malloc_unlock>
 8007f7e:	e7e4      	b.n	8007f4a <_malloc_r+0x1e>
 8007f80:	680b      	ldr	r3, [r1, #0]
 8007f82:	1b5b      	subs	r3, r3, r5
 8007f84:	d418      	bmi.n	8007fb8 <_malloc_r+0x8c>
 8007f86:	2b0b      	cmp	r3, #11
 8007f88:	d90f      	bls.n	8007faa <_malloc_r+0x7e>
 8007f8a:	600b      	str	r3, [r1, #0]
 8007f8c:	50cd      	str	r5, [r1, r3]
 8007f8e:	18cc      	adds	r4, r1, r3
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 f9c0 	bl	8008316 <__malloc_unlock>
 8007f96:	f104 000b 	add.w	r0, r4, #11
 8007f9a:	1d23      	adds	r3, r4, #4
 8007f9c:	f020 0007 	bic.w	r0, r0, #7
 8007fa0:	1ac3      	subs	r3, r0, r3
 8007fa2:	d0d3      	beq.n	8007f4c <_malloc_r+0x20>
 8007fa4:	425a      	negs	r2, r3
 8007fa6:	50e2      	str	r2, [r4, r3]
 8007fa8:	e7d0      	b.n	8007f4c <_malloc_r+0x20>
 8007faa:	428c      	cmp	r4, r1
 8007fac:	684b      	ldr	r3, [r1, #4]
 8007fae:	bf16      	itet	ne
 8007fb0:	6063      	strne	r3, [r4, #4]
 8007fb2:	6013      	streq	r3, [r2, #0]
 8007fb4:	460c      	movne	r4, r1
 8007fb6:	e7eb      	b.n	8007f90 <_malloc_r+0x64>
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6849      	ldr	r1, [r1, #4]
 8007fbc:	e7cc      	b.n	8007f58 <_malloc_r+0x2c>
 8007fbe:	1cc4      	adds	r4, r0, #3
 8007fc0:	f024 0403 	bic.w	r4, r4, #3
 8007fc4:	42a0      	cmp	r0, r4
 8007fc6:	d005      	beq.n	8007fd4 <_malloc_r+0xa8>
 8007fc8:	1a21      	subs	r1, r4, r0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f95a 	bl	8008284 <_sbrk_r>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d0cf      	beq.n	8007f74 <_malloc_r+0x48>
 8007fd4:	6025      	str	r5, [r4, #0]
 8007fd6:	e7db      	b.n	8007f90 <_malloc_r+0x64>
 8007fd8:	200001fc 	.word	0x200001fc
 8007fdc:	20000200 	.word	0x20000200

08007fe0 <__ssputs_r>:
 8007fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe4:	688e      	ldr	r6, [r1, #8]
 8007fe6:	429e      	cmp	r6, r3
 8007fe8:	4682      	mov	sl, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	4690      	mov	r8, r2
 8007fee:	4699      	mov	r9, r3
 8007ff0:	d837      	bhi.n	8008062 <__ssputs_r+0x82>
 8007ff2:	898a      	ldrh	r2, [r1, #12]
 8007ff4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ff8:	d031      	beq.n	800805e <__ssputs_r+0x7e>
 8007ffa:	6825      	ldr	r5, [r4, #0]
 8007ffc:	6909      	ldr	r1, [r1, #16]
 8007ffe:	1a6f      	subs	r7, r5, r1
 8008000:	6965      	ldr	r5, [r4, #20]
 8008002:	2302      	movs	r3, #2
 8008004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008008:	fb95 f5f3 	sdiv	r5, r5, r3
 800800c:	f109 0301 	add.w	r3, r9, #1
 8008010:	443b      	add	r3, r7
 8008012:	429d      	cmp	r5, r3
 8008014:	bf38      	it	cc
 8008016:	461d      	movcc	r5, r3
 8008018:	0553      	lsls	r3, r2, #21
 800801a:	d530      	bpl.n	800807e <__ssputs_r+0x9e>
 800801c:	4629      	mov	r1, r5
 800801e:	f7ff ff85 	bl	8007f2c <_malloc_r>
 8008022:	4606      	mov	r6, r0
 8008024:	b950      	cbnz	r0, 800803c <__ssputs_r+0x5c>
 8008026:	230c      	movs	r3, #12
 8008028:	f8ca 3000 	str.w	r3, [sl]
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803c:	463a      	mov	r2, r7
 800803e:	6921      	ldr	r1, [r4, #16]
 8008040:	f7ff fb0e 	bl	8007660 <memcpy>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800804a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	6126      	str	r6, [r4, #16]
 8008052:	6165      	str	r5, [r4, #20]
 8008054:	443e      	add	r6, r7
 8008056:	1bed      	subs	r5, r5, r7
 8008058:	6026      	str	r6, [r4, #0]
 800805a:	60a5      	str	r5, [r4, #8]
 800805c:	464e      	mov	r6, r9
 800805e:	454e      	cmp	r6, r9
 8008060:	d900      	bls.n	8008064 <__ssputs_r+0x84>
 8008062:	464e      	mov	r6, r9
 8008064:	4632      	mov	r2, r6
 8008066:	4641      	mov	r1, r8
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	f000 f93a 	bl	80082e2 <memmove>
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	1b9b      	subs	r3, r3, r6
 8008072:	60a3      	str	r3, [r4, #8]
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	441e      	add	r6, r3
 8008078:	6026      	str	r6, [r4, #0]
 800807a:	2000      	movs	r0, #0
 800807c:	e7dc      	b.n	8008038 <__ssputs_r+0x58>
 800807e:	462a      	mov	r2, r5
 8008080:	f000 f94a 	bl	8008318 <_realloc_r>
 8008084:	4606      	mov	r6, r0
 8008086:	2800      	cmp	r0, #0
 8008088:	d1e2      	bne.n	8008050 <__ssputs_r+0x70>
 800808a:	6921      	ldr	r1, [r4, #16]
 800808c:	4650      	mov	r0, sl
 800808e:	f7ff feff 	bl	8007e90 <_free_r>
 8008092:	e7c8      	b.n	8008026 <__ssputs_r+0x46>

08008094 <_svfiprintf_r>:
 8008094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008098:	461d      	mov	r5, r3
 800809a:	898b      	ldrh	r3, [r1, #12]
 800809c:	061f      	lsls	r7, r3, #24
 800809e:	b09d      	sub	sp, #116	; 0x74
 80080a0:	4680      	mov	r8, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	4616      	mov	r6, r2
 80080a6:	d50f      	bpl.n	80080c8 <_svfiprintf_r+0x34>
 80080a8:	690b      	ldr	r3, [r1, #16]
 80080aa:	b96b      	cbnz	r3, 80080c8 <_svfiprintf_r+0x34>
 80080ac:	2140      	movs	r1, #64	; 0x40
 80080ae:	f7ff ff3d 	bl	8007f2c <_malloc_r>
 80080b2:	6020      	str	r0, [r4, #0]
 80080b4:	6120      	str	r0, [r4, #16]
 80080b6:	b928      	cbnz	r0, 80080c4 <_svfiprintf_r+0x30>
 80080b8:	230c      	movs	r3, #12
 80080ba:	f8c8 3000 	str.w	r3, [r8]
 80080be:	f04f 30ff 	mov.w	r0, #4294967295
 80080c2:	e0c8      	b.n	8008256 <_svfiprintf_r+0x1c2>
 80080c4:	2340      	movs	r3, #64	; 0x40
 80080c6:	6163      	str	r3, [r4, #20]
 80080c8:	2300      	movs	r3, #0
 80080ca:	9309      	str	r3, [sp, #36]	; 0x24
 80080cc:	2320      	movs	r3, #32
 80080ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080d2:	2330      	movs	r3, #48	; 0x30
 80080d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d8:	9503      	str	r5, [sp, #12]
 80080da:	f04f 0b01 	mov.w	fp, #1
 80080de:	4637      	mov	r7, r6
 80080e0:	463d      	mov	r5, r7
 80080e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80080e6:	b10b      	cbz	r3, 80080ec <_svfiprintf_r+0x58>
 80080e8:	2b25      	cmp	r3, #37	; 0x25
 80080ea:	d13e      	bne.n	800816a <_svfiprintf_r+0xd6>
 80080ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80080f0:	d00b      	beq.n	800810a <_svfiprintf_r+0x76>
 80080f2:	4653      	mov	r3, sl
 80080f4:	4632      	mov	r2, r6
 80080f6:	4621      	mov	r1, r4
 80080f8:	4640      	mov	r0, r8
 80080fa:	f7ff ff71 	bl	8007fe0 <__ssputs_r>
 80080fe:	3001      	adds	r0, #1
 8008100:	f000 80a4 	beq.w	800824c <_svfiprintf_r+0x1b8>
 8008104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008106:	4453      	add	r3, sl
 8008108:	9309      	str	r3, [sp, #36]	; 0x24
 800810a:	783b      	ldrb	r3, [r7, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 809d 	beq.w	800824c <_svfiprintf_r+0x1b8>
 8008112:	2300      	movs	r3, #0
 8008114:	f04f 32ff 	mov.w	r2, #4294967295
 8008118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	9307      	str	r3, [sp, #28]
 8008120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008124:	931a      	str	r3, [sp, #104]	; 0x68
 8008126:	462f      	mov	r7, r5
 8008128:	2205      	movs	r2, #5
 800812a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800812e:	4850      	ldr	r0, [pc, #320]	; (8008270 <_svfiprintf_r+0x1dc>)
 8008130:	f7f8 f85e 	bl	80001f0 <memchr>
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	b9d0      	cbnz	r0, 800816e <_svfiprintf_r+0xda>
 8008138:	06d9      	lsls	r1, r3, #27
 800813a:	bf44      	itt	mi
 800813c:	2220      	movmi	r2, #32
 800813e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008142:	071a      	lsls	r2, r3, #28
 8008144:	bf44      	itt	mi
 8008146:	222b      	movmi	r2, #43	; 0x2b
 8008148:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800814c:	782a      	ldrb	r2, [r5, #0]
 800814e:	2a2a      	cmp	r2, #42	; 0x2a
 8008150:	d015      	beq.n	800817e <_svfiprintf_r+0xea>
 8008152:	9a07      	ldr	r2, [sp, #28]
 8008154:	462f      	mov	r7, r5
 8008156:	2000      	movs	r0, #0
 8008158:	250a      	movs	r5, #10
 800815a:	4639      	mov	r1, r7
 800815c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008160:	3b30      	subs	r3, #48	; 0x30
 8008162:	2b09      	cmp	r3, #9
 8008164:	d94d      	bls.n	8008202 <_svfiprintf_r+0x16e>
 8008166:	b1b8      	cbz	r0, 8008198 <_svfiprintf_r+0x104>
 8008168:	e00f      	b.n	800818a <_svfiprintf_r+0xf6>
 800816a:	462f      	mov	r7, r5
 800816c:	e7b8      	b.n	80080e0 <_svfiprintf_r+0x4c>
 800816e:	4a40      	ldr	r2, [pc, #256]	; (8008270 <_svfiprintf_r+0x1dc>)
 8008170:	1a80      	subs	r0, r0, r2
 8008172:	fa0b f000 	lsl.w	r0, fp, r0
 8008176:	4318      	orrs	r0, r3
 8008178:	9004      	str	r0, [sp, #16]
 800817a:	463d      	mov	r5, r7
 800817c:	e7d3      	b.n	8008126 <_svfiprintf_r+0x92>
 800817e:	9a03      	ldr	r2, [sp, #12]
 8008180:	1d11      	adds	r1, r2, #4
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	9103      	str	r1, [sp, #12]
 8008186:	2a00      	cmp	r2, #0
 8008188:	db01      	blt.n	800818e <_svfiprintf_r+0xfa>
 800818a:	9207      	str	r2, [sp, #28]
 800818c:	e004      	b.n	8008198 <_svfiprintf_r+0x104>
 800818e:	4252      	negs	r2, r2
 8008190:	f043 0302 	orr.w	r3, r3, #2
 8008194:	9207      	str	r2, [sp, #28]
 8008196:	9304      	str	r3, [sp, #16]
 8008198:	783b      	ldrb	r3, [r7, #0]
 800819a:	2b2e      	cmp	r3, #46	; 0x2e
 800819c:	d10c      	bne.n	80081b8 <_svfiprintf_r+0x124>
 800819e:	787b      	ldrb	r3, [r7, #1]
 80081a0:	2b2a      	cmp	r3, #42	; 0x2a
 80081a2:	d133      	bne.n	800820c <_svfiprintf_r+0x178>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	1d1a      	adds	r2, r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	9203      	str	r2, [sp, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bfb8      	it	lt
 80081b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081b4:	3702      	adds	r7, #2
 80081b6:	9305      	str	r3, [sp, #20]
 80081b8:	4d2e      	ldr	r5, [pc, #184]	; (8008274 <_svfiprintf_r+0x1e0>)
 80081ba:	7839      	ldrb	r1, [r7, #0]
 80081bc:	2203      	movs	r2, #3
 80081be:	4628      	mov	r0, r5
 80081c0:	f7f8 f816 	bl	80001f0 <memchr>
 80081c4:	b138      	cbz	r0, 80081d6 <_svfiprintf_r+0x142>
 80081c6:	2340      	movs	r3, #64	; 0x40
 80081c8:	1b40      	subs	r0, r0, r5
 80081ca:	fa03 f000 	lsl.w	r0, r3, r0
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	4303      	orrs	r3, r0
 80081d2:	3701      	adds	r7, #1
 80081d4:	9304      	str	r3, [sp, #16]
 80081d6:	7839      	ldrb	r1, [r7, #0]
 80081d8:	4827      	ldr	r0, [pc, #156]	; (8008278 <_svfiprintf_r+0x1e4>)
 80081da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081de:	2206      	movs	r2, #6
 80081e0:	1c7e      	adds	r6, r7, #1
 80081e2:	f7f8 f805 	bl	80001f0 <memchr>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d038      	beq.n	800825c <_svfiprintf_r+0x1c8>
 80081ea:	4b24      	ldr	r3, [pc, #144]	; (800827c <_svfiprintf_r+0x1e8>)
 80081ec:	bb13      	cbnz	r3, 8008234 <_svfiprintf_r+0x1a0>
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	3307      	adds	r3, #7
 80081f2:	f023 0307 	bic.w	r3, r3, #7
 80081f6:	3308      	adds	r3, #8
 80081f8:	9303      	str	r3, [sp, #12]
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	444b      	add	r3, r9
 80081fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008200:	e76d      	b.n	80080de <_svfiprintf_r+0x4a>
 8008202:	fb05 3202 	mla	r2, r5, r2, r3
 8008206:	2001      	movs	r0, #1
 8008208:	460f      	mov	r7, r1
 800820a:	e7a6      	b.n	800815a <_svfiprintf_r+0xc6>
 800820c:	2300      	movs	r3, #0
 800820e:	3701      	adds	r7, #1
 8008210:	9305      	str	r3, [sp, #20]
 8008212:	4619      	mov	r1, r3
 8008214:	250a      	movs	r5, #10
 8008216:	4638      	mov	r0, r7
 8008218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800821c:	3a30      	subs	r2, #48	; 0x30
 800821e:	2a09      	cmp	r2, #9
 8008220:	d903      	bls.n	800822a <_svfiprintf_r+0x196>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0c8      	beq.n	80081b8 <_svfiprintf_r+0x124>
 8008226:	9105      	str	r1, [sp, #20]
 8008228:	e7c6      	b.n	80081b8 <_svfiprintf_r+0x124>
 800822a:	fb05 2101 	mla	r1, r5, r1, r2
 800822e:	2301      	movs	r3, #1
 8008230:	4607      	mov	r7, r0
 8008232:	e7f0      	b.n	8008216 <_svfiprintf_r+0x182>
 8008234:	ab03      	add	r3, sp, #12
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4622      	mov	r2, r4
 800823a:	4b11      	ldr	r3, [pc, #68]	; (8008280 <_svfiprintf_r+0x1ec>)
 800823c:	a904      	add	r1, sp, #16
 800823e:	4640      	mov	r0, r8
 8008240:	f7fc fbe2 	bl	8004a08 <_printf_float>
 8008244:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008248:	4681      	mov	r9, r0
 800824a:	d1d6      	bne.n	80081fa <_svfiprintf_r+0x166>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	065b      	lsls	r3, r3, #25
 8008250:	f53f af35 	bmi.w	80080be <_svfiprintf_r+0x2a>
 8008254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008256:	b01d      	add	sp, #116	; 0x74
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	4622      	mov	r2, r4
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <_svfiprintf_r+0x1ec>)
 8008264:	a904      	add	r1, sp, #16
 8008266:	4640      	mov	r0, r8
 8008268:	f7fc fe84 	bl	8004f74 <_printf_i>
 800826c:	e7ea      	b.n	8008244 <_svfiprintf_r+0x1b0>
 800826e:	bf00      	nop
 8008270:	0800854c 	.word	0x0800854c
 8008274:	08008552 	.word	0x08008552
 8008278:	08008556 	.word	0x08008556
 800827c:	08004a09 	.word	0x08004a09
 8008280:	08007fe1 	.word	0x08007fe1

08008284 <_sbrk_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4c06      	ldr	r4, [pc, #24]	; (80082a0 <_sbrk_r+0x1c>)
 8008288:	2300      	movs	r3, #0
 800828a:	4605      	mov	r5, r0
 800828c:	4608      	mov	r0, r1
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	f7fc f80e 	bl	80042b0 <_sbrk>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_sbrk_r+0x1a>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	b103      	cbz	r3, 800829e <_sbrk_r+0x1a>
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	200002cc 	.word	0x200002cc

080082a4 <strncmp>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	b16a      	cbz	r2, 80082c4 <strncmp+0x20>
 80082a8:	3901      	subs	r1, #1
 80082aa:	1884      	adds	r4, r0, r2
 80082ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d103      	bne.n	80082c0 <strncmp+0x1c>
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d001      	beq.n	80082c0 <strncmp+0x1c>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1f5      	bne.n	80082ac <strncmp+0x8>
 80082c0:	1a98      	subs	r0, r3, r2
 80082c2:	bd10      	pop	{r4, pc}
 80082c4:	4610      	mov	r0, r2
 80082c6:	e7fc      	b.n	80082c2 <strncmp+0x1e>

080082c8 <__ascii_wctomb>:
 80082c8:	b149      	cbz	r1, 80082de <__ascii_wctomb+0x16>
 80082ca:	2aff      	cmp	r2, #255	; 0xff
 80082cc:	bf85      	ittet	hi
 80082ce:	238a      	movhi	r3, #138	; 0x8a
 80082d0:	6003      	strhi	r3, [r0, #0]
 80082d2:	700a      	strbls	r2, [r1, #0]
 80082d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80082d8:	bf98      	it	ls
 80082da:	2001      	movls	r0, #1
 80082dc:	4770      	bx	lr
 80082de:	4608      	mov	r0, r1
 80082e0:	4770      	bx	lr

080082e2 <memmove>:
 80082e2:	4288      	cmp	r0, r1
 80082e4:	b510      	push	{r4, lr}
 80082e6:	eb01 0302 	add.w	r3, r1, r2
 80082ea:	d807      	bhi.n	80082fc <memmove+0x1a>
 80082ec:	1e42      	subs	r2, r0, #1
 80082ee:	4299      	cmp	r1, r3
 80082f0:	d00a      	beq.n	8008308 <memmove+0x26>
 80082f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80082fa:	e7f8      	b.n	80082ee <memmove+0xc>
 80082fc:	4283      	cmp	r3, r0
 80082fe:	d9f5      	bls.n	80082ec <memmove+0xa>
 8008300:	1881      	adds	r1, r0, r2
 8008302:	1ad2      	subs	r2, r2, r3
 8008304:	42d3      	cmn	r3, r2
 8008306:	d100      	bne.n	800830a <memmove+0x28>
 8008308:	bd10      	pop	{r4, pc}
 800830a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800830e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008312:	e7f7      	b.n	8008304 <memmove+0x22>

08008314 <__malloc_lock>:
 8008314:	4770      	bx	lr

08008316 <__malloc_unlock>:
 8008316:	4770      	bx	lr

08008318 <_realloc_r>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	4607      	mov	r7, r0
 800831c:	4614      	mov	r4, r2
 800831e:	460e      	mov	r6, r1
 8008320:	b921      	cbnz	r1, 800832c <_realloc_r+0x14>
 8008322:	4611      	mov	r1, r2
 8008324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008328:	f7ff be00 	b.w	8007f2c <_malloc_r>
 800832c:	b922      	cbnz	r2, 8008338 <_realloc_r+0x20>
 800832e:	f7ff fdaf 	bl	8007e90 <_free_r>
 8008332:	4625      	mov	r5, r4
 8008334:	4628      	mov	r0, r5
 8008336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008338:	f000 f814 	bl	8008364 <_malloc_usable_size_r>
 800833c:	42a0      	cmp	r0, r4
 800833e:	d20f      	bcs.n	8008360 <_realloc_r+0x48>
 8008340:	4621      	mov	r1, r4
 8008342:	4638      	mov	r0, r7
 8008344:	f7ff fdf2 	bl	8007f2c <_malloc_r>
 8008348:	4605      	mov	r5, r0
 800834a:	2800      	cmp	r0, #0
 800834c:	d0f2      	beq.n	8008334 <_realloc_r+0x1c>
 800834e:	4631      	mov	r1, r6
 8008350:	4622      	mov	r2, r4
 8008352:	f7ff f985 	bl	8007660 <memcpy>
 8008356:	4631      	mov	r1, r6
 8008358:	4638      	mov	r0, r7
 800835a:	f7ff fd99 	bl	8007e90 <_free_r>
 800835e:	e7e9      	b.n	8008334 <_realloc_r+0x1c>
 8008360:	4635      	mov	r5, r6
 8008362:	e7e7      	b.n	8008334 <_realloc_r+0x1c>

08008364 <_malloc_usable_size_r>:
 8008364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008368:	1f18      	subs	r0, r3, #4
 800836a:	2b00      	cmp	r3, #0
 800836c:	bfbc      	itt	lt
 800836e:	580b      	ldrlt	r3, [r1, r0]
 8008370:	18c0      	addlt	r0, r0, r3
 8008372:	4770      	bx	lr

08008374 <_init>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr

08008380 <_fini>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr
