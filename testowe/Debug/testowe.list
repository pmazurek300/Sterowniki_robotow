
testowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f690  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  0800f830  0800f830  0001f830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffd0  0800ffd0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffd0  0800ffd0  0001ffd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffd8  0800ffd8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffd8  0800ffd8  0001ffd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffdc  0800ffdc  0001ffdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ffe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001e0  080101c0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  080101c0  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113b7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002635  00000000  00000000  000315c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001010  00000000  00000000  00033c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018649  00000000  00000000  00035b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3a8  00000000  00000000  0004e159  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009126d  00000000  00000000  0005b501  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec76e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb8  00000000  00000000  000ec7ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f818 	.word	0x0800f818

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800f818 	.word	0x0800f818

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f92b 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f007 f996 	bl	80082fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f943 	bl	8001286 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f90b 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	20000218 	.word	0x20000218

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000218 	.word	0x20000218

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff feda 	bl	8001064 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e099      	b.n	80013f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012dc:	e00f      	b.n	80012fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012de:	f7ff fec1 	bl	8001064 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d908      	bls.n	80012fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e078      	b.n	80013f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e8      	bne.n	80012de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_DMA_Init+0x158>)
 8001318:	4013      	ands	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800132a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2b04      	cmp	r3, #4
 8001356:	d107      	bne.n	8001368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4313      	orrs	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f023 0307 	bic.w	r3, r3, #7
 800137e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4313      	orrs	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	2b04      	cmp	r3, #4
 8001390:	d117      	bne.n	80013c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fa91 	bl	80018cc <DMA_CheckFifoParam>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013be:	2301      	movs	r3, #1
 80013c0:	e016      	b.n	80013f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fa48 	bl	8001860 <DMA_CalcBaseAndBitshift>
 80013d0:	4603      	mov	r3, r0
 80013d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	223f      	movs	r2, #63	; 0x3f
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	f010803f 	.word	0xf010803f

080013fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Start_IT+0x26>
 800141e:	2302      	movs	r3, #2
 8001420:	e040      	b.n	80014a4 <HAL_DMA_Start_IT+0xa8>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12f      	bne.n	8001496 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2202      	movs	r2, #2
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f9da 	bl	8001804 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	223f      	movs	r2, #63	; 0x3f
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0216 	orr.w	r2, r2, #22
 800146a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e005      	b.n	80014a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800149e:	2302      	movs	r3, #2
 80014a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d004      	beq.n	80014ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00c      	b.n	80014e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2205      	movs	r2, #5
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_DMA_IRQHandler+0x258>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a92      	ldr	r2, [pc, #584]	; (800174c <HAL_DMA_IRQHandler+0x25c>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0a9b      	lsrs	r3, r3, #10
 8001508:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	2208      	movs	r2, #8
 800151c:	409a      	lsls	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01a      	beq.n	800155c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0204 	bic.w	r2, r2, #4
 8001542:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	2208      	movs	r2, #8
 800154a:	409a      	lsls	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	2201      	movs	r2, #1
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d012      	beq.n	8001592 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2201      	movs	r2, #1
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	f043 0202 	orr.w	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001596:	2204      	movs	r2, #4
 8001598:	409a      	lsls	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d012      	beq.n	80015c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2204      	movs	r2, #4
 80015b6:	409a      	lsls	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	f043 0204 	orr.w	r2, r3, #4
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2210      	movs	r2, #16
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d043      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d03c      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	2210      	movs	r2, #16
 80015ec:	409a      	lsls	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d018      	beq.n	8001632 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	d024      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
 800161e:	e01f      	b.n	8001660 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01b      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
 8001630:	e016      	b.n	8001660 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0208 	bic.w	r2, r2, #8
 800164e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001664:	2220      	movs	r2, #32
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 808e 	beq.w	800178e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8086 	beq.w	800178e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	2220      	movs	r2, #32
 8001688:	409a      	lsls	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b05      	cmp	r3, #5
 8001698:	d136      	bne.n	8001708 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0216 	bic.w	r2, r2, #22
 80016a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <HAL_DMA_IRQHandler+0x1da>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0208 	bic.w	r2, r2, #8
 80016d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	223f      	movs	r2, #63	; 0x3f
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d07d      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
        }
        return;
 8001706:	e078      	b.n	80017fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01c      	beq.n	8001750 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d108      	bne.n	8001736 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	2b00      	cmp	r3, #0
 800172a:	d030      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
 8001734:	e02b      	b.n	800178e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d027      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4798      	blx	r3
 8001746:	e022      	b.n	800178e <HAL_DMA_IRQHandler+0x29e>
 8001748:	20000008 	.word	0x20000008
 800174c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10f      	bne.n	800177e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0210 	bic.w	r2, r2, #16
 800176c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	2b00      	cmp	r3, #0
 8001794:	d032      	beq.n	80017fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d022      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2205      	movs	r2, #5
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d307      	bcc.n	80017d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f2      	bne.n	80017ba <HAL_DMA_IRQHandler+0x2ca>
 80017d4:	e000      	b.n	80017d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
 80017f8:	e000      	b.n	80017fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80017fa:	bf00      	nop
    }
  }
}
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop

08001804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001820:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d108      	bne.n	8001844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001842:	e007      	b.n	8001854 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3b10      	subs	r3, #16
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <DMA_CalcBaseAndBitshift+0x68>)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d909      	bls.n	80018a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	1d1a      	adds	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	659a      	str	r2, [r3, #88]	; 0x58
 80018a0:	e007      	b.n	80018b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	aaaaaaab 	.word	0xaaaaaaab
 80018c8:	0800f84c 	.word	0x0800f84c

080018cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d11f      	bne.n	8001926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d855      	bhi.n	8001998 <DMA_CheckFifoParam+0xcc>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <DMA_CheckFifoParam+0x28>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001917 	.word	0x08001917
 80018fc:	08001905 	.word	0x08001905
 8001900:	08001999 	.word	0x08001999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d045      	beq.n	800199c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001914:	e042      	b.n	800199c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800191e:	d13f      	bne.n	80019a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001924:	e03c      	b.n	80019a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192e:	d121      	bne.n	8001974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d836      	bhi.n	80019a4 <DMA_CheckFifoParam+0xd8>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <DMA_CheckFifoParam+0x70>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001953 	.word	0x08001953
 8001944:	0800194d 	.word	0x0800194d
 8001948:	08001965 	.word	0x08001965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
      break;
 8001950:	e02f      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d024      	beq.n	80019a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001962:	e021      	b.n	80019a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800196c:	d11e      	bne.n	80019ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001972:	e01b      	b.n	80019ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d902      	bls.n	8001980 <DMA_CheckFifoParam+0xb4>
 800197a:	2b03      	cmp	r3, #3
 800197c:	d003      	beq.n	8001986 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800197e:	e018      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
      break;
 8001984:	e015      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
      break;
 8001996:	e00b      	b.n	80019b0 <DMA_CheckFifoParam+0xe4>
      break;
 8001998:	bf00      	nop
 800199a:	e00a      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 800199c:	bf00      	nop
 800199e:	e008      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a0:	bf00      	nop
 80019a2:	e006      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a4:	bf00      	nop
 80019a6:	e004      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a8:	bf00      	nop
 80019aa:	e002      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80019ac:	bf00      	nop
 80019ae:	e000      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019b0:	bf00      	nop
    }
  } 
  
  return status; 
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e159      	b.n	8001c90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8148 	bne.w	8001c8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d00b      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0e:	2b11      	cmp	r3, #17
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0xfc>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a2 	beq.w	8001c8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a55      	ldr	r2, [pc, #340]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b62:	4a51      	ldr	r2, [pc, #324]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_GPIO_Init+0x2ec>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x202>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x1fe>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <HAL_GPIO_Init+0x2f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x1f6>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a44      	ldr	r2, [pc, #272]	; (8001cbc <HAL_GPIO_Init+0x2fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x1f2>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd4:	4934      	ldr	r1, [pc, #208]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f aea2 	bls.w	80019dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3724      	adds	r7, #36	; 0x24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e11f      	b.n	8001f4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f003 ff54 	bl	8005bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d5c:	f001 fbb6 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8001d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a7b      	ldr	r2, [pc, #492]	; (8001f54 <HAL_I2C_Init+0x25c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d807      	bhi.n	8001d7c <HAL_I2C_Init+0x84>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_I2C_Init+0x260>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	bf94      	ite	ls
 8001d74:	2301      	movls	r3, #1
 8001d76:	2300      	movhi	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e006      	b.n	8001d8a <HAL_I2C_Init+0x92>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4a77      	ldr	r2, [pc, #476]	; (8001f5c <HAL_I2C_Init+0x264>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0db      	b.n	8001f4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <HAL_I2C_Init+0x268>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0c9b      	lsrs	r3, r3, #18
 8001d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a64      	ldr	r2, [pc, #400]	; (8001f54 <HAL_I2C_Init+0x25c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d802      	bhi.n	8001dcc <HAL_I2C_Init+0xd4>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	e009      	b.n	8001de0 <HAL_I2C_Init+0xe8>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	4a63      	ldr	r2, [pc, #396]	; (8001f64 <HAL_I2C_Init+0x26c>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	3301      	adds	r3, #1
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4956      	ldr	r1, [pc, #344]	; (8001f54 <HAL_I2C_Init+0x25c>)
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	d80d      	bhi.n	8001e1c <HAL_I2C_Init+0x124>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1e59      	subs	r1, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	bf38      	it	cc
 8001e18:	2304      	movcc	r3, #4
 8001e1a:	e04f      	b.n	8001ebc <HAL_I2C_Init+0x1c4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d111      	bne.n	8001e48 <HAL_I2C_Init+0x150>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	440b      	add	r3, r1
 8001e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e012      	b.n	8001e6e <HAL_I2C_Init+0x176>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e58      	subs	r0, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	0099      	lsls	r1, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Init+0x17e>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e022      	b.n	8001ebc <HAL_I2C_Init+0x1c4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10e      	bne.n	8001e9c <HAL_I2C_Init+0x1a4>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1e58      	subs	r0, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	440b      	add	r3, r1
 8001e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9a:	e00f      	b.n	8001ebc <HAL_I2C_Init+0x1c4>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e58      	subs	r0, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	0099      	lsls	r1, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	6809      	ldr	r1, [r1, #0]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6911      	ldr	r1, [r2, #16]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68d2      	ldr	r2, [r2, #12]
 8001ef6:	4311      	orrs	r1, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	000186a0 	.word	0x000186a0
 8001f58:	001e847f 	.word	0x001e847f
 8001f5c:	003d08ff 	.word	0x003d08ff
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	10624dd3 	.word	0x10624dd3

08001f68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	817b      	strh	r3, [r7, #10]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	813b      	strh	r3, [r7, #8]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f82:	f7ff f86f 	bl	8001064 <HAL_GetTick>
 8001f86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	f040 80d9 	bne.w	8002148 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2319      	movs	r3, #25
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	496d      	ldr	r1, [pc, #436]	; (8002154 <HAL_I2C_Mem_Write+0x1ec>)
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fc7b 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
 8001fae:	e0cc      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_Mem_Write+0x56>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e0c5      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d007      	beq.n	8001fe4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2221      	movs	r2, #33	; 0x21
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2240      	movs	r2, #64	; 0x40
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a3a      	ldr	r2, [r7, #32]
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_I2C_Mem_Write+0x1f0>)
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002026:	88f8      	ldrh	r0, [r7, #6]
 8002028:	893a      	ldrh	r2, [r7, #8]
 800202a:	8979      	ldrh	r1, [r7, #10]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	4603      	mov	r3, r0
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 fab6 	bl	80025a8 <I2C_RequestMemoryWrite>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d052      	beq.n	80020e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e081      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fcfc 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00d      	beq.n	8002072 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b04      	cmp	r3, #4
 800205c:	d107      	bne.n	800206e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06b      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d11b      	bne.n	80020e8 <HAL_I2C_Mem_Write+0x180>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d017      	beq.n	80020e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1aa      	bne.n	8002046 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fce8 	bl	8002aca <I2C_WaitOnBTFFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2b04      	cmp	r3, #4
 8002106:	d107      	bne.n	8002118 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002116:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e016      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	00100002 	.word	0x00100002
 8002158:	ffff0000 	.word	0xffff0000

0800215c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	4608      	mov	r0, r1
 8002166:	4611      	mov	r1, r2
 8002168:	461a      	mov	r2, r3
 800216a:	4603      	mov	r3, r0
 800216c:	817b      	strh	r3, [r7, #10]
 800216e:	460b      	mov	r3, r1
 8002170:	813b      	strh	r3, [r7, #8]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002176:	f7fe ff75 	bl	8001064 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b20      	cmp	r3, #32
 8002186:	f040 8208 	bne.w	800259a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2319      	movs	r3, #25
 8002190:	2201      	movs	r2, #1
 8002192:	497b      	ldr	r1, [pc, #492]	; (8002380 <HAL_I2C_Mem_Read+0x224>)
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fb81 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
 80021a2:	e1fb      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_I2C_Mem_Read+0x56>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e1f4      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d007      	beq.n	80021d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2222      	movs	r2, #34	; 0x22
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <HAL_I2C_Mem_Read+0x228>)
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800221a:	88f8      	ldrh	r0, [r7, #6]
 800221c:	893a      	ldrh	r2, [r7, #8]
 800221e:	8979      	ldrh	r1, [r7, #10]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	4603      	mov	r3, r0
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fa50 	bl	80026d0 <I2C_RequestMemoryRead>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1b0      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d113      	bne.n	800226a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	623b      	str	r3, [r7, #32]
 8002256:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e184      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	2b01      	cmp	r3, #1
 8002270:	d11b      	bne.n	80022aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e164      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d11b      	bne.n	80022ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	e144      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002300:	e138      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	2b03      	cmp	r3, #3
 8002308:	f200 80f1 	bhi.w	80024ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b01      	cmp	r3, #1
 8002312:	d123      	bne.n	800235c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fc17 	bl	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e139      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800235a:	e10b      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	2b02      	cmp	r3, #2
 8002362:	d14e      	bne.n	8002402 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	2200      	movs	r2, #0
 800236c:	4906      	ldr	r1, [pc, #24]	; (8002388 <HAL_I2C_Mem_Read+0x22c>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fa94 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e10e      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
 800237e:	bf00      	nop
 8002380:	00100002 	.word	0x00100002
 8002384:	ffff0000 	.word	0xffff0000
 8002388:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002400:	e0b8      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002408:	2200      	movs	r2, #0
 800240a:	4966      	ldr	r1, [pc, #408]	; (80025a4 <HAL_I2C_Mem_Read+0x448>)
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fa45 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0bf      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	2200      	movs	r2, #0
 8002466:	494f      	ldr	r1, [pc, #316]	; (80025a4 <HAL_I2C_Mem_Read+0x448>)
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa17 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e091      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ec:	e042      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fb2a 	bl	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04c      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d118      	bne.n	8002574 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f aec2 	bne.w	8002302 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
  }
}
 800259c:	4618      	mov	r0, r3
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	00010004 	.word	0x00010004

080025a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	2200      	movs	r2, #0
 80025da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f95c 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00c      	beq.n	8002604 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e05f      	b.n	80026c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002604:	897b      	ldrh	r3, [r7, #10]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002612:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	6a3a      	ldr	r2, [r7, #32]
 8002618:	492c      	ldr	r1, [pc, #176]	; (80026cc <I2C_RequestMemoryWrite+0x124>)
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f995 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e04c      	b.n	80026c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	6a39      	ldr	r1, [r7, #32]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f9ff 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2b04      	cmp	r3, #4
 8002656:	d107      	bne.n	8002668 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e02b      	b.n	80026c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002672:	893b      	ldrh	r3, [r7, #8]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	611a      	str	r2, [r3, #16]
 800267c:	e021      	b.n	80026c2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800267e:	893b      	ldrh	r3, [r7, #8]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	b29b      	uxth	r3, r3
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	6a39      	ldr	r1, [r7, #32]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f9d9 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d107      	bne.n	80026b4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e005      	b.n	80026c4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b8:	893b      	ldrh	r3, [r7, #8]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	00010002 	.word	0x00010002

080026d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	4608      	mov	r0, r1
 80026da:	4611      	mov	r1, r2
 80026dc:	461a      	mov	r2, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	817b      	strh	r3, [r7, #10]
 80026e2:	460b      	mov	r3, r1
 80026e4:	813b      	strh	r3, [r7, #8]
 80026e6:	4613      	mov	r3, r2
 80026e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	2200      	movs	r2, #0
 8002712:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f8c0 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0a9      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800273c:	897b      	ldrh	r3, [r7, #10]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800274a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	6a3a      	ldr	r2, [r7, #32]
 8002750:	4951      	ldr	r1, [pc, #324]	; (8002898 <I2C_RequestMemoryRead+0x1c8>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f8f9 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e096      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277a:	6a39      	ldr	r1, [r7, #32]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f963 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00d      	beq.n	80027a4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e075      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027aa:	893b      	ldrh	r3, [r7, #8]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	611a      	str	r2, [r3, #16]
 80027b4:	e021      	b.n	80027fa <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027b6:	893b      	ldrh	r3, [r7, #8]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	6a39      	ldr	r1, [r7, #32]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f93d 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d107      	bne.n	80027ec <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e04f      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f0:	893b      	ldrh	r3, [r7, #8]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f922 	bl	8002a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b04      	cmp	r3, #4
 8002810:	d107      	bne.n	8002822 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e034      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2200      	movs	r2, #0
 800283e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f82a 	bl	800289c <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00c      	beq.n	8002868 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e013      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002868:	897b      	ldrh	r3, [r7, #10]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	6a3a      	ldr	r2, [r7, #32]
 800287c:	4906      	ldr	r1, [pc, #24]	; (8002898 <I2C_RequestMemoryRead+0x1c8>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f863 	bl	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	00010002 	.word	0x00010002

0800289c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ac:	e025      	b.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d021      	beq.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b6:	f7fe fbd5 	bl	8001064 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e023      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10d      	bne.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	43da      	mvns	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4013      	ands	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf0c      	ite	eq
 8002916:	2301      	moveq	r3, #1
 8002918:	2300      	movne	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	e00c      	b.n	800293a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	43da      	mvns	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	429a      	cmp	r2, r3
 800293e:	d0b6      	beq.n	80028ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002958:	e051      	b.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	d123      	bne.n	80029b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002982:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f043 0204 	orr.w	r2, r3, #4
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e046      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d021      	beq.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7fe fb53 	bl	8001064 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d116      	bne.n	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e020      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10c      	bne.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	e00b      	b.n	8002a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d18d      	bne.n	800295a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a54:	e02d      	b.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f8ce 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e02d      	b.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d021      	beq.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7fe faf9 	bl	8001064 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e007      	b.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d1ca      	bne.n	8002a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad6:	e02d      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f88d 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e02d      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aee:	d021      	beq.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7fe fab8 	bl	8001064 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e007      	b.n	8002b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d1ca      	bne.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b58:	e042      	b.n	8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d119      	bne.n	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0210 	mvn.w	r2, #16
 8002b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e029      	b.n	8002bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9c:	f7fe fa62 	bl	8001064 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d302      	bcc.n	8002bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d116      	bne.n	8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e007      	b.n	8002bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d1b5      	bne.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d11b      	bne.n	8002c48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e25b      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d075      	beq.n	8002d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c76:	4ba3      	ldr	r3, [pc, #652]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d00c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d112      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8e:	4b9d      	ldr	r3, [pc, #628]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	4b99      	ldr	r3, [pc, #612]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x108>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d157      	bne.n	8002d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e236      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCC_OscConfig+0x74>
 8002cbe:	4b91      	ldr	r3, [pc, #580]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a90      	ldr	r2, [pc, #576]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xb0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x98>
 8002cd6:	4b8b      	ldr	r3, [pc, #556]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a8a      	ldr	r2, [pc, #552]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a87      	ldr	r2, [pc, #540]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xb0>
 8002cf0:	4b84      	ldr	r3, [pc, #528]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a83      	ldr	r2, [pc, #524]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a80      	ldr	r2, [pc, #512]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe f9a8 	bl	8001064 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fe f9a4 	bl	8001064 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1fb      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xc0>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe f994 	bl	8001064 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe f990 	bl	8001064 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1e7      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0xe8>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7a:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d11c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d86:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d116      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x152>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e1bb      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4952      	ldr	r1, [pc, #328]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	e03a      	b.n	8002e36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	; (8002f08 <HAL_RCC_OscConfig+0x2b0>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe f949 	bl	8001064 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fe f945 	bl	8001064 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e19c      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4940      	ldr	r1, [pc, #256]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_OscConfig+0x2b0>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe f928 	bl	8001064 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe f924 	bl	8001064 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e17b      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d030      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d016      	beq.n	8002e78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4a:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_RCC_OscConfig+0x2b4>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fe f908 	bl	8001064 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e58:	f7fe f904 	bl	8001064 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e15b      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x200>
 8002e76:	e015      	b.n	8002ea4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCC_OscConfig+0x2b4>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe f8f1 	bl	8001064 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fe f8ed 	bl	8001064 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e144      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a0 	beq.w	8002ff2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee2:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_OscConfig+0x2b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d121      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eee:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_RCC_OscConfig+0x2b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_RCC_OscConfig+0x2b8>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002efa:	f7fe f8b3 	bl	8001064 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f00:	e011      	b.n	8002f26 <HAL_RCC_OscConfig+0x2ce>
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	42470000 	.word	0x42470000
 8002f0c:	42470e80 	.word	0x42470e80
 8002f10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f14:	f7fe f8a6 	bl	8001064 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0fd      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f26:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCC_OscConfig+0x4d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d106      	bne.n	8002f48 <HAL_RCC_OscConfig+0x2f0>
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3e:	4a7c      	ldr	r2, [pc, #496]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6713      	str	r3, [r2, #112]	; 0x70
 8002f46:	e01c      	b.n	8002f82 <HAL_RCC_OscConfig+0x32a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d10c      	bne.n	8002f6a <HAL_RCC_OscConfig+0x312>
 8002f50:	4b77      	ldr	r3, [pc, #476]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a76      	ldr	r2, [pc, #472]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	4b74      	ldr	r3, [pc, #464]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a73      	ldr	r2, [pc, #460]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	e00b      	b.n	8002f82 <HAL_RCC_OscConfig+0x32a>
 8002f6a:	4b71      	ldr	r3, [pc, #452]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a70      	ldr	r2, [pc, #448]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
 8002f76:	4b6e      	ldr	r3, [pc, #440]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a6d      	ldr	r2, [pc, #436]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d015      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe f86b 	bl	8001064 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe f867 	bl	8001064 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e0bc      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ee      	beq.n	8002f92 <HAL_RCC_OscConfig+0x33a>
 8002fb4:	e014      	b.n	8002fe0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe f855 	bl	8001064 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe f851 	bl	8001064 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0a6      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	4b56      	ldr	r3, [pc, #344]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ee      	bne.n	8002fbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d105      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe6:	4b52      	ldr	r3, [pc, #328]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a51      	ldr	r2, [pc, #324]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8092 	beq.w	8003120 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d05c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d141      	bne.n	8003094 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <HAL_RCC_OscConfig+0x4dc>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe f825 	bl	8001064 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe f821 	bl	8001064 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e078      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	019b      	lsls	r3, r3, #6
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	3b01      	subs	r3, #1
 8003056:	041b      	lsls	r3, r3, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	4933      	ldr	r1, [pc, #204]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003066:	4b33      	ldr	r3, [pc, #204]	; (8003134 <HAL_RCC_OscConfig+0x4dc>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fd fffa 	bl	8001064 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003074:	f7fd fff6 	bl	8001064 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e04d      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x41c>
 8003092:	e045      	b.n	8003120 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_OscConfig+0x4dc>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fd ffe3 	bl	8001064 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fd ffdf 	bl	8001064 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e036      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f0      	bne.n	80030a2 <HAL_RCC_OscConfig+0x44a>
 80030c0:	e02e      	b.n	8003120 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e029      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <HAL_RCC_OscConfig+0x4d8>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d11c      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d115      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030f6:	4013      	ands	r3, r2
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10d      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d106      	bne.n	800311c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40007000 	.word	0x40007000
 8003130:	40023800 	.word	0x40023800
 8003134:	42470060 	.word	0x42470060

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0cc      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d90c      	bls.n	8003174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d044      	beq.n	8003258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d119      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3b      	ldr	r3, [pc, #236]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e067      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b37      	ldr	r3, [pc, #220]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4934      	ldr	r1, [pc, #208]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003228:	f7fd ff1c 	bl	8001064 <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fd ff18 	bl	8001064 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e04f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d20c      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4601      	mov	r1, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	5cd3      	ldrb	r3, [r2, r3]
 80032d2:	fa21 f303 	lsr.w	r3, r1, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd fe7c 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	0800f854 	.word	0x0800f854
 80032fc:	20000008 	.word	0x20000008
 8003300:	20000000 	.word	0x20000000

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331a:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b04      	cmp	r3, #4
 8003324:	d007      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x32>
 8003326:	2b08      	cmp	r3, #8
 8003328:	d008      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x38>
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 80b4 	bne.w	8003498 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003332:	60bb      	str	r3, [r7, #8]
       break;
 8003334:	e0b3      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b5e      	ldr	r3, [pc, #376]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003338:	60bb      	str	r3, [r7, #8]
      break;
 800333a:	e0b0      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4b5a      	ldr	r3, [pc, #360]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003346:	4b58      	ldr	r3, [pc, #352]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d04a      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b55      	ldr	r3, [pc, #340]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	ea03 0501 	and.w	r5, r3, r1
 8003368:	ea04 0602 	and.w	r6, r4, r2
 800336c:	4629      	mov	r1, r5
 800336e:	4632      	mov	r2, r6
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f04f 0400 	mov.w	r4, #0
 8003378:	0154      	lsls	r4, r2, #5
 800337a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800337e:	014b      	lsls	r3, r1, #5
 8003380:	4619      	mov	r1, r3
 8003382:	4622      	mov	r2, r4
 8003384:	1b49      	subs	r1, r1, r5
 8003386:	eb62 0206 	sbc.w	r2, r2, r6
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f04f 0400 	mov.w	r4, #0
 8003392:	0194      	lsls	r4, r2, #6
 8003394:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003398:	018b      	lsls	r3, r1, #6
 800339a:	1a5b      	subs	r3, r3, r1
 800339c:	eb64 0402 	sbc.w	r4, r4, r2
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	00e2      	lsls	r2, r4, #3
 80033aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033ae:	00d9      	lsls	r1, r3, #3
 80033b0:	460b      	mov	r3, r1
 80033b2:	4614      	mov	r4, r2
 80033b4:	195b      	adds	r3, r3, r5
 80033b6:	eb44 0406 	adc.w	r4, r4, r6
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	0262      	lsls	r2, r4, #9
 80033c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033c8:	0259      	lsls	r1, r3, #9
 80033ca:	460b      	mov	r3, r1
 80033cc:	4614      	mov	r4, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	4621      	mov	r1, r4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f04f 0400 	mov.w	r4, #0
 80033d8:	461a      	mov	r2, r3
 80033da:	4623      	mov	r3, r4
 80033dc:	f7fd fc5c 	bl	8000c98 <__aeabi_uldivmod>
 80033e0:	4603      	mov	r3, r0
 80033e2:	460c      	mov	r4, r1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	e049      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e8:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	f04f 0400 	mov.w	r4, #0
 80033f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	ea03 0501 	and.w	r5, r3, r1
 80033fe:	ea04 0602 	and.w	r6, r4, r2
 8003402:	4629      	mov	r1, r5
 8003404:	4632      	mov	r2, r6
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	f04f 0400 	mov.w	r4, #0
 800340e:	0154      	lsls	r4, r2, #5
 8003410:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003414:	014b      	lsls	r3, r1, #5
 8003416:	4619      	mov	r1, r3
 8003418:	4622      	mov	r2, r4
 800341a:	1b49      	subs	r1, r1, r5
 800341c:	eb62 0206 	sbc.w	r2, r2, r6
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	f04f 0400 	mov.w	r4, #0
 8003428:	0194      	lsls	r4, r2, #6
 800342a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800342e:	018b      	lsls	r3, r1, #6
 8003430:	1a5b      	subs	r3, r3, r1
 8003432:	eb64 0402 	sbc.w	r4, r4, r2
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	00e2      	lsls	r2, r4, #3
 8003440:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003444:	00d9      	lsls	r1, r3, #3
 8003446:	460b      	mov	r3, r1
 8003448:	4614      	mov	r4, r2
 800344a:	195b      	adds	r3, r3, r5
 800344c:	eb44 0406 	adc.w	r4, r4, r6
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	02a2      	lsls	r2, r4, #10
 800345a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800345e:	0299      	lsls	r1, r3, #10
 8003460:	460b      	mov	r3, r1
 8003462:	4614      	mov	r4, r2
 8003464:	4618      	mov	r0, r3
 8003466:	4621      	mov	r1, r4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	461a      	mov	r2, r3
 8003470:	4623      	mov	r3, r4
 8003472:	f7fd fc11 	bl	8000c98 <__aeabi_uldivmod>
 8003476:	4603      	mov	r3, r0
 8003478:	460c      	mov	r4, r1
 800347a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	3301      	adds	r3, #1
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	60bb      	str	r3, [r7, #8]
      break;
 8003496:	e002      	b.n	800349e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800349a:	60bb      	str	r3, [r7, #8]
      break;
 800349c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349e:	68bb      	ldr	r3, [r7, #8]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a8:	40023800 	.word	0x40023800
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000008 	.word	0x20000008

080034cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d0:	f7ff fff0 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d4:	4601      	mov	r1, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0a9b      	lsrs	r3, r3, #10
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4a03      	ldr	r2, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e2:	5cd3      	ldrb	r3, [r2, r3]
 80034e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	0800f864 	.word	0x0800f864

080034f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034f8:	f7ff ffdc 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034fc:	4601      	mov	r1, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0b5b      	lsrs	r3, r3, #13
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4a03      	ldr	r2, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800350a:	5cd3      	ldrb	r3, [r2, r3]
 800350c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	0800f864 	.word	0x0800f864

0800351c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e01d      	b.n	800356a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f005 fad0 	bl	8008ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f000 fcb8 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b06      	cmp	r3, #6
 8003592:	d007      	beq.n	80035a4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	d007      	beq.n	80035f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e01d      	b.n	8003650 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f815 	bl	8003658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f000 fc45 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 ffea 	bl	8004658 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a10      	ldr	r2, [pc, #64]	; (80036cc <HAL_TIM_PWM_Start+0x60>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d107      	bne.n	800369e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b06      	cmp	r3, #6
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000

080036d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e01d      	b.n	800371e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f815 	bl	8003726 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f000 fbde 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2201      	movs	r2, #1
 800374a:	6839      	ldr	r1, [r7, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 ff83 	bl	8004658 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b06      	cmp	r3, #6
 8003762:	d007      	beq.n	8003774 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d841      	bhi.n	8003814 <HAL_TIM_IC_Start_IT+0x94>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HAL_TIM_IC_Start_IT+0x18>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037cd 	.word	0x080037cd
 800379c:	08003815 	.word	0x08003815
 80037a0:	08003815 	.word	0x08003815
 80037a4:	08003815 	.word	0x08003815
 80037a8:	080037df 	.word	0x080037df
 80037ac:	08003815 	.word	0x08003815
 80037b0:	08003815 	.word	0x08003815
 80037b4:	08003815 	.word	0x08003815
 80037b8:	080037f1 	.word	0x080037f1
 80037bc:	08003815 	.word	0x08003815
 80037c0:	08003815 	.word	0x08003815
 80037c4:	08003815 	.word	0x08003815
 80037c8:	08003803 	.word	0x08003803
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0202 	orr.w	r2, r2, #2
 80037da:	60da      	str	r2, [r3, #12]
      break;
 80037dc:	e01b      	b.n	8003816 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0204 	orr.w	r2, r2, #4
 80037ec:	60da      	str	r2, [r3, #12]
      break;
 80037ee:	e012      	b.n	8003816 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0208 	orr.w	r2, r2, #8
 80037fe:	60da      	str	r2, [r3, #12]
      break;
 8003800:	e009      	b.n	8003816 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0210 	orr.w	r2, r2, #16
 8003810:	60da      	str	r2, [r3, #12]
      break;
 8003812:	e000      	b.n	8003816 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003814:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 ff1a 	bl	8004658 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b06      	cmp	r3, #6
 8003834:	d007      	beq.n	8003846 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d122      	bne.n	80038ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d11b      	bne.n	80038ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0202 	mvn.w	r2, #2
 800387c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f003 ff24 	bl	80076e0 <HAL_TIM_IC_CaptureCallback>
 8003898:	e005      	b.n	80038a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 faf9 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fb00 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d122      	bne.n	8003900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d11b      	bne.n	8003900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0204 	mvn.w	r2, #4
 80038d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f003 fefa 	bl	80076e0 <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 facf 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fad6 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d122      	bne.n	8003954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b08      	cmp	r3, #8
 800391a:	d11b      	bne.n	8003954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0208 	mvn.w	r2, #8
 8003924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2204      	movs	r2, #4
 800392a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f003 fed0 	bl	80076e0 <HAL_TIM_IC_CaptureCallback>
 8003940:	e005      	b.n	800394e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 faa5 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 faac 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b10      	cmp	r3, #16
 8003960:	d122      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b10      	cmp	r3, #16
 800396e:	d11b      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0210 	mvn.w	r2, #16
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f003 fea6 	bl	80076e0 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa7b 	bl	8003e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fa82 	bl	8003ea6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d10e      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d107      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0201 	mvn.w	r2, #1
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f003 ff0a 	bl	80077e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b80      	cmp	r3, #128	; 0x80
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 ff1c 	bl	8004838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fa47 	bl	8003eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0220 	mvn.w	r2, #32
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fee6 	bl	8004824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_IC_ConfigChannel+0x1a>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e08a      	b.n	8003b90 <HAL_TIM_IC_ConfigChannel+0x130>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	6819      	ldr	r1, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f000 fc22 	bl	80042e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 020c 	bic.w	r2, r2, #12
 8003ab2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6999      	ldr	r1, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	619a      	str	r2, [r3, #24]
 8003ac6:	e05a      	b.n	8003b7e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d11c      	bne.n	8003b08 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f000 fc9a 	bl	8004416 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003af0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6999      	ldr	r1, [r3, #24]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	021a      	lsls	r2, r3, #8
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	619a      	str	r2, [r3, #24]
 8003b06:	e03a      	b.n	8003b7e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11b      	bne.n	8003b46 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f000 fce7 	bl	80044f0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 020c 	bic.w	r2, r2, #12
 8003b30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	61da      	str	r2, [r3, #28]
 8003b44:	e01b      	b.n	8003b7e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	6819      	ldr	r1, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f000 fd07 	bl	8004568 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e0b4      	b.n	8003d1c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	f200 809f 	bhi.w	8003d08 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003bca:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003c05 	.word	0x08003c05
 8003bd4:	08003d09 	.word	0x08003d09
 8003bd8:	08003d09 	.word	0x08003d09
 8003bdc:	08003d09 	.word	0x08003d09
 8003be0:	08003c45 	.word	0x08003c45
 8003be4:	08003d09 	.word	0x08003d09
 8003be8:	08003d09 	.word	0x08003d09
 8003bec:	08003d09 	.word	0x08003d09
 8003bf0:	08003c87 	.word	0x08003c87
 8003bf4:	08003d09 	.word	0x08003d09
 8003bf8:	08003d09 	.word	0x08003d09
 8003bfc:	08003d09 	.word	0x08003d09
 8003c00:	08003cc7 	.word	0x08003cc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f9e0 	bl	8003fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0208 	orr.w	r2, r2, #8
 8003c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699a      	ldr	r2, [r3, #24]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0204 	bic.w	r2, r2, #4
 8003c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6999      	ldr	r1, [r3, #24]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	619a      	str	r2, [r3, #24]
      break;
 8003c42:	e062      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fa26 	bl	800409c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6999      	ldr	r1, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	619a      	str	r2, [r3, #24]
      break;
 8003c84:	e041      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fa71 	bl	8004174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0208 	orr.w	r2, r2, #8
 8003ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0204 	bic.w	r2, r2, #4
 8003cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69d9      	ldr	r1, [r3, #28]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	61da      	str	r2, [r3, #28]
      break;
 8003cc4:	e021      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fabb 	bl	8004248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69da      	ldr	r2, [r3, #28]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69d9      	ldr	r1, [r3, #28]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	021a      	lsls	r2, r3, #8
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	61da      	str	r2, [r3, #28]
      break;
 8003d06:	e000      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003d08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_ConfigClockSource+0x18>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e0a6      	b.n	8003e8a <HAL_TIM_ConfigClockSource+0x166>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d067      	beq.n	8003e44 <HAL_TIM_ConfigClockSource+0x120>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d80b      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x6c>
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d073      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x140>
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d802      	bhi.n	8003d86 <HAL_TIM_ConfigClockSource+0x62>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d06f      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d84:	e078      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d06c      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x140>
 8003d8a:	2b30      	cmp	r3, #48	; 0x30
 8003d8c:	d06a      	beq.n	8003e64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d8e:	e073      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d90:	2b70      	cmp	r3, #112	; 0x70
 8003d92:	d00d      	beq.n	8003db0 <HAL_TIM_ConfigClockSource+0x8c>
 8003d94:	2b70      	cmp	r3, #112	; 0x70
 8003d96:	d804      	bhi.n	8003da2 <HAL_TIM_ConfigClockSource+0x7e>
 8003d98:	2b50      	cmp	r3, #80	; 0x50
 8003d9a:	d033      	beq.n	8003e04 <HAL_TIM_ConfigClockSource+0xe0>
 8003d9c:	2b60      	cmp	r3, #96	; 0x60
 8003d9e:	d041      	beq.n	8003e24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003da0:	e06a      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d066      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x152>
 8003da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dac:	d017      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dae:	e063      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6899      	ldr	r1, [r3, #8]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f000 fc2a 	bl	8004618 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
      break;
 8003ddc:	e04c      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6899      	ldr	r1, [r3, #8]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f000 fc13 	bl	8004618 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e00:	609a      	str	r2, [r3, #8]
      break;
 8003e02:	e039      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	461a      	mov	r2, r3
 8003e12:	f000 fad1 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2150      	movs	r1, #80	; 0x50
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fbe0 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 8003e22:	e029      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f000 fb2d 	bl	8004490 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2160      	movs	r1, #96	; 0x60
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fbd0 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 8003e42:	e019      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f000 fab1 	bl	80043b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2140      	movs	r1, #64	; 0x40
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fbc0 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 8003e62:	e009      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f000 fbb7 	bl	80045e2 <TIM_ITRx_SetConfig>
      break;
 8003e74:	e000      	b.n	8003e78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <TIM_Base_SetConfig+0xe4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00f      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d00b      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a31      	ldr	r2, [pc, #196]	; (8003fb8 <TIM_Base_SetConfig+0xe8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a30      	ldr	r2, [pc, #192]	; (8003fbc <TIM_Base_SetConfig+0xec>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x38>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <TIM_Base_SetConfig+0xf0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <TIM_Base_SetConfig+0xe4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01b      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d017      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <TIM_Base_SetConfig+0xe8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <TIM_Base_SetConfig+0xec>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00f      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <TIM_Base_SetConfig+0xf0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00b      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1f      	ldr	r2, [pc, #124]	; (8003fc4 <TIM_Base_SetConfig+0xf4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <TIM_Base_SetConfig+0xf8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d003      	beq.n	8003f5a <TIM_Base_SetConfig+0x8a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <TIM_Base_SetConfig+0xfc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d108      	bne.n	8003f6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <TIM_Base_SetConfig+0xe4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d103      	bne.n	8003fa0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0302 	bic.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <TIM_OC1_SetConfig+0xc8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d10c      	bne.n	8004046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0308 	bic.w	r3, r3, #8
 8004032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a13      	ldr	r2, [pc, #76]	; (8004098 <TIM_OC1_SetConfig+0xc8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d111      	bne.n	8004072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	621a      	str	r2, [r3, #32]
}
 800408c:	bf00      	nop
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40010000 	.word	0x40010000

0800409c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0210 	bic.w	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0320 	bic.w	r3, r3, #32
 80040e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <TIM_OC2_SetConfig+0xd4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a15      	ldr	r2, [pc, #84]	; (8004170 <TIM_OC2_SetConfig+0xd4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d113      	bne.n	8004148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800412e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40010000 	.word	0x40010000

08004174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0303 	bic.w	r3, r3, #3
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <TIM_OC3_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a14      	ldr	r2, [pc, #80]	; (8004244 <TIM_OC3_SetConfig+0xd0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d113      	bne.n	800421e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	621a      	str	r2, [r3, #32]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40010000 	.word	0x40010000

08004248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	031b      	lsls	r3, r3, #12
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a10      	ldr	r2, [pc, #64]	; (80042e4 <TIM_OC4_SetConfig+0x9c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d109      	bne.n	80042bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000

080042e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a24      	ldr	r2, [pc, #144]	; (80043a4 <TIM_TI1_SetConfig+0xbc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d00f      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a21      	ldr	r2, [pc, #132]	; (80043a8 <TIM_TI1_SetConfig+0xc0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00b      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a20      	ldr	r2, [pc, #128]	; (80043ac <TIM_TI1_SetConfig+0xc4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <TIM_TI1_SetConfig+0xc8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_TI1_SetConfig+0x56>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <TIM_TI1_SetConfig+0xcc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d101      	bne.n	8004342 <TIM_TI1_SetConfig+0x5a>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <TIM_TI1_SetConfig+0x5c>
 8004342:	2300      	movs	r3, #0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e003      	b.n	8004362 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004368:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	b2db      	uxtb	r3, r3
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4313      	orrs	r3, r2
 8004374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f023 030a 	bic.w	r3, r3, #10
 800437c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f003 030a 	and.w	r3, r3, #10
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40014000 	.word	0x40014000

080043b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0201 	bic.w	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 030a 	bic.w	r3, r3, #10
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004416:	b480      	push	{r7}
 8004418:	b087      	sub	sp, #28
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f023 0210 	bic.w	r2, r3, #16
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004442:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	031b      	lsls	r3, r3, #12
 800445a:	b29b      	uxth	r3, r3
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004468:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f023 0210 	bic.w	r2, r3, #16
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	031b      	lsls	r3, r3, #12
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	621a      	str	r2, [r3, #32]
}
 80044e4:	bf00      	nop
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800452c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	b2db      	uxtb	r3, r3
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004540:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	621a      	str	r2, [r3, #32]
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	031b      	lsls	r3, r3, #12
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	031b      	lsls	r3, r3, #12
 80045c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b085      	sub	sp, #20
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	f043 0307 	orr.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	431a      	orrs	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4313      	orrs	r3, r2
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	609a      	str	r2, [r3, #8]
}
 800464c:	bf00      	nop
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2201      	movs	r2, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1a      	ldr	r2, [r3, #32]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	43db      	mvns	r3, r3
 800467a:	401a      	ands	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1a      	ldr	r2, [r3, #32]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	431a      	orrs	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e050      	b.n	800475e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d018      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d013      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00e      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a16      	ldr	r2, [pc, #88]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a15      	ldr	r2, [pc, #84]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d004      	beq.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a13      	ldr	r2, [pc, #76]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10c      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4313      	orrs	r3, r2
 8004742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40010000 	.word	0x40010000
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40000c00 	.word	0x40000c00
 800477c:	40014000 	.word	0x40014000

08004780 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004798:	2302      	movs	r3, #2
 800479a:	e03d      	b.n	8004818 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e03f      	b.n	80048de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f004 fb00 	bl	8008e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2224      	movs	r2, #36	; 0x24
 800487c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800488e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fc6d 	bl	8005170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b088      	sub	sp, #32
 80048ea:	af02      	add	r7, sp, #8
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b20      	cmp	r3, #32
 8004904:	f040 8083 	bne.w	8004a0e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_UART_Transmit+0x2e>
 800490e:	88fb      	ldrh	r3, [r7, #6]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e07b      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_UART_Transmit+0x40>
 8004922:	2302      	movs	r3, #2
 8004924:	e074      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2221      	movs	r2, #33	; 0x21
 8004938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800493c:	f7fc fb92 	bl	8001064 <HAL_GetTick>
 8004940:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004956:	e042      	b.n	80049de <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496e:	d122      	bne.n	80049b6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2200      	movs	r2, #0
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fa76 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e042      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	3302      	adds	r3, #2
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	e017      	b.n	80049de <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	3301      	adds	r3, #1
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	e013      	b.n	80049de <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fa53 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e01f      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	60ba      	str	r2, [r7, #8]
 80049d6:	781a      	ldrb	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1b7      	bne.n	8004958 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2200      	movs	r2, #0
 80049f0:	2140      	movs	r1, #64	; 0x40
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fa3a 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e006      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e000      	b.n	8004a10 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a0e:	2302      	movs	r3, #2
  }
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d166      	bne.n	8004b00 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_UART_Receive_DMA+0x26>
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e05f      	b.n	8004b02 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_UART_Receive_DMA+0x38>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e058      	b.n	8004b02 <HAL_UART_Receive_DMA+0xea>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	88fa      	ldrh	r2, [r7, #6]
 8004a62:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2222      	movs	r2, #34	; 0x22
 8004a6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <HAL_UART_Receive_DMA+0xf4>)
 8004a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	4a24      	ldr	r2, [pc, #144]	; (8004b10 <HAL_UART_Receive_DMA+0xf8>)
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <HAL_UART_Receive_DMA+0xfc>)
 8004a88:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	2200      	movs	r2, #0
 8004a90:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004a92:	f107 0308 	add.w	r3, r7, #8
 8004a96:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	f7fc fca7 	bl	80013fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ada:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	08004d55 	.word	0x08004d55
 8004b10:	08004dbd 	.word	0x08004dbd
 8004b14:	08004dd9 	.word	0x08004dd9

08004b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10d      	bne.n	8004b6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_UART_IRQHandler+0x52>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa82 	bl	800506c <UART_Receive_IT>
      return;
 8004b68:	e0d1      	b.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80b0 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x1ba>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <HAL_UART_IRQHandler+0x70>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80a5 	beq.w	8004cd2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x90>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	f043 0201 	orr.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xb0>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	f043 0202 	orr.w	r2, r3, #2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_UART_IRQHandler+0xd0>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00f      	beq.n	8004c12 <HAL_UART_IRQHandler+0xfa>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_UART_IRQHandler+0xee>
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d005      	beq.n	8004c12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	f043 0208 	orr.w	r2, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d078      	beq.n	8004d0c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <HAL_UART_IRQHandler+0x11c>
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa1c 	bl	800506c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	bf0c      	ite	eq
 8004c42:	2301      	moveq	r3, #1
 8004c44:	2300      	movne	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <HAL_UART_IRQHandler+0x144>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d031      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f965 	bl	8004f2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d123      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d013      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <HAL_UART_IRQHandler+0x1fc>)
 8004c8e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fc fc09 	bl	80014ac <HAL_DMA_Abort_IT>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d016      	beq.n	8004cce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004caa:	4610      	mov	r0, r2
 8004cac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cae:	e00e      	b.n	8004cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f845 	bl	8004d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb6:	e00a      	b.n	8004cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f841 	bl	8004d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbe:	e006      	b.n	8004cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f83d 	bl	8004d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004ccc:	e01e      	b.n	8004d0c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cce:	bf00      	nop
    return;
 8004cd0:	e01c      	b.n	8004d0c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_UART_IRQHandler+0x1d6>
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f952 	bl	8004f90 <UART_Transmit_IT>
    return;
 8004cec:	e00f      	b.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f99a 	bl	800503c <UART_EndTransmit_IT>
    return;
 8004d08:	bf00      	nop
 8004d0a:	e000      	b.n	8004d0e <HAL_UART_IRQHandler+0x1f6>
    return;
 8004d0c:	bf00      	nop
  }
}
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	08004f69 	.word	0x08004f69

08004d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11e      	bne.n	8004dae <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d84:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f002 ff3a 	bl	8007c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ffae 	bl	8004d2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b21      	cmp	r3, #33	; 0x21
 8004e0a:	d108      	bne.n	8004e1e <UART_DMAError+0x46>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e18:	68b8      	ldr	r0, [r7, #8]
 8004e1a:	f000 f871 	bl	8004f00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b40      	cmp	r3, #64	; 0x40
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b22      	cmp	r3, #34	; 0x22
 8004e3e:	d108      	bne.n	8004e52 <UART_DMAError+0x7a>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e4c:	68b8      	ldr	r0, [r7, #8]
 8004e4e:	f000 f86d 	bl	8004f2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	f043 0210 	orr.w	r2, r3, #16
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e5e:	68b8      	ldr	r0, [r7, #8]
 8004e60:	f7ff ff6e 	bl	8004d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7c:	e02c      	b.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d028      	beq.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e8c:	f7fc f8ea 	bl	8001064 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d21d      	bcs.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eaa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e00f      	b.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2301      	moveq	r3, #1
 8004eea:	2300      	movne	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	461a      	mov	r2, r3
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d0c3      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004f16:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fedc 	bl	8004d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b21      	cmp	r3, #33	; 0x21
 8004fa2:	d144      	bne.n	800502e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fac:	d11a      	bne.n	8004fe4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fc2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d105      	bne.n	8004fd8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	1c9a      	adds	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	621a      	str	r2, [r3, #32]
 8004fd6:	e00e      	b.n	8004ff6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	621a      	str	r2, [r3, #32]
 8004fe2:	e008      	b.n	8004ff6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	1c59      	adds	r1, r3, #1
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6211      	str	r1, [r2, #32]
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4619      	mov	r1, r3
 8005004:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10f      	bne.n	800502a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005018:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005028:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e000      	b.n	8005030 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800502e:	2302      	movs	r3, #2
  }
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005052:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff fe5b 	bl	8004d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b22      	cmp	r3, #34	; 0x22
 800507e:	d171      	bne.n	8005164 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005088:	d123      	bne.n	80050d2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10e      	bne.n	80050b6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	1c9a      	adds	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28
 80050b4:	e029      	b.n	800510a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28
 80050d0:	e01b      	b.n	800510a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6858      	ldr	r0, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	1c59      	adds	r1, r3, #1
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6291      	str	r1, [r2, #40]	; 0x28
 80050ea:	b2c2      	uxtb	r2, r0
 80050ec:	701a      	strb	r2, [r3, #0]
 80050ee:	e00c      	b.n	800510a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	1c58      	adds	r0, r3, #1
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	6288      	str	r0, [r1, #40]	; 0x28
 8005102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	4619      	mov	r1, r3
 8005118:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800511a:	2b00      	cmp	r3, #0
 800511c:	d120      	bne.n	8005160 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0220 	bic.w	r2, r2, #32
 800512c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800513c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f002 fd66 	bl	8007c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	e002      	b.n	8005166 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	e000      	b.n	8005166 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005164:	2302      	movs	r3, #2
  }
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80051b2:	f023 030c 	bic.w	r3, r3, #12
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	430b      	orrs	r3, r1
 80051be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051de:	f040 818b 	bne.w	80054f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4ac1      	ldr	r2, [pc, #772]	; (80054ec <UART_SetConfig+0x37c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d005      	beq.n	80051f8 <UART_SetConfig+0x88>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4abf      	ldr	r2, [pc, #764]	; (80054f0 <UART_SetConfig+0x380>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	f040 80bd 	bne.w	8005372 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fe f97c 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 80051fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	461d      	mov	r5, r3
 8005202:	f04f 0600 	mov.w	r6, #0
 8005206:	46a8      	mov	r8, r5
 8005208:	46b1      	mov	r9, r6
 800520a:	eb18 0308 	adds.w	r3, r8, r8
 800520e:	eb49 0409 	adc.w	r4, r9, r9
 8005212:	4698      	mov	r8, r3
 8005214:	46a1      	mov	r9, r4
 8005216:	eb18 0805 	adds.w	r8, r8, r5
 800521a:	eb49 0906 	adc.w	r9, r9, r6
 800521e:	f04f 0100 	mov.w	r1, #0
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800522a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800522e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005232:	4688      	mov	r8, r1
 8005234:	4691      	mov	r9, r2
 8005236:	eb18 0005 	adds.w	r0, r8, r5
 800523a:	eb49 0106 	adc.w	r1, r9, r6
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	461d      	mov	r5, r3
 8005244:	f04f 0600 	mov.w	r6, #0
 8005248:	196b      	adds	r3, r5, r5
 800524a:	eb46 0406 	adc.w	r4, r6, r6
 800524e:	461a      	mov	r2, r3
 8005250:	4623      	mov	r3, r4
 8005252:	f7fb fd21 	bl	8000c98 <__aeabi_uldivmod>
 8005256:	4603      	mov	r3, r0
 8005258:	460c      	mov	r4, r1
 800525a:	461a      	mov	r2, r3
 800525c:	4ba5      	ldr	r3, [pc, #660]	; (80054f4 <UART_SetConfig+0x384>)
 800525e:	fba3 2302 	umull	r2, r3, r3, r2
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	461d      	mov	r5, r3
 800526c:	f04f 0600 	mov.w	r6, #0
 8005270:	46a9      	mov	r9, r5
 8005272:	46b2      	mov	sl, r6
 8005274:	eb19 0309 	adds.w	r3, r9, r9
 8005278:	eb4a 040a 	adc.w	r4, sl, sl
 800527c:	4699      	mov	r9, r3
 800527e:	46a2      	mov	sl, r4
 8005280:	eb19 0905 	adds.w	r9, r9, r5
 8005284:	eb4a 0a06 	adc.w	sl, sl, r6
 8005288:	f04f 0100 	mov.w	r1, #0
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005294:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005298:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800529c:	4689      	mov	r9, r1
 800529e:	4692      	mov	sl, r2
 80052a0:	eb19 0005 	adds.w	r0, r9, r5
 80052a4:	eb4a 0106 	adc.w	r1, sl, r6
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	461d      	mov	r5, r3
 80052ae:	f04f 0600 	mov.w	r6, #0
 80052b2:	196b      	adds	r3, r5, r5
 80052b4:	eb46 0406 	adc.w	r4, r6, r6
 80052b8:	461a      	mov	r2, r3
 80052ba:	4623      	mov	r3, r4
 80052bc:	f7fb fcec 	bl	8000c98 <__aeabi_uldivmod>
 80052c0:	4603      	mov	r3, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	461a      	mov	r2, r3
 80052c6:	4b8b      	ldr	r3, [pc, #556]	; (80054f4 <UART_SetConfig+0x384>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	2164      	movs	r1, #100	; 0x64
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	3332      	adds	r3, #50	; 0x32
 80052da:	4a86      	ldr	r2, [pc, #536]	; (80054f4 <UART_SetConfig+0x384>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052e8:	4498      	add	r8, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	461d      	mov	r5, r3
 80052ee:	f04f 0600 	mov.w	r6, #0
 80052f2:	46a9      	mov	r9, r5
 80052f4:	46b2      	mov	sl, r6
 80052f6:	eb19 0309 	adds.w	r3, r9, r9
 80052fa:	eb4a 040a 	adc.w	r4, sl, sl
 80052fe:	4699      	mov	r9, r3
 8005300:	46a2      	mov	sl, r4
 8005302:	eb19 0905 	adds.w	r9, r9, r5
 8005306:	eb4a 0a06 	adc.w	sl, sl, r6
 800530a:	f04f 0100 	mov.w	r1, #0
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005316:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800531a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800531e:	4689      	mov	r9, r1
 8005320:	4692      	mov	sl, r2
 8005322:	eb19 0005 	adds.w	r0, r9, r5
 8005326:	eb4a 0106 	adc.w	r1, sl, r6
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	461d      	mov	r5, r3
 8005330:	f04f 0600 	mov.w	r6, #0
 8005334:	196b      	adds	r3, r5, r5
 8005336:	eb46 0406 	adc.w	r4, r6, r6
 800533a:	461a      	mov	r2, r3
 800533c:	4623      	mov	r3, r4
 800533e:	f7fb fcab 	bl	8000c98 <__aeabi_uldivmod>
 8005342:	4603      	mov	r3, r0
 8005344:	460c      	mov	r4, r1
 8005346:	461a      	mov	r2, r3
 8005348:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <UART_SetConfig+0x384>)
 800534a:	fba3 1302 	umull	r1, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	2164      	movs	r1, #100	; 0x64
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	3332      	adds	r3, #50	; 0x32
 800535c:	4a65      	ldr	r2, [pc, #404]	; (80054f4 <UART_SetConfig+0x384>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	f003 0207 	and.w	r2, r3, #7
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4442      	add	r2, r8
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	e26f      	b.n	8005852 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005372:	f7fe f8ab 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 8005376:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	461d      	mov	r5, r3
 800537c:	f04f 0600 	mov.w	r6, #0
 8005380:	46a8      	mov	r8, r5
 8005382:	46b1      	mov	r9, r6
 8005384:	eb18 0308 	adds.w	r3, r8, r8
 8005388:	eb49 0409 	adc.w	r4, r9, r9
 800538c:	4698      	mov	r8, r3
 800538e:	46a1      	mov	r9, r4
 8005390:	eb18 0805 	adds.w	r8, r8, r5
 8005394:	eb49 0906 	adc.w	r9, r9, r6
 8005398:	f04f 0100 	mov.w	r1, #0
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053ac:	4688      	mov	r8, r1
 80053ae:	4691      	mov	r9, r2
 80053b0:	eb18 0005 	adds.w	r0, r8, r5
 80053b4:	eb49 0106 	adc.w	r1, r9, r6
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	461d      	mov	r5, r3
 80053be:	f04f 0600 	mov.w	r6, #0
 80053c2:	196b      	adds	r3, r5, r5
 80053c4:	eb46 0406 	adc.w	r4, r6, r6
 80053c8:	461a      	mov	r2, r3
 80053ca:	4623      	mov	r3, r4
 80053cc:	f7fb fc64 	bl	8000c98 <__aeabi_uldivmod>
 80053d0:	4603      	mov	r3, r0
 80053d2:	460c      	mov	r4, r1
 80053d4:	461a      	mov	r2, r3
 80053d6:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <UART_SetConfig+0x384>)
 80053d8:	fba3 2302 	umull	r2, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	461d      	mov	r5, r3
 80053e6:	f04f 0600 	mov.w	r6, #0
 80053ea:	46a9      	mov	r9, r5
 80053ec:	46b2      	mov	sl, r6
 80053ee:	eb19 0309 	adds.w	r3, r9, r9
 80053f2:	eb4a 040a 	adc.w	r4, sl, sl
 80053f6:	4699      	mov	r9, r3
 80053f8:	46a2      	mov	sl, r4
 80053fa:	eb19 0905 	adds.w	r9, r9, r5
 80053fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8005402:	f04f 0100 	mov.w	r1, #0
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800540e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005412:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005416:	4689      	mov	r9, r1
 8005418:	4692      	mov	sl, r2
 800541a:	eb19 0005 	adds.w	r0, r9, r5
 800541e:	eb4a 0106 	adc.w	r1, sl, r6
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	461d      	mov	r5, r3
 8005428:	f04f 0600 	mov.w	r6, #0
 800542c:	196b      	adds	r3, r5, r5
 800542e:	eb46 0406 	adc.w	r4, r6, r6
 8005432:	461a      	mov	r2, r3
 8005434:	4623      	mov	r3, r4
 8005436:	f7fb fc2f 	bl	8000c98 <__aeabi_uldivmod>
 800543a:	4603      	mov	r3, r0
 800543c:	460c      	mov	r4, r1
 800543e:	461a      	mov	r2, r3
 8005440:	4b2c      	ldr	r3, [pc, #176]	; (80054f4 <UART_SetConfig+0x384>)
 8005442:	fba3 1302 	umull	r1, r3, r3, r2
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	2164      	movs	r1, #100	; 0x64
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	3332      	adds	r3, #50	; 0x32
 8005454:	4a27      	ldr	r2, [pc, #156]	; (80054f4 <UART_SetConfig+0x384>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005462:	4498      	add	r8, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	461d      	mov	r5, r3
 8005468:	f04f 0600 	mov.w	r6, #0
 800546c:	46a9      	mov	r9, r5
 800546e:	46b2      	mov	sl, r6
 8005470:	eb19 0309 	adds.w	r3, r9, r9
 8005474:	eb4a 040a 	adc.w	r4, sl, sl
 8005478:	4699      	mov	r9, r3
 800547a:	46a2      	mov	sl, r4
 800547c:	eb19 0905 	adds.w	r9, r9, r5
 8005480:	eb4a 0a06 	adc.w	sl, sl, r6
 8005484:	f04f 0100 	mov.w	r1, #0
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005490:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005494:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005498:	4689      	mov	r9, r1
 800549a:	4692      	mov	sl, r2
 800549c:	eb19 0005 	adds.w	r0, r9, r5
 80054a0:	eb4a 0106 	adc.w	r1, sl, r6
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	461d      	mov	r5, r3
 80054aa:	f04f 0600 	mov.w	r6, #0
 80054ae:	196b      	adds	r3, r5, r5
 80054b0:	eb46 0406 	adc.w	r4, r6, r6
 80054b4:	461a      	mov	r2, r3
 80054b6:	4623      	mov	r3, r4
 80054b8:	f7fb fbee 	bl	8000c98 <__aeabi_uldivmod>
 80054bc:	4603      	mov	r3, r0
 80054be:	460c      	mov	r4, r1
 80054c0:	461a      	mov	r2, r3
 80054c2:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <UART_SetConfig+0x384>)
 80054c4:	fba3 1302 	umull	r1, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2164      	movs	r1, #100	; 0x64
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	3332      	adds	r3, #50	; 0x32
 80054d6:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <UART_SetConfig+0x384>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 0207 	and.w	r2, r3, #7
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4442      	add	r2, r8
 80054e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80054ea:	e1b2      	b.n	8005852 <UART_SetConfig+0x6e2>
 80054ec:	40011000 	.word	0x40011000
 80054f0:	40011400 	.word	0x40011400
 80054f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4ad7      	ldr	r2, [pc, #860]	; (800585c <UART_SetConfig+0x6ec>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d005      	beq.n	800550e <UART_SetConfig+0x39e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4ad6      	ldr	r2, [pc, #856]	; (8005860 <UART_SetConfig+0x6f0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	f040 80d1 	bne.w	80056b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800550e:	f7fd fff1 	bl	80034f4 <HAL_RCC_GetPCLK2Freq>
 8005512:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	469a      	mov	sl, r3
 8005518:	f04f 0b00 	mov.w	fp, #0
 800551c:	46d0      	mov	r8, sl
 800551e:	46d9      	mov	r9, fp
 8005520:	eb18 0308 	adds.w	r3, r8, r8
 8005524:	eb49 0409 	adc.w	r4, r9, r9
 8005528:	4698      	mov	r8, r3
 800552a:	46a1      	mov	r9, r4
 800552c:	eb18 080a 	adds.w	r8, r8, sl
 8005530:	eb49 090b 	adc.w	r9, r9, fp
 8005534:	f04f 0100 	mov.w	r1, #0
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005540:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005544:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005548:	4688      	mov	r8, r1
 800554a:	4691      	mov	r9, r2
 800554c:	eb1a 0508 	adds.w	r5, sl, r8
 8005550:	eb4b 0609 	adc.w	r6, fp, r9
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4619      	mov	r1, r3
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	f04f 0400 	mov.w	r4, #0
 8005566:	0094      	lsls	r4, r2, #2
 8005568:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800556c:	008b      	lsls	r3, r1, #2
 800556e:	461a      	mov	r2, r3
 8005570:	4623      	mov	r3, r4
 8005572:	4628      	mov	r0, r5
 8005574:	4631      	mov	r1, r6
 8005576:	f7fb fb8f 	bl	8000c98 <__aeabi_uldivmod>
 800557a:	4603      	mov	r3, r0
 800557c:	460c      	mov	r4, r1
 800557e:	461a      	mov	r2, r3
 8005580:	4bb8      	ldr	r3, [pc, #736]	; (8005864 <UART_SetConfig+0x6f4>)
 8005582:	fba3 2302 	umull	r2, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	469b      	mov	fp, r3
 8005590:	f04f 0c00 	mov.w	ip, #0
 8005594:	46d9      	mov	r9, fp
 8005596:	46e2      	mov	sl, ip
 8005598:	eb19 0309 	adds.w	r3, r9, r9
 800559c:	eb4a 040a 	adc.w	r4, sl, sl
 80055a0:	4699      	mov	r9, r3
 80055a2:	46a2      	mov	sl, r4
 80055a4:	eb19 090b 	adds.w	r9, r9, fp
 80055a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055ac:	f04f 0100 	mov.w	r1, #0
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055c0:	4689      	mov	r9, r1
 80055c2:	4692      	mov	sl, r2
 80055c4:	eb1b 0509 	adds.w	r5, fp, r9
 80055c8:	eb4c 060a 	adc.w	r6, ip, sl
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4619      	mov	r1, r3
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	f04f 0400 	mov.w	r4, #0
 80055de:	0094      	lsls	r4, r2, #2
 80055e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055e4:	008b      	lsls	r3, r1, #2
 80055e6:	461a      	mov	r2, r3
 80055e8:	4623      	mov	r3, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	4631      	mov	r1, r6
 80055ee:	f7fb fb53 	bl	8000c98 <__aeabi_uldivmod>
 80055f2:	4603      	mov	r3, r0
 80055f4:	460c      	mov	r4, r1
 80055f6:	461a      	mov	r2, r3
 80055f8:	4b9a      	ldr	r3, [pc, #616]	; (8005864 <UART_SetConfig+0x6f4>)
 80055fa:	fba3 1302 	umull	r1, r3, r3, r2
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	2164      	movs	r1, #100	; 0x64
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	3332      	adds	r3, #50	; 0x32
 800560c:	4a95      	ldr	r2, [pc, #596]	; (8005864 <UART_SetConfig+0x6f4>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005618:	4498      	add	r8, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	469b      	mov	fp, r3
 800561e:	f04f 0c00 	mov.w	ip, #0
 8005622:	46d9      	mov	r9, fp
 8005624:	46e2      	mov	sl, ip
 8005626:	eb19 0309 	adds.w	r3, r9, r9
 800562a:	eb4a 040a 	adc.w	r4, sl, sl
 800562e:	4699      	mov	r9, r3
 8005630:	46a2      	mov	sl, r4
 8005632:	eb19 090b 	adds.w	r9, r9, fp
 8005636:	eb4a 0a0c 	adc.w	sl, sl, ip
 800563a:	f04f 0100 	mov.w	r1, #0
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005646:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800564a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800564e:	4689      	mov	r9, r1
 8005650:	4692      	mov	sl, r2
 8005652:	eb1b 0509 	adds.w	r5, fp, r9
 8005656:	eb4c 060a 	adc.w	r6, ip, sl
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	4619      	mov	r1, r3
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	f04f 0400 	mov.w	r4, #0
 800566c:	0094      	lsls	r4, r2, #2
 800566e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005672:	008b      	lsls	r3, r1, #2
 8005674:	461a      	mov	r2, r3
 8005676:	4623      	mov	r3, r4
 8005678:	4628      	mov	r0, r5
 800567a:	4631      	mov	r1, r6
 800567c:	f7fb fb0c 	bl	8000c98 <__aeabi_uldivmod>
 8005680:	4603      	mov	r3, r0
 8005682:	460c      	mov	r4, r1
 8005684:	461a      	mov	r2, r3
 8005686:	4b77      	ldr	r3, [pc, #476]	; (8005864 <UART_SetConfig+0x6f4>)
 8005688:	fba3 1302 	umull	r1, r3, r3, r2
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	2164      	movs	r1, #100	; 0x64
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	3332      	adds	r3, #50	; 0x32
 800569a:	4a72      	ldr	r2, [pc, #456]	; (8005864 <UART_SetConfig+0x6f4>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	f003 020f 	and.w	r2, r3, #15
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4442      	add	r2, r8
 80056ac:	609a      	str	r2, [r3, #8]
 80056ae:	e0d0      	b.n	8005852 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80056b0:	f7fd ff0c 	bl	80034cc <HAL_RCC_GetPCLK1Freq>
 80056b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	469a      	mov	sl, r3
 80056ba:	f04f 0b00 	mov.w	fp, #0
 80056be:	46d0      	mov	r8, sl
 80056c0:	46d9      	mov	r9, fp
 80056c2:	eb18 0308 	adds.w	r3, r8, r8
 80056c6:	eb49 0409 	adc.w	r4, r9, r9
 80056ca:	4698      	mov	r8, r3
 80056cc:	46a1      	mov	r9, r4
 80056ce:	eb18 080a 	adds.w	r8, r8, sl
 80056d2:	eb49 090b 	adc.w	r9, r9, fp
 80056d6:	f04f 0100 	mov.w	r1, #0
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056ea:	4688      	mov	r8, r1
 80056ec:	4691      	mov	r9, r2
 80056ee:	eb1a 0508 	adds.w	r5, sl, r8
 80056f2:	eb4b 0609 	adc.w	r6, fp, r9
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	4619      	mov	r1, r3
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	f04f 0400 	mov.w	r4, #0
 8005708:	0094      	lsls	r4, r2, #2
 800570a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800570e:	008b      	lsls	r3, r1, #2
 8005710:	461a      	mov	r2, r3
 8005712:	4623      	mov	r3, r4
 8005714:	4628      	mov	r0, r5
 8005716:	4631      	mov	r1, r6
 8005718:	f7fb fabe 	bl	8000c98 <__aeabi_uldivmod>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	461a      	mov	r2, r3
 8005722:	4b50      	ldr	r3, [pc, #320]	; (8005864 <UART_SetConfig+0x6f4>)
 8005724:	fba3 2302 	umull	r2, r3, r3, r2
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	469b      	mov	fp, r3
 8005732:	f04f 0c00 	mov.w	ip, #0
 8005736:	46d9      	mov	r9, fp
 8005738:	46e2      	mov	sl, ip
 800573a:	eb19 0309 	adds.w	r3, r9, r9
 800573e:	eb4a 040a 	adc.w	r4, sl, sl
 8005742:	4699      	mov	r9, r3
 8005744:	46a2      	mov	sl, r4
 8005746:	eb19 090b 	adds.w	r9, r9, fp
 800574a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800574e:	f04f 0100 	mov.w	r1, #0
 8005752:	f04f 0200 	mov.w	r2, #0
 8005756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800575a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800575e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005762:	4689      	mov	r9, r1
 8005764:	4692      	mov	sl, r2
 8005766:	eb1b 0509 	adds.w	r5, fp, r9
 800576a:	eb4c 060a 	adc.w	r6, ip, sl
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4619      	mov	r1, r3
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	f04f 0400 	mov.w	r4, #0
 8005780:	0094      	lsls	r4, r2, #2
 8005782:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005786:	008b      	lsls	r3, r1, #2
 8005788:	461a      	mov	r2, r3
 800578a:	4623      	mov	r3, r4
 800578c:	4628      	mov	r0, r5
 800578e:	4631      	mov	r1, r6
 8005790:	f7fb fa82 	bl	8000c98 <__aeabi_uldivmod>
 8005794:	4603      	mov	r3, r0
 8005796:	460c      	mov	r4, r1
 8005798:	461a      	mov	r2, r3
 800579a:	4b32      	ldr	r3, [pc, #200]	; (8005864 <UART_SetConfig+0x6f4>)
 800579c:	fba3 1302 	umull	r1, r3, r3, r2
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	2164      	movs	r1, #100	; 0x64
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	3332      	adds	r3, #50	; 0x32
 80057ae:	4a2d      	ldr	r2, [pc, #180]	; (8005864 <UART_SetConfig+0x6f4>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ba:	4498      	add	r8, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	469b      	mov	fp, r3
 80057c0:	f04f 0c00 	mov.w	ip, #0
 80057c4:	46d9      	mov	r9, fp
 80057c6:	46e2      	mov	sl, ip
 80057c8:	eb19 0309 	adds.w	r3, r9, r9
 80057cc:	eb4a 040a 	adc.w	r4, sl, sl
 80057d0:	4699      	mov	r9, r3
 80057d2:	46a2      	mov	sl, r4
 80057d4:	eb19 090b 	adds.w	r9, r9, fp
 80057d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057f0:	4689      	mov	r9, r1
 80057f2:	4692      	mov	sl, r2
 80057f4:	eb1b 0509 	adds.w	r5, fp, r9
 80057f8:	eb4c 060a 	adc.w	r6, ip, sl
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4619      	mov	r1, r3
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	f04f 0400 	mov.w	r4, #0
 800580e:	0094      	lsls	r4, r2, #2
 8005810:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005814:	008b      	lsls	r3, r1, #2
 8005816:	461a      	mov	r2, r3
 8005818:	4623      	mov	r3, r4
 800581a:	4628      	mov	r0, r5
 800581c:	4631      	mov	r1, r6
 800581e:	f7fb fa3b 	bl	8000c98 <__aeabi_uldivmod>
 8005822:	4603      	mov	r3, r0
 8005824:	460c      	mov	r4, r1
 8005826:	461a      	mov	r2, r3
 8005828:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <UART_SetConfig+0x6f4>)
 800582a:	fba3 1302 	umull	r1, r3, r3, r2
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2164      	movs	r1, #100	; 0x64
 8005832:	fb01 f303 	mul.w	r3, r1, r3
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	3332      	adds	r3, #50	; 0x32
 800583c:	4a09      	ldr	r2, [pc, #36]	; (8005864 <UART_SetConfig+0x6f4>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4442      	add	r2, r8
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	e7ff      	b.n	8005852 <UART_SetConfig+0x6e2>
 8005852:	bf00      	nop
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585c:	40011000 	.word	0x40011000
 8005860:	40011400 	.word	0x40011400
 8005864:	51eb851f 	.word	0x51eb851f

08005868 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <MX_DMA_Init+0x3c>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	4a0b      	ldr	r2, [pc, #44]	; (80058a4 <MX_DMA_Init+0x3c>)
 8005878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800587c:	6313      	str	r3, [r2, #48]	; 0x30
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <MX_DMA_Init+0x3c>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800588a:	2200      	movs	r2, #0
 800588c:	2100      	movs	r1, #0
 800588e:	2010      	movs	r0, #16
 8005890:	f7fb fccf 	bl	8001232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005894:	2010      	movs	r0, #16
 8005896:	f7fb fce8 	bl	800126a <HAL_NVIC_EnableIRQ>

}
 800589a:	bf00      	nop
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800

080058a8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	; 0x30
 80058ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ae:	f107 031c 	add.w	r3, r7, #28
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	60da      	str	r2, [r3, #12]
 80058bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	4ba4      	ldr	r3, [pc, #656]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	4aa3      	ldr	r2, [pc, #652]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 80058c8:	f043 0310 	orr.w	r3, r3, #16
 80058cc:	6313      	str	r3, [r2, #48]	; 0x30
 80058ce:	4ba1      	ldr	r3, [pc, #644]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	61bb      	str	r3, [r7, #24]
 80058d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	4b9d      	ldr	r3, [pc, #628]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	4a9c      	ldr	r2, [pc, #624]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ea:	4b9a      	ldr	r3, [pc, #616]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	4b96      	ldr	r3, [pc, #600]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	4a95      	ldr	r2, [pc, #596]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 8005900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005904:	6313      	str	r3, [r2, #48]	; 0x30
 8005906:	4b93      	ldr	r3, [pc, #588]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	4b8f      	ldr	r3, [pc, #572]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 8005918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591a:	4a8e      	ldr	r2, [pc, #568]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	6313      	str	r3, [r2, #48]	; 0x30
 8005922:	4b8c      	ldr	r3, [pc, #560]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	4b88      	ldr	r3, [pc, #544]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	4a87      	ldr	r2, [pc, #540]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 8005938:	f043 0302 	orr.w	r3, r3, #2
 800593c:	6313      	str	r3, [r2, #48]	; 0x30
 800593e:	4b85      	ldr	r3, [pc, #532]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800594a:	2300      	movs	r3, #0
 800594c:	607b      	str	r3, [r7, #4]
 800594e:	4b81      	ldr	r3, [pc, #516]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	4a80      	ldr	r2, [pc, #512]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 8005954:	f043 0308 	orr.w	r3, r3, #8
 8005958:	6313      	str	r3, [r2, #48]	; 0x30
 800595a:	4b7e      	ldr	r3, [pc, #504]	; (8005b54 <MX_GPIO_Init+0x2ac>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	607b      	str	r3, [r7, #4]
 8005964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8005966:	2200      	movs	r2, #0
 8005968:	2108      	movs	r1, #8
 800596a:	487b      	ldr	r0, [pc, #492]	; (8005b58 <MX_GPIO_Init+0x2b0>)
 800596c:	f7fc f9aa 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8005970:	2201      	movs	r2, #1
 8005972:	2101      	movs	r1, #1
 8005974:	4879      	ldr	r0, [pc, #484]	; (8005b5c <MX_GPIO_Init+0x2b4>)
 8005976:	f7fc f9a5 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, En_STEPPER_UPPER_Pin|En_STEPPER_LOWER_Pin|Dc_IN2_Pin|Dc_IN1_Pin 
 800597a:	2200      	movs	r2, #0
 800597c:	f648 6110 	movw	r1, #36368	; 0x8e10
 8005980:	4877      	ldr	r0, [pc, #476]	; (8005b60 <MX_GPIO_Init+0x2b8>)
 8005982:	f7fc f99f 	bl	8001cc4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step_STEPPER_LOWER_Pin|Dir_STEPPER_LOWER_Pin|Step_STEPPER_UPPER_Pin|Dir_STEPPER_UPPER_Pin, GPIO_PIN_RESET);
 8005986:	2200      	movs	r2, #0
 8005988:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800598c:	4873      	ldr	r0, [pc, #460]	; (8005b5c <MX_GPIO_Init+0x2b4>)
 800598e:	f7fc f999 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005992:	2304      	movs	r3, #4
 8005994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005996:	2300      	movs	r3, #0
 8005998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599a:	2300      	movs	r3, #0
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800599e:	f107 031c 	add.w	r3, r7, #28
 80059a2:	4619      	mov	r1, r3
 80059a4:	486c      	ldr	r0, [pc, #432]	; (8005b58 <MX_GPIO_Init+0x2b0>)
 80059a6:	f7fc f80b 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80059aa:	2308      	movs	r3, #8
 80059ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059ae:	2301      	movs	r3, #1
 80059b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b2:	2300      	movs	r3, #0
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059b6:	2300      	movs	r3, #0
 80059b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80059ba:	f107 031c 	add.w	r3, r7, #28
 80059be:	4619      	mov	r1, r3
 80059c0:	4865      	ldr	r0, [pc, #404]	; (8005b58 <MX_GPIO_Init+0x2b0>)
 80059c2:	f7fb fffd 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80059c6:	2332      	movs	r3, #50	; 0x32
 80059c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80059ca:	4b66      	ldr	r3, [pc, #408]	; (8005b64 <MX_GPIO_Init+0x2bc>)
 80059cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ce:	2300      	movs	r3, #0
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059d2:	f107 031c 	add.w	r3, r7, #28
 80059d6:	4619      	mov	r1, r3
 80059d8:	485f      	ldr	r0, [pc, #380]	; (8005b58 <MX_GPIO_Init+0x2b0>)
 80059da:	f7fb fff1 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Dir_STEPPER_LOWER_Pin|Step_STEPPER_UPPER_Pin|Dir_STEPPER_UPPER_Pin;
 80059de:	f240 3381 	movw	r3, #897	; 0x381
 80059e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059e4:	2301      	movs	r3, #1
 80059e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ec:	2300      	movs	r3, #0
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059f0:	f107 031c 	add.w	r3, r7, #28
 80059f4:	4619      	mov	r1, r3
 80059f6:	4859      	ldr	r0, [pc, #356]	; (8005b5c <MX_GPIO_Init+0x2b4>)
 80059f8:	f7fb ffe2 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80059fc:	2308      	movs	r3, #8
 80059fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a00:	2302      	movs	r3, #2
 8005a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a0c:	2305      	movs	r3, #5
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8005a10:	f107 031c 	add.w	r3, r7, #28
 8005a14:	4619      	mov	r1, r3
 8005a16:	4851      	ldr	r0, [pc, #324]	; (8005b5c <MX_GPIO_Init+0x2b4>)
 8005a18:	f7fb ffd2 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005a20:	4b50      	ldr	r3, [pc, #320]	; (8005b64 <MX_GPIO_Init+0x2bc>)
 8005a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a28:	f107 031c 	add.w	r3, r7, #28
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	484e      	ldr	r0, [pc, #312]	; (8005b68 <MX_GPIO_Init+0x2c0>)
 8005a30:	f7fb ffc6 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005a34:	2310      	movs	r3, #16
 8005a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a38:	2302      	movs	r3, #2
 8005a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a40:	2300      	movs	r3, #0
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005a44:	2306      	movs	r3, #6
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005a48:	f107 031c 	add.w	r3, r7, #28
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4846      	ldr	r0, [pc, #280]	; (8005b68 <MX_GPIO_Init+0x2c0>)
 8005a50:	f7fb ffb6 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8005a54:	23a0      	movs	r3, #160	; 0xa0
 8005a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a60:	2303      	movs	r3, #3
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a64:	2305      	movs	r3, #5
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a68:	f107 031c 	add.w	r3, r7, #28
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	483e      	ldr	r0, [pc, #248]	; (8005b68 <MX_GPIO_Init+0x2c0>)
 8005a70:	f7fb ffa6 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8005a74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a82:	2300      	movs	r3, #0
 8005a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a86:	2305      	movs	r3, #5
 8005a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a8a:	f107 031c 	add.w	r3, r7, #28
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4836      	ldr	r0, [pc, #216]	; (8005b6c <MX_GPIO_Init+0x2c4>)
 8005a92:	f7fb ff95 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = En_STEPPER_UPPER_Pin|En_STEPPER_LOWER_Pin;
 8005a96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005aa8:	f107 031c 	add.w	r3, r7, #28
 8005aac:	4619      	mov	r1, r3
 8005aae:	482c      	ldr	r0, [pc, #176]	; (8005b60 <MX_GPIO_Init+0x2b8>)
 8005ab0:	f7fb ff86 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Dc_IN2_Pin|Dc_IN1_Pin|Audio_RST_Pin;
 8005ab4:	f648 0310 	movw	r3, #34832	; 0x8810
 8005ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005aba:	2301      	movs	r3, #1
 8005abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ac6:	f107 031c 	add.w	r3, r7, #28
 8005aca:	4619      	mov	r1, r3
 8005acc:	4824      	ldr	r0, [pc, #144]	; (8005b60 <MX_GPIO_Init+0x2b8>)
 8005ace:	f7fb ff77 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Step_STEPPER_LOWER_Pin;
 8005ad2:	2340      	movs	r3, #64	; 0x40
 8005ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Step_STEPPER_LOWER_GPIO_Port, &GPIO_InitStruct);
 8005ae2:	f107 031c 	add.w	r3, r7, #28
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	481c      	ldr	r0, [pc, #112]	; (8005b5c <MX_GPIO_Init+0x2b4>)
 8005aea:	f7fb ff69 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005aee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005af4:	2302      	movs	r3, #2
 8005af6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005afc:	2303      	movs	r3, #3
 8005afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005b00:	230a      	movs	r3, #10
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b04:	f107 031c 	add.w	r3, r7, #28
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4817      	ldr	r0, [pc, #92]	; (8005b68 <MX_GPIO_Init+0x2c0>)
 8005b0c:	f7fb ff58 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8005b10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b16:	2302      	movs	r3, #2
 8005b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005b22:	2306      	movs	r3, #6
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b26:	f107 031c 	add.w	r3, r7, #28
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	480b      	ldr	r0, [pc, #44]	; (8005b5c <MX_GPIO_Init+0x2b4>)
 8005b2e:	f7fb ff47 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8005b32:	2320      	movs	r3, #32
 8005b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b36:	2300      	movs	r3, #0
 8005b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005b3e:	f107 031c 	add.w	r3, r7, #28
 8005b42:	4619      	mov	r1, r3
 8005b44:	4806      	ldr	r0, [pc, #24]	; (8005b60 <MX_GPIO_Init+0x2b8>)
 8005b46:	f7fb ff3b 	bl	80019c0 <HAL_GPIO_Init>

}
 8005b4a:	bf00      	nop
 8005b4c:	3730      	adds	r7, #48	; 0x30
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	40020800 	.word	0x40020800
 8005b60:	40020c00 	.word	0x40020c00
 8005b64:	10120000 	.word	0x10120000
 8005b68:	40020000 	.word	0x40020000
 8005b6c:	40020400 	.word	0x40020400

08005b70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005b74:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005b76:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <MX_I2C1_Init+0x54>)
 8005b78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005b7a:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005b7c:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <MX_I2C1_Init+0x58>)
 8005b7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b80:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005b86:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b8c:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005b8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005b9a:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ba6:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005bac:	4804      	ldr	r0, [pc, #16]	; (8005bc0 <MX_I2C1_Init+0x50>)
 8005bae:	f7fc f8a3 	bl	8001cf8 <HAL_I2C_Init>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005bb8:	f002 fb98 	bl	80082ec <Error_Handler>
  }

}
 8005bbc:	bf00      	nop
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	2000021c 	.word	0x2000021c
 8005bc4:	40005400 	.word	0x40005400
 8005bc8:	00061a80 	.word	0x00061a80

08005bcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	; 0x28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd4:	f107 0314 	add.w	r3, r7, #20
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	609a      	str	r2, [r3, #8]
 8005be0:	60da      	str	r2, [r3, #12]
 8005be2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a19      	ldr	r2, [pc, #100]	; (8005c50 <HAL_I2C_MspInit+0x84>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d12c      	bne.n	8005c48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	4b18      	ldr	r3, [pc, #96]	; (8005c54 <HAL_I2C_MspInit+0x88>)
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	4a17      	ldr	r2, [pc, #92]	; (8005c54 <HAL_I2C_MspInit+0x88>)
 8005bf8:	f043 0302 	orr.w	r3, r3, #2
 8005bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bfe:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <HAL_I2C_MspInit+0x88>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8005c0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c10:	2312      	movs	r3, #18
 8005c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c14:	2301      	movs	r3, #1
 8005c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c20:	f107 0314 	add.w	r3, r7, #20
 8005c24:	4619      	mov	r1, r3
 8005c26:	480c      	ldr	r0, [pc, #48]	; (8005c58 <HAL_I2C_MspInit+0x8c>)
 8005c28:	f7fb feca 	bl	80019c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <HAL_I2C_MspInit+0x88>)
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	4a07      	ldr	r2, [pc, #28]	; (8005c54 <HAL_I2C_MspInit+0x88>)
 8005c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c3c:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_I2C_MspInit+0x88>)
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005c48:	bf00      	nop
 8005c4a:	3728      	adds	r7, #40	; 0x28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40005400 	.word	0x40005400
 8005c54:	40023800 	.word	0x40023800
 8005c58:	40020400 	.word	0x40020400
 8005c5c:	00000000 	.word	0x00000000

08005c60 <Fabrik>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Fabrik(struct Vector3D target) {
 8005c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c64:	ed2d 8b02 	vpush	{d8}
 8005c68:	b096      	sub	sp, #88	; 0x58
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	eef0 6a40 	vmov.f32	s13, s0
 8005c70:	eeb0 7a60 	vmov.f32	s14, s1
 8005c74:	eef0 7a41 	vmov.f32	s15, s2
 8005c78:	edc7 6a01 	vstr	s13, [r7, #4]
 8005c7c:	ed87 7a02 	vstr	s14, [r7, #8]
 8005c80:	edc7 7a03 	vstr	s15, [r7, #12]
	alfa = (step_dolnego % 12900) * 360.00 / 12900.00;
 8005c84:	4bd4      	ldr	r3, [pc, #848]	; (8005fd8 <Fabrik+0x378>)
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	4ad4      	ldr	r2, [pc, #848]	; (8005fdc <Fabrik+0x37c>)
 8005c8a:	fba2 1203 	umull	r1, r2, r2, r3
 8005c8e:	0b52      	lsrs	r2, r2, #13
 8005c90:	f243 2164 	movw	r1, #12900	; 0x3264
 8005c94:	fb01 f202 	mul.w	r2, r1, r2
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fa fc49 	bl	8000534 <__aeabi_i2d>
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	4bce      	ldr	r3, [pc, #824]	; (8005fe0 <Fabrik+0x380>)
 8005ca8:	f7fa fcae 	bl	8000608 <__aeabi_dmul>
 8005cac:	4603      	mov	r3, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	a3c4      	add	r3, pc, #784	; (adr r3, 8005fc8 <Fabrik+0x368>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fdcf 	bl	800085c <__aeabi_ddiv>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	f7fa ff97 	bl	8000bf8 <__aeabi_d2f>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	4bc5      	ldr	r3, [pc, #788]	; (8005fe4 <Fabrik+0x384>)
 8005cce:	601a      	str	r2, [r3, #0]
	beta = step_gornego * 360.00 / 200.00;
 8005cd0:	4bc5      	ldr	r3, [pc, #788]	; (8005fe8 <Fabrik+0x388>)
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fa fc2d 	bl	8000534 <__aeabi_i2d>
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	4bc0      	ldr	r3, [pc, #768]	; (8005fe0 <Fabrik+0x380>)
 8005ce0:	f7fa fc92 	bl	8000608 <__aeabi_dmul>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	4618      	mov	r0, r3
 8005cea:	4621      	mov	r1, r4
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	4bbe      	ldr	r3, [pc, #760]	; (8005fec <Fabrik+0x38c>)
 8005cf2:	f7fa fdb3 	bl	800085c <__aeabi_ddiv>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	4621      	mov	r1, r4
 8005cfe:	f7fa ff7b 	bl	8000bf8 <__aeabi_d2f>
 8005d02:	4602      	mov	r2, r0
 8005d04:	4bba      	ldr	r3, [pc, #744]	; (8005ff0 <Fabrik+0x390>)
 8005d06:	601a      	str	r2, [r3, #0]
	sigma = (pwm_duty_servo_joint - 250.00) * 180.00 / 1000.00 + 90.00;
 8005d08:	4bba      	ldr	r3, [pc, #744]	; (8005ff4 <Fabrik+0x394>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fa fc11 	bl	8000534 <__aeabi_i2d>
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	4bb8      	ldr	r3, [pc, #736]	; (8005ff8 <Fabrik+0x398>)
 8005d18:	f7fa fabe 	bl	8000298 <__aeabi_dsub>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	4618      	mov	r0, r3
 8005d22:	4621      	mov	r1, r4
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	4bb4      	ldr	r3, [pc, #720]	; (8005ffc <Fabrik+0x39c>)
 8005d2a:	f7fa fc6d 	bl	8000608 <__aeabi_dmul>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	460c      	mov	r4, r1
 8005d32:	4618      	mov	r0, r3
 8005d34:	4621      	mov	r1, r4
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	4bb1      	ldr	r3, [pc, #708]	; (8006000 <Fabrik+0x3a0>)
 8005d3c:	f7fa fd8e 	bl	800085c <__aeabi_ddiv>
 8005d40:	4603      	mov	r3, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	4618      	mov	r0, r3
 8005d46:	4621      	mov	r1, r4
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	4bad      	ldr	r3, [pc, #692]	; (8006004 <Fabrik+0x3a4>)
 8005d4e:	f7fa faa5 	bl	800029c <__adddf3>
 8005d52:	4603      	mov	r3, r0
 8005d54:	460c      	mov	r4, r1
 8005d56:	4618      	mov	r0, r3
 8005d58:	4621      	mov	r1, r4
 8005d5a:	f7fa ff4d 	bl	8000bf8 <__aeabi_d2f>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	4ba9      	ldr	r3, [pc, #676]	; (8006008 <Fabrik+0x3a8>)
 8005d62:	601a      	str	r2, [r3, #0]

	p[1].x = cosf(alfa * M_PI / 180.00) * cosf(beta * M_PI / 180.00) * L1;
 8005d64:	4b9f      	ldr	r3, [pc, #636]	; (8005fe4 <Fabrik+0x384>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fa fbf5 	bl	8000558 <__aeabi_f2d>
 8005d6e:	a398      	add	r3, pc, #608	; (adr r3, 8005fd0 <Fabrik+0x370>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f7fa fc48 	bl	8000608 <__aeabi_dmul>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	4621      	mov	r1, r4
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	4b9d      	ldr	r3, [pc, #628]	; (8005ffc <Fabrik+0x39c>)
 8005d86:	f7fa fd69 	bl	800085c <__aeabi_ddiv>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	4618      	mov	r0, r3
 8005d90:	4621      	mov	r1, r4
 8005d92:	f7fa ff31 	bl	8000bf8 <__aeabi_d2f>
 8005d96:	4603      	mov	r3, r0
 8005d98:	ee00 3a10 	vmov	s0, r3
 8005d9c:	f007 fc66 	bl	800d66c <cosf>
 8005da0:	eeb0 8a40 	vmov.f32	s16, s0
 8005da4:	4b92      	ldr	r3, [pc, #584]	; (8005ff0 <Fabrik+0x390>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa fbd5 	bl	8000558 <__aeabi_f2d>
 8005dae:	a388      	add	r3, pc, #544	; (adr r3, 8005fd0 <Fabrik+0x370>)
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	f7fa fc28 	bl	8000608 <__aeabi_dmul>
 8005db8:	4603      	mov	r3, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	4b8d      	ldr	r3, [pc, #564]	; (8005ffc <Fabrik+0x39c>)
 8005dc6:	f7fa fd49 	bl	800085c <__aeabi_ddiv>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	4618      	mov	r0, r3
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	f7fa ff11 	bl	8000bf8 <__aeabi_d2f>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	ee00 3a10 	vmov	s0, r3
 8005ddc:	f007 fc46 	bl	800d66c <cosf>
 8005de0:	eef0 7a40 	vmov.f32	s15, s0
 8005de4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005de8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005df0:	4b86      	ldr	r3, [pc, #536]	; (800600c <Fabrik+0x3ac>)
 8005df2:	edc3 7a03 	vstr	s15, [r3, #12]
	p[1].y = sinf(alfa * M_PI / 180.0) * cosf(beta * M_PI / 180.0) * L1;
 8005df6:	4b7b      	ldr	r3, [pc, #492]	; (8005fe4 <Fabrik+0x384>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fa fbac 	bl	8000558 <__aeabi_f2d>
 8005e00:	a373      	add	r3, pc, #460	; (adr r3, 8005fd0 <Fabrik+0x370>)
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	f7fa fbff 	bl	8000608 <__aeabi_dmul>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	4618      	mov	r0, r3
 8005e10:	4621      	mov	r1, r4
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	4b79      	ldr	r3, [pc, #484]	; (8005ffc <Fabrik+0x39c>)
 8005e18:	f7fa fd20 	bl	800085c <__aeabi_ddiv>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	4618      	mov	r0, r3
 8005e22:	4621      	mov	r1, r4
 8005e24:	f7fa fee8 	bl	8000bf8 <__aeabi_d2f>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	ee00 3a10 	vmov	s0, r3
 8005e2e:	f007 fc65 	bl	800d6fc <sinf>
 8005e32:	eeb0 8a40 	vmov.f32	s16, s0
 8005e36:	4b6e      	ldr	r3, [pc, #440]	; (8005ff0 <Fabrik+0x390>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fa fb8c 	bl	8000558 <__aeabi_f2d>
 8005e40:	a363      	add	r3, pc, #396	; (adr r3, 8005fd0 <Fabrik+0x370>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa fbdf 	bl	8000608 <__aeabi_dmul>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	4618      	mov	r0, r3
 8005e50:	4621      	mov	r1, r4
 8005e52:	f04f 0200 	mov.w	r2, #0
 8005e56:	4b69      	ldr	r3, [pc, #420]	; (8005ffc <Fabrik+0x39c>)
 8005e58:	f7fa fd00 	bl	800085c <__aeabi_ddiv>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	4618      	mov	r0, r3
 8005e62:	4621      	mov	r1, r4
 8005e64:	f7fa fec8 	bl	8000bf8 <__aeabi_d2f>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	ee00 3a10 	vmov	s0, r3
 8005e6e:	f007 fbfd 	bl	800d66c <cosf>
 8005e72:	eef0 7a40 	vmov.f32	s15, s0
 8005e76:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005e7a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e82:	4b62      	ldr	r3, [pc, #392]	; (800600c <Fabrik+0x3ac>)
 8005e84:	edc3 7a04 	vstr	s15, [r3, #16]
	p[1].z = podstawa + cosf((90.0 - beta) * M_PI / 180.0) * L1;
 8005e88:	4b59      	ldr	r3, [pc, #356]	; (8005ff0 <Fabrik+0x390>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fa fb63 	bl	8000558 <__aeabi_f2d>
 8005e92:	4603      	mov	r3, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	461a      	mov	r2, r3
 8005e98:	4623      	mov	r3, r4
 8005e9a:	f04f 0000 	mov.w	r0, #0
 8005e9e:	4959      	ldr	r1, [pc, #356]	; (8006004 <Fabrik+0x3a4>)
 8005ea0:	f7fa f9fa 	bl	8000298 <__aeabi_dsub>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	4621      	mov	r1, r4
 8005eac:	a348      	add	r3, pc, #288	; (adr r3, 8005fd0 <Fabrik+0x370>)
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f7fa fba9 	bl	8000608 <__aeabi_dmul>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	460c      	mov	r4, r1
 8005eba:	4618      	mov	r0, r3
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	4b4e      	ldr	r3, [pc, #312]	; (8005ffc <Fabrik+0x39c>)
 8005ec4:	f7fa fcca 	bl	800085c <__aeabi_ddiv>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	4618      	mov	r0, r3
 8005ece:	4621      	mov	r1, r4
 8005ed0:	f7fa fe92 	bl	8000bf8 <__aeabi_d2f>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	ee00 3a10 	vmov	s0, r3
 8005eda:	f007 fbc7 	bl	800d66c <cosf>
 8005ede:	ee10 3a10 	vmov	r3, s0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fa fb38 	bl	8000558 <__aeabi_f2d>
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	4b48      	ldr	r3, [pc, #288]	; (8006010 <Fabrik+0x3b0>)
 8005eee:	f7fa fb8b 	bl	8000608 <__aeabi_dmul>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	4621      	mov	r1, r4
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	4b44      	ldr	r3, [pc, #272]	; (8006010 <Fabrik+0x3b0>)
 8005f00:	f7fa f9cc 	bl	800029c <__adddf3>
 8005f04:	4603      	mov	r3, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	4618      	mov	r0, r3
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	f7fa fe74 	bl	8000bf8 <__aeabi_d2f>
 8005f10:	4602      	mov	r2, r0
 8005f12:	4b3e      	ldr	r3, [pc, #248]	; (800600c <Fabrik+0x3ac>)
 8005f14:	615a      	str	r2, [r3, #20]
	p[2].x = cosf(alfa * M_PI / 180.0)
 8005f16:	4b33      	ldr	r3, [pc, #204]	; (8005fe4 <Fabrik+0x384>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fa fb1c 	bl	8000558 <__aeabi_f2d>
 8005f20:	a32b      	add	r3, pc, #172	; (adr r3, 8005fd0 <Fabrik+0x370>)
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f7fa fb6f 	bl	8000608 <__aeabi_dmul>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	4618      	mov	r0, r3
 8005f30:	4621      	mov	r1, r4
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	4b31      	ldr	r3, [pc, #196]	; (8005ffc <Fabrik+0x39c>)
 8005f38:	f7fa fc90 	bl	800085c <__aeabi_ddiv>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	4618      	mov	r0, r3
 8005f42:	4621      	mov	r1, r4
 8005f44:	f7fa fe58 	bl	8000bf8 <__aeabi_d2f>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	ee00 3a10 	vmov	s0, r3
 8005f4e:	f007 fb8d 	bl	800d66c <cosf>
 8005f52:	ee10 3a10 	vmov	r3, s0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fa fafe 	bl	8000558 <__aeabi_f2d>
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	460d      	mov	r5, r1
			* (cosf(beta * M_PI / 180.0) * L1
 8005f60:	4b23      	ldr	r3, [pc, #140]	; (8005ff0 <Fabrik+0x390>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fa faf7 	bl	8000558 <__aeabi_f2d>
 8005f6a:	a319      	add	r3, pc, #100	; (adr r3, 8005fd0 <Fabrik+0x370>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa fb4a 	bl	8000608 <__aeabi_dmul>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	4b1e      	ldr	r3, [pc, #120]	; (8005ffc <Fabrik+0x39c>)
 8005f82:	f7fa fc6b 	bl	800085c <__aeabi_ddiv>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f7fa fe33 	bl	8000bf8 <__aeabi_d2f>
 8005f92:	4603      	mov	r3, r0
 8005f94:	ee00 3a10 	vmov	s0, r3
 8005f98:	f007 fb68 	bl	800d66c <cosf>
 8005f9c:	ee10 3a10 	vmov	r3, s0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7fa fad9 	bl	8000558 <__aeabi_f2d>
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	4b19      	ldr	r3, [pc, #100]	; (8006010 <Fabrik+0x3b0>)
 8005fac:	f7fa fb2c 	bl	8000608 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4690      	mov	r8, r2
 8005fb6:	4699      	mov	r9, r3
					+ sinf((beta + sigma - 90.0) * M_PI / 180.0) * L2);
 8005fb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <Fabrik+0x390>)
 8005fba:	ed93 7a00 	vldr	s14, [r3]
 8005fbe:	4b12      	ldr	r3, [pc, #72]	; (8006008 <Fabrik+0x3a8>)
 8005fc0:	edd3 7a00 	vldr	s15, [r3]
 8005fc4:	e026      	b.n	8006014 <Fabrik+0x3b4>
 8005fc6:	bf00      	nop
 8005fc8:	00000000 	.word	0x00000000
 8005fcc:	40c93200 	.word	0x40c93200
 8005fd0:	54442d18 	.word	0x54442d18
 8005fd4:	400921fb 	.word	0x400921fb
 8005fd8:	200002e6 	.word	0x200002e6
 8005fdc:	a291e671 	.word	0xa291e671
 8005fe0:	40768000 	.word	0x40768000
 8005fe4:	20000200 	.word	0x20000200
 8005fe8:	200002fc 	.word	0x200002fc
 8005fec:	40690000 	.word	0x40690000
 8005ff0:	20000204 	.word	0x20000204
 8005ff4:	200002ec 	.word	0x200002ec
 8005ff8:	406f4000 	.word	0x406f4000
 8005ffc:	40668000 	.word	0x40668000
 8006000:	408f4000 	.word	0x408f4000
 8006004:	40568000 	.word	0x40568000
 8006008:	20000208 	.word	0x20000208
 800600c:	20000294 	.word	0x20000294
 8006010:	402e0000 	.word	0x402e0000
 8006014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006018:	ee17 0a90 	vmov	r0, s15
 800601c:	f7fa fa9c 	bl	8000558 <__aeabi_f2d>
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	4bde      	ldr	r3, [pc, #888]	; (80063a0 <Fabrik+0x740>)
 8006026:	f7fa f937 	bl	8000298 <__aeabi_dsub>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4610      	mov	r0, r2
 8006030:	4619      	mov	r1, r3
 8006032:	a3d7      	add	r3, pc, #860	; (adr r3, 8006390 <Fabrik+0x730>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa fae6 	bl	8000608 <__aeabi_dmul>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4610      	mov	r0, r2
 8006042:	4619      	mov	r1, r3
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	4bd6      	ldr	r3, [pc, #856]	; (80063a4 <Fabrik+0x744>)
 800604a:	f7fa fc07 	bl	800085c <__aeabi_ddiv>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	f7fa fdcf 	bl	8000bf8 <__aeabi_d2f>
 800605a:	4603      	mov	r3, r0
 800605c:	ee00 3a10 	vmov	s0, r3
 8006060:	f007 fb4c 	bl	800d6fc <sinf>
 8006064:	ee10 3a10 	vmov	r3, s0
 8006068:	4618      	mov	r0, r3
 800606a:	f7fa fa75 	bl	8000558 <__aeabi_f2d>
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	4bcd      	ldr	r3, [pc, #820]	; (80063a8 <Fabrik+0x748>)
 8006074:	f7fa fac8 	bl	8000608 <__aeabi_dmul>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4640      	mov	r0, r8
 800607e:	4649      	mov	r1, r9
 8006080:	f7fa f90c 	bl	800029c <__adddf3>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
			* (cosf(beta * M_PI / 180.0) * L1
 8006088:	4620      	mov	r0, r4
 800608a:	4629      	mov	r1, r5
 800608c:	f7fa fabc 	bl	8000608 <__aeabi_dmul>
 8006090:	4603      	mov	r3, r0
 8006092:	460c      	mov	r4, r1
 8006094:	4618      	mov	r0, r3
 8006096:	4621      	mov	r1, r4
 8006098:	f7fa fdae 	bl	8000bf8 <__aeabi_d2f>
 800609c:	4602      	mov	r2, r0
	p[2].x = cosf(alfa * M_PI / 180.0)
 800609e:	4bc3      	ldr	r3, [pc, #780]	; (80063ac <Fabrik+0x74c>)
 80060a0:	619a      	str	r2, [r3, #24]
	p[2].y = sinf(alfa * M_PI / 180.0)
 80060a2:	4bc3      	ldr	r3, [pc, #780]	; (80063b0 <Fabrik+0x750>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fa fa56 	bl	8000558 <__aeabi_f2d>
 80060ac:	a3b8      	add	r3, pc, #736	; (adr r3, 8006390 <Fabrik+0x730>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa faa9 	bl	8000608 <__aeabi_dmul>
 80060b6:	4603      	mov	r3, r0
 80060b8:	460c      	mov	r4, r1
 80060ba:	4618      	mov	r0, r3
 80060bc:	4621      	mov	r1, r4
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	4bb8      	ldr	r3, [pc, #736]	; (80063a4 <Fabrik+0x744>)
 80060c4:	f7fa fbca 	bl	800085c <__aeabi_ddiv>
 80060c8:	4603      	mov	r3, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	4618      	mov	r0, r3
 80060ce:	4621      	mov	r1, r4
 80060d0:	f7fa fd92 	bl	8000bf8 <__aeabi_d2f>
 80060d4:	4603      	mov	r3, r0
 80060d6:	ee00 3a10 	vmov	s0, r3
 80060da:	f007 fb0f 	bl	800d6fc <sinf>
 80060de:	ee10 3a10 	vmov	r3, s0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fa fa38 	bl	8000558 <__aeabi_f2d>
 80060e8:	4604      	mov	r4, r0
 80060ea:	460d      	mov	r5, r1
			* (cosf(beta * M_PI / 180.0) * L1
 80060ec:	4bb1      	ldr	r3, [pc, #708]	; (80063b4 <Fabrik+0x754>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fa fa31 	bl	8000558 <__aeabi_f2d>
 80060f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006390 <Fabrik+0x730>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f7fa fa84 	bl	8000608 <__aeabi_dmul>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4610      	mov	r0, r2
 8006106:	4619      	mov	r1, r3
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	4ba5      	ldr	r3, [pc, #660]	; (80063a4 <Fabrik+0x744>)
 800610e:	f7fa fba5 	bl	800085c <__aeabi_ddiv>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4610      	mov	r0, r2
 8006118:	4619      	mov	r1, r3
 800611a:	f7fa fd6d 	bl	8000bf8 <__aeabi_d2f>
 800611e:	4603      	mov	r3, r0
 8006120:	ee00 3a10 	vmov	s0, r3
 8006124:	f007 faa2 	bl	800d66c <cosf>
 8006128:	ee10 3a10 	vmov	r3, s0
 800612c:	4618      	mov	r0, r3
 800612e:	f7fa fa13 	bl	8000558 <__aeabi_f2d>
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	4ba0      	ldr	r3, [pc, #640]	; (80063b8 <Fabrik+0x758>)
 8006138:	f7fa fa66 	bl	8000608 <__aeabi_dmul>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4690      	mov	r8, r2
 8006142:	4699      	mov	r9, r3
					+ sinf((beta + sigma - 90.0) * M_PI / 180.0) * L2);
 8006144:	4b9b      	ldr	r3, [pc, #620]	; (80063b4 <Fabrik+0x754>)
 8006146:	ed93 7a00 	vldr	s14, [r3]
 800614a:	4b9c      	ldr	r3, [pc, #624]	; (80063bc <Fabrik+0x75c>)
 800614c:	edd3 7a00 	vldr	s15, [r3]
 8006150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006154:	ee17 0a90 	vmov	r0, s15
 8006158:	f7fa f9fe 	bl	8000558 <__aeabi_f2d>
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	4b8f      	ldr	r3, [pc, #572]	; (80063a0 <Fabrik+0x740>)
 8006162:	f7fa f899 	bl	8000298 <__aeabi_dsub>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4610      	mov	r0, r2
 800616c:	4619      	mov	r1, r3
 800616e:	a388      	add	r3, pc, #544	; (adr r3, 8006390 <Fabrik+0x730>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f7fa fa48 	bl	8000608 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	4b87      	ldr	r3, [pc, #540]	; (80063a4 <Fabrik+0x744>)
 8006186:	f7fa fb69 	bl	800085c <__aeabi_ddiv>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4610      	mov	r0, r2
 8006190:	4619      	mov	r1, r3
 8006192:	f7fa fd31 	bl	8000bf8 <__aeabi_d2f>
 8006196:	4603      	mov	r3, r0
 8006198:	ee00 3a10 	vmov	s0, r3
 800619c:	f007 faae 	bl	800d6fc <sinf>
 80061a0:	ee10 3a10 	vmov	r3, s0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fa f9d7 	bl	8000558 <__aeabi_f2d>
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	4b7e      	ldr	r3, [pc, #504]	; (80063a8 <Fabrik+0x748>)
 80061b0:	f7fa fa2a 	bl	8000608 <__aeabi_dmul>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4640      	mov	r0, r8
 80061ba:	4649      	mov	r1, r9
 80061bc:	f7fa f86e 	bl	800029c <__adddf3>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
			* (cosf(beta * M_PI / 180.0) * L1
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa fa1e 	bl	8000608 <__aeabi_dmul>
 80061cc:	4603      	mov	r3, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	4618      	mov	r0, r3
 80061d2:	4621      	mov	r1, r4
 80061d4:	f7fa fd10 	bl	8000bf8 <__aeabi_d2f>
 80061d8:	4602      	mov	r2, r0
	p[2].y = sinf(alfa * M_PI / 180.0)
 80061da:	4b74      	ldr	r3, [pc, #464]	; (80063ac <Fabrik+0x74c>)
 80061dc:	61da      	str	r2, [r3, #28]
	p[2].z = podstawa + cosf((90.0 - beta) * M_PI / 180.0) * L1
 80061de:	4b75      	ldr	r3, [pc, #468]	; (80063b4 <Fabrik+0x754>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fa f9b8 	bl	8000558 <__aeabi_f2d>
 80061e8:	4603      	mov	r3, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	461a      	mov	r2, r3
 80061ee:	4623      	mov	r3, r4
 80061f0:	f04f 0000 	mov.w	r0, #0
 80061f4:	496a      	ldr	r1, [pc, #424]	; (80063a0 <Fabrik+0x740>)
 80061f6:	f7fa f84f 	bl	8000298 <__aeabi_dsub>
 80061fa:	4603      	mov	r3, r0
 80061fc:	460c      	mov	r4, r1
 80061fe:	4618      	mov	r0, r3
 8006200:	4621      	mov	r1, r4
 8006202:	a363      	add	r3, pc, #396	; (adr r3, 8006390 <Fabrik+0x730>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f7fa f9fe 	bl	8000608 <__aeabi_dmul>
 800620c:	4603      	mov	r3, r0
 800620e:	460c      	mov	r4, r1
 8006210:	4618      	mov	r0, r3
 8006212:	4621      	mov	r1, r4
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	4b62      	ldr	r3, [pc, #392]	; (80063a4 <Fabrik+0x744>)
 800621a:	f7fa fb1f 	bl	800085c <__aeabi_ddiv>
 800621e:	4603      	mov	r3, r0
 8006220:	460c      	mov	r4, r1
 8006222:	4618      	mov	r0, r3
 8006224:	4621      	mov	r1, r4
 8006226:	f7fa fce7 	bl	8000bf8 <__aeabi_d2f>
 800622a:	4603      	mov	r3, r0
 800622c:	ee00 3a10 	vmov	s0, r3
 8006230:	f007 fa1c 	bl	800d66c <cosf>
 8006234:	ee10 3a10 	vmov	r3, s0
 8006238:	4618      	mov	r0, r3
 800623a:	f7fa f98d 	bl	8000558 <__aeabi_f2d>
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	4b5d      	ldr	r3, [pc, #372]	; (80063b8 <Fabrik+0x758>)
 8006244:	f7fa f9e0 	bl	8000608 <__aeabi_dmul>
 8006248:	4603      	mov	r3, r0
 800624a:	460c      	mov	r4, r1
 800624c:	4618      	mov	r0, r3
 800624e:	4621      	mov	r1, r4
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	4b58      	ldr	r3, [pc, #352]	; (80063b8 <Fabrik+0x758>)
 8006256:	f7fa f821 	bl	800029c <__adddf3>
 800625a:	4603      	mov	r3, r0
 800625c:	460c      	mov	r4, r1
 800625e:	4625      	mov	r5, r4
 8006260:	461c      	mov	r4, r3
			- cosf((beta + sigma - 90.0) * M_PI / 180.0) * L2;
 8006262:	4b54      	ldr	r3, [pc, #336]	; (80063b4 <Fabrik+0x754>)
 8006264:	ed93 7a00 	vldr	s14, [r3]
 8006268:	4b54      	ldr	r3, [pc, #336]	; (80063bc <Fabrik+0x75c>)
 800626a:	edd3 7a00 	vldr	s15, [r3]
 800626e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006272:	ee17 0a90 	vmov	r0, s15
 8006276:	f7fa f96f 	bl	8000558 <__aeabi_f2d>
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	4b48      	ldr	r3, [pc, #288]	; (80063a0 <Fabrik+0x740>)
 8006280:	f7fa f80a 	bl	8000298 <__aeabi_dsub>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4610      	mov	r0, r2
 800628a:	4619      	mov	r1, r3
 800628c:	a340      	add	r3, pc, #256	; (adr r3, 8006390 <Fabrik+0x730>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7fa f9b9 	bl	8000608 <__aeabi_dmul>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4610      	mov	r0, r2
 800629c:	4619      	mov	r1, r3
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	4b40      	ldr	r3, [pc, #256]	; (80063a4 <Fabrik+0x744>)
 80062a4:	f7fa fada 	bl	800085c <__aeabi_ddiv>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4610      	mov	r0, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	f7fa fca2 	bl	8000bf8 <__aeabi_d2f>
 80062b4:	4603      	mov	r3, r0
 80062b6:	ee00 3a10 	vmov	s0, r3
 80062ba:	f007 f9d7 	bl	800d66c <cosf>
 80062be:	ee10 3a10 	vmov	r3, s0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fa f948 	bl	8000558 <__aeabi_f2d>
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	4b36      	ldr	r3, [pc, #216]	; (80063a8 <Fabrik+0x748>)
 80062ce:	f7fa f99b 	bl	8000608 <__aeabi_dmul>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7f9 ffdd 	bl	8000298 <__aeabi_dsub>
 80062de:	4603      	mov	r3, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	4618      	mov	r0, r3
 80062e4:	4621      	mov	r1, r4
 80062e6:	f7fa fc87 	bl	8000bf8 <__aeabi_d2f>
 80062ea:	4602      	mov	r2, r0
	p[2].z = podstawa + cosf((90.0 - beta) * M_PI / 180.0) * L1
 80062ec:	4b2f      	ldr	r3, [pc, #188]	; (80063ac <Fabrik+0x74c>)
 80062ee:	621a      	str	r2, [r3, #32]
	float R[3];
	float Lambda[3];

	float D[2];
	D[0] = sqrt(
			pow((p[1].x - p[0].x), 2) + pow((p[1].y - p[0].y), 2)
 80062f0:	4b2e      	ldr	r3, [pc, #184]	; (80063ac <Fabrik+0x74c>)
 80062f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80062f6:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <Fabrik+0x74c>)
 80062f8:	edd3 7a00 	vldr	s15, [r3]
 80062fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006300:	ee17 0a90 	vmov	r0, s15
 8006304:	f7fa f928 	bl	8000558 <__aeabi_f2d>
 8006308:	4603      	mov	r3, r0
 800630a:	460c      	mov	r4, r1
 800630c:	ed9f 1b22 	vldr	d1, [pc, #136]	; 8006398 <Fabrik+0x738>
 8006310:	ec44 3b10 	vmov	d0, r3, r4
 8006314:	f007 fa34 	bl	800d780 <pow>
 8006318:	ec55 4b10 	vmov	r4, r5, d0
 800631c:	4b23      	ldr	r3, [pc, #140]	; (80063ac <Fabrik+0x74c>)
 800631e:	ed93 7a04 	vldr	s14, [r3, #16]
 8006322:	4b22      	ldr	r3, [pc, #136]	; (80063ac <Fabrik+0x74c>)
 8006324:	edd3 7a01 	vldr	s15, [r3, #4]
 8006328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800632c:	ee17 0a90 	vmov	r0, s15
 8006330:	f7fa f912 	bl	8000558 <__aeabi_f2d>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8006398 <Fabrik+0x738>
 800633c:	ec43 2b10 	vmov	d0, r2, r3
 8006340:	f007 fa1e 	bl	800d780 <pow>
 8006344:	ec53 2b10 	vmov	r2, r3, d0
 8006348:	4620      	mov	r0, r4
 800634a:	4629      	mov	r1, r5
 800634c:	f7f9 ffa6 	bl	800029c <__adddf3>
 8006350:	4603      	mov	r3, r0
 8006352:	460c      	mov	r4, r1
 8006354:	4625      	mov	r5, r4
 8006356:	461c      	mov	r4, r3
					+ pow((p[1].z - p[0].z), 2));
 8006358:	4b14      	ldr	r3, [pc, #80]	; (80063ac <Fabrik+0x74c>)
 800635a:	ed93 7a05 	vldr	s14, [r3, #20]
 800635e:	4b13      	ldr	r3, [pc, #76]	; (80063ac <Fabrik+0x74c>)
 8006360:	edd3 7a02 	vldr	s15, [r3, #8]
 8006364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006368:	ee17 0a90 	vmov	r0, s15
 800636c:	f7fa f8f4 	bl	8000558 <__aeabi_f2d>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8006398 <Fabrik+0x738>
 8006378:	ec43 2b10 	vmov	d0, r2, r3
 800637c:	f007 fa00 	bl	800d780 <pow>
 8006380:	ec53 2b10 	vmov	r2, r3, d0
	D[0] = sqrt(
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	f7f9 ff88 	bl	800029c <__adddf3>
 800638c:	e018      	b.n	80063c0 <Fabrik+0x760>
 800638e:	bf00      	nop
 8006390:	54442d18 	.word	0x54442d18
 8006394:	400921fb 	.word	0x400921fb
 8006398:	00000000 	.word	0x00000000
 800639c:	40000000 	.word	0x40000000
 80063a0:	40568000 	.word	0x40568000
 80063a4:	40668000 	.word	0x40668000
 80063a8:	40370000 	.word	0x40370000
 80063ac:	20000294 	.word	0x20000294
 80063b0:	20000200 	.word	0x20000200
 80063b4:	20000204 	.word	0x20000204
 80063b8:	402e0000 	.word	0x402e0000
 80063bc:	20000208 	.word	0x20000208
 80063c0:	4603      	mov	r3, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	ec44 3b17 	vmov	d7, r3, r4
 80063c8:	eeb0 0a47 	vmov.f32	s0, s14
 80063cc:	eef0 0a67 	vmov.f32	s1, s15
 80063d0:	f007 fb46 	bl	800da60 <sqrt>
 80063d4:	ec54 3b10 	vmov	r3, r4, d0
 80063d8:	4618      	mov	r0, r3
 80063da:	4621      	mov	r1, r4
 80063dc:	f7fa fc0c 	bl	8000bf8 <__aeabi_d2f>
 80063e0:	4603      	mov	r3, r0
 80063e2:	61fb      	str	r3, [r7, #28]
	D[1] = sqrt(
			pow((p[2].x - p[1].x), 2) + pow((p[2].y - p[1].y), 2)
 80063e4:	4b6a      	ldr	r3, [pc, #424]	; (8006590 <Fabrik+0x930>)
 80063e6:	ed93 7a06 	vldr	s14, [r3, #24]
 80063ea:	4b69      	ldr	r3, [pc, #420]	; (8006590 <Fabrik+0x930>)
 80063ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80063f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063f4:	ee17 0a90 	vmov	r0, s15
 80063f8:	f7fa f8ae 	bl	8000558 <__aeabi_f2d>
 80063fc:	4603      	mov	r3, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	ed9f 1b61 	vldr	d1, [pc, #388]	; 8006588 <Fabrik+0x928>
 8006404:	ec44 3b10 	vmov	d0, r3, r4
 8006408:	f007 f9ba 	bl	800d780 <pow>
 800640c:	ec55 4b10 	vmov	r4, r5, d0
 8006410:	4b5f      	ldr	r3, [pc, #380]	; (8006590 <Fabrik+0x930>)
 8006412:	ed93 7a07 	vldr	s14, [r3, #28]
 8006416:	4b5e      	ldr	r3, [pc, #376]	; (8006590 <Fabrik+0x930>)
 8006418:	edd3 7a04 	vldr	s15, [r3, #16]
 800641c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006420:	ee17 0a90 	vmov	r0, s15
 8006424:	f7fa f898 	bl	8000558 <__aeabi_f2d>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8006588 <Fabrik+0x928>
 8006430:	ec43 2b10 	vmov	d0, r2, r3
 8006434:	f007 f9a4 	bl	800d780 <pow>
 8006438:	ec53 2b10 	vmov	r2, r3, d0
 800643c:	4620      	mov	r0, r4
 800643e:	4629      	mov	r1, r5
 8006440:	f7f9 ff2c 	bl	800029c <__adddf3>
 8006444:	4603      	mov	r3, r0
 8006446:	460c      	mov	r4, r1
 8006448:	4625      	mov	r5, r4
 800644a:	461c      	mov	r4, r3
					+ pow((p[2].z - p[1].z), 2));
 800644c:	4b50      	ldr	r3, [pc, #320]	; (8006590 <Fabrik+0x930>)
 800644e:	ed93 7a08 	vldr	s14, [r3, #32]
 8006452:	4b4f      	ldr	r3, [pc, #316]	; (8006590 <Fabrik+0x930>)
 8006454:	edd3 7a05 	vldr	s15, [r3, #20]
 8006458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800645c:	ee17 0a90 	vmov	r0, s15
 8006460:	f7fa f87a 	bl	8000558 <__aeabi_f2d>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8006588 <Fabrik+0x928>
 800646c:	ec43 2b10 	vmov	d0, r2, r3
 8006470:	f007 f986 	bl	800d780 <pow>
 8006474:	ec53 2b10 	vmov	r2, r3, d0
	D[1] = sqrt(
 8006478:	4620      	mov	r0, r4
 800647a:	4629      	mov	r1, r5
 800647c:	f7f9 ff0e 	bl	800029c <__adddf3>
 8006480:	4603      	mov	r3, r0
 8006482:	460c      	mov	r4, r1
 8006484:	ec44 3b17 	vmov	d7, r3, r4
 8006488:	eeb0 0a47 	vmov.f32	s0, s14
 800648c:	eef0 0a67 	vmov.f32	s1, s15
 8006490:	f007 fae6 	bl	800da60 <sqrt>
 8006494:	ec54 3b10 	vmov	r3, r4, d0
 8006498:	4618      	mov	r0, r3
 800649a:	4621      	mov	r1, r4
 800649c:	f7fa fbac 	bl	8000bf8 <__aeabi_d2f>
 80064a0:	4603      	mov	r3, r0
 80064a2:	623b      	str	r3, [r7, #32]

	float Dist = sqrt(
			pow((p[0].x - target.x), 2) + pow((p[0].y - target.y), 2)
 80064a4:	4b3a      	ldr	r3, [pc, #232]	; (8006590 <Fabrik+0x930>)
 80064a6:	ed93 7a00 	vldr	s14, [r3]
 80064aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80064ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b2:	ee17 0a90 	vmov	r0, s15
 80064b6:	f7fa f84f 	bl	8000558 <__aeabi_f2d>
 80064ba:	4603      	mov	r3, r0
 80064bc:	460c      	mov	r4, r1
 80064be:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8006588 <Fabrik+0x928>
 80064c2:	ec44 3b10 	vmov	d0, r3, r4
 80064c6:	f007 f95b 	bl	800d780 <pow>
 80064ca:	ec55 4b10 	vmov	r4, r5, d0
 80064ce:	4b30      	ldr	r3, [pc, #192]	; (8006590 <Fabrik+0x930>)
 80064d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80064d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80064d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064dc:	ee17 0a90 	vmov	r0, s15
 80064e0:	f7fa f83a 	bl	8000558 <__aeabi_f2d>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8006588 <Fabrik+0x928>
 80064ec:	ec43 2b10 	vmov	d0, r2, r3
 80064f0:	f007 f946 	bl	800d780 <pow>
 80064f4:	ec53 2b10 	vmov	r2, r3, d0
 80064f8:	4620      	mov	r0, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	f7f9 fece 	bl	800029c <__adddf3>
 8006500:	4603      	mov	r3, r0
 8006502:	460c      	mov	r4, r1
 8006504:	4625      	mov	r5, r4
 8006506:	461c      	mov	r4, r3
					+ pow((p[0].z - target.z), 2));
 8006508:	4b21      	ldr	r3, [pc, #132]	; (8006590 <Fabrik+0x930>)
 800650a:	ed93 7a02 	vldr	s14, [r3, #8]
 800650e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006516:	ee17 0a90 	vmov	r0, s15
 800651a:	f7fa f81d 	bl	8000558 <__aeabi_f2d>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006588 <Fabrik+0x928>
 8006526:	ec43 2b10 	vmov	d0, r2, r3
 800652a:	f007 f929 	bl	800d780 <pow>
 800652e:	ec53 2b10 	vmov	r2, r3, d0
	float Dist = sqrt(
 8006532:	4620      	mov	r0, r4
 8006534:	4629      	mov	r1, r5
 8006536:	f7f9 feb1 	bl	800029c <__adddf3>
 800653a:	4603      	mov	r3, r0
 800653c:	460c      	mov	r4, r1
 800653e:	ec44 3b17 	vmov	d7, r3, r4
 8006542:	eeb0 0a47 	vmov.f32	s0, s14
 8006546:	eef0 0a67 	vmov.f32	s1, s15
 800654a:	f007 fa89 	bl	800da60 <sqrt>
 800654e:	ec54 3b10 	vmov	r3, r4, d0
 8006552:	4618      	mov	r0, r3
 8006554:	4621      	mov	r1, r4
 8006556:	f7fa fb4f 	bl	8000bf8 <__aeabi_d2f>
 800655a:	4603      	mov	r3, r0
 800655c:	647b      	str	r3, [r7, #68]	; 0x44

	struct Vector3D B;

	float DifA;

	float Tol = 0.000001;
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <Fabrik+0x934>)
 8006560:	643b      	str	r3, [r7, #64]	; 0x40

	if (Dist > D[0] + D[1]) {
 8006562:	ed97 7a07 	vldr	s14, [r7, #28]
 8006566:	edd7 7a08 	vldr	s15, [r7, #32]
 800656a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800656e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657a:	f340 8141 	ble.w	8006800 <Fabrik+0xba0>
		for (int i = 0; i < 3; i++) {
 800657e:	2300      	movs	r3, #0
 8006580:	653b      	str	r3, [r7, #80]	; 0x50
 8006582:	e138      	b.n	80067f6 <Fabrik+0xb96>
 8006584:	f3af 8000 	nop.w
 8006588:	00000000 	.word	0x00000000
 800658c:	40000000 	.word	0x40000000
 8006590:	20000294 	.word	0x20000294
 8006594:	358637bd 	.word	0x358637bd
			R[i] = sqrt(
					pow((target.x - p[i].x), 2) + pow((target.y - p[i].y), 2)
 8006598:	ed97 7a01 	vldr	s14, [r7, #4]
 800659c:	49d6      	ldr	r1, [pc, #856]	; (80068f8 <Fabrik+0xc98>)
 800659e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065a0:	4613      	mov	r3, r2
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	4413      	add	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	edd3 7a00 	vldr	s15, [r3]
 80065ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065b2:	ee17 0a90 	vmov	r0, s15
 80065b6:	f7f9 ffcf 	bl	8000558 <__aeabi_f2d>
 80065ba:	4603      	mov	r3, r0
 80065bc:	460c      	mov	r4, r1
 80065be:	ed9f 1bcc 	vldr	d1, [pc, #816]	; 80068f0 <Fabrik+0xc90>
 80065c2:	ec44 3b10 	vmov	d0, r3, r4
 80065c6:	f007 f8db 	bl	800d780 <pow>
 80065ca:	ec55 4b10 	vmov	r4, r5, d0
 80065ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80065d2:	49c9      	ldr	r1, [pc, #804]	; (80068f8 <Fabrik+0xc98>)
 80065d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065d6:	4613      	mov	r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	440b      	add	r3, r1
 80065e0:	3304      	adds	r3, #4
 80065e2:	edd3 7a00 	vldr	s15, [r3]
 80065e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065ea:	ee17 0a90 	vmov	r0, s15
 80065ee:	f7f9 ffb3 	bl	8000558 <__aeabi_f2d>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	ed9f 1bbe 	vldr	d1, [pc, #760]	; 80068f0 <Fabrik+0xc90>
 80065fa:	ec43 2b10 	vmov	d0, r2, r3
 80065fe:	f007 f8bf 	bl	800d780 <pow>
 8006602:	ec53 2b10 	vmov	r2, r3, d0
 8006606:	4620      	mov	r0, r4
 8006608:	4629      	mov	r1, r5
 800660a:	f7f9 fe47 	bl	800029c <__adddf3>
 800660e:	4603      	mov	r3, r0
 8006610:	460c      	mov	r4, r1
 8006612:	4625      	mov	r5, r4
 8006614:	461c      	mov	r4, r3
							+ pow((target.z - p[i].z), 2));
 8006616:	ed97 7a03 	vldr	s14, [r7, #12]
 800661a:	49b7      	ldr	r1, [pc, #732]	; (80068f8 <Fabrik+0xc98>)
 800661c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800661e:	4613      	mov	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	3308      	adds	r3, #8
 800662a:	edd3 7a00 	vldr	s15, [r3]
 800662e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006632:	ee17 0a90 	vmov	r0, s15
 8006636:	f7f9 ff8f 	bl	8000558 <__aeabi_f2d>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	ed9f 1bac 	vldr	d1, [pc, #688]	; 80068f0 <Fabrik+0xc90>
 8006642:	ec43 2b10 	vmov	d0, r2, r3
 8006646:	f007 f89b 	bl	800d780 <pow>
 800664a:	ec53 2b10 	vmov	r2, r3, d0
			R[i] = sqrt(
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7f9 fe23 	bl	800029c <__adddf3>
 8006656:	4603      	mov	r3, r0
 8006658:	460c      	mov	r4, r1
 800665a:	ec44 3b17 	vmov	d7, r3, r4
 800665e:	eeb0 0a47 	vmov.f32	s0, s14
 8006662:	eef0 0a67 	vmov.f32	s1, s15
 8006666:	f007 f9fb 	bl	800da60 <sqrt>
 800666a:	ec54 3b10 	vmov	r3, r4, d0
 800666e:	4618      	mov	r0, r3
 8006670:	4621      	mov	r1, r4
 8006672:	f7fa fac1 	bl	8000bf8 <__aeabi_d2f>
 8006676:	4602      	mov	r2, r0
 8006678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006680:	440b      	add	r3, r1
 8006682:	3b28      	subs	r3, #40	; 0x28
 8006684:	601a      	str	r2, [r3, #0]
			Lambda[i] = D[i] / R[i];
 8006686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800668e:	4413      	add	r3, r2
 8006690:	3b3c      	subs	r3, #60	; 0x3c
 8006692:	edd3 6a00 	vldr	s13, [r3]
 8006696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800669e:	4413      	add	r3, r2
 80066a0:	3b28      	subs	r3, #40	; 0x28
 80066a2:	ed93 7a00 	vldr	s14, [r3]
 80066a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80066b2:	4413      	add	r3, r2
 80066b4:	3b34      	subs	r3, #52	; 0x34
 80066b6:	edc3 7a00 	vstr	s15, [r3]

			if (i > 0) {
 80066ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f340 8097 	ble.w	80067f0 <Fabrik+0xb90>
				p[i].x = (1 - Lambda[i - 1]) * p[i - 1].x
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	3b01      	subs	r3, #1
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80066cc:	4413      	add	r3, r2
 80066ce:	3b34      	subs	r3, #52	; 0x34
 80066d0:	edd3 7a00 	vldr	s15, [r3]
 80066d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066de:	1e5a      	subs	r2, r3, #1
 80066e0:	4985      	ldr	r1, [pc, #532]	; (80068f8 <Fabrik+0xc98>)
 80066e2:	4613      	mov	r3, r2
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	edd3 7a00 	vldr	s15, [r3]
 80066f0:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ Lambda[i - 1] * target.x;
 80066f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f6:	3b01      	subs	r3, #1
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80066fe:	4413      	add	r3, r2
 8006700:	3b34      	subs	r3, #52	; 0x34
 8006702:	edd3 6a00 	vldr	s13, [r3]
 8006706:	edd7 7a01 	vldr	s15, [r7, #4]
 800670a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800670e:	ee77 7a27 	vadd.f32	s15, s14, s15
				p[i].x = (1 - Lambda[i - 1]) * p[i - 1].x
 8006712:	4979      	ldr	r1, [pc, #484]	; (80068f8 <Fabrik+0xc98>)
 8006714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006716:	4613      	mov	r3, r2
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	edc3 7a00 	vstr	s15, [r3]
				p[i].y = (1 - Lambda[i - 1]) * p[i - 1].y
 8006724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006726:	3b01      	subs	r3, #1
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800672e:	4413      	add	r3, r2
 8006730:	3b34      	subs	r3, #52	; 0x34
 8006732:	edd3 7a00 	vldr	s15, [r3]
 8006736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800673a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800673e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006740:	1e5a      	subs	r2, r3, #1
 8006742:	496d      	ldr	r1, [pc, #436]	; (80068f8 <Fabrik+0xc98>)
 8006744:	4613      	mov	r3, r2
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	3304      	adds	r3, #4
 8006750:	edd3 7a00 	vldr	s15, [r3]
 8006754:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ Lambda[i - 1] * target.y;
 8006758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800675a:	3b01      	subs	r3, #1
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006762:	4413      	add	r3, r2
 8006764:	3b34      	subs	r3, #52	; 0x34
 8006766:	edd3 6a00 	vldr	s13, [r3]
 800676a:	edd7 7a02 	vldr	s15, [r7, #8]
 800676e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006772:	ee77 7a27 	vadd.f32	s15, s14, s15
				p[i].y = (1 - Lambda[i - 1]) * p[i - 1].y
 8006776:	4960      	ldr	r1, [pc, #384]	; (80068f8 <Fabrik+0xc98>)
 8006778:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800677a:	4613      	mov	r3, r2
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3304      	adds	r3, #4
 8006786:	edc3 7a00 	vstr	s15, [r3]
				p[i].z = (1 - Lambda[i - 1]) * p[i - 1].z
 800678a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678c:	3b01      	subs	r3, #1
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006794:	4413      	add	r3, r2
 8006796:	3b34      	subs	r3, #52	; 0x34
 8006798:	edd3 7a00 	vldr	s15, [r3]
 800679c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80067a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a6:	1e5a      	subs	r2, r3, #1
 80067a8:	4953      	ldr	r1, [pc, #332]	; (80068f8 <Fabrik+0xc98>)
 80067aa:	4613      	mov	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	3308      	adds	r3, #8
 80067b6:	edd3 7a00 	vldr	s15, [r3]
 80067ba:	ee27 7a27 	vmul.f32	s14, s14, s15
						+ Lambda[i - 1] * target.z;
 80067be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c0:	3b01      	subs	r3, #1
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80067c8:	4413      	add	r3, r2
 80067ca:	3b34      	subs	r3, #52	; 0x34
 80067cc:	edd3 6a00 	vldr	s13, [r3]
 80067d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80067d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067d8:	ee77 7a27 	vadd.f32	s15, s14, s15
				p[i].z = (1 - Lambda[i - 1]) * p[i - 1].z
 80067dc:	4946      	ldr	r1, [pc, #280]	; (80068f8 <Fabrik+0xc98>)
 80067de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067e0:	4613      	mov	r3, r2
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	3308      	adds	r3, #8
 80067ec:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < 3; i++) {
 80067f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f2:	3301      	adds	r3, #1
 80067f4:	653b      	str	r3, [r7, #80]	; 0x50
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	f77f aecd 	ble.w	8006598 <Fabrik+0x938>
 80067fe:	e3c1      	b.n	8006f84 <Fabrik+0x1324>
			}
		}
	} else {
		B.x = p[0].x;
 8006800:	4b3d      	ldr	r3, [pc, #244]	; (80068f8 <Fabrik+0xc98>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	613b      	str	r3, [r7, #16]
		B.y = p[0].y;
 8006806:	4b3c      	ldr	r3, [pc, #240]	; (80068f8 <Fabrik+0xc98>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	617b      	str	r3, [r7, #20]
		B.z = p[0].z;
 800680c:	4b3a      	ldr	r3, [pc, #232]	; (80068f8 <Fabrik+0xc98>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	61bb      	str	r3, [r7, #24]

		DifA = sqrt(
				pow((p[2].x - target.x), 2) + pow((p[2].y - target.y), 2)
 8006812:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <Fabrik+0xc98>)
 8006814:	ed93 7a06 	vldr	s14, [r3, #24]
 8006818:	edd7 7a01 	vldr	s15, [r7, #4]
 800681c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006820:	ee17 0a90 	vmov	r0, s15
 8006824:	f7f9 fe98 	bl	8000558 <__aeabi_f2d>
 8006828:	4603      	mov	r3, r0
 800682a:	460c      	mov	r4, r1
 800682c:	ed9f 1b30 	vldr	d1, [pc, #192]	; 80068f0 <Fabrik+0xc90>
 8006830:	ec44 3b10 	vmov	d0, r3, r4
 8006834:	f006 ffa4 	bl	800d780 <pow>
 8006838:	ec55 4b10 	vmov	r4, r5, d0
 800683c:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <Fabrik+0xc98>)
 800683e:	ed93 7a07 	vldr	s14, [r3, #28]
 8006842:	edd7 7a02 	vldr	s15, [r7, #8]
 8006846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800684a:	ee17 0a90 	vmov	r0, s15
 800684e:	f7f9 fe83 	bl	8000558 <__aeabi_f2d>
 8006852:	4602      	mov	r2, r0
 8006854:	460b      	mov	r3, r1
 8006856:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80068f0 <Fabrik+0xc90>
 800685a:	ec43 2b10 	vmov	d0, r2, r3
 800685e:	f006 ff8f 	bl	800d780 <pow>
 8006862:	ec53 2b10 	vmov	r2, r3, d0
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7f9 fd17 	bl	800029c <__adddf3>
 800686e:	4603      	mov	r3, r0
 8006870:	460c      	mov	r4, r1
 8006872:	4625      	mov	r5, r4
 8006874:	461c      	mov	r4, r3
						+ pow((p[2].z - target.z), 2));
 8006876:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <Fabrik+0xc98>)
 8006878:	ed93 7a08 	vldr	s14, [r3, #32]
 800687c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006884:	ee17 0a90 	vmov	r0, s15
 8006888:	f7f9 fe66 	bl	8000558 <__aeabi_f2d>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80068f0 <Fabrik+0xc90>
 8006894:	ec43 2b10 	vmov	d0, r2, r3
 8006898:	f006 ff72 	bl	800d780 <pow>
 800689c:	ec53 2b10 	vmov	r2, r3, d0
		DifA = sqrt(
 80068a0:	4620      	mov	r0, r4
 80068a2:	4629      	mov	r1, r5
 80068a4:	f7f9 fcfa 	bl	800029c <__adddf3>
 80068a8:	4603      	mov	r3, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	ec44 3b17 	vmov	d7, r3, r4
 80068b0:	eeb0 0a47 	vmov.f32	s0, s14
 80068b4:	eef0 0a67 	vmov.f32	s1, s15
 80068b8:	f007 f8d2 	bl	800da60 <sqrt>
 80068bc:	ec54 3b10 	vmov	r3, r4, d0
 80068c0:	4618      	mov	r0, r3
 80068c2:	4621      	mov	r1, r4
 80068c4:	f7fa f998 	bl	8000bf8 <__aeabi_d2f>
 80068c8:	4603      	mov	r3, r0
 80068ca:	657b      	str	r3, [r7, #84]	; 0x54
		while (DifA > Tol) {
 80068cc:	e34e      	b.n	8006f6c <Fabrik+0x130c>
			float tmp = DifA;
 80068ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c

			p[2].x = target.x;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <Fabrik+0xc98>)
 80068d6:	6193      	str	r3, [r2, #24]
			p[2].y = target.y;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4a07      	ldr	r2, [pc, #28]	; (80068f8 <Fabrik+0xc98>)
 80068dc:	61d3      	str	r3, [r2, #28]
			p[2].z = target.z;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4a05      	ldr	r2, [pc, #20]	; (80068f8 <Fabrik+0xc98>)
 80068e2:	6213      	str	r3, [r2, #32]

			for (int i = 1; i > -1; i--) {
 80068e4:	2301      	movs	r3, #1
 80068e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068e8:	e15e      	b.n	8006ba8 <Fabrik+0xf48>
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w
 80068f0:	00000000 	.word	0x00000000
 80068f4:	40000000 	.word	0x40000000
 80068f8:	20000294 	.word	0x20000294
				R[i] = sqrt(
						pow((p[i + 1].x - p[i].x), 2)
 80068fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	49b3      	ldr	r1, [pc, #716]	; (8006bd0 <Fabrik+0xf70>)
 8006902:	4613      	mov	r3, r2
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	ed93 7a00 	vldr	s14, [r3]
 8006910:	49af      	ldr	r1, [pc, #700]	; (8006bd0 <Fabrik+0xf70>)
 8006912:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	edd3 7a00 	vldr	s15, [r3]
 8006922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006926:	ee17 0a90 	vmov	r0, s15
 800692a:	f7f9 fe15 	bl	8000558 <__aeabi_f2d>
 800692e:	4603      	mov	r3, r0
 8006930:	460c      	mov	r4, r1
 8006932:	ed9f 1ba5 	vldr	d1, [pc, #660]	; 8006bc8 <Fabrik+0xf68>
 8006936:	ec44 3b10 	vmov	d0, r3, r4
 800693a:	f006 ff21 	bl	800d780 <pow>
 800693e:	ec55 4b10 	vmov	r4, r5, d0
								+ pow((p[i + 1].y - p[i].y), 2)
 8006942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	49a2      	ldr	r1, [pc, #648]	; (8006bd0 <Fabrik+0xf70>)
 8006948:	4613      	mov	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	3304      	adds	r3, #4
 8006954:	ed93 7a00 	vldr	s14, [r3]
 8006958:	499d      	ldr	r1, [pc, #628]	; (8006bd0 <Fabrik+0xf70>)
 800695a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800695c:	4613      	mov	r3, r2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	4413      	add	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	3304      	adds	r3, #4
 8006968:	edd3 7a00 	vldr	s15, [r3]
 800696c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006970:	ee17 0a90 	vmov	r0, s15
 8006974:	f7f9 fdf0 	bl	8000558 <__aeabi_f2d>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	ed9f 1b92 	vldr	d1, [pc, #584]	; 8006bc8 <Fabrik+0xf68>
 8006980:	ec43 2b10 	vmov	d0, r2, r3
 8006984:	f006 fefc 	bl	800d780 <pow>
 8006988:	ec53 2b10 	vmov	r2, r3, d0
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fc84 	bl	800029c <__adddf3>
 8006994:	4603      	mov	r3, r0
 8006996:	460c      	mov	r4, r1
 8006998:	4625      	mov	r5, r4
 800699a:	461c      	mov	r4, r3
								+ pow((p[i + 1].z - p[i].z), 2));
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	498b      	ldr	r1, [pc, #556]	; (8006bd0 <Fabrik+0xf70>)
 80069a2:	4613      	mov	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	3308      	adds	r3, #8
 80069ae:	ed93 7a00 	vldr	s14, [r3]
 80069b2:	4987      	ldr	r1, [pc, #540]	; (8006bd0 <Fabrik+0xf70>)
 80069b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069b6:	4613      	mov	r3, r2
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	3308      	adds	r3, #8
 80069c2:	edd3 7a00 	vldr	s15, [r3]
 80069c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069ca:	ee17 0a90 	vmov	r0, s15
 80069ce:	f7f9 fdc3 	bl	8000558 <__aeabi_f2d>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8006bc8 <Fabrik+0xf68>
 80069da:	ec43 2b10 	vmov	d0, r2, r3
 80069de:	f006 fecf 	bl	800d780 <pow>
 80069e2:	ec53 2b10 	vmov	r2, r3, d0
				R[i] = sqrt(
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7f9 fc57 	bl	800029c <__adddf3>
 80069ee:	4603      	mov	r3, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	ec44 3b17 	vmov	d7, r3, r4
 80069f6:	eeb0 0a47 	vmov.f32	s0, s14
 80069fa:	eef0 0a67 	vmov.f32	s1, s15
 80069fe:	f007 f82f 	bl	800da60 <sqrt>
 8006a02:	ec54 3b10 	vmov	r3, r4, d0
 8006a06:	4618      	mov	r0, r3
 8006a08:	4621      	mov	r1, r4
 8006a0a:	f7fa f8f5 	bl	8000bf8 <__aeabi_d2f>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006a18:	440b      	add	r3, r1
 8006a1a:	3b28      	subs	r3, #40	; 0x28
 8006a1c:	601a      	str	r2, [r3, #0]
				Lambda[i] = D[i] / R[i];
 8006a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006a26:	4413      	add	r3, r2
 8006a28:	3b3c      	subs	r3, #60	; 0x3c
 8006a2a:	edd3 6a00 	vldr	s13, [r3]
 8006a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006a36:	4413      	add	r3, r2
 8006a38:	3b28      	subs	r3, #40	; 0x28
 8006a3a:	ed93 7a00 	vldr	s14, [r3]
 8006a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3b34      	subs	r3, #52	; 0x34
 8006a4e:	edc3 7a00 	vstr	s15, [r3]
				p[i].x = (1 - Lambda[i]) * p[i + 1].x + Lambda[i] * p[i].x;
 8006a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3b34      	subs	r3, #52	; 0x34
 8006a5e:	edd3 7a00 	vldr	s15, [r3]
 8006a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	4958      	ldr	r1, [pc, #352]	; (8006bd0 <Fabrik+0xf70>)
 8006a70:	4613      	mov	r3, r2
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	edd3 7a00 	vldr	s15, [r3]
 8006a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3b34      	subs	r3, #52	; 0x34
 8006a8e:	edd3 6a00 	vldr	s13, [r3]
 8006a92:	494f      	ldr	r1, [pc, #316]	; (8006bd0 <Fabrik+0xf70>)
 8006a94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a96:	4613      	mov	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	edd3 7a00 	vldr	s15, [r3]
 8006aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aac:	4948      	ldr	r1, [pc, #288]	; (8006bd0 <Fabrik+0xf70>)
 8006aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	edc3 7a00 	vstr	s15, [r3]
				p[i].y = (1 - Lambda[i]) * p[i + 1].y + Lambda[i] * p[i].y;
 8006abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006ac6:	4413      	add	r3, r2
 8006ac8:	3b34      	subs	r3, #52	; 0x34
 8006aca:	edd3 7a00 	vldr	s15, [r3]
 8006ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ad2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	493d      	ldr	r1, [pc, #244]	; (8006bd0 <Fabrik+0xf70>)
 8006adc:	4613      	mov	r3, r2
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	edd3 7a00 	vldr	s15, [r3]
 8006aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006af8:	4413      	add	r3, r2
 8006afa:	3b34      	subs	r3, #52	; 0x34
 8006afc:	edd3 6a00 	vldr	s13, [r3]
 8006b00:	4933      	ldr	r1, [pc, #204]	; (8006bd0 <Fabrik+0xf70>)
 8006b02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b04:	4613      	mov	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	3304      	adds	r3, #4
 8006b10:	edd3 7a00 	vldr	s15, [r3]
 8006b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b1c:	492c      	ldr	r1, [pc, #176]	; (8006bd0 <Fabrik+0xf70>)
 8006b1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b20:	4613      	mov	r3, r2
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	440b      	add	r3, r1
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	edc3 7a00 	vstr	s15, [r3]
				p[i].z = (1 - Lambda[i]) * p[i + 1].z + Lambda[i] * p[i].z;
 8006b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006b38:	4413      	add	r3, r2
 8006b3a:	3b34      	subs	r3, #52	; 0x34
 8006b3c:	edd3 7a00 	vldr	s15, [r3]
 8006b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	4920      	ldr	r1, [pc, #128]	; (8006bd0 <Fabrik+0xf70>)
 8006b4e:	4613      	mov	r3, r2
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	3308      	adds	r3, #8
 8006b5a:	edd3 7a00 	vldr	s15, [r3]
 8006b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3b34      	subs	r3, #52	; 0x34
 8006b6e:	edd3 6a00 	vldr	s13, [r3]
 8006b72:	4917      	ldr	r1, [pc, #92]	; (8006bd0 <Fabrik+0xf70>)
 8006b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b76:	4613      	mov	r3, r2
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3308      	adds	r3, #8
 8006b82:	edd3 7a00 	vldr	s15, [r3]
 8006b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b8e:	4910      	ldr	r1, [pc, #64]	; (8006bd0 <Fabrik+0xf70>)
 8006b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b92:	4613      	mov	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 1; i > -1; i--) {
 8006ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f6bf aea6 	bge.w	80068fc <Fabrik+0xc9c>
			}

			p[0].x = B.x;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4a07      	ldr	r2, [pc, #28]	; (8006bd0 <Fabrik+0xf70>)
 8006bb4:	6013      	str	r3, [r2, #0]
			p[0].y = B.y;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4a05      	ldr	r2, [pc, #20]	; (8006bd0 <Fabrik+0xf70>)
 8006bba:	6053      	str	r3, [r2, #4]
			p[0].z = B.z;
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	4a04      	ldr	r2, [pc, #16]	; (8006bd0 <Fabrik+0xf70>)
 8006bc0:	6093      	str	r3, [r2, #8]

			for (int i = 0; i < 2; i++) {
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc6:	e15e      	b.n	8006e86 <Fabrik+0x1226>
 8006bc8:	00000000 	.word	0x00000000
 8006bcc:	40000000 	.word	0x40000000
 8006bd0:	20000294 	.word	0x20000294
				R[i] = sqrt(
						pow((p[i + 1].x - p[i].x), 2)
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	49e3      	ldr	r1, [pc, #908]	; (8006f68 <Fabrik+0x1308>)
 8006bda:	4613      	mov	r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	ed93 7a00 	vldr	s14, [r3]
 8006be8:	49df      	ldr	r1, [pc, #892]	; (8006f68 <Fabrik+0x1308>)
 8006bea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bec:	4613      	mov	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	edd3 7a00 	vldr	s15, [r3]
 8006bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bfe:	ee17 0a90 	vmov	r0, s15
 8006c02:	f7f9 fca9 	bl	8000558 <__aeabi_f2d>
 8006c06:	4603      	mov	r3, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	ed9f 1bd5 	vldr	d1, [pc, #852]	; 8006f60 <Fabrik+0x1300>
 8006c0e:	ec44 3b10 	vmov	d0, r3, r4
 8006c12:	f006 fdb5 	bl	800d780 <pow>
 8006c16:	ec55 4b10 	vmov	r4, r5, d0
								+ pow((p[i + 1].y - p[i].y), 2)
 8006c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	49d2      	ldr	r1, [pc, #840]	; (8006f68 <Fabrik+0x1308>)
 8006c20:	4613      	mov	r3, r2
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	440b      	add	r3, r1
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	ed93 7a00 	vldr	s14, [r3]
 8006c30:	49cd      	ldr	r1, [pc, #820]	; (8006f68 <Fabrik+0x1308>)
 8006c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c34:	4613      	mov	r3, r2
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	3304      	adds	r3, #4
 8006c40:	edd3 7a00 	vldr	s15, [r3]
 8006c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c48:	ee17 0a90 	vmov	r0, s15
 8006c4c:	f7f9 fc84 	bl	8000558 <__aeabi_f2d>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8006f60 <Fabrik+0x1300>
 8006c58:	ec43 2b10 	vmov	d0, r2, r3
 8006c5c:	f006 fd90 	bl	800d780 <pow>
 8006c60:	ec53 2b10 	vmov	r2, r3, d0
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fb18 	bl	800029c <__adddf3>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	4625      	mov	r5, r4
 8006c72:	461c      	mov	r4, r3
								+ pow((p[i + 1].z - p[i].z), 2));
 8006c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	49bb      	ldr	r1, [pc, #748]	; (8006f68 <Fabrik+0x1308>)
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	440b      	add	r3, r1
 8006c84:	3308      	adds	r3, #8
 8006c86:	ed93 7a00 	vldr	s14, [r3]
 8006c8a:	49b7      	ldr	r1, [pc, #732]	; (8006f68 <Fabrik+0x1308>)
 8006c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c8e:	4613      	mov	r3, r2
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3308      	adds	r3, #8
 8006c9a:	edd3 7a00 	vldr	s15, [r3]
 8006c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ca2:	ee17 0a90 	vmov	r0, s15
 8006ca6:	f7f9 fc57 	bl	8000558 <__aeabi_f2d>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	ed9f 1bac 	vldr	d1, [pc, #688]	; 8006f60 <Fabrik+0x1300>
 8006cb2:	ec43 2b10 	vmov	d0, r2, r3
 8006cb6:	f006 fd63 	bl	800d780 <pow>
 8006cba:	ec53 2b10 	vmov	r2, r3, d0
				R[i] = sqrt(
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	f7f9 faeb 	bl	800029c <__adddf3>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	460c      	mov	r4, r1
 8006cca:	ec44 3b17 	vmov	d7, r3, r4
 8006cce:	eeb0 0a47 	vmov.f32	s0, s14
 8006cd2:	eef0 0a67 	vmov.f32	s1, s15
 8006cd6:	f006 fec3 	bl	800da60 <sqrt>
 8006cda:	ec54 3b10 	vmov	r3, r4, d0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	f7f9 ff89 	bl	8000bf8 <__aeabi_d2f>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006cf0:	440b      	add	r3, r1
 8006cf2:	3b28      	subs	r3, #40	; 0x28
 8006cf4:	601a      	str	r2, [r3, #0]
				Lambda[i] = D[i] / R[i];
 8006cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006cfe:	4413      	add	r3, r2
 8006d00:	3b3c      	subs	r3, #60	; 0x3c
 8006d02:	edd3 6a00 	vldr	s13, [r3]
 8006d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006d0e:	4413      	add	r3, r2
 8006d10:	3b28      	subs	r3, #40	; 0x28
 8006d12:	ed93 7a00 	vldr	s14, [r3]
 8006d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006d22:	4413      	add	r3, r2
 8006d24:	3b34      	subs	r3, #52	; 0x34
 8006d26:	edc3 7a00 	vstr	s15, [r3]
				p[i + 1].x = (1 - Lambda[i]) * p[i].x + Lambda[i] * p[i + 1].x;
 8006d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006d32:	4413      	add	r3, r2
 8006d34:	3b34      	subs	r3, #52	; 0x34
 8006d36:	edd3 7a00 	vldr	s15, [r3]
 8006d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d42:	4989      	ldr	r1, [pc, #548]	; (8006f68 <Fabrik+0x1308>)
 8006d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d46:	4613      	mov	r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	edd3 7a00 	vldr	s15, [r3]
 8006d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006d60:	4413      	add	r3, r2
 8006d62:	3b34      	subs	r3, #52	; 0x34
 8006d64:	edd3 6a00 	vldr	s13, [r3]
 8006d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	497e      	ldr	r1, [pc, #504]	; (8006f68 <Fabrik+0x1308>)
 8006d6e:	4613      	mov	r3, r2
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	440b      	add	r3, r1
 8006d78:	edd3 7a00 	vldr	s15, [r3]
 8006d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d88:	4977      	ldr	r1, [pc, #476]	; (8006f68 <Fabrik+0x1308>)
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	edc3 7a00 	vstr	s15, [r3]
				p[i + 1].y = (1 - Lambda[i]) * p[i].y + Lambda[i] * p[i + 1].y;
 8006d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006da0:	4413      	add	r3, r2
 8006da2:	3b34      	subs	r3, #52	; 0x34
 8006da4:	edd3 7a00 	vldr	s15, [r3]
 8006da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006db0:	496d      	ldr	r1, [pc, #436]	; (8006f68 <Fabrik+0x1308>)
 8006db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006db4:	4613      	mov	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	edd3 7a00 	vldr	s15, [r3]
 8006dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3b34      	subs	r3, #52	; 0x34
 8006dd4:	edd3 6a00 	vldr	s13, [r3]
 8006dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	4962      	ldr	r1, [pc, #392]	; (8006f68 <Fabrik+0x1308>)
 8006dde:	4613      	mov	r3, r2
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	3304      	adds	r3, #4
 8006dea:	edd3 7a00 	vldr	s15, [r3]
 8006dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dfa:	495b      	ldr	r1, [pc, #364]	; (8006f68 <Fabrik+0x1308>)
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	3304      	adds	r3, #4
 8006e08:	edc3 7a00 	vstr	s15, [r3]
				p[i + 1].z = (1 - Lambda[i]) * p[i].z + Lambda[i] * p[i + 1].z;
 8006e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006e14:	4413      	add	r3, r2
 8006e16:	3b34      	subs	r3, #52	; 0x34
 8006e18:	edd3 7a00 	vldr	s15, [r3]
 8006e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e24:	4950      	ldr	r1, [pc, #320]	; (8006f68 <Fabrik+0x1308>)
 8006e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e28:	4613      	mov	r3, r2
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	3308      	adds	r3, #8
 8006e34:	edd3 7a00 	vldr	s15, [r3]
 8006e38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006e44:	4413      	add	r3, r2
 8006e46:	3b34      	subs	r3, #52	; 0x34
 8006e48:	edd3 6a00 	vldr	s13, [r3]
 8006e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	4945      	ldr	r1, [pc, #276]	; (8006f68 <Fabrik+0x1308>)
 8006e52:	4613      	mov	r3, r2
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	edd3 7a00 	vldr	s15, [r3]
 8006e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e6e:	493e      	ldr	r1, [pc, #248]	; (8006f68 <Fabrik+0x1308>)
 8006e70:	4613      	mov	r3, r2
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i < 2; i++) {
 8006e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e82:	3301      	adds	r3, #1
 8006e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	f77f aea3 	ble.w	8006bd4 <Fabrik+0xf74>
			}

			DifA = sqrt(
					pow((p[2].x - target.x), 2) + pow((p[2].y - target.y), 2)
 8006e8e:	4b36      	ldr	r3, [pc, #216]	; (8006f68 <Fabrik+0x1308>)
 8006e90:	ed93 7a06 	vldr	s14, [r3, #24]
 8006e94:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e9c:	ee17 0a90 	vmov	r0, s15
 8006ea0:	f7f9 fb5a 	bl	8000558 <__aeabi_f2d>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 8006f60 <Fabrik+0x1300>
 8006eac:	ec44 3b10 	vmov	d0, r3, r4
 8006eb0:	f006 fc66 	bl	800d780 <pow>
 8006eb4:	ec55 4b10 	vmov	r4, r5, d0
 8006eb8:	4b2b      	ldr	r3, [pc, #172]	; (8006f68 <Fabrik+0x1308>)
 8006eba:	ed93 7a07 	vldr	s14, [r3, #28]
 8006ebe:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ec6:	ee17 0a90 	vmov	r0, s15
 8006eca:	f7f9 fb45 	bl	8000558 <__aeabi_f2d>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006f60 <Fabrik+0x1300>
 8006ed6:	ec43 2b10 	vmov	d0, r2, r3
 8006eda:	f006 fc51 	bl	800d780 <pow>
 8006ede:	ec53 2b10 	vmov	r2, r3, d0
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	f7f9 f9d9 	bl	800029c <__adddf3>
 8006eea:	4603      	mov	r3, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	4625      	mov	r5, r4
 8006ef0:	461c      	mov	r4, r3
							+ pow((p[2].z - target.z), 2));
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <Fabrik+0x1308>)
 8006ef4:	ed93 7a08 	vldr	s14, [r3, #32]
 8006ef8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f00:	ee17 0a90 	vmov	r0, s15
 8006f04:	f7f9 fb28 	bl	8000558 <__aeabi_f2d>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8006f60 <Fabrik+0x1300>
 8006f10:	ec43 2b10 	vmov	d0, r2, r3
 8006f14:	f006 fc34 	bl	800d780 <pow>
 8006f18:	ec53 2b10 	vmov	r2, r3, d0
			DifA = sqrt(
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	4629      	mov	r1, r5
 8006f20:	f7f9 f9bc 	bl	800029c <__adddf3>
 8006f24:	4603      	mov	r3, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	ec44 3b17 	vmov	d7, r3, r4
 8006f2c:	eeb0 0a47 	vmov.f32	s0, s14
 8006f30:	eef0 0a67 	vmov.f32	s1, s15
 8006f34:	f006 fd94 	bl	800da60 <sqrt>
 8006f38:	ec54 3b10 	vmov	r3, r4, d0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	4621      	mov	r1, r4
 8006f40:	f7f9 fe5a 	bl	8000bf8 <__aeabi_d2f>
 8006f44:	4603      	mov	r3, r0
 8006f46:	657b      	str	r3, [r7, #84]	; 0x54
			if (tmp == DifA) {
 8006f48:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006f4c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006f50:	eeb4 7a67 	vcmp.f32	s14, s15
 8006f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f58:	d013      	beq.n	8006f82 <Fabrik+0x1322>
 8006f5a:	e007      	b.n	8006f6c <Fabrik+0x130c>
 8006f5c:	f3af 8000 	nop.w
 8006f60:	00000000 	.word	0x00000000
 8006f64:	40000000 	.word	0x40000000
 8006f68:	20000294 	.word	0x20000294
		while (DifA > Tol) {
 8006f6c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006f70:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7c:	f73f aca7 	bgt.w	80068ce <Fabrik+0xc6e>
 8006f80:	e000      	b.n	8006f84 <Fabrik+0x1324>
				break;
 8006f82:	bf00      	nop
			}
		}
	}
	if (target.x > 0 && target.y > 0) {
 8006f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f90:	dd2b      	ble.n	8006fea <Fabrik+0x138a>
 8006f92:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f9e:	dd24      	ble.n	8006fea <Fabrik+0x138a>
		alfa = atanf(p[2].y / p[2].x) * 180 / M_PI;
 8006fa0:	4b97      	ldr	r3, [pc, #604]	; (8007200 <Fabrik+0x15a0>)
 8006fa2:	ed93 7a07 	vldr	s14, [r3, #28]
 8006fa6:	4b96      	ldr	r3, [pc, #600]	; (8007200 <Fabrik+0x15a0>)
 8006fa8:	edd3 7a06 	vldr	s15, [r3, #24]
 8006fac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006fb0:	eeb0 0a66 	vmov.f32	s0, s13
 8006fb4:	f006 fa86 	bl	800d4c4 <atanf>
 8006fb8:	eeb0 7a40 	vmov.f32	s14, s0
 8006fbc:	eddf 7a91 	vldr	s15, [pc, #580]	; 8007204 <Fabrik+0x15a4>
 8006fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc4:	ee17 0a90 	vmov	r0, s15
 8006fc8:	f7f9 fac6 	bl	8000558 <__aeabi_f2d>
 8006fcc:	a388      	add	r3, pc, #544	; (adr r3, 80071f0 <Fabrik+0x1590>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f7f9 fc43 	bl	800085c <__aeabi_ddiv>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	460c      	mov	r4, r1
 8006fda:	4618      	mov	r0, r3
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f7f9 fe0b 	bl	8000bf8 <__aeabi_d2f>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4b88      	ldr	r3, [pc, #544]	; (8007208 <Fabrik+0x15a8>)
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e129      	b.n	800723e <Fabrik+0x15de>
	} else if (target.x < 0 && target.y > 0) {
 8006fea:	edd7 7a01 	vldr	s15, [r7, #4]
 8006fee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff6:	d536      	bpl.n	8007066 <Fabrik+0x1406>
 8006ff8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007004:	dd2f      	ble.n	8007066 <Fabrik+0x1406>
		alfa = -atanf(p[2].y / p[2].x) * 180 / M_PI + 90.0;
 8007006:	4b7e      	ldr	r3, [pc, #504]	; (8007200 <Fabrik+0x15a0>)
 8007008:	ed93 7a07 	vldr	s14, [r3, #28]
 800700c:	4b7c      	ldr	r3, [pc, #496]	; (8007200 <Fabrik+0x15a0>)
 800700e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007012:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007016:	eeb0 0a66 	vmov.f32	s0, s13
 800701a:	f006 fa53 	bl	800d4c4 <atanf>
 800701e:	eef0 7a40 	vmov.f32	s15, s0
 8007022:	eef1 7a67 	vneg.f32	s15, s15
 8007026:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8007204 <Fabrik+0x15a4>
 800702a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800702e:	ee17 0a90 	vmov	r0, s15
 8007032:	f7f9 fa91 	bl	8000558 <__aeabi_f2d>
 8007036:	a36e      	add	r3, pc, #440	; (adr r3, 80071f0 <Fabrik+0x1590>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f7f9 fc0e 	bl	800085c <__aeabi_ddiv>
 8007040:	4603      	mov	r3, r0
 8007042:	460c      	mov	r4, r1
 8007044:	4618      	mov	r0, r3
 8007046:	4621      	mov	r1, r4
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	4b6f      	ldr	r3, [pc, #444]	; (800720c <Fabrik+0x15ac>)
 800704e:	f7f9 f925 	bl	800029c <__adddf3>
 8007052:	4603      	mov	r3, r0
 8007054:	460c      	mov	r4, r1
 8007056:	4618      	mov	r0, r3
 8007058:	4621      	mov	r1, r4
 800705a:	f7f9 fdcd 	bl	8000bf8 <__aeabi_d2f>
 800705e:	4602      	mov	r2, r0
 8007060:	4b69      	ldr	r3, [pc, #420]	; (8007208 <Fabrik+0x15a8>)
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	e0eb      	b.n	800723e <Fabrik+0x15de>
	} else if (target.x < 0 && target.y < 0) {
 8007066:	edd7 7a01 	vldr	s15, [r7, #4]
 800706a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007072:	d534      	bpl.n	80070de <Fabrik+0x147e>
 8007074:	edd7 7a02 	vldr	s15, [r7, #8]
 8007078:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800707c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007080:	d52d      	bpl.n	80070de <Fabrik+0x147e>
		alfa = atanf(p[2].y / p[2].x) * 180 / M_PI + 180.0;
 8007082:	4b5f      	ldr	r3, [pc, #380]	; (8007200 <Fabrik+0x15a0>)
 8007084:	ed93 7a07 	vldr	s14, [r3, #28]
 8007088:	4b5d      	ldr	r3, [pc, #372]	; (8007200 <Fabrik+0x15a0>)
 800708a:	edd3 7a06 	vldr	s15, [r3, #24]
 800708e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007092:	eeb0 0a66 	vmov.f32	s0, s13
 8007096:	f006 fa15 	bl	800d4c4 <atanf>
 800709a:	eeb0 7a40 	vmov.f32	s14, s0
 800709e:	eddf 7a59 	vldr	s15, [pc, #356]	; 8007204 <Fabrik+0x15a4>
 80070a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a6:	ee17 0a90 	vmov	r0, s15
 80070aa:	f7f9 fa55 	bl	8000558 <__aeabi_f2d>
 80070ae:	a350      	add	r3, pc, #320	; (adr r3, 80071f0 <Fabrik+0x1590>)
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	f7f9 fbd2 	bl	800085c <__aeabi_ddiv>
 80070b8:	4603      	mov	r3, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	4618      	mov	r0, r3
 80070be:	4621      	mov	r1, r4
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	4b52      	ldr	r3, [pc, #328]	; (8007210 <Fabrik+0x15b0>)
 80070c6:	f7f9 f8e9 	bl	800029c <__adddf3>
 80070ca:	4603      	mov	r3, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	4618      	mov	r0, r3
 80070d0:	4621      	mov	r1, r4
 80070d2:	f7f9 fd91 	bl	8000bf8 <__aeabi_d2f>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b4b      	ldr	r3, [pc, #300]	; (8007208 <Fabrik+0x15a8>)
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	e0af      	b.n	800723e <Fabrik+0x15de>
	} else if (target.x > 0 && target.y < 0) {
 80070de:	edd7 7a01 	vldr	s15, [r7, #4]
 80070e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ea:	dd36      	ble.n	800715a <Fabrik+0x14fa>
 80070ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80070f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f8:	d52f      	bpl.n	800715a <Fabrik+0x14fa>
		alfa = -atanf(p[2].y / p[2].x) * 180 / M_PI + 270.0;
 80070fa:	4b41      	ldr	r3, [pc, #260]	; (8007200 <Fabrik+0x15a0>)
 80070fc:	ed93 7a07 	vldr	s14, [r3, #28]
 8007100:	4b3f      	ldr	r3, [pc, #252]	; (8007200 <Fabrik+0x15a0>)
 8007102:	edd3 7a06 	vldr	s15, [r3, #24]
 8007106:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800710a:	eeb0 0a66 	vmov.f32	s0, s13
 800710e:	f006 f9d9 	bl	800d4c4 <atanf>
 8007112:	eef0 7a40 	vmov.f32	s15, s0
 8007116:	eef1 7a67 	vneg.f32	s15, s15
 800711a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8007204 <Fabrik+0x15a4>
 800711e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007122:	ee17 0a90 	vmov	r0, s15
 8007126:	f7f9 fa17 	bl	8000558 <__aeabi_f2d>
 800712a:	a331      	add	r3, pc, #196	; (adr r3, 80071f0 <Fabrik+0x1590>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f7f9 fb94 	bl	800085c <__aeabi_ddiv>
 8007134:	4603      	mov	r3, r0
 8007136:	460c      	mov	r4, r1
 8007138:	4618      	mov	r0, r3
 800713a:	4621      	mov	r1, r4
 800713c:	a32e      	add	r3, pc, #184	; (adr r3, 80071f8 <Fabrik+0x1598>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f7f9 f8ab 	bl	800029c <__adddf3>
 8007146:	4603      	mov	r3, r0
 8007148:	460c      	mov	r4, r1
 800714a:	4618      	mov	r0, r3
 800714c:	4621      	mov	r1, r4
 800714e:	f7f9 fd53 	bl	8000bf8 <__aeabi_d2f>
 8007152:	4602      	mov	r2, r0
 8007154:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <Fabrik+0x15a8>)
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e071      	b.n	800723e <Fabrik+0x15de>
	} else if (target.x == 0 && target.y == 0) {
 800715a:	edd7 7a01 	vldr	s15, [r7, #4]
 800715e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007166:	d10b      	bne.n	8007180 <Fabrik+0x1520>
 8007168:	edd7 7a02 	vldr	s15, [r7, #8]
 800716c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007174:	d104      	bne.n	8007180 <Fabrik+0x1520>
		alfa = 0.0;
 8007176:	4b24      	ldr	r3, [pc, #144]	; (8007208 <Fabrik+0x15a8>)
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e05e      	b.n	800723e <Fabrik+0x15de>
	} else if (target.x > 0 && target.y == 0) {
 8007180:	edd7 7a01 	vldr	s15, [r7, #4]
 8007184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718c:	dd0b      	ble.n	80071a6 <Fabrik+0x1546>
 800718e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007192:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800719a:	d104      	bne.n	80071a6 <Fabrik+0x1546>
		alfa = 0.0;
 800719c:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <Fabrik+0x15a8>)
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e04b      	b.n	800723e <Fabrik+0x15de>
	} else if (target.x == 0 && target.y > 0) {
 80071a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80071aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b2:	d10a      	bne.n	80071ca <Fabrik+0x156a>
 80071b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80071b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c0:	dd03      	ble.n	80071ca <Fabrik+0x156a>
		alfa = 90.0;
 80071c2:	4b11      	ldr	r3, [pc, #68]	; (8007208 <Fabrik+0x15a8>)
 80071c4:	4a13      	ldr	r2, [pc, #76]	; (8007214 <Fabrik+0x15b4>)
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	e039      	b.n	800723e <Fabrik+0x15de>
	} else if (target.x < 0 && target.y == 0) {
 80071ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80071ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d6:	d521      	bpl.n	800721c <Fabrik+0x15bc>
 80071d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80071dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80071e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e4:	d11a      	bne.n	800721c <Fabrik+0x15bc>
		alfa = 180.0;
 80071e6:	4b08      	ldr	r3, [pc, #32]	; (8007208 <Fabrik+0x15a8>)
 80071e8:	4a0b      	ldr	r2, [pc, #44]	; (8007218 <Fabrik+0x15b8>)
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e027      	b.n	800723e <Fabrik+0x15de>
 80071ee:	bf00      	nop
 80071f0:	54442d18 	.word	0x54442d18
 80071f4:	400921fb 	.word	0x400921fb
 80071f8:	00000000 	.word	0x00000000
 80071fc:	4070e000 	.word	0x4070e000
 8007200:	20000294 	.word	0x20000294
 8007204:	43340000 	.word	0x43340000
 8007208:	20000200 	.word	0x20000200
 800720c:	40568000 	.word	0x40568000
 8007210:	40668000 	.word	0x40668000
 8007214:	42b40000 	.word	0x42b40000
 8007218:	43340000 	.word	0x43340000
	} else if (target.x == 0 && target.y < 0) {
 800721c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007220:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007228:	d109      	bne.n	800723e <Fabrik+0x15de>
 800722a:	edd7 7a02 	vldr	s15, [r7, #8]
 800722e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007236:	d502      	bpl.n	800723e <Fabrik+0x15de>
		alfa = 270.0;
 8007238:	4bd7      	ldr	r3, [pc, #860]	; (8007598 <Fabrik+0x1938>)
 800723a:	4ad8      	ldr	r2, [pc, #864]	; (800759c <Fabrik+0x193c>)
 800723c:	601a      	str	r2, [r3, #0]
	}
	beta = acosf(sqrt(pow(p[1].x, 2) + pow(p[1].y, 2)) / L1) * 180 / M_PI;
 800723e:	4bd8      	ldr	r3, [pc, #864]	; (80075a0 <Fabrik+0x1940>)
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	4618      	mov	r0, r3
 8007244:	f7f9 f988 	bl	8000558 <__aeabi_f2d>
 8007248:	4603      	mov	r3, r0
 800724a:	460c      	mov	r4, r1
 800724c:	ed9f 1bcc 	vldr	d1, [pc, #816]	; 8007580 <Fabrik+0x1920>
 8007250:	ec44 3b10 	vmov	d0, r3, r4
 8007254:	f006 fa94 	bl	800d780 <pow>
 8007258:	ec55 4b10 	vmov	r4, r5, d0
 800725c:	4bd0      	ldr	r3, [pc, #832]	; (80075a0 <Fabrik+0x1940>)
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	4618      	mov	r0, r3
 8007262:	f7f9 f979 	bl	8000558 <__aeabi_f2d>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	ed9f 1bc5 	vldr	d1, [pc, #788]	; 8007580 <Fabrik+0x1920>
 800726e:	ec43 2b10 	vmov	d0, r2, r3
 8007272:	f006 fa85 	bl	800d780 <pow>
 8007276:	ec53 2b10 	vmov	r2, r3, d0
 800727a:	4620      	mov	r0, r4
 800727c:	4629      	mov	r1, r5
 800727e:	f7f9 f80d 	bl	800029c <__adddf3>
 8007282:	4603      	mov	r3, r0
 8007284:	460c      	mov	r4, r1
 8007286:	ec44 3b17 	vmov	d7, r3, r4
 800728a:	eeb0 0a47 	vmov.f32	s0, s14
 800728e:	eef0 0a67 	vmov.f32	s1, s15
 8007292:	f006 fbe5 	bl	800da60 <sqrt>
 8007296:	ec51 0b10 	vmov	r0, r1, d0
 800729a:	f04f 0200 	mov.w	r2, #0
 800729e:	4bc1      	ldr	r3, [pc, #772]	; (80075a4 <Fabrik+0x1944>)
 80072a0:	f7f9 fadc 	bl	800085c <__aeabi_ddiv>
 80072a4:	4603      	mov	r3, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	4618      	mov	r0, r3
 80072aa:	4621      	mov	r1, r4
 80072ac:	f7f9 fca4 	bl	8000bf8 <__aeabi_d2f>
 80072b0:	4603      	mov	r3, r0
 80072b2:	ee00 3a10 	vmov	s0, r3
 80072b6:	f006 fc2d 	bl	800db14 <acosf>
 80072ba:	eeb0 7a40 	vmov.f32	s14, s0
 80072be:	eddf 7aba 	vldr	s15, [pc, #744]	; 80075a8 <Fabrik+0x1948>
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	ee17 0a90 	vmov	r0, s15
 80072ca:	f7f9 f945 	bl	8000558 <__aeabi_f2d>
 80072ce:	a3ae      	add	r3, pc, #696	; (adr r3, 8007588 <Fabrik+0x1928>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f9 fac2 	bl	800085c <__aeabi_ddiv>
 80072d8:	4603      	mov	r3, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	4618      	mov	r0, r3
 80072de:	4621      	mov	r1, r4
 80072e0:	f7f9 fc8a 	bl	8000bf8 <__aeabi_d2f>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4bb1      	ldr	r3, [pc, #708]	; (80075ac <Fabrik+0x194c>)
 80072e8:	601a      	str	r2, [r3, #0]
		sigma = asinf(sqrt(pow(p[1].x, 2) + pow(p[1].y, 2)) / L1) * 180 / M_PI + asinf((sqrt(pow(p[2].x, 2) + pow(p[2].y, 2)) - sqrt(pow(p[1].x, 2) + pow(p[1].y, 2))) / L2) * 180 / M_PI;
 80072ea:	4bad      	ldr	r3, [pc, #692]	; (80075a0 <Fabrik+0x1940>)
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7f9 f932 	bl	8000558 <__aeabi_f2d>
 80072f4:	4603      	mov	r3, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 8007580 <Fabrik+0x1920>
 80072fc:	ec44 3b10 	vmov	d0, r3, r4
 8007300:	f006 fa3e 	bl	800d780 <pow>
 8007304:	ec55 4b10 	vmov	r4, r5, d0
 8007308:	4ba5      	ldr	r3, [pc, #660]	; (80075a0 <Fabrik+0x1940>)
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	4618      	mov	r0, r3
 800730e:	f7f9 f923 	bl	8000558 <__aeabi_f2d>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	ed9f 1b9a 	vldr	d1, [pc, #616]	; 8007580 <Fabrik+0x1920>
 800731a:	ec43 2b10 	vmov	d0, r2, r3
 800731e:	f006 fa2f 	bl	800d780 <pow>
 8007322:	ec53 2b10 	vmov	r2, r3, d0
 8007326:	4620      	mov	r0, r4
 8007328:	4629      	mov	r1, r5
 800732a:	f7f8 ffb7 	bl	800029c <__adddf3>
 800732e:	4603      	mov	r3, r0
 8007330:	460c      	mov	r4, r1
 8007332:	ec44 3b17 	vmov	d7, r3, r4
 8007336:	eeb0 0a47 	vmov.f32	s0, s14
 800733a:	eef0 0a67 	vmov.f32	s1, s15
 800733e:	f006 fb8f 	bl	800da60 <sqrt>
 8007342:	ec51 0b10 	vmov	r0, r1, d0
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	4b96      	ldr	r3, [pc, #600]	; (80075a4 <Fabrik+0x1944>)
 800734c:	f7f9 fa86 	bl	800085c <__aeabi_ddiv>
 8007350:	4603      	mov	r3, r0
 8007352:	460c      	mov	r4, r1
 8007354:	4618      	mov	r0, r3
 8007356:	4621      	mov	r1, r4
 8007358:	f7f9 fc4e 	bl	8000bf8 <__aeabi_d2f>
 800735c:	4603      	mov	r3, r0
 800735e:	ee00 3a10 	vmov	s0, r3
 8007362:	f006 fc2f 	bl	800dbc4 <asinf>
 8007366:	eeb0 7a40 	vmov.f32	s14, s0
 800736a:	eddf 7a8f 	vldr	s15, [pc, #572]	; 80075a8 <Fabrik+0x1948>
 800736e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007372:	ee17 0a90 	vmov	r0, s15
 8007376:	f7f9 f8ef 	bl	8000558 <__aeabi_f2d>
 800737a:	a383      	add	r3, pc, #524	; (adr r3, 8007588 <Fabrik+0x1928>)
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f7f9 fa6c 	bl	800085c <__aeabi_ddiv>
 8007384:	4603      	mov	r3, r0
 8007386:	460c      	mov	r4, r1
 8007388:	4625      	mov	r5, r4
 800738a:	461c      	mov	r4, r3
 800738c:	4b84      	ldr	r3, [pc, #528]	; (80075a0 <Fabrik+0x1940>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	4618      	mov	r0, r3
 8007392:	f7f9 f8e1 	bl	8000558 <__aeabi_f2d>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8007580 <Fabrik+0x1920>
 800739e:	ec43 2b10 	vmov	d0, r2, r3
 80073a2:	f006 f9ed 	bl	800d780 <pow>
 80073a6:	ec59 8b10 	vmov	r8, r9, d0
 80073aa:	4b7d      	ldr	r3, [pc, #500]	; (80075a0 <Fabrik+0x1940>)
 80073ac:	69db      	ldr	r3, [r3, #28]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7f9 f8d2 	bl	8000558 <__aeabi_f2d>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8007580 <Fabrik+0x1920>
 80073bc:	ec43 2b10 	vmov	d0, r2, r3
 80073c0:	f006 f9de 	bl	800d780 <pow>
 80073c4:	ec53 2b10 	vmov	r2, r3, d0
 80073c8:	4640      	mov	r0, r8
 80073ca:	4649      	mov	r1, r9
 80073cc:	f7f8 ff66 	bl	800029c <__adddf3>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	ec43 2b17 	vmov	d7, r2, r3
 80073d8:	eeb0 0a47 	vmov.f32	s0, s14
 80073dc:	eef0 0a67 	vmov.f32	s1, s15
 80073e0:	f006 fb3e 	bl	800da60 <sqrt>
 80073e4:	ec59 8b10 	vmov	r8, r9, d0
 80073e8:	4b6d      	ldr	r3, [pc, #436]	; (80075a0 <Fabrik+0x1940>)
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7f9 f8b3 	bl	8000558 <__aeabi_f2d>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8007580 <Fabrik+0x1920>
 80073fa:	ec43 2b10 	vmov	d0, r2, r3
 80073fe:	f006 f9bf 	bl	800d780 <pow>
 8007402:	ec5b ab10 	vmov	sl, fp, d0
 8007406:	4b66      	ldr	r3, [pc, #408]	; (80075a0 <Fabrik+0x1940>)
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	4618      	mov	r0, r3
 800740c:	f7f9 f8a4 	bl	8000558 <__aeabi_f2d>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8007580 <Fabrik+0x1920>
 8007418:	ec43 2b10 	vmov	d0, r2, r3
 800741c:	f006 f9b0 	bl	800d780 <pow>
 8007420:	ec53 2b10 	vmov	r2, r3, d0
 8007424:	4650      	mov	r0, sl
 8007426:	4659      	mov	r1, fp
 8007428:	f7f8 ff38 	bl	800029c <__adddf3>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	ec43 2b17 	vmov	d7, r2, r3
 8007434:	eeb0 0a47 	vmov.f32	s0, s14
 8007438:	eef0 0a67 	vmov.f32	s1, s15
 800743c:	f006 fb10 	bl	800da60 <sqrt>
 8007440:	ec53 2b10 	vmov	r2, r3, d0
 8007444:	4640      	mov	r0, r8
 8007446:	4649      	mov	r1, r9
 8007448:	f7f8 ff26 	bl	8000298 <__aeabi_dsub>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	4610      	mov	r0, r2
 8007452:	4619      	mov	r1, r3
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	4b55      	ldr	r3, [pc, #340]	; (80075b0 <Fabrik+0x1950>)
 800745a:	f7f9 f9ff 	bl	800085c <__aeabi_ddiv>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4610      	mov	r0, r2
 8007464:	4619      	mov	r1, r3
 8007466:	f7f9 fbc7 	bl	8000bf8 <__aeabi_d2f>
 800746a:	4603      	mov	r3, r0
 800746c:	ee00 3a10 	vmov	s0, r3
 8007470:	f006 fba8 	bl	800dbc4 <asinf>
 8007474:	eeb0 7a40 	vmov.f32	s14, s0
 8007478:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80075a8 <Fabrik+0x1948>
 800747c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007480:	ee17 0a90 	vmov	r0, s15
 8007484:	f7f9 f868 	bl	8000558 <__aeabi_f2d>
 8007488:	a33f      	add	r3, pc, #252	; (adr r3, 8007588 <Fabrik+0x1928>)
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	f7f9 f9e5 	bl	800085c <__aeabi_ddiv>
 8007492:	4602      	mov	r2, r0
 8007494:	460b      	mov	r3, r1
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f8 feff 	bl	800029c <__adddf3>
 800749e:	4603      	mov	r3, r0
 80074a0:	460c      	mov	r4, r1
 80074a2:	4618      	mov	r0, r3
 80074a4:	4621      	mov	r1, r4
 80074a6:	f7f9 fba7 	bl	8000bf8 <__aeabi_d2f>
 80074aa:	4602      	mov	r2, r0
 80074ac:	4b41      	ldr	r3, [pc, #260]	; (80075b4 <Fabrik+0x1954>)
 80074ae:	601a      	str	r2, [r3, #0]

	step_dolnego_fabrik = alfa * 12900.00 / 360.00;
 80074b0:	4b39      	ldr	r3, [pc, #228]	; (8007598 <Fabrik+0x1938>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7f9 f84f 	bl	8000558 <__aeabi_f2d>
 80074ba:	a335      	add	r3, pc, #212	; (adr r3, 8007590 <Fabrik+0x1930>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f9 f8a2 	bl	8000608 <__aeabi_dmul>
 80074c4:	4603      	mov	r3, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	4618      	mov	r0, r3
 80074ca:	4621      	mov	r1, r4
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	4b39      	ldr	r3, [pc, #228]	; (80075b8 <Fabrik+0x1958>)
 80074d2:	f7f9 f9c3 	bl	800085c <__aeabi_ddiv>
 80074d6:	4603      	mov	r3, r0
 80074d8:	460c      	mov	r4, r1
 80074da:	4618      	mov	r0, r3
 80074dc:	4621      	mov	r1, r4
 80074de:	f7f9 fb6b 	bl	8000bb8 <__aeabi_d2uiz>
 80074e2:	4603      	mov	r3, r0
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	4b35      	ldr	r3, [pc, #212]	; (80075bc <Fabrik+0x195c>)
 80074e8:	801a      	strh	r2, [r3, #0]
	step_gornego_fabrik = beta * 200.00 / 360.00;
 80074ea:	4b30      	ldr	r3, [pc, #192]	; (80075ac <Fabrik+0x194c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7f9 f832 	bl	8000558 <__aeabi_f2d>
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	4b31      	ldr	r3, [pc, #196]	; (80075c0 <Fabrik+0x1960>)
 80074fa:	f7f9 f885 	bl	8000608 <__aeabi_dmul>
 80074fe:	4603      	mov	r3, r0
 8007500:	460c      	mov	r4, r1
 8007502:	4618      	mov	r0, r3
 8007504:	4621      	mov	r1, r4
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <Fabrik+0x1958>)
 800750c:	f7f9 f9a6 	bl	800085c <__aeabi_ddiv>
 8007510:	4603      	mov	r3, r0
 8007512:	460c      	mov	r4, r1
 8007514:	4618      	mov	r0, r3
 8007516:	4621      	mov	r1, r4
 8007518:	f7f9 fb4e 	bl	8000bb8 <__aeabi_d2uiz>
 800751c:	4603      	mov	r3, r0
 800751e:	b29a      	uxth	r2, r3
 8007520:	4b28      	ldr	r3, [pc, #160]	; (80075c4 <Fabrik+0x1964>)
 8007522:	801a      	strh	r2, [r3, #0]
	pwm_duty_servo_joint = sigma * 1000.00 / 180.00 + 250.00;
 8007524:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <Fabrik+0x1954>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f7f9 f815 	bl	8000558 <__aeabi_f2d>
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <Fabrik+0x1968>)
 8007534:	f7f9 f868 	bl	8000608 <__aeabi_dmul>
 8007538:	4603      	mov	r3, r0
 800753a:	460c      	mov	r4, r1
 800753c:	4618      	mov	r0, r3
 800753e:	4621      	mov	r1, r4
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	4b21      	ldr	r3, [pc, #132]	; (80075cc <Fabrik+0x196c>)
 8007546:	f7f9 f989 	bl	800085c <__aeabi_ddiv>
 800754a:	4603      	mov	r3, r0
 800754c:	460c      	mov	r4, r1
 800754e:	4618      	mov	r0, r3
 8007550:	4621      	mov	r1, r4
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <Fabrik+0x1970>)
 8007558:	f7f8 fea0 	bl	800029c <__adddf3>
 800755c:	4603      	mov	r3, r0
 800755e:	460c      	mov	r4, r1
 8007560:	4618      	mov	r0, r3
 8007562:	4621      	mov	r1, r4
 8007564:	f7f9 fb00 	bl	8000b68 <__aeabi_d2iz>
 8007568:	4602      	mov	r2, r0
 800756a:	4b1a      	ldr	r3, [pc, #104]	; (80075d4 <Fabrik+0x1974>)
 800756c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty_servo_joint);
 800756e:	4b19      	ldr	r3, [pc, #100]	; (80075d4 <Fabrik+0x1974>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b19      	ldr	r3, [pc, #100]	; (80075d8 <Fabrik+0x1978>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	635a      	str	r2, [r3, #52]	; 0x34

	if (step_dolnego > step_dolnego_fabrik) {
 8007578:	4b18      	ldr	r3, [pc, #96]	; (80075dc <Fabrik+0x197c>)
 800757a:	881a      	ldrh	r2, [r3, #0]
 800757c:	e030      	b.n	80075e0 <Fabrik+0x1980>
 800757e:	bf00      	nop
 8007580:	00000000 	.word	0x00000000
 8007584:	40000000 	.word	0x40000000
 8007588:	54442d18 	.word	0x54442d18
 800758c:	400921fb 	.word	0x400921fb
 8007590:	00000000 	.word	0x00000000
 8007594:	40c93200 	.word	0x40c93200
 8007598:	20000200 	.word	0x20000200
 800759c:	43870000 	.word	0x43870000
 80075a0:	20000294 	.word	0x20000294
 80075a4:	402e0000 	.word	0x402e0000
 80075a8:	43340000 	.word	0x43340000
 80075ac:	20000204 	.word	0x20000204
 80075b0:	40370000 	.word	0x40370000
 80075b4:	20000208 	.word	0x20000208
 80075b8:	40768000 	.word	0x40768000
 80075bc:	200002b8 	.word	0x200002b8
 80075c0:	40690000 	.word	0x40690000
 80075c4:	20000314 	.word	0x20000314
 80075c8:	408f4000 	.word	0x408f4000
 80075cc:	40668000 	.word	0x40668000
 80075d0:	406f4000 	.word	0x406f4000
 80075d4:	200002ec 	.word	0x200002ec
 80075d8:	20000418 	.word	0x20000418
 80075dc:	200002e6 	.word	0x200002e6
 80075e0:	4b2c      	ldr	r3, [pc, #176]	; (8007694 <Fabrik+0x1a34>)
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d90e      	bls.n	8007606 <Fabrik+0x19a6>
		HAL_GPIO_WritePin(Dir_STEPPER_LOWER_GPIO_Port, Dir_STEPPER_LOWER_Pin,
 80075e8:	2200      	movs	r2, #0
 80075ea:	2180      	movs	r1, #128	; 0x80
 80075ec:	482a      	ldr	r0, [pc, #168]	; (8007698 <Fabrik+0x1a38>)
 80075ee:	f7fa fb69 	bl	8001cc4 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port, En_STEPPER_LOWER_Pin,
 80075f2:	2201      	movs	r2, #1
 80075f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80075f8:	4828      	ldr	r0, [pc, #160]	; (800769c <Fabrik+0x1a3c>)
 80075fa:	f7fa fb63 	bl	8001cc4 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		flaga_fabrik_dolny = 1;
 80075fe:	4b28      	ldr	r3, [pc, #160]	; (80076a0 <Fabrik+0x1a40>)
 8007600:	2201      	movs	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	e013      	b.n	800762e <Fabrik+0x19ce>
	} else if (step_dolnego < step_dolnego_fabrik) {
 8007606:	4b27      	ldr	r3, [pc, #156]	; (80076a4 <Fabrik+0x1a44>)
 8007608:	881a      	ldrh	r2, [r3, #0]
 800760a:	4b22      	ldr	r3, [pc, #136]	; (8007694 <Fabrik+0x1a34>)
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d20d      	bcs.n	800762e <Fabrik+0x19ce>
		HAL_GPIO_WritePin(Dir_STEPPER_LOWER_GPIO_Port, Dir_STEPPER_LOWER_Pin,
 8007612:	2201      	movs	r2, #1
 8007614:	2180      	movs	r1, #128	; 0x80
 8007616:	4820      	ldr	r0, [pc, #128]	; (8007698 <Fabrik+0x1a38>)
 8007618:	f7fa fb54 	bl	8001cc4 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port, En_STEPPER_LOWER_Pin,
 800761c:	2201      	movs	r2, #1
 800761e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007622:	481e      	ldr	r0, [pc, #120]	; (800769c <Fabrik+0x1a3c>)
 8007624:	f7fa fb4e 	bl	8001cc4 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		flaga_fabrik_dolny = 2;
 8007628:	4b1d      	ldr	r3, [pc, #116]	; (80076a0 <Fabrik+0x1a40>)
 800762a:	2202      	movs	r2, #2
 800762c:	701a      	strb	r2, [r3, #0]
	}

	if (step_gornego > step_gornego_fabrik) {
 800762e:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <Fabrik+0x1a48>)
 8007630:	881a      	ldrh	r2, [r3, #0]
 8007632:	4b1e      	ldr	r3, [pc, #120]	; (80076ac <Fabrik+0x1a4c>)
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d90f      	bls.n	800765a <Fabrik+0x19fa>
		HAL_GPIO_WritePin(Dir_STEPPER_UPPER_GPIO_Port, Dir_STEPPER_UPPER_Pin,
 800763a:	2201      	movs	r2, #1
 800763c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007640:	4815      	ldr	r0, [pc, #84]	; (8007698 <Fabrik+0x1a38>)
 8007642:	f7fa fb3f 	bl	8001cc4 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(En_STEPPER_UPPER_GPIO_Port, En_STEPPER_UPPER_Pin,
 8007646:	2201      	movs	r2, #1
 8007648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800764c:	4813      	ldr	r0, [pc, #76]	; (800769c <Fabrik+0x1a3c>)
 800764e:	f7fa fb39 	bl	8001cc4 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		flaga_fabrik_gorny = 1;
 8007652:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <Fabrik+0x1a50>)
 8007654:	2201      	movs	r2, #1
 8007656:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(En_STEPPER_UPPER_GPIO_Port, En_STEPPER_UPPER_Pin,
				GPIO_PIN_SET);
		flaga_fabrik_gorny = 2;
	}

}
 8007658:	e014      	b.n	8007684 <Fabrik+0x1a24>
	} else if (step_gornego < step_gornego_fabrik) {
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <Fabrik+0x1a48>)
 800765c:	881a      	ldrh	r2, [r3, #0]
 800765e:	4b13      	ldr	r3, [pc, #76]	; (80076ac <Fabrik+0x1a4c>)
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d20e      	bcs.n	8007684 <Fabrik+0x1a24>
		HAL_GPIO_WritePin(Dir_STEPPER_UPPER_GPIO_Port, Dir_STEPPER_UPPER_Pin,
 8007666:	2200      	movs	r2, #0
 8007668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800766c:	480a      	ldr	r0, [pc, #40]	; (8007698 <Fabrik+0x1a38>)
 800766e:	f7fa fb29 	bl	8001cc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En_STEPPER_UPPER_GPIO_Port, En_STEPPER_UPPER_Pin,
 8007672:	2201      	movs	r2, #1
 8007674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007678:	4808      	ldr	r0, [pc, #32]	; (800769c <Fabrik+0x1a3c>)
 800767a:	f7fa fb23 	bl	8001cc4 <HAL_GPIO_WritePin>
		flaga_fabrik_gorny = 2;
 800767e:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <Fabrik+0x1a50>)
 8007680:	2202      	movs	r2, #2
 8007682:	701a      	strb	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	3758      	adds	r7, #88	; 0x58
 8007688:	46bd      	mov	sp, r7
 800768a:	ecbd 8b02 	vpop	{d8}
 800768e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007692:	bf00      	nop
 8007694:	200002b8 	.word	0x200002b8
 8007698:	40020800 	.word	0x40020800
 800769c:	40020c00 	.word	0x40020c00
 80076a0:	200002c2 	.word	0x200002c2
 80076a4:	200002e6 	.word	0x200002e6
 80076a8:	200002fc 	.word	0x200002fc
 80076ac:	20000314 	.word	0x20000314
 80076b0:	200002fa 	.word	0x200002fa

080076b4 <_write>:

int _write(int file, char *ptr, int len) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	2332      	movs	r3, #50	; 0x32
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	4803      	ldr	r0, [pc, #12]	; (80076d8 <_write+0x24>)
 80076ca:	f7fd f90c 	bl	80048e6 <HAL_UART_Transmit>
	return len;
 80076ce:	687b      	ldr	r3, [r7, #4]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000538 	.word	0x20000538
 80076dc:	00000000 	.word	0x00000000

080076e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80076e0:	b590      	push	{r4, r7, lr}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a39      	ldr	r2, [pc, #228]	; (80077d0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d167      	bne.n	80077c0 <HAL_TIM_IC_CaptureCallback+0xe0>
		uint16_t time;
		H_sum = 0;
 80076f0:	4b38      	ldr	r3, [pc, #224]	; (80077d4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]

		time = __HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_2)
 80076f6:	4b36      	ldr	r3, [pc, #216]	; (80077d0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
				- __HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_1);
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	4b34      	ldr	r3, [pc, #208]	; (80077d0 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007704:	b29b      	uxth	r3, r3
		time = __HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_2)
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	817b      	strh	r3, [r7, #10]
		if (time < 23615) {
 800770a:	897b      	ldrh	r3, [r7, #10]
 800770c:	f645 423e 	movw	r2, #23614	; 0x5c3e
 8007710:	4293      	cmp	r3, r2
 8007712:	d855      	bhi.n	80077c0 <HAL_TIM_IC_CaptureCallback+0xe0>
			Hcsr04_Distance_tmp = (float) time / 2.0 * 0.0343;
 8007714:	897b      	ldrh	r3, [r7, #10]
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771e:	ee17 0a90 	vmov	r0, s15
 8007722:	f7f8 ff19 	bl	8000558 <__aeabi_f2d>
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800772e:	f7f9 f895 	bl	800085c <__aeabi_ddiv>
 8007732:	4603      	mov	r3, r0
 8007734:	460c      	mov	r4, r1
 8007736:	4618      	mov	r0, r3
 8007738:	4621      	mov	r1, r4
 800773a:	a323      	add	r3, pc, #140	; (adr r3, 80077c8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	f7f8 ff62 	bl	8000608 <__aeabi_dmul>
 8007744:	4603      	mov	r3, r0
 8007746:	460c      	mov	r4, r1
 8007748:	4618      	mov	r0, r3
 800774a:	4621      	mov	r1, r4
 800774c:	f7f9 fa54 	bl	8000bf8 <__aeabi_d2f>
 8007750:	4602      	mov	r2, r0
 8007752:	4b21      	ldr	r3, [pc, #132]	; (80077d8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8007754:	601a      	str	r2, [r3, #0]
			sprintf(buff, "X %.2f ", Hcsr04_Distance_tmp);
 8007756:	4b20      	ldr	r3, [pc, #128]	; (80077d8 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f7f8 fefc 	bl	8000558 <__aeabi_f2d>
 8007760:	4603      	mov	r3, r0
 8007762:	460c      	mov	r4, r1
 8007764:	461a      	mov	r2, r3
 8007766:	4623      	mov	r3, r4
 8007768:	491c      	ldr	r1, [pc, #112]	; (80077dc <HAL_TIM_IC_CaptureCallback+0xfc>)
 800776a:	481d      	ldr	r0, [pc, #116]	; (80077e0 <HAL_TIM_IC_CaptureCallback+0x100>)
 800776c:	f002 fac2 	bl	8009cf4 <siprintf>
			for (int i = 0; i < strlen(buff); i++) {
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	e00c      	b.n	8007790 <HAL_TIM_IC_CaptureCallback+0xb0>
				H_sum += buff[i];
 8007776:	4a1a      	ldr	r2, [pc, #104]	; (80077e0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	4b14      	ldr	r3, [pc, #80]	; (80077d4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4413      	add	r3, r2
 8007786:	4a13      	ldr	r2, [pc, #76]	; (80077d4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8007788:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < strlen(buff); i++) {
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	4813      	ldr	r0, [pc, #76]	; (80077e0 <HAL_TIM_IC_CaptureCallback+0x100>)
 8007792:	f7f8 fd25 	bl	80001e0 <strlen>
 8007796:	4602      	mov	r2, r0
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	429a      	cmp	r2, r3
 800779c:	d8eb      	bhi.n	8007776 <HAL_TIM_IC_CaptureCallback+0x96>
			}
			H_sum = H_sum % 37;
 800779e:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80077a0:	6819      	ldr	r1, [r3, #0]
 80077a2:	4b10      	ldr	r3, [pc, #64]	; (80077e4 <HAL_TIM_IC_CaptureCallback+0x104>)
 80077a4:	fb83 2301 	smull	r2, r3, r3, r1
 80077a8:	440b      	add	r3, r1
 80077aa:	115a      	asrs	r2, r3, #5
 80077ac:	17cb      	asrs	r3, r1, #31
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	4613      	mov	r3, r2
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	1aca      	subs	r2, r1, r3
 80077bc:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <HAL_TIM_IC_CaptureCallback+0xf4>)
 80077be:	601a      	str	r2, [r3, #0]
		}
	}
}
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd90      	pop	{r4, r7, pc}
 80077c8:	04816f00 	.word	0x04816f00
 80077cc:	3fa18fc5 	.word	0x3fa18fc5
 80077d0:	20000398 	.word	0x20000398
 80077d4:	200002e8 	.word	0x200002e8
 80077d8:	200002e0 	.word	0x200002e0
 80077dc:	0800f830 	.word	0x0800f830
 80077e0:	200002cc 	.word	0x200002cc
 80077e4:	dd67c8a7 	.word	0xdd67c8a7

080077e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4aa4      	ldr	r2, [pc, #656]	; (8007a84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	f040 80af 	bne.w	8007958 <HAL_TIM_PeriodElapsedCallback+0x170>
		if (flag == 1 && flaga_dolnego_stepp == 1 && step_dolnego < 25800) {
 80077fa:	4ba3      	ldr	r3, [pc, #652]	; (8007a88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d125      	bne.n	800784e <HAL_TIM_PeriodElapsedCallback+0x66>
 8007802:	4ba2      	ldr	r3, [pc, #648]	; (8007a8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d121      	bne.n	800784e <HAL_TIM_PeriodElapsedCallback+0x66>
 800780a:	4ba1      	ldr	r3, [pc, #644]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	f246 42c7 	movw	r2, #25799	; 0x64c7
 8007812:	4293      	cmp	r3, r2
 8007814:	d81b      	bhi.n	800784e <HAL_TIM_PeriodElapsedCallback+0x66>
			if (out_dolnego_stepp) {
 8007816:	4b9f      	ldr	r3, [pc, #636]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d008      	beq.n	8007830 <HAL_TIM_PeriodElapsedCallback+0x48>
				out_dolnego_stepp = 0;
 800781e:	4b9d      	ldr	r3, [pc, #628]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007820:	2200      	movs	r2, #0
 8007822:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 8007824:	2200      	movs	r2, #0
 8007826:	2140      	movs	r1, #64	; 0x40
 8007828:	489b      	ldr	r0, [pc, #620]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800782a:	f7fa fa4b 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_dolnego_stepp) {
 800782e:	e093      	b.n	8007958 <HAL_TIM_PeriodElapsedCallback+0x170>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
			} else {
				step_dolnego++;
 8007830:	4b97      	ldr	r3, [pc, #604]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8007832:	881b      	ldrh	r3, [r3, #0]
 8007834:	3301      	adds	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	4b95      	ldr	r3, [pc, #596]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800783a:	801a      	strh	r2, [r3, #0]
				out_dolnego_stepp = 1;
 800783c:	4b95      	ldr	r3, [pc, #596]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800783e:	2201      	movs	r2, #1
 8007840:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 8007842:	2201      	movs	r2, #1
 8007844:	2140      	movs	r1, #64	; 0x40
 8007846:	4894      	ldr	r0, [pc, #592]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007848:	f7fa fa3c 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_dolnego_stepp) {
 800784c:	e084      	b.n	8007958 <HAL_TIM_PeriodElapsedCallback+0x170>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_SET);
			}
		} else if (flag == 1 && flaga_dolnego_stepp == 2 && step_dolnego > 0) {
 800784e:	4b8e      	ldr	r3, [pc, #568]	; (8007a88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d123      	bne.n	800789e <HAL_TIM_PeriodElapsedCallback+0xb6>
 8007856:	4b8d      	ldr	r3, [pc, #564]	; (8007a8c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b02      	cmp	r3, #2
 800785c:	d11f      	bne.n	800789e <HAL_TIM_PeriodElapsedCallback+0xb6>
 800785e:	4b8c      	ldr	r3, [pc, #560]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01b      	beq.n	800789e <HAL_TIM_PeriodElapsedCallback+0xb6>
			if (out_dolnego_stepp) {
 8007866:	4b8b      	ldr	r3, [pc, #556]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <HAL_TIM_PeriodElapsedCallback+0x98>
				out_dolnego_stepp = 0;
 800786e:	4b89      	ldr	r3, [pc, #548]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007870:	2200      	movs	r2, #0
 8007872:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 8007874:	2200      	movs	r2, #0
 8007876:	2140      	movs	r1, #64	; 0x40
 8007878:	4887      	ldr	r0, [pc, #540]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800787a:	f7fa fa23 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_dolnego_stepp) {
 800787e:	e06b      	b.n	8007958 <HAL_TIM_PeriodElapsedCallback+0x170>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
			} else {
				step_dolnego--;
 8007880:	4b83      	ldr	r3, [pc, #524]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	4b81      	ldr	r3, [pc, #516]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800788a:	801a      	strh	r2, [r3, #0]
				out_dolnego_stepp = 1;
 800788c:	4b81      	ldr	r3, [pc, #516]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800788e:	2201      	movs	r2, #1
 8007890:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 8007892:	2201      	movs	r2, #1
 8007894:	2140      	movs	r1, #64	; 0x40
 8007896:	4880      	ldr	r0, [pc, #512]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007898:	f7fa fa14 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_dolnego_stepp) {
 800789c:	e05c      	b.n	8007958 <HAL_TIM_PeriodElapsedCallback+0x170>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_SET);
			}
		} else if (flaga_fabrik_dolny == 1) {
 800789e:	4b7f      	ldr	r3, [pc, #508]	; (8007a9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d12a      	bne.n	80078fc <HAL_TIM_PeriodElapsedCallback+0x114>
			if (out_dolnego_stepp) {
 80078a6:	4b7b      	ldr	r3, [pc, #492]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <HAL_TIM_PeriodElapsedCallback+0xd8>
				out_dolnego_stepp = 0;
 80078ae:	4b79      	ldr	r3, [pc, #484]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 80078b4:	2200      	movs	r2, #0
 80078b6:	2140      	movs	r1, #64	; 0x40
 80078b8:	4877      	ldr	r0, [pc, #476]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80078ba:	f7fa fa03 	bl	8001cc4 <HAL_GPIO_WritePin>
 80078be:	e00d      	b.n	80078dc <HAL_TIM_PeriodElapsedCallback+0xf4>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
			} else {
				step_dolnego--;
 80078c0:	4b73      	ldr	r3, [pc, #460]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	4b71      	ldr	r3, [pc, #452]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80078ca:	801a      	strh	r2, [r3, #0]
				out_dolnego_stepp = 1;
 80078cc:	4b71      	ldr	r3, [pc, #452]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80078ce:	2201      	movs	r2, #1
 80078d0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 80078d2:	2201      	movs	r2, #1
 80078d4:	2140      	movs	r1, #64	; 0x40
 80078d6:	4870      	ldr	r0, [pc, #448]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80078d8:	f7fa f9f4 	bl	8001cc4 <HAL_GPIO_WritePin>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_SET);
			}
			if (step_dolnego == step_dolnego_fabrik) {
 80078dc:	4b6c      	ldr	r3, [pc, #432]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80078de:	881a      	ldrh	r2, [r3, #0]
 80078e0:	4b6f      	ldr	r3, [pc, #444]	; (8007aa0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d137      	bne.n	8007958 <HAL_TIM_PeriodElapsedCallback+0x170>
				flaga_fabrik_dolny = 0;
 80078e8:	4b6c      	ldr	r3, [pc, #432]	; (8007a9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port,
 80078ee:	2200      	movs	r2, #0
 80078f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80078f4:	486b      	ldr	r0, [pc, #428]	; (8007aa4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80078f6:	f7fa f9e5 	bl	8001cc4 <HAL_GPIO_WritePin>
 80078fa:	e02d      	b.n	8007958 <HAL_TIM_PeriodElapsedCallback+0x170>
				En_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
			}
		} else if (flaga_fabrik_dolny == 2) {
 80078fc:	4b67      	ldr	r3, [pc, #412]	; (8007a9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d129      	bne.n	8007958 <HAL_TIM_PeriodElapsedCallback+0x170>
			if (out_dolnego_stepp) {
 8007904:	4b63      	ldr	r3, [pc, #396]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d008      	beq.n	800791e <HAL_TIM_PeriodElapsedCallback+0x136>
				out_dolnego_stepp = 0;
 800790c:	4b61      	ldr	r3, [pc, #388]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 8007912:	2200      	movs	r2, #0
 8007914:	2140      	movs	r1, #64	; 0x40
 8007916:	4860      	ldr	r0, [pc, #384]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007918:	f7fa f9d4 	bl	8001cc4 <HAL_GPIO_WritePin>
 800791c:	e00d      	b.n	800793a <HAL_TIM_PeriodElapsedCallback+0x152>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
			} else {
				step_dolnego++;
 800791e:	4b5c      	ldr	r3, [pc, #368]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	3301      	adds	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	4b5a      	ldr	r3, [pc, #360]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8007928:	801a      	strh	r2, [r3, #0]
				out_dolnego_stepp = 1;
 800792a:	4b5a      	ldr	r3, [pc, #360]	; (8007a94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800792c:	2201      	movs	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 8007930:	2201      	movs	r2, #1
 8007932:	2140      	movs	r1, #64	; 0x40
 8007934:	4858      	ldr	r0, [pc, #352]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007936:	f7fa f9c5 	bl	8001cc4 <HAL_GPIO_WritePin>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_SET);
			}
			if (step_dolnego == step_dolnego_fabrik) {
 800793a:	4b55      	ldr	r3, [pc, #340]	; (8007a90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800793c:	881a      	ldrh	r2, [r3, #0]
 800793e:	4b58      	ldr	r3, [pc, #352]	; (8007aa0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	429a      	cmp	r2, r3
 8007944:	d108      	bne.n	8007958 <HAL_TIM_PeriodElapsedCallback+0x170>
				flaga_fabrik_dolny = 0;
 8007946:	4b55      	ldr	r3, [pc, #340]	; (8007a9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8007948:	2200      	movs	r2, #0
 800794a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port,
 800794c:	2200      	movs	r2, #0
 800794e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007952:	4854      	ldr	r0, [pc, #336]	; (8007aa4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8007954:	f7fa f9b6 	bl	8001cc4 <HAL_GPIO_WritePin>
				En_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
			}
		}
	}
	if (htim == &htim11) {
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a53      	ldr	r2, [pc, #332]	; (8007aa8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800795c:	4293      	cmp	r3, r2
 800795e:	f040 80c7 	bne.w	8007af0 <HAL_TIM_PeriodElapsedCallback+0x308>
		if (flag == 1 && flaga_gornego_stepp == 1 && step_gornego > 0) {
 8007962:	4b49      	ldr	r3, [pc, #292]	; (8007a88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d125      	bne.n	80079b6 <HAL_TIM_PeriodElapsedCallback+0x1ce>
 800796a:	4b50      	ldr	r3, [pc, #320]	; (8007aac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d121      	bne.n	80079b6 <HAL_TIM_PeriodElapsedCallback+0x1ce>
 8007972:	4b4f      	ldr	r3, [pc, #316]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d01d      	beq.n	80079b6 <HAL_TIM_PeriodElapsedCallback+0x1ce>
			if (out_gornego_stepp) {
 800797a:	4b4e      	ldr	r3, [pc, #312]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d009      	beq.n	8007996 <HAL_TIM_PeriodElapsedCallback+0x1ae>
				out_gornego_stepp = 0;
 8007982:	4b4c      	ldr	r3, [pc, #304]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_UPPER_GPIO_Port,
 8007988:	2200      	movs	r2, #0
 800798a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800798e:	4842      	ldr	r0, [pc, #264]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007990:	f7fa f998 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_gornego_stepp) {
 8007994:	e0ac      	b.n	8007af0 <HAL_TIM_PeriodElapsedCallback+0x308>
				Step_STEPPER_UPPER_Pin, GPIO_PIN_RESET);
			} else {
				out_gornego_stepp = 1;
 8007996:	4b47      	ldr	r3, [pc, #284]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8007998:	2201      	movs	r2, #1
 800799a:	701a      	strb	r2, [r3, #0]
				step_gornego--;
 800799c:	4b44      	ldr	r3, [pc, #272]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	4b42      	ldr	r3, [pc, #264]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80079a6:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_UPPER_GPIO_Port,
 80079a8:	2201      	movs	r2, #1
 80079aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079ae:	483a      	ldr	r0, [pc, #232]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80079b0:	f7fa f988 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_gornego_stepp) {
 80079b4:	e09c      	b.n	8007af0 <HAL_TIM_PeriodElapsedCallback+0x308>
				Step_STEPPER_UPPER_Pin, GPIO_PIN_SET);

			}
		} else if (flag == 1 && flaga_gornego_stepp == 2
 80079b6:	4b34      	ldr	r3, [pc, #208]	; (8007a88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d125      	bne.n	8007a0a <HAL_TIM_PeriodElapsedCallback+0x222>
 80079be:	4b3b      	ldr	r3, [pc, #236]	; (8007aac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d121      	bne.n	8007a0a <HAL_TIM_PeriodElapsedCallback+0x222>
				&& step_gornego < 116) {
 80079c6:	4b3a      	ldr	r3, [pc, #232]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	2b73      	cmp	r3, #115	; 0x73
 80079cc:	d81d      	bhi.n	8007a0a <HAL_TIM_PeriodElapsedCallback+0x222>
			if (out_gornego_stepp) {
 80079ce:	4b39      	ldr	r3, [pc, #228]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <HAL_TIM_PeriodElapsedCallback+0x202>
				out_gornego_stepp = 0;
 80079d6:	4b37      	ldr	r3, [pc, #220]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_UPPER_GPIO_Port,
 80079dc:	2200      	movs	r2, #0
 80079de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079e2:	482d      	ldr	r0, [pc, #180]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80079e4:	f7fa f96e 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_gornego_stepp) {
 80079e8:	e082      	b.n	8007af0 <HAL_TIM_PeriodElapsedCallback+0x308>
				Step_STEPPER_UPPER_Pin, GPIO_PIN_RESET);
			} else {
				out_gornego_stepp = 1;
 80079ea:	4b32      	ldr	r3, [pc, #200]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
				step_gornego++;
 80079f0:	4b2f      	ldr	r3, [pc, #188]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	4b2d      	ldr	r3, [pc, #180]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80079fa:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_UPPER_GPIO_Port,
 80079fc:	2201      	movs	r2, #1
 80079fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a02:	4825      	ldr	r0, [pc, #148]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007a04:	f7fa f95e 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_gornego_stepp) {
 8007a08:	e072      	b.n	8007af0 <HAL_TIM_PeriodElapsedCallback+0x308>
				Step_STEPPER_UPPER_Pin, GPIO_PIN_SET);
			}
		}else if (flaga_fabrik_gorny == 1) {
 8007a0a:	4b2b      	ldr	r3, [pc, #172]	; (8007ab8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d126      	bne.n	8007a60 <HAL_TIM_PeriodElapsedCallback+0x278>
			if (out_gornego_stepp) {
 8007a12:	4b28      	ldr	r3, [pc, #160]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <HAL_TIM_PeriodElapsedCallback+0x246>
				out_gornego_stepp = 0;
 8007a1a:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_UPPER_GPIO_Port,
 8007a20:	2200      	movs	r2, #0
 8007a22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a26:	481c      	ldr	r0, [pc, #112]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007a28:	f7fa f94c 	bl	8001cc4 <HAL_GPIO_WritePin>
 8007a2c:	e00e      	b.n	8007a4c <HAL_TIM_PeriodElapsedCallback+0x264>
				Step_STEPPER_UPPER_Pin, GPIO_PIN_RESET);
			} else {
				step_gornego--;
 8007a2e:	4b20      	ldr	r3, [pc, #128]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	4b1e      	ldr	r3, [pc, #120]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007a38:	801a      	strh	r2, [r3, #0]
				out_gornego_stepp = 1;
 8007a3a:	4b1e      	ldr	r3, [pc, #120]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_UPPER_GPIO_Port,
 8007a40:	2201      	movs	r2, #1
 8007a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a46:	4814      	ldr	r0, [pc, #80]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007a48:	f7fa f93c 	bl	8001cc4 <HAL_GPIO_WritePin>
				Step_STEPPER_UPPER_Pin, GPIO_PIN_SET);
			}
			if (step_gornego == step_gornego_fabrik) {
 8007a4c:	4b18      	ldr	r3, [pc, #96]	; (8007ab0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8007a4e:	881a      	ldrh	r2, [r3, #0]
 8007a50:	4b1a      	ldr	r3, [pc, #104]	; (8007abc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d14b      	bne.n	8007af0 <HAL_TIM_PeriodElapsedCallback+0x308>
				flaga_fabrik_gorny = 0;
 8007a58:	4b17      	ldr	r3, [pc, #92]	; (8007ab8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	e047      	b.n	8007af0 <HAL_TIM_PeriodElapsedCallback+0x308>
			}
		} else if (flaga_fabrik_gorny == 2) {
 8007a60:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d143      	bne.n	8007af0 <HAL_TIM_PeriodElapsedCallback+0x308>
			if (out_gornego_stepp) {
 8007a68:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d027      	beq.n	8007ac0 <HAL_TIM_PeriodElapsedCallback+0x2d8>
				out_gornego_stepp = 0;
 8007a70:	4b10      	ldr	r3, [pc, #64]	; (8007ab4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_UPPER_GPIO_Port,
 8007a76:	2200      	movs	r2, #0
 8007a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a7c:	4806      	ldr	r0, [pc, #24]	; (8007a98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007a7e:	f7fa f921 	bl	8001cc4 <HAL_GPIO_WritePin>
 8007a82:	e02c      	b.n	8007ade <HAL_TIM_PeriodElapsedCallback+0x2f6>
 8007a84:	20000498 	.word	0x20000498
 8007a88:	200002c8 	.word	0x200002c8
 8007a8c:	20000317 	.word	0x20000317
 8007a90:	200002e6 	.word	0x200002e6
 8007a94:	200001fc 	.word	0x200001fc
 8007a98:	40020800 	.word	0x40020800
 8007a9c:	200002c2 	.word	0x200002c2
 8007aa0:	200002b8 	.word	0x200002b8
 8007aa4:	40020c00 	.word	0x40020c00
 8007aa8:	200003d8 	.word	0x200003d8
 8007aac:	2000030c 	.word	0x2000030c
 8007ab0:	200002fc 	.word	0x200002fc
 8007ab4:	200001fd 	.word	0x200001fd
 8007ab8:	200002fa 	.word	0x200002fa
 8007abc:	20000314 	.word	0x20000314
				Step_STEPPER_UPPER_Pin, GPIO_PIN_RESET);
			} else {
				step_gornego++;
 8007ac0:	4b49      	ldr	r3, [pc, #292]	; (8007be8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8007ac2:	881b      	ldrh	r3, [r3, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	4b47      	ldr	r3, [pc, #284]	; (8007be8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8007aca:	801a      	strh	r2, [r3, #0]
				out_gornego_stepp = 1;
 8007acc:	4b47      	ldr	r3, [pc, #284]	; (8007bec <HAL_TIM_PeriodElapsedCallback+0x404>)
 8007ace:	2201      	movs	r2, #1
 8007ad0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_UPPER_GPIO_Port,
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ad8:	4845      	ldr	r0, [pc, #276]	; (8007bf0 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8007ada:	f7fa f8f3 	bl	8001cc4 <HAL_GPIO_WritePin>
				Step_STEPPER_UPPER_Pin, GPIO_PIN_SET);
			}
			if (step_gornego == step_gornego_fabrik) {
 8007ade:	4b42      	ldr	r3, [pc, #264]	; (8007be8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8007ae0:	881a      	ldrh	r2, [r3, #0]
 8007ae2:	4b44      	ldr	r3, [pc, #272]	; (8007bf4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d102      	bne.n	8007af0 <HAL_TIM_PeriodElapsedCallback+0x308>
				flaga_fabrik_gorny = 0;
 8007aea:	4b43      	ldr	r3, [pc, #268]	; (8007bf8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (htim == &htim10) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a42      	ldr	r2, [pc, #264]	; (8007bfc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d10e      	bne.n	8007b16 <HAL_TIM_PeriodElapsedCallback+0x32e>
		printf("X %.2f #%d \r\n", Hcsr04_Distance_tmp, H_sum);
 8007af8:	4b41      	ldr	r3, [pc, #260]	; (8007c00 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7f8 fd2b 	bl	8000558 <__aeabi_f2d>
 8007b02:	460a      	mov	r2, r1
 8007b04:	4601      	mov	r1, r0
 8007b06:	4b3f      	ldr	r3, [pc, #252]	; (8007c04 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	460a      	mov	r2, r1
 8007b10:	483d      	ldr	r0, [pc, #244]	; (8007c08 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8007b12:	f002 f8d1 	bl	8009cb8 <iprintf>

	}
	if (htim == &htim9) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a3c      	ldr	r2, [pc, #240]	; (8007c0c <HAL_TIM_PeriodElapsedCallback+0x424>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d15f      	bne.n	8007bde <HAL_TIM_PeriodElapsedCallback+0x3f6>
		if (flag == 1 && flaga_servo_joint == 1
 8007b1e:	4b3c      	ldr	r3, [pc, #240]	; (8007c10 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d114      	bne.n	8007b50 <HAL_TIM_PeriodElapsedCallback+0x368>
 8007b26:	4b3b      	ldr	r3, [pc, #236]	; (8007c14 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d110      	bne.n	8007b50 <HAL_TIM_PeriodElapsedCallback+0x368>
				&& pwm_duty_servo_joint < 1250) {
 8007b2e:	4b3a      	ldr	r3, [pc, #232]	; (8007c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8007b36:	4293      	cmp	r3, r2
 8007b38:	dc0a      	bgt.n	8007b50 <HAL_TIM_PeriodElapsedCallback+0x368>
			pwm_duty_servo_joint++;
 8007b3a:	4b37      	ldr	r3, [pc, #220]	; (8007c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	4a35      	ldr	r2, [pc, #212]	; (8007c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8007b42:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty_servo_joint);
 8007b44:	4b34      	ldr	r3, [pc, #208]	; (8007c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	4b34      	ldr	r3, [pc, #208]	; (8007c1c <HAL_TIM_PeriodElapsedCallback+0x434>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8007b4e:	e046      	b.n	8007bde <HAL_TIM_PeriodElapsedCallback+0x3f6>
		} else if (flag == 1 && flaga_servo_joint == 2
 8007b50:	4b2f      	ldr	r3, [pc, #188]	; (8007c10 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d112      	bne.n	8007b7e <HAL_TIM_PeriodElapsedCallback+0x396>
 8007b58:	4b2e      	ldr	r3, [pc, #184]	; (8007c14 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d10e      	bne.n	8007b7e <HAL_TIM_PeriodElapsedCallback+0x396>
				&& pwm_duty_servo_joint > 250) {
 8007b60:	4b2d      	ldr	r3, [pc, #180]	; (8007c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2bfa      	cmp	r3, #250	; 0xfa
 8007b66:	dd0a      	ble.n	8007b7e <HAL_TIM_PeriodElapsedCallback+0x396>
			pwm_duty_servo_joint--;
 8007b68:	4b2b      	ldr	r3, [pc, #172]	; (8007c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	4a2a      	ldr	r2, [pc, #168]	; (8007c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8007b70:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty_servo_joint);
 8007b72:	4b29      	ldr	r3, [pc, #164]	; (8007c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	4b29      	ldr	r3, [pc, #164]	; (8007c1c <HAL_TIM_PeriodElapsedCallback+0x434>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	635a      	str	r2, [r3, #52]	; 0x34
 8007b7c:	e02f      	b.n	8007bde <HAL_TIM_PeriodElapsedCallback+0x3f6>
		} else if (flag == 1 && flaga_servo_effector == 1
 8007b7e:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d114      	bne.n	8007bb0 <HAL_TIM_PeriodElapsedCallback+0x3c8>
 8007b86:	4b26      	ldr	r3, [pc, #152]	; (8007c20 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d110      	bne.n	8007bb0 <HAL_TIM_PeriodElapsedCallback+0x3c8>
				&& pwm_duty_servo_effector < 1250) {
 8007b8e:	4b25      	ldr	r3, [pc, #148]	; (8007c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8007b96:	4293      	cmp	r3, r2
 8007b98:	dc0a      	bgt.n	8007bb0 <HAL_TIM_PeriodElapsedCallback+0x3c8>
			pwm_duty_servo_effector += 2;
 8007b9a:	4b22      	ldr	r3, [pc, #136]	; (8007c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3302      	adds	r3, #2
 8007ba0:	4a20      	ldr	r2, [pc, #128]	; (8007c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8007ba2:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 8007ba4:	4b1f      	ldr	r3, [pc, #124]	; (8007c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <HAL_TIM_PeriodElapsedCallback+0x434>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	639a      	str	r2, [r3, #56]	; 0x38
 8007bae:	e016      	b.n	8007bde <HAL_TIM_PeriodElapsedCallback+0x3f6>
					pwm_duty_servo_effector);
		} else if (flag == 1 && flaga_servo_effector == 2
 8007bb0:	4b17      	ldr	r3, [pc, #92]	; (8007c10 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d112      	bne.n	8007bde <HAL_TIM_PeriodElapsedCallback+0x3f6>
 8007bb8:	4b19      	ldr	r3, [pc, #100]	; (8007c20 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d10e      	bne.n	8007bde <HAL_TIM_PeriodElapsedCallback+0x3f6>
				&& pwm_duty_servo_effector > 250) {
 8007bc0:	4b18      	ldr	r3, [pc, #96]	; (8007c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2bfa      	cmp	r3, #250	; 0xfa
 8007bc6:	dd0a      	ble.n	8007bde <HAL_TIM_PeriodElapsedCallback+0x3f6>
			pwm_duty_servo_effector -= 2;
 8007bc8:	4b16      	ldr	r3, [pc, #88]	; (8007c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3b02      	subs	r3, #2
 8007bce:	4a15      	ldr	r2, [pc, #84]	; (8007c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8007bd0:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 8007bd2:	4b14      	ldr	r3, [pc, #80]	; (8007c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <HAL_TIM_PeriodElapsedCallback+0x434>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
					pwm_duty_servo_effector);
		}
	}
}
 8007bdc:	e7ff      	b.n	8007bde <HAL_TIM_PeriodElapsedCallback+0x3f6>
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	200002fc 	.word	0x200002fc
 8007bec:	200001fd 	.word	0x200001fd
 8007bf0:	40020800 	.word	0x40020800
 8007bf4:	20000314 	.word	0x20000314
 8007bf8:	200002fa 	.word	0x200002fa
 8007bfc:	20000358 	.word	0x20000358
 8007c00:	200002e0 	.word	0x200002e0
 8007c04:	200002e8 	.word	0x200002e8
 8007c08:	0800f838 	.word	0x0800f838
 8007c0c:	20000458 	.word	0x20000458
 8007c10:	200002c8 	.word	0x200002c8
 8007c14:	200002e4 	.word	0x200002e4
 8007c18:	200002ec 	.word	0x200002ec
 8007c1c:	20000418 	.word	0x20000418
 8007c20:	20000316 	.word	0x20000316
 8007c24:	200002f0 	.word	0x200002f0

08007c28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
	flag = 1;
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <HAL_UART_RxCpltCallback+0x20>)
 8007c32:	2201      	movs	r2, #1
 8007c34:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, Received, 15);
 8007c36:	220f      	movs	r2, #15
 8007c38:	4904      	ldr	r1, [pc, #16]	; (8007c4c <HAL_UART_RxCpltCallback+0x24>)
 8007c3a:	4805      	ldr	r0, [pc, #20]	; (8007c50 <HAL_UART_RxCpltCallback+0x28>)
 8007c3c:	f7fc feec 	bl	8004a18 <HAL_UART_Receive_DMA>
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	200002c8 	.word	0x200002c8
 8007c4c:	20000270 	.word	0x20000270
 8007c50:	20000538 	.word	0x20000538

08007c54 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	flag = 0;
 8007c5a:	4ba5      	ldr	r3, [pc, #660]	; (8007ef0 <main+0x29c>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
	H_sum = 0;
 8007c60:	4ba4      	ldr	r3, [pc, #656]	; (8007ef4 <main+0x2a0>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
	pwm_duty = 0;
 8007c66:	4ba4      	ldr	r3, [pc, #656]	; (8007ef8 <main+0x2a4>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]
	flaga_dolnego_stepp = 0;
 8007c6c:	4ba3      	ldr	r3, [pc, #652]	; (8007efc <main+0x2a8>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
	flaga_gornego_stepp = 0;
 8007c72:	4ba3      	ldr	r3, [pc, #652]	; (8007f00 <main+0x2ac>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
	pwm_duty_servo_joint = 250;
 8007c78:	4ba2      	ldr	r3, [pc, #648]	; (8007f04 <main+0x2b0>)
 8007c7a:	22fa      	movs	r2, #250	; 0xfa
 8007c7c:	601a      	str	r2, [r3, #0]
	pwm_duty_servo_effector = 250;
 8007c7e:	4ba2      	ldr	r3, [pc, #648]	; (8007f08 <main+0x2b4>)
 8007c80:	22fa      	movs	r2, #250	; 0xfa
 8007c82:	601a      	str	r2, [r3, #0]
	flaga_servo_joint = 0;
 8007c84:	4ba1      	ldr	r3, [pc, #644]	; (8007f0c <main+0x2b8>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
	flaga_servo_effector = 0;
 8007c8a:	4ba1      	ldr	r3, [pc, #644]	; (8007f10 <main+0x2bc>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]
	step_dolnego = 12900;
 8007c90:	4ba0      	ldr	r3, [pc, #640]	; (8007f14 <main+0x2c0>)
 8007c92:	f243 2264 	movw	r2, #12900	; 0x3264
 8007c96:	801a      	strh	r2, [r3, #0]
	step_gornego = 0;
 8007c98:	4b9f      	ldr	r3, [pc, #636]	; (8007f18 <main+0x2c4>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	801a      	strh	r2, [r3, #0]
	struct Vector3D target;
	step_dolnego_fabrik = 0;
 8007c9e:	4b9f      	ldr	r3, [pc, #636]	; (8007f1c <main+0x2c8>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	801a      	strh	r2, [r3, #0]
	step_gornego_fabrik = 0;
 8007ca4:	4b9e      	ldr	r3, [pc, #632]	; (8007f20 <main+0x2cc>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	801a      	strh	r2, [r3, #0]
	flaga_fabrik_dolny = 0;
 8007caa:	4b9e      	ldr	r3, [pc, #632]	; (8007f24 <main+0x2d0>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	701a      	strb	r2, [r3, #0]
	char *token;


	p[0].x = 0;
 8007cb0:	4b9d      	ldr	r3, [pc, #628]	; (8007f28 <main+0x2d4>)
 8007cb2:	f04f 0200 	mov.w	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
	p[0].y = 0;
 8007cb8:	4b9b      	ldr	r3, [pc, #620]	; (8007f28 <main+0x2d4>)
 8007cba:	f04f 0200 	mov.w	r2, #0
 8007cbe:	605a      	str	r2, [r3, #4]
	p[0].z = podstawa;
 8007cc0:	4b99      	ldr	r3, [pc, #612]	; (8007f28 <main+0x2d4>)
 8007cc2:	4a9a      	ldr	r2, [pc, #616]	; (8007f2c <main+0x2d8>)
 8007cc4:	609a      	str	r2, [r3, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007cc6:	f7f9 f967 	bl	8000f98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007cca:	f000 faa7 	bl	800821c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007cce:	f7fd fdeb 	bl	80058a8 <MX_GPIO_Init>
	MX_DMA_Init();
 8007cd2:	f7fd fdc9 	bl	8005868 <MX_DMA_Init>
	MX_TIM3_Init();
 8007cd6:	f000 fd4f 	bl	8008778 <MX_TIM3_Init>
	MX_TIM4_Init();
 8007cda:	f000 fdf7 	bl	80088cc <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8007cde:	f001 f8a1 	bl	8008e24 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8007ce2:	f000 fc51 	bl	8008588 <MX_TIM1_Init>
	MX_I2C1_Init();
 8007ce6:	f7fd ff43 	bl	8005b70 <MX_I2C1_Init>
	MX_TIM2_Init();
 8007cea:	f000 fcf9 	bl	80086e0 <MX_TIM2_Init>
	MX_TIM11_Init();
 8007cee:	f000 fed7 	bl	8008aa0 <MX_TIM11_Init>
	MX_TIM9_Init();
 8007cf2:	f000 fe77 	bl	80089e4 <MX_TIM9_Init>
	MX_TIM10_Init();
 8007cf6:	f000 feaf 	bl	8008a58 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim4);
 8007cfa:	488d      	ldr	r0, [pc, #564]	; (8007f30 <main+0x2dc>)
 8007cfc:	f7fb fc39 	bl	8003572 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8007d00:	2100      	movs	r1, #0
 8007d02:	488b      	ldr	r0, [pc, #556]	; (8007f30 <main+0x2dc>)
 8007d04:	f7fb fcb2 	bl	800366c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8007d08:	2104      	movs	r1, #4
 8007d0a:	4889      	ldr	r0, [pc, #548]	; (8007f30 <main+0x2dc>)
 8007d0c:	f7fb fcae 	bl	800366c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8007d10:	2108      	movs	r1, #8
 8007d12:	4887      	ldr	r0, [pc, #540]	; (8007f30 <main+0x2dc>)
 8007d14:	f7fb fcaa 	bl	800366c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(&htim3);
 8007d18:	4886      	ldr	r0, [pc, #536]	; (8007f34 <main+0x2e0>)
 8007d1a:	f7fb fc2a 	bl	8003572 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8007d1e:	2108      	movs	r1, #8
 8007d20:	4884      	ldr	r0, [pc, #528]	; (8007f34 <main+0x2e0>)
 8007d22:	f7fb fca3 	bl	800366c <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8007d26:	2100      	movs	r1, #0
 8007d28:	4882      	ldr	r0, [pc, #520]	; (8007f34 <main+0x2e0>)
 8007d2a:	f7fb fd06 	bl	800373a <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8007d2e:	2104      	movs	r1, #4
 8007d30:	4880      	ldr	r0, [pc, #512]	; (8007f34 <main+0x2e0>)
 8007d32:	f7fb fd25 	bl	8003780 <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);
 8007d36:	4880      	ldr	r0, [pc, #512]	; (8007f38 <main+0x2e4>)
 8007d38:	f7fb fc3f 	bl	80035ba <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 8007d3c:	487f      	ldr	r0, [pc, #508]	; (8007f3c <main+0x2e8>)
 8007d3e:	f7fb fc3c 	bl	80035ba <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 8007d42:	487f      	ldr	r0, [pc, #508]	; (8007f40 <main+0x2ec>)
 8007d44:	f7fb fc39 	bl	80035ba <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8007d48:	487e      	ldr	r0, [pc, #504]	; (8007f44 <main+0x2f0>)
 8007d4a:	f7fb fc36 	bl	80035ba <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim1);
 8007d4e:	487e      	ldr	r0, [pc, #504]	; (8007f48 <main+0x2f4>)
 8007d50:	f7fb fc0f 	bl	8003572 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007d54:	2100      	movs	r1, #0
 8007d56:	487c      	ldr	r0, [pc, #496]	; (8007f48 <main+0x2f4>)
 8007d58:	f7fb fc88 	bl	800366c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8007d5c:	2104      	movs	r1, #4
 8007d5e:	487a      	ldr	r0, [pc, #488]	; (8007f48 <main+0x2f4>)
 8007d60:	f7fb fc84 	bl	800366c <HAL_TIM_PWM_Start>

	HAL_UART_Receive_DMA(&huart2, Received, 15);
 8007d64:	220f      	movs	r2, #15
 8007d66:	4979      	ldr	r1, [pc, #484]	; (8007f4c <main+0x2f8>)
 8007d68:	4879      	ldr	r0, [pc, #484]	; (8007f50 <main+0x2fc>)
 8007d6a:	f7fc fe55 	bl	8004a18 <HAL_UART_Receive_DMA>
	HAL_I2C_Mem_Read(&hi2c1, 0xa0, 0x10, 1, (uint16_t*) &odczyt, sizeof(odczyt),
 8007d6e:	2332      	movs	r3, #50	; 0x32
 8007d70:	9302      	str	r3, [sp, #8]
 8007d72:	2306      	movs	r3, #6
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	4b77      	ldr	r3, [pc, #476]	; (8007f54 <main+0x300>)
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	2210      	movs	r2, #16
 8007d7e:	21a0      	movs	r1, #160	; 0xa0
 8007d80:	4875      	ldr	r0, [pc, #468]	; (8007f58 <main+0x304>)
 8007d82:	f7fa f9eb 	bl	800215c <HAL_I2C_Mem_Read>
			50);
	pwm_duty_servo_joint = odczyt[1];
 8007d86:	4b73      	ldr	r3, [pc, #460]	; (8007f54 <main+0x300>)
 8007d88:	885b      	ldrh	r3, [r3, #2]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	4b5d      	ldr	r3, [pc, #372]	; (8007f04 <main+0x2b0>)
 8007d8e:	601a      	str	r2, [r3, #0]
	step_dolnego = odczyt[0];
 8007d90:	4b70      	ldr	r3, [pc, #448]	; (8007f54 <main+0x300>)
 8007d92:	881a      	ldrh	r2, [r3, #0]
 8007d94:	4b5f      	ldr	r3, [pc, #380]	; (8007f14 <main+0x2c0>)
 8007d96:	801a      	strh	r2, [r3, #0]
	step_gornego = odczyt[2];
 8007d98:	4b6e      	ldr	r3, [pc, #440]	; (8007f54 <main+0x300>)
 8007d9a:	889a      	ldrh	r2, [r3, #4]
 8007d9c:	4b5e      	ldr	r3, [pc, #376]	; (8007f18 <main+0x2c4>)
 8007d9e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty_servo_joint);
 8007da0:	4b58      	ldr	r3, [pc, #352]	; (8007f04 <main+0x2b0>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	4b68      	ldr	r3, [pc, #416]	; (8007f48 <main+0x2f4>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	635a      	str	r2, [r3, #52]	; 0x34
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (flag == 1) {
 8007daa:	4b51      	ldr	r3, [pc, #324]	; (8007ef0 <main+0x29c>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	f040 81dd 	bne.w	800816e <main+0x51a>
			token =strtok(Received, " ");
 8007db4:	4969      	ldr	r1, [pc, #420]	; (8007f5c <main+0x308>)
 8007db6:	4865      	ldr	r0, [pc, #404]	; (8007f4c <main+0x2f8>)
 8007db8:	f002 fdde 	bl	800a978 <strtok>
 8007dbc:	60f8      	str	r0, [r7, #12]
			switch (atoi(token)) {
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f001 f905 	bl	8008fce <atoi>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b0d      	cmp	r3, #13
 8007dc8:	f200 81a6 	bhi.w	8008118 <main+0x4c4>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <main+0x180>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007e0d 	.word	0x08007e0d
 8007dd8:	08007ea1 	.word	0x08007ea1
 8007ddc:	08007f6d 	.word	0x08007f6d
 8007de0:	08007fbb 	.word	0x08007fbb
 8007de4:	08008009 	.word	0x08008009
 8007de8:	08008027 	.word	0x08008027
 8007dec:	08008045 	.word	0x08008045
 8007df0:	08008065 	.word	0x08008065
 8007df4:	0800806d 	.word	0x0800806d
 8007df8:	08008075 	.word	0x08008075
 8007dfc:	0800807d 	.word	0x0800807d
 8007e00:	08008085 	.word	0x08008085
 8007e04:	080080a5 	.word	0x080080a5
 8007e08:	080080b9 	.word	0x080080b9
			case 0:
				if (Hcsr04_Distance_tmp >= 50) {
 8007e0c:	4b54      	ldr	r3, [pc, #336]	; (8007f60 <main+0x30c>)
 8007e0e:	edd3 7a00 	vldr	s15, [r3]
 8007e12:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8007f64 <main+0x310>
 8007e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1e:	db26      	blt.n	8007e6e <main+0x21a>
					HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin,
 8007e20:	2200      	movs	r2, #0
 8007e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e26:	4850      	ldr	r0, [pc, #320]	; (8007f68 <main+0x314>)
 8007e28:	f7f9 ff4c 	bl	8001cc4 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin,
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e32:	484d      	ldr	r0, [pc, #308]	; (8007f68 <main+0x314>)
 8007e34:	f7f9 ff46 	bl	8001cc4 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);

					if (pwm_duty < 3000) {
 8007e38:	4b2f      	ldr	r3, [pc, #188]	; (8007ef8 <main+0x2a4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007e40:	4293      	cmp	r3, r2
 8007e42:	dc04      	bgt.n	8007e4e <main+0x1fa>
						pwm_duty += 1;
 8007e44:	4b2c      	ldr	r3, [pc, #176]	; (8007ef8 <main+0x2a4>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	4a2b      	ldr	r2, [pc, #172]	; (8007ef8 <main+0x2a4>)
 8007e4c:	6013      	str	r3, [r2, #0]
					}
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_duty);
 8007e4e:	4b2a      	ldr	r3, [pc, #168]	; (8007ef8 <main+0x2a4>)
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	4b37      	ldr	r3, [pc, #220]	; (8007f30 <main+0x2dc>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_duty);
 8007e58:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <main+0x2a4>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	4b34      	ldr	r3, [pc, #208]	; (8007f30 <main+0x2dc>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_duty);
 8007e62:	4b25      	ldr	r3, [pc, #148]	; (8007ef8 <main+0x2a4>)
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	4b32      	ldr	r3, [pc, #200]	; (8007f30 <main+0x2dc>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	63da      	str	r2, [r3, #60]	; 0x3c

					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
				}
				break;
 8007e6c:	e180      	b.n	8008170 <main+0x51c>
					HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin,
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e74:	483c      	ldr	r0, [pc, #240]	; (8007f68 <main+0x314>)
 8007e76:	f7f9 ff25 	bl	8001cc4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin,
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e80:	4839      	ldr	r0, [pc, #228]	; (8007f68 <main+0x314>)
 8007e82:	f7f9 ff1f 	bl	8001cc4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8007e86:	4b2a      	ldr	r3, [pc, #168]	; (8007f30 <main+0x2dc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8007e8e:	4b28      	ldr	r3, [pc, #160]	; (8007f30 <main+0x2dc>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8007e96:	4b26      	ldr	r3, [pc, #152]	; (8007f30 <main+0x2dc>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8007e9e:	e167      	b.n	8008170 <main+0x51c>

			case 1:
				HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ea6:	4830      	ldr	r0, [pc, #192]	; (8007f68 <main+0x314>)
 8007ea8:	f7f9 ff0c 	bl	8001cc4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_SET);
 8007eac:	2201      	movs	r2, #1
 8007eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007eb2:	482d      	ldr	r0, [pc, #180]	; (8007f68 <main+0x314>)
 8007eb4:	f7f9 ff06 	bl	8001cc4 <HAL_GPIO_WritePin>

				if (pwm_duty < 3000) {
 8007eb8:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <main+0x2a4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	dc04      	bgt.n	8007ece <main+0x27a>
					pwm_duty += 1;
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <main+0x2a4>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	4a0b      	ldr	r2, [pc, #44]	; (8007ef8 <main+0x2a4>)
 8007ecc:	6013      	str	r3, [r2, #0]
				}
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_duty);
 8007ece:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <main+0x2a4>)
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b17      	ldr	r3, [pc, #92]	; (8007f30 <main+0x2dc>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_duty);
 8007ed8:	4b07      	ldr	r3, [pc, #28]	; (8007ef8 <main+0x2a4>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	4b14      	ldr	r3, [pc, #80]	; (8007f30 <main+0x2dc>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_duty);
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <main+0x2a4>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4b12      	ldr	r3, [pc, #72]	; (8007f30 <main+0x2dc>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8007eec:	e140      	b.n	8008170 <main+0x51c>
 8007eee:	bf00      	nop
 8007ef0:	200002c8 	.word	0x200002c8
 8007ef4:	200002e8 	.word	0x200002e8
 8007ef8:	20000308 	.word	0x20000308
 8007efc:	20000317 	.word	0x20000317
 8007f00:	2000030c 	.word	0x2000030c
 8007f04:	200002ec 	.word	0x200002ec
 8007f08:	200002f0 	.word	0x200002f0
 8007f0c:	200002e4 	.word	0x200002e4
 8007f10:	20000316 	.word	0x20000316
 8007f14:	200002e6 	.word	0x200002e6
 8007f18:	200002fc 	.word	0x200002fc
 8007f1c:	200002b8 	.word	0x200002b8
 8007f20:	20000314 	.word	0x20000314
 8007f24:	200002c2 	.word	0x200002c2
 8007f28:	20000294 	.word	0x20000294
 8007f2c:	41700000 	.word	0x41700000
 8007f30:	20000318 	.word	0x20000318
 8007f34:	20000398 	.word	0x20000398
 8007f38:	20000498 	.word	0x20000498
 8007f3c:	20000458 	.word	0x20000458
 8007f40:	20000358 	.word	0x20000358
 8007f44:	200003d8 	.word	0x200003d8
 8007f48:	20000418 	.word	0x20000418
 8007f4c:	20000270 	.word	0x20000270
 8007f50:	20000538 	.word	0x20000538
 8007f54:	200002f4 	.word	0x200002f4
 8007f58:	2000021c 	.word	0x2000021c
 8007f5c:	0800f848 	.word	0x0800f848
 8007f60:	200002e0 	.word	0x200002e0
 8007f64:	42480000 	.word	0x42480000
 8007f68:	40020c00 	.word	0x40020c00

			case 2:
				HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_SET);
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f72:	4893      	ldr	r0, [pc, #588]	; (80081c0 <main+0x56c>)
 8007f74:	f7f9 fea6 	bl	8001cc4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f7e:	4890      	ldr	r0, [pc, #576]	; (80081c0 <main+0x56c>)
 8007f80:	f7f9 fea0 	bl	8001cc4 <HAL_GPIO_WritePin>

				if (pwm_duty < 3000) {
 8007f84:	4b8f      	ldr	r3, [pc, #572]	; (80081c4 <main+0x570>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	dc04      	bgt.n	8007f9a <main+0x346>
					pwm_duty += 1;
 8007f90:	4b8c      	ldr	r3, [pc, #560]	; (80081c4 <main+0x570>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	4a8b      	ldr	r2, [pc, #556]	; (80081c4 <main+0x570>)
 8007f98:	6013      	str	r3, [r2, #0]
				}
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_duty);
 8007f9a:	4b8a      	ldr	r3, [pc, #552]	; (80081c4 <main+0x570>)
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	4b8a      	ldr	r3, [pc, #552]	; (80081c8 <main+0x574>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_duty);
 8007fa4:	4b87      	ldr	r3, [pc, #540]	; (80081c4 <main+0x570>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	4b87      	ldr	r3, [pc, #540]	; (80081c8 <main+0x574>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_duty);
 8007fae:	4b85      	ldr	r3, [pc, #532]	; (80081c4 <main+0x570>)
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b85      	ldr	r3, [pc, #532]	; (80081c8 <main+0x574>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8007fb8:	e0da      	b.n	8008170 <main+0x51c>

			case 3:
				HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_SET);
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fc0:	487f      	ldr	r0, [pc, #508]	; (80081c0 <main+0x56c>)
 8007fc2:	f7f9 fe7f 	bl	8001cc4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_SET);
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007fcc:	487c      	ldr	r0, [pc, #496]	; (80081c0 <main+0x56c>)
 8007fce:	f7f9 fe79 	bl	8001cc4 <HAL_GPIO_WritePin>

				if (pwm_duty < 3000) {
 8007fd2:	4b7c      	ldr	r3, [pc, #496]	; (80081c4 <main+0x570>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	dc04      	bgt.n	8007fe8 <main+0x394>
					pwm_duty += 1;
 8007fde:	4b79      	ldr	r3, [pc, #484]	; (80081c4 <main+0x570>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	4a77      	ldr	r2, [pc, #476]	; (80081c4 <main+0x570>)
 8007fe6:	6013      	str	r3, [r2, #0]
				}
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_duty);
 8007fe8:	4b76      	ldr	r3, [pc, #472]	; (80081c4 <main+0x570>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	4b76      	ldr	r3, [pc, #472]	; (80081c8 <main+0x574>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_duty);
 8007ff2:	4b74      	ldr	r3, [pc, #464]	; (80081c4 <main+0x570>)
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	4b74      	ldr	r3, [pc, #464]	; (80081c8 <main+0x574>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_duty);
 8007ffc:	4b71      	ldr	r3, [pc, #452]	; (80081c4 <main+0x570>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	4b71      	ldr	r3, [pc, #452]	; (80081c8 <main+0x574>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8008006:	e0b3      	b.n	8008170 <main+0x51c>

			case 4:
				flaga_dolnego_stepp = 1;
 8008008:	4b70      	ldr	r3, [pc, #448]	; (80081cc <main+0x578>)
 800800a:	2201      	movs	r2, #1
 800800c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Dir_STEPPER_LOWER_GPIO_Port,
 800800e:	2201      	movs	r2, #1
 8008010:	2180      	movs	r1, #128	; 0x80
 8008012:	486f      	ldr	r0, [pc, #444]	; (80081d0 <main+0x57c>)
 8008014:	f7f9 fe56 	bl	8001cc4 <HAL_GPIO_WritePin>
				Dir_STEPPER_LOWER_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port,
 8008018:	2201      	movs	r2, #1
 800801a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800801e:	4868      	ldr	r0, [pc, #416]	; (80081c0 <main+0x56c>)
 8008020:	f7f9 fe50 	bl	8001cc4 <HAL_GPIO_WritePin>
				En_STEPPER_LOWER_Pin, GPIO_PIN_SET);
				break;
 8008024:	e0a4      	b.n	8008170 <main+0x51c>

			case 5:
				flaga_dolnego_stepp = 2;
 8008026:	4b69      	ldr	r3, [pc, #420]	; (80081cc <main+0x578>)
 8008028:	2202      	movs	r2, #2
 800802a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Dir_STEPPER_LOWER_GPIO_Port,
 800802c:	2200      	movs	r2, #0
 800802e:	2180      	movs	r1, #128	; 0x80
 8008030:	4867      	ldr	r0, [pc, #412]	; (80081d0 <main+0x57c>)
 8008032:	f7f9 fe47 	bl	8001cc4 <HAL_GPIO_WritePin>
				Dir_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port,
 8008036:	2201      	movs	r2, #1
 8008038:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800803c:	4860      	ldr	r0, [pc, #384]	; (80081c0 <main+0x56c>)
 800803e:	f7f9 fe41 	bl	8001cc4 <HAL_GPIO_WritePin>
				En_STEPPER_LOWER_Pin, GPIO_PIN_SET);
				break;
 8008042:	e095      	b.n	8008170 <main+0x51c>

			case 6:
				flaga_gornego_stepp = 2;
 8008044:	4b63      	ldr	r3, [pc, #396]	; (80081d4 <main+0x580>)
 8008046:	2202      	movs	r2, #2
 8008048:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Dir_STEPPER_UPPER_GPIO_Port,
 800804a:	2200      	movs	r2, #0
 800804c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008050:	485f      	ldr	r0, [pc, #380]	; (80081d0 <main+0x57c>)
 8008052:	f7f9 fe37 	bl	8001cc4 <HAL_GPIO_WritePin>
				Dir_STEPPER_UPPER_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(En_STEPPER_UPPER_GPIO_Port,
 8008056:	2201      	movs	r2, #1
 8008058:	f44f 7100 	mov.w	r1, #512	; 0x200
 800805c:	4858      	ldr	r0, [pc, #352]	; (80081c0 <main+0x56c>)
 800805e:	f7f9 fe31 	bl	8001cc4 <HAL_GPIO_WritePin>
				En_STEPPER_UPPER_Pin, GPIO_PIN_SET);
				break;
 8008062:	e085      	b.n	8008170 <main+0x51c>

			case 7:
				flaga_servo_joint = 2;
 8008064:	4b5c      	ldr	r3, [pc, #368]	; (80081d8 <main+0x584>)
 8008066:	2202      	movs	r2, #2
 8008068:	701a      	strb	r2, [r3, #0]
				break;
 800806a:	e081      	b.n	8008170 <main+0x51c>

			case 8:
				flaga_servo_joint = 1;
 800806c:	4b5a      	ldr	r3, [pc, #360]	; (80081d8 <main+0x584>)
 800806e:	2201      	movs	r2, #1
 8008070:	701a      	strb	r2, [r3, #0]
				break;
 8008072:	e07d      	b.n	8008170 <main+0x51c>

			case 9:
				flaga_servo_effector = 1;
 8008074:	4b59      	ldr	r3, [pc, #356]	; (80081dc <main+0x588>)
 8008076:	2201      	movs	r2, #1
 8008078:	701a      	strb	r2, [r3, #0]
				break;
 800807a:	e079      	b.n	8008170 <main+0x51c>

			case 10:
				flaga_servo_effector = 2;
 800807c:	4b57      	ldr	r3, [pc, #348]	; (80081dc <main+0x588>)
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]
				break;
 8008082:	e075      	b.n	8008170 <main+0x51c>

			case 11:
				flaga_gornego_stepp = 1;
 8008084:	4b53      	ldr	r3, [pc, #332]	; (80081d4 <main+0x580>)
 8008086:	2201      	movs	r2, #1
 8008088:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Dir_STEPPER_UPPER_GPIO_Port,
 800808a:	2201      	movs	r2, #1
 800808c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008090:	484f      	ldr	r0, [pc, #316]	; (80081d0 <main+0x57c>)
 8008092:	f7f9 fe17 	bl	8001cc4 <HAL_GPIO_WritePin>
				Dir_STEPPER_UPPER_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(En_STEPPER_UPPER_GPIO_Port,
 8008096:	2201      	movs	r2, #1
 8008098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800809c:	4848      	ldr	r0, [pc, #288]	; (80081c0 <main+0x56c>)
 800809e:	f7f9 fe11 	bl	8001cc4 <HAL_GPIO_WritePin>
				En_STEPPER_UPPER_Pin, GPIO_PIN_SET);
				break;
 80080a2:	e065      	b.n	8008170 <main+0x51c>

			case 12:
				HAL_GPIO_WritePin(En_STEPPER_UPPER_GPIO_Port,
 80080a4:	2200      	movs	r2, #0
 80080a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80080aa:	4845      	ldr	r0, [pc, #276]	; (80081c0 <main+0x56c>)
 80080ac:	f7f9 fe0a 	bl	8001cc4 <HAL_GPIO_WritePin>
				En_STEPPER_UPPER_Pin, GPIO_PIN_RESET);
				step_gornego = 116;
 80080b0:	4b4b      	ldr	r3, [pc, #300]	; (80081e0 <main+0x58c>)
 80080b2:	2274      	movs	r2, #116	; 0x74
 80080b4:	801a      	strh	r2, [r3, #0]
				break;
 80080b6:	e05b      	b.n	8008170 <main+0x51c>
//				target.y=atof(token);
//				token=strtok(NULL, " ");
//				target.z=atof(token);
//				free(token);

				target.x=10;
 80080b8:	4b4a      	ldr	r3, [pc, #296]	; (80081e4 <main+0x590>)
 80080ba:	603b      	str	r3, [r7, #0]
				target.y=12;
 80080bc:	4b4a      	ldr	r3, [pc, #296]	; (80081e8 <main+0x594>)
 80080be:	607b      	str	r3, [r7, #4]
				target.z=22;
 80080c0:	4b4a      	ldr	r3, [pc, #296]	; (80081ec <main+0x598>)
 80080c2:	60bb      	str	r3, [r7, #8]
				Fabrik(target);
 80080c4:	edd7 6a00 	vldr	s13, [r7]
 80080c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80080cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80080d0:	eeb0 0a66 	vmov.f32	s0, s13
 80080d4:	eef0 0a47 	vmov.f32	s1, s14
 80080d8:	eeb0 1a67 	vmov.f32	s2, s15
 80080dc:	f7fd fdc0 	bl	8005c60 <Fabrik>
				a = step_dolnego_fabrik;
 80080e0:	4b43      	ldr	r3, [pc, #268]	; (80081f0 <main+0x59c>)
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ec:	4b41      	ldr	r3, [pc, #260]	; (80081f4 <main+0x5a0>)
 80080ee:	edc3 7a00 	vstr	s15, [r3]
				b = step_gornego_fabrik;
 80080f2:	4b41      	ldr	r3, [pc, #260]	; (80081f8 <main+0x5a4>)
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	4b3f      	ldr	r3, [pc, #252]	; (80081fc <main+0x5a8>)
 8008100:	edc3 7a00 	vstr	s15, [r3]
				s = pwm_duty_servo_joint;
 8008104:	4b3e      	ldr	r3, [pc, #248]	; (8008200 <main+0x5ac>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	ee07 3a90 	vmov	s15, r3
 800810c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008110:	4b3c      	ldr	r3, [pc, #240]	; (8008204 <main+0x5b0>)
 8008112:	edc3 7a00 	vstr	s15, [r3]

				break;
 8008116:	e02b      	b.n	8008170 <main+0x51c>

			default:
				HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 8008118:	2200      	movs	r2, #0
 800811a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800811e:	4828      	ldr	r0, [pc, #160]	; (80081c0 <main+0x56c>)
 8008120:	f7f9 fdd0 	bl	8001cc4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8008124:	2200      	movs	r2, #0
 8008126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800812a:	4825      	ldr	r0, [pc, #148]	; (80081c0 <main+0x56c>)
 800812c:	f7f9 fdca 	bl	8001cc4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8008130:	4b25      	ldr	r3, [pc, #148]	; (80081c8 <main+0x574>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2200      	movs	r2, #0
 8008136:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8008138:	4b23      	ldr	r3, [pc, #140]	; (80081c8 <main+0x574>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2200      	movs	r2, #0
 800813e:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8008140:	4b21      	ldr	r3, [pc, #132]	; (80081c8 <main+0x574>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2200      	movs	r2, #0
 8008146:	635a      	str	r2, [r3, #52]	; 0x34
				flaga_servo_joint = 0;
 8008148:	4b23      	ldr	r3, [pc, #140]	; (80081d8 <main+0x584>)
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]
				flaga_servo_effector = 0;
 800814e:	4b23      	ldr	r3, [pc, #140]	; (80081dc <main+0x588>)
 8008150:	2200      	movs	r2, #0
 8008152:	701a      	strb	r2, [r3, #0]
				pwm_duty = 0;
 8008154:	4b1b      	ldr	r3, [pc, #108]	; (80081c4 <main+0x570>)
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
				flag = 0;
 800815a:	4b2b      	ldr	r3, [pc, #172]	; (8008208 <main+0x5b4>)
 800815c:	2200      	movs	r2, #0
 800815e:	701a      	strb	r2, [r3, #0]
				flaga_dolnego_stepp = 0;
 8008160:	4b1a      	ldr	r3, [pc, #104]	; (80081cc <main+0x578>)
 8008162:	2200      	movs	r2, #0
 8008164:	701a      	strb	r2, [r3, #0]
				flaga_gornego_stepp = 0;
 8008166:	4b1b      	ldr	r3, [pc, #108]	; (80081d4 <main+0x580>)
 8008168:	2200      	movs	r2, #0
 800816a:	701a      	strb	r2, [r3, #0]
				break;
 800816c:	e000      	b.n	8008170 <main+0x51c>
			}
			/* USER CODE END WHILE */

			/* USER CODE BEGIN 3 */
			//  HAL_Delay(10);
		}
 800816e:	bf00      	nop
		if(flaga_dolnego_stepp ==0 && flaga_fabrik_dolny ==0){
 8008170:	4b16      	ldr	r3, [pc, #88]	; (80081cc <main+0x578>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d109      	bne.n	800818c <main+0x538>
 8008178:	4b24      	ldr	r3, [pc, #144]	; (800820c <main+0x5b8>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d105      	bne.n	800818c <main+0x538>
			HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port,
 8008180:	2200      	movs	r2, #0
 8008182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008186:	480e      	ldr	r0, [pc, #56]	; (80081c0 <main+0x56c>)
 8008188:	f7f9 fd9c 	bl	8001cc4 <HAL_GPIO_WritePin>
			En_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
		}

			zapis[0] = step_dolnego;
 800818c:	4b20      	ldr	r3, [pc, #128]	; (8008210 <main+0x5bc>)
 800818e:	881a      	ldrh	r2, [r3, #0]
 8008190:	4b20      	ldr	r3, [pc, #128]	; (8008214 <main+0x5c0>)
 8008192:	801a      	strh	r2, [r3, #0]
			zapis[1] = pwm_duty_servo_joint;
 8008194:	4b1a      	ldr	r3, [pc, #104]	; (8008200 <main+0x5ac>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	b29a      	uxth	r2, r3
 800819a:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <main+0x5c0>)
 800819c:	805a      	strh	r2, [r3, #2]
			zapis[2] = step_gornego;
 800819e:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <main+0x58c>)
 80081a0:	881a      	ldrh	r2, [r3, #0]
 80081a2:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <main+0x5c0>)
 80081a4:	809a      	strh	r2, [r3, #4]
			HAL_I2C_Mem_Write(&hi2c1, 0xa0, 0x10, 1, (uint16_t*) &zapis,
 80081a6:	2332      	movs	r3, #50	; 0x32
 80081a8:	9302      	str	r3, [sp, #8]
 80081aa:	2306      	movs	r3, #6
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	4b19      	ldr	r3, [pc, #100]	; (8008214 <main+0x5c0>)
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	2301      	movs	r3, #1
 80081b4:	2210      	movs	r2, #16
 80081b6:	21a0      	movs	r1, #160	; 0xa0
 80081b8:	4817      	ldr	r0, [pc, #92]	; (8008218 <main+0x5c4>)
 80081ba:	f7f9 fed5 	bl	8001f68 <HAL_I2C_Mem_Write>
		if (flag == 1) {
 80081be:	e5f4      	b.n	8007daa <main+0x156>
 80081c0:	40020c00 	.word	0x40020c00
 80081c4:	20000308 	.word	0x20000308
 80081c8:	20000318 	.word	0x20000318
 80081cc:	20000317 	.word	0x20000317
 80081d0:	40020800 	.word	0x40020800
 80081d4:	2000030c 	.word	0x2000030c
 80081d8:	200002e4 	.word	0x200002e4
 80081dc:	20000316 	.word	0x20000316
 80081e0:	200002fc 	.word	0x200002fc
 80081e4:	41200000 	.word	0x41200000
 80081e8:	41400000 	.word	0x41400000
 80081ec:	41b00000 	.word	0x41b00000
 80081f0:	200002b8 	.word	0x200002b8
 80081f4:	20000310 	.word	0x20000310
 80081f8:	20000314 	.word	0x20000314
 80081fc:	20000290 	.word	0x20000290
 8008200:	200002ec 	.word	0x200002ec
 8008204:	20000304 	.word	0x20000304
 8008208:	200002c8 	.word	0x200002c8
 800820c:	200002c2 	.word	0x200002c2
 8008210:	200002e6 	.word	0x200002e6
 8008214:	200002bc 	.word	0x200002bc
 8008218:	2000021c 	.word	0x2000021c

0800821c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800821c:	b580      	push	{r7, lr}
 800821e:	b094      	sub	sp, #80	; 0x50
 8008220:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008222:	f107 0320 	add.w	r3, r7, #32
 8008226:	2230      	movs	r2, #48	; 0x30
 8008228:	2100      	movs	r1, #0
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fefe 	bl	800902c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008230:	f107 030c 	add.w	r3, r7, #12
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	605a      	str	r2, [r3, #4]
 800823a:	609a      	str	r2, [r3, #8]
 800823c:	60da      	str	r2, [r3, #12]
 800823e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8008240:	2300      	movs	r3, #0
 8008242:	60bb      	str	r3, [r7, #8]
 8008244:	4b27      	ldr	r3, [pc, #156]	; (80082e4 <SystemClock_Config+0xc8>)
 8008246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008248:	4a26      	ldr	r2, [pc, #152]	; (80082e4 <SystemClock_Config+0xc8>)
 800824a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800824e:	6413      	str	r3, [r2, #64]	; 0x40
 8008250:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <SystemClock_Config+0xc8>)
 8008252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008258:	60bb      	str	r3, [r7, #8]
 800825a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800825c:	2300      	movs	r3, #0
 800825e:	607b      	str	r3, [r7, #4]
 8008260:	4b21      	ldr	r3, [pc, #132]	; (80082e8 <SystemClock_Config+0xcc>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a20      	ldr	r2, [pc, #128]	; (80082e8 <SystemClock_Config+0xcc>)
 8008266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	4b1e      	ldr	r3, [pc, #120]	; (80082e8 <SystemClock_Config+0xcc>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008274:	607b      	str	r3, [r7, #4]
 8008276:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008278:	2302      	movs	r3, #2
 800827a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800827c:	2301      	movs	r3, #1
 800827e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008280:	2310      	movs	r3, #16
 8008282:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008284:	2302      	movs	r3, #2
 8008286:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008288:	2300      	movs	r3, #0
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800828c:	2308      	movs	r3, #8
 800828e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8008290:	2364      	movs	r3, #100	; 0x64
 8008292:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008294:	2302      	movs	r3, #2
 8008296:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8008298:	2308      	movs	r3, #8
 800829a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800829c:	f107 0320 	add.w	r3, r7, #32
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fa fcd9 	bl	8002c58 <HAL_RCC_OscConfig>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <SystemClock_Config+0x94>
		Error_Handler();
 80082ac:	f000 f81e 	bl	80082ec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80082b0:	230f      	movs	r3, #15
 80082b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80082b4:	2302      	movs	r3, #2
 80082b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80082bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082c0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80082c6:	f107 030c 	add.w	r3, r7, #12
 80082ca:	2103      	movs	r1, #3
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fa ff33 	bl	8003138 <HAL_RCC_ClockConfig>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <SystemClock_Config+0xc0>
		Error_Handler();
 80082d8:	f000 f808 	bl	80082ec <Error_Handler>
	}
}
 80082dc:	bf00      	nop
 80082de:	3750      	adds	r7, #80	; 0x50
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40023800 	.word	0x40023800
 80082e8:	40007000 	.word	0x40007000

080082ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80082f0:	bf00      	nop
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
	...

080082fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008302:	2300      	movs	r3, #0
 8008304:	607b      	str	r3, [r7, #4]
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <HAL_MspInit+0x4c>)
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830a:	4a0f      	ldr	r2, [pc, #60]	; (8008348 <HAL_MspInit+0x4c>)
 800830c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008310:	6453      	str	r3, [r2, #68]	; 0x44
 8008312:	4b0d      	ldr	r3, [pc, #52]	; (8008348 <HAL_MspInit+0x4c>)
 8008314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800831a:	607b      	str	r3, [r7, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800831e:	2300      	movs	r3, #0
 8008320:	603b      	str	r3, [r7, #0]
 8008322:	4b09      	ldr	r3, [pc, #36]	; (8008348 <HAL_MspInit+0x4c>)
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	4a08      	ldr	r2, [pc, #32]	; (8008348 <HAL_MspInit+0x4c>)
 8008328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800832c:	6413      	str	r3, [r2, #64]	; 0x40
 800832e:	4b06      	ldr	r3, [pc, #24]	; (8008348 <HAL_MspInit+0x4c>)
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800833a:	2007      	movs	r0, #7
 800833c:	f7f8 ff6e 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40023800 	.word	0x40023800

0800834c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008350:	bf00      	nop
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800835a:	b480      	push	{r7}
 800835c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800835e:	e7fe      	b.n	800835e <HardFault_Handler+0x4>

08008360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008364:	e7fe      	b.n	8008364 <MemManage_Handler+0x4>

08008366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008366:	b480      	push	{r7}
 8008368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800836a:	e7fe      	b.n	800836a <BusFault_Handler+0x4>

0800836c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008370:	e7fe      	b.n	8008370 <UsageFault_Handler+0x4>

08008372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008372:	b480      	push	{r7}
 8008374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008376:	bf00      	nop
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008384:	bf00      	nop
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800838e:	b480      	push	{r7}
 8008390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008392:	bf00      	nop
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083a0:	f7f8 fe4c 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083a4:	bf00      	nop
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80083ac:	4802      	ldr	r0, [pc, #8]	; (80083b8 <DMA1_Stream5_IRQHandler+0x10>)
 80083ae:	f7f9 f89f 	bl	80014f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80083b2:	bf00      	nop
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	200004d8 	.word	0x200004d8

080083bc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80083c0:	4803      	ldr	r0, [pc, #12]	; (80083d0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80083c2:	f7fb fa45 	bl	8003850 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80083c6:	4803      	ldr	r0, [pc, #12]	; (80083d4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80083c8:	f7fb fa42 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80083cc:	bf00      	nop
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20000418 	.word	0x20000418
 80083d4:	20000458 	.word	0x20000458

080083d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80083dc:	4803      	ldr	r0, [pc, #12]	; (80083ec <TIM1_UP_TIM10_IRQHandler+0x14>)
 80083de:	f7fb fa37 	bl	8003850 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80083e2:	4803      	ldr	r0, [pc, #12]	; (80083f0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80083e4:	f7fb fa34 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80083e8:	bf00      	nop
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000418 	.word	0x20000418
 80083f0:	20000358 	.word	0x20000358

080083f4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80083f8:	4803      	ldr	r0, [pc, #12]	; (8008408 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80083fa:	f7fb fa29 	bl	8003850 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80083fe:	4803      	ldr	r0, [pc, #12]	; (800840c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8008400:	f7fb fa26 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8008404:	bf00      	nop
 8008406:	bd80      	pop	{r7, pc}
 8008408:	20000418 	.word	0x20000418
 800840c:	200003d8 	.word	0x200003d8

08008410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008414:	4802      	ldr	r0, [pc, #8]	; (8008420 <TIM2_IRQHandler+0x10>)
 8008416:	f7fb fa1b 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800841a:	bf00      	nop
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000498 	.word	0x20000498

08008424 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008428:	4802      	ldr	r0, [pc, #8]	; (8008434 <TIM3_IRQHandler+0x10>)
 800842a:	f7fb fa11 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800842e:	bf00      	nop
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000398 	.word	0x20000398

08008438 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800843c:	4802      	ldr	r0, [pc, #8]	; (8008448 <TIM4_IRQHandler+0x10>)
 800843e:	f7fb fa07 	bl	8003850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008442:	bf00      	nop
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000318 	.word	0x20000318

0800844c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008450:	4802      	ldr	r0, [pc, #8]	; (800845c <USART2_IRQHandler+0x10>)
 8008452:	f7fc fb61 	bl	8004b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008456:	bf00      	nop
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20000538 	.word	0x20000538

08008460 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800846c:	2300      	movs	r3, #0
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	e00a      	b.n	8008488 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008472:	f3af 8000 	nop.w
 8008476:	4601      	mov	r1, r0
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	1c5a      	adds	r2, r3, #1
 800847c:	60ba      	str	r2, [r7, #8]
 800847e:	b2ca      	uxtb	r2, r1
 8008480:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	3301      	adds	r3, #1
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	429a      	cmp	r2, r3
 800848e:	dbf0      	blt.n	8008472 <_read+0x12>
	}

return len;
 8008490:	687b      	ldr	r3, [r7, #4]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <_close>:
	}
	return len;
}

int _close(int file)
{
 800849a:	b480      	push	{r7}
 800849c:	b083      	sub	sp, #12
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
	return -1;
 80084a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084c2:	605a      	str	r2, [r3, #4]
	return 0;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <_isatty>:

int _isatty(int file)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
	return 1;
 80084da:	2301      	movs	r3, #1
}
 80084dc:	4618      	mov	r0, r3
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
	return 0;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
	...

08008504 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800850c:	4b11      	ldr	r3, [pc, #68]	; (8008554 <_sbrk+0x50>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <_sbrk+0x16>
		heap_end = &end;
 8008514:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <_sbrk+0x50>)
 8008516:	4a10      	ldr	r2, [pc, #64]	; (8008558 <_sbrk+0x54>)
 8008518:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800851a:	4b0e      	ldr	r3, [pc, #56]	; (8008554 <_sbrk+0x50>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008520:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <_sbrk+0x50>)
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4413      	add	r3, r2
 8008528:	466a      	mov	r2, sp
 800852a:	4293      	cmp	r3, r2
 800852c:	d907      	bls.n	800853e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800852e:	f000 fd53 	bl	8008fd8 <__errno>
 8008532:	4602      	mov	r2, r0
 8008534:	230c      	movs	r3, #12
 8008536:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008538:	f04f 33ff 	mov.w	r3, #4294967295
 800853c:	e006      	b.n	800854c <_sbrk+0x48>
	}

	heap_end += incr;
 800853e:	4b05      	ldr	r3, [pc, #20]	; (8008554 <_sbrk+0x50>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4413      	add	r3, r2
 8008546:	4a03      	ldr	r2, [pc, #12]	; (8008554 <_sbrk+0x50>)
 8008548:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	2000020c 	.word	0x2000020c
 8008558:	20000580 	.word	0x20000580

0800855c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800855c:	b480      	push	{r7}
 800855e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008560:	4b08      	ldr	r3, [pc, #32]	; (8008584 <SystemInit+0x28>)
 8008562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008566:	4a07      	ldr	r2, [pc, #28]	; (8008584 <SystemInit+0x28>)
 8008568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800856c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008570:	4b04      	ldr	r3, [pc, #16]	; (8008584 <SystemInit+0x28>)
 8008572:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008576:	609a      	str	r2, [r3, #8]
#endif
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	e000ed00 	.word	0xe000ed00

08008588 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b096      	sub	sp, #88	; 0x58
 800858c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800858e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008592:	2200      	movs	r2, #0
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	605a      	str	r2, [r3, #4]
 8008598:	609a      	str	r2, [r3, #8]
 800859a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800859c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80085a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
 80085ae:	605a      	str	r2, [r3, #4]
 80085b0:	609a      	str	r2, [r3, #8]
 80085b2:	60da      	str	r2, [r3, #12]
 80085b4:	611a      	str	r2, [r3, #16]
 80085b6:	615a      	str	r2, [r3, #20]
 80085b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80085ba:	1d3b      	adds	r3, r7, #4
 80085bc:	2220      	movs	r2, #32
 80085be:	2100      	movs	r1, #0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 fd33 	bl	800902c <memset>

  htim1.Instance = TIM1;
 80085c6:	4b44      	ldr	r3, [pc, #272]	; (80086d8 <MX_TIM1_Init+0x150>)
 80085c8:	4a44      	ldr	r2, [pc, #272]	; (80086dc <MX_TIM1_Init+0x154>)
 80085ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 199;
 80085cc:	4b42      	ldr	r3, [pc, #264]	; (80086d8 <MX_TIM1_Init+0x150>)
 80085ce:	22c7      	movs	r2, #199	; 0xc7
 80085d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085d2:	4b41      	ldr	r3, [pc, #260]	; (80086d8 <MX_TIM1_Init+0x150>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80085d8:	4b3f      	ldr	r3, [pc, #252]	; (80086d8 <MX_TIM1_Init+0x150>)
 80085da:	f242 720f 	movw	r2, #9999	; 0x270f
 80085de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085e0:	4b3d      	ldr	r3, [pc, #244]	; (80086d8 <MX_TIM1_Init+0x150>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80085e6:	4b3c      	ldr	r3, [pc, #240]	; (80086d8 <MX_TIM1_Init+0x150>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085ec:	4b3a      	ldr	r3, [pc, #232]	; (80086d8 <MX_TIM1_Init+0x150>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80085f2:	4839      	ldr	r0, [pc, #228]	; (80086d8 <MX_TIM1_Init+0x150>)
 80085f4:	f7fa ff92 	bl	800351c <HAL_TIM_Base_Init>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80085fe:	f7ff fe75 	bl	80082ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008606:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800860c:	4619      	mov	r1, r3
 800860e:	4832      	ldr	r0, [pc, #200]	; (80086d8 <MX_TIM1_Init+0x150>)
 8008610:	f7fb fb88 	bl	8003d24 <HAL_TIM_ConfigClockSource>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800861a:	f7ff fe67 	bl	80082ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800861e:	482e      	ldr	r0, [pc, #184]	; (80086d8 <MX_TIM1_Init+0x150>)
 8008620:	f7fa ffef 	bl	8003602 <HAL_TIM_PWM_Init>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800862a:	f7ff fe5f 	bl	80082ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800862e:	2300      	movs	r3, #0
 8008630:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008632:	2300      	movs	r3, #0
 8008634:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800863a:	4619      	mov	r1, r3
 800863c:	4826      	ldr	r0, [pc, #152]	; (80086d8 <MX_TIM1_Init+0x150>)
 800863e:	f7fc f831 	bl	80046a4 <HAL_TIMEx_MasterConfigSynchronization>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8008648:	f7ff fe50 	bl	80082ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800864c:	2360      	movs	r3, #96	; 0x60
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008654:	2300      	movs	r3, #0
 8008656:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008658:	2300      	movs	r3, #0
 800865a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800865c:	2300      	movs	r3, #0
 800865e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008660:	2300      	movs	r3, #0
 8008662:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008664:	2300      	movs	r3, #0
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800866c:	2200      	movs	r2, #0
 800866e:	4619      	mov	r1, r3
 8008670:	4819      	ldr	r0, [pc, #100]	; (80086d8 <MX_TIM1_Init+0x150>)
 8008672:	f7fb fa91 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800867c:	f7ff fe36 	bl	80082ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008684:	2204      	movs	r2, #4
 8008686:	4619      	mov	r1, r3
 8008688:	4813      	ldr	r0, [pc, #76]	; (80086d8 <MX_TIM1_Init+0x150>)
 800868a:	f7fb fa85 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8008694:	f7ff fe2a 	bl	80082ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008698:	2300      	movs	r3, #0
 800869a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800869c:	2300      	movs	r3, #0
 800869e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80086ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80086b6:	1d3b      	adds	r3, r7, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4807      	ldr	r0, [pc, #28]	; (80086d8 <MX_TIM1_Init+0x150>)
 80086bc:	f7fc f860 	bl	8004780 <HAL_TIMEx_ConfigBreakDeadTime>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80086c6:	f7ff fe11 	bl	80082ec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80086ca:	4803      	ldr	r0, [pc, #12]	; (80086d8 <MX_TIM1_Init+0x150>)
 80086cc:	f000 fb1e 	bl	8008d0c <HAL_TIM_MspPostInit>

}
 80086d0:	bf00      	nop
 80086d2:	3758      	adds	r7, #88	; 0x58
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20000418 	.word	0x20000418
 80086dc:	40010000 	.word	0x40010000

080086e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80086e6:	f107 0308 	add.w	r3, r7, #8
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	605a      	str	r2, [r3, #4]
 80086f0:	609a      	str	r2, [r3, #8]
 80086f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086f4:	463b      	mov	r3, r7
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80086fc:	4b1d      	ldr	r3, [pc, #116]	; (8008774 <MX_TIM2_Init+0x94>)
 80086fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8008704:	4b1b      	ldr	r3, [pc, #108]	; (8008774 <MX_TIM2_Init+0x94>)
 8008706:	2263      	movs	r2, #99	; 0x63
 8008708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800870a:	4b1a      	ldr	r3, [pc, #104]	; (8008774 <MX_TIM2_Init+0x94>)
 800870c:	2200      	movs	r2, #0
 800870e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008710:	4b18      	ldr	r3, [pc, #96]	; (8008774 <MX_TIM2_Init+0x94>)
 8008712:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008718:	4b16      	ldr	r3, [pc, #88]	; (8008774 <MX_TIM2_Init+0x94>)
 800871a:	2200      	movs	r2, #0
 800871c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800871e:	4b15      	ldr	r3, [pc, #84]	; (8008774 <MX_TIM2_Init+0x94>)
 8008720:	2200      	movs	r2, #0
 8008722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008724:	4813      	ldr	r0, [pc, #76]	; (8008774 <MX_TIM2_Init+0x94>)
 8008726:	f7fa fef9 	bl	800351c <HAL_TIM_Base_Init>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008730:	f7ff fddc 	bl	80082ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008738:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800873a:	f107 0308 	add.w	r3, r7, #8
 800873e:	4619      	mov	r1, r3
 8008740:	480c      	ldr	r0, [pc, #48]	; (8008774 <MX_TIM2_Init+0x94>)
 8008742:	f7fb faef 	bl	8003d24 <HAL_TIM_ConfigClockSource>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800874c:	f7ff fdce 	bl	80082ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008750:	2300      	movs	r3, #0
 8008752:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008754:	2300      	movs	r3, #0
 8008756:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008758:	463b      	mov	r3, r7
 800875a:	4619      	mov	r1, r3
 800875c:	4805      	ldr	r0, [pc, #20]	; (8008774 <MX_TIM2_Init+0x94>)
 800875e:	f7fb ffa1 	bl	80046a4 <HAL_TIMEx_MasterConfigSynchronization>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008768:	f7ff fdc0 	bl	80082ec <Error_Handler>
  }

}
 800876c:	bf00      	nop
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20000498 	.word	0x20000498

08008778 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b092      	sub	sp, #72	; 0x48
 800877c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800877e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	605a      	str	r2, [r3, #4]
 8008788:	609a      	str	r2, [r3, #8]
 800878a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800878c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008790:	2200      	movs	r2, #0
 8008792:	601a      	str	r2, [r3, #0]
 8008794:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008796:	f107 0320 	add.w	r3, r7, #32
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	605a      	str	r2, [r3, #4]
 80087a0:	609a      	str	r2, [r3, #8]
 80087a2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80087a4:	1d3b      	adds	r3, r7, #4
 80087a6:	2200      	movs	r2, #0
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	605a      	str	r2, [r3, #4]
 80087ac:	609a      	str	r2, [r3, #8]
 80087ae:	60da      	str	r2, [r3, #12]
 80087b0:	611a      	str	r2, [r3, #16]
 80087b2:	615a      	str	r2, [r3, #20]
 80087b4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80087b6:	4b43      	ldr	r3, [pc, #268]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80087b8:	4a43      	ldr	r2, [pc, #268]	; (80088c8 <MX_TIM3_Init+0x150>)
 80087ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80087bc:	4b41      	ldr	r3, [pc, #260]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80087be:	2263      	movs	r2, #99	; 0x63
 80087c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087c2:	4b40      	ldr	r3, [pc, #256]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80087c8:	4b3e      	ldr	r3, [pc, #248]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80087ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087d0:	4b3c      	ldr	r3, [pc, #240]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087d6:	4b3b      	ldr	r3, [pc, #236]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80087d8:	2200      	movs	r2, #0
 80087da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80087dc:	4839      	ldr	r0, [pc, #228]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80087de:	f7fa fe9d 	bl	800351c <HAL_TIM_Base_Init>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80087e8:	f7ff fd80 	bl	80082ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087f0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80087f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087f6:	4619      	mov	r1, r3
 80087f8:	4832      	ldr	r0, [pc, #200]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80087fa:	f7fb fa93 	bl	8003d24 <HAL_TIM_ConfigClockSource>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8008804:	f7ff fd72 	bl	80082ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8008808:	482e      	ldr	r0, [pc, #184]	; (80088c4 <MX_TIM3_Init+0x14c>)
 800880a:	f7fa ff61 	bl	80036d0 <HAL_TIM_IC_Init>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8008814:	f7ff fd6a 	bl	80082ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008818:	482a      	ldr	r0, [pc, #168]	; (80088c4 <MX_TIM3_Init+0x14c>)
 800881a:	f7fa fef2 	bl	8003602 <HAL_TIM_PWM_Init>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8008824:	f7ff fd62 	bl	80082ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008828:	2300      	movs	r3, #0
 800882a:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800882c:	2300      	movs	r3, #0
 800882e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008830:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008834:	4619      	mov	r1, r3
 8008836:	4823      	ldr	r0, [pc, #140]	; (80088c4 <MX_TIM3_Init+0x14c>)
 8008838:	f7fb ff34 	bl	80046a4 <HAL_TIMEx_MasterConfigSynchronization>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8008842:	f7ff fd53 	bl	80082ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008846:	2300      	movs	r3, #0
 8008848:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800884a:	2301      	movs	r3, #1
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800884e:	2300      	movs	r3, #0
 8008850:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008856:	f107 0320 	add.w	r3, r7, #32
 800885a:	2200      	movs	r2, #0
 800885c:	4619      	mov	r1, r3
 800885e:	4819      	ldr	r0, [pc, #100]	; (80088c4 <MX_TIM3_Init+0x14c>)
 8008860:	f7fb f8fe 	bl	8003a60 <HAL_TIM_IC_ConfigChannel>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800886a:	f7ff fd3f 	bl	80082ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800886e:	2302      	movs	r3, #2
 8008870:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8008872:	2302      	movs	r3, #2
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8008876:	f107 0320 	add.w	r3, r7, #32
 800887a:	2204      	movs	r2, #4
 800887c:	4619      	mov	r1, r3
 800887e:	4811      	ldr	r0, [pc, #68]	; (80088c4 <MX_TIM3_Init+0x14c>)
 8008880:	f7fb f8ee 	bl	8003a60 <HAL_TIM_IC_ConfigChannel>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d001      	beq.n	800888e <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 800888a:	f7ff fd2f 	bl	80082ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800888e:	2360      	movs	r3, #96	; 0x60
 8008890:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11;
 8008892:	230b      	movs	r3, #11
 8008894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800889e:	1d3b      	adds	r3, r7, #4
 80088a0:	2208      	movs	r2, #8
 80088a2:	4619      	mov	r1, r3
 80088a4:	4807      	ldr	r0, [pc, #28]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80088a6:	f7fb f977 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <MX_TIM3_Init+0x13c>
  {
    Error_Handler();
 80088b0:	f7ff fd1c 	bl	80082ec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80088b4:	4803      	ldr	r0, [pc, #12]	; (80088c4 <MX_TIM3_Init+0x14c>)
 80088b6:	f000 fa29 	bl	8008d0c <HAL_TIM_MspPostInit>

}
 80088ba:	bf00      	nop
 80088bc:	3748      	adds	r7, #72	; 0x48
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000398 	.word	0x20000398
 80088c8:	40000400 	.word	0x40000400

080088cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08e      	sub	sp, #56	; 0x38
 80088d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80088d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	605a      	str	r2, [r3, #4]
 80088dc:	609a      	str	r2, [r3, #8]
 80088de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088e0:	f107 0320 	add.w	r3, r7, #32
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80088ea:	1d3b      	adds	r3, r7, #4
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	605a      	str	r2, [r3, #4]
 80088f2:	609a      	str	r2, [r3, #8]
 80088f4:	60da      	str	r2, [r3, #12]
 80088f6:	611a      	str	r2, [r3, #16]
 80088f8:	615a      	str	r2, [r3, #20]
 80088fa:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80088fc:	4b37      	ldr	r3, [pc, #220]	; (80089dc <MX_TIM4_Init+0x110>)
 80088fe:	4a38      	ldr	r2, [pc, #224]	; (80089e0 <MX_TIM4_Init+0x114>)
 8008900:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8008902:	4b36      	ldr	r3, [pc, #216]	; (80089dc <MX_TIM4_Init+0x110>)
 8008904:	2263      	movs	r2, #99	; 0x63
 8008906:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008908:	4b34      	ldr	r3, [pc, #208]	; (80089dc <MX_TIM4_Init+0x110>)
 800890a:	2200      	movs	r2, #0
 800890c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800890e:	4b33      	ldr	r3, [pc, #204]	; (80089dc <MX_TIM4_Init+0x110>)
 8008910:	f242 720f 	movw	r2, #9999	; 0x270f
 8008914:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008916:	4b31      	ldr	r3, [pc, #196]	; (80089dc <MX_TIM4_Init+0x110>)
 8008918:	2200      	movs	r2, #0
 800891a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800891c:	4b2f      	ldr	r3, [pc, #188]	; (80089dc <MX_TIM4_Init+0x110>)
 800891e:	2200      	movs	r2, #0
 8008920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008922:	482e      	ldr	r0, [pc, #184]	; (80089dc <MX_TIM4_Init+0x110>)
 8008924:	f7fa fdfa 	bl	800351c <HAL_TIM_Base_Init>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800892e:	f7ff fcdd 	bl	80082ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008936:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800893c:	4619      	mov	r1, r3
 800893e:	4827      	ldr	r0, [pc, #156]	; (80089dc <MX_TIM4_Init+0x110>)
 8008940:	f7fb f9f0 	bl	8003d24 <HAL_TIM_ConfigClockSource>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800894a:	f7ff fccf 	bl	80082ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800894e:	4823      	ldr	r0, [pc, #140]	; (80089dc <MX_TIM4_Init+0x110>)
 8008950:	f7fa fe57 	bl	8003602 <HAL_TIM_PWM_Init>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800895a:	f7ff fcc7 	bl	80082ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800895e:	2300      	movs	r3, #0
 8008960:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008962:	2300      	movs	r3, #0
 8008964:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008966:	f107 0320 	add.w	r3, r7, #32
 800896a:	4619      	mov	r1, r3
 800896c:	481b      	ldr	r0, [pc, #108]	; (80089dc <MX_TIM4_Init+0x110>)
 800896e:	f7fb fe99 	bl	80046a4 <HAL_TIMEx_MasterConfigSynchronization>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8008978:	f7ff fcb8 	bl	80082ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800897c:	2360      	movs	r3, #96	; 0x60
 800897e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008988:	2300      	movs	r3, #0
 800898a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800898c:	1d3b      	adds	r3, r7, #4
 800898e:	2200      	movs	r2, #0
 8008990:	4619      	mov	r1, r3
 8008992:	4812      	ldr	r0, [pc, #72]	; (80089dc <MX_TIM4_Init+0x110>)
 8008994:	f7fb f900 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800899e:	f7ff fca5 	bl	80082ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80089a2:	1d3b      	adds	r3, r7, #4
 80089a4:	2204      	movs	r2, #4
 80089a6:	4619      	mov	r1, r3
 80089a8:	480c      	ldr	r0, [pc, #48]	; (80089dc <MX_TIM4_Init+0x110>)
 80089aa:	f7fb f8f5 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80089b4:	f7ff fc9a 	bl	80082ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80089b8:	1d3b      	adds	r3, r7, #4
 80089ba:	2208      	movs	r2, #8
 80089bc:	4619      	mov	r1, r3
 80089be:	4807      	ldr	r0, [pc, #28]	; (80089dc <MX_TIM4_Init+0x110>)
 80089c0:	f7fb f8ea 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80089ca:	f7ff fc8f 	bl	80082ec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80089ce:	4803      	ldr	r0, [pc, #12]	; (80089dc <MX_TIM4_Init+0x110>)
 80089d0:	f000 f99c 	bl	8008d0c <HAL_TIM_MspPostInit>

}
 80089d4:	bf00      	nop
 80089d6:	3738      	adds	r7, #56	; 0x38
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000318 	.word	0x20000318
 80089e0:	40000800 	.word	0x40000800

080089e4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089ea:	463b      	mov	r3, r7
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	609a      	str	r2, [r3, #8]
 80089f4:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 80089f6:	4b16      	ldr	r3, [pc, #88]	; (8008a50 <MX_TIM9_Init+0x6c>)
 80089f8:	4a16      	ldr	r2, [pc, #88]	; (8008a54 <MX_TIM9_Init+0x70>)
 80089fa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 49;
 80089fc:	4b14      	ldr	r3, [pc, #80]	; (8008a50 <MX_TIM9_Init+0x6c>)
 80089fe:	2231      	movs	r2, #49	; 0x31
 8008a00:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a02:	4b13      	ldr	r3, [pc, #76]	; (8008a50 <MX_TIM9_Init+0x6c>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8008a08:	4b11      	ldr	r3, [pc, #68]	; (8008a50 <MX_TIM9_Init+0x6c>)
 8008a0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8008a0e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a10:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <MX_TIM9_Init+0x6c>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a16:	4b0e      	ldr	r3, [pc, #56]	; (8008a50 <MX_TIM9_Init+0x6c>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8008a1c:	480c      	ldr	r0, [pc, #48]	; (8008a50 <MX_TIM9_Init+0x6c>)
 8008a1e:	f7fa fd7d 	bl	800351c <HAL_TIM_Base_Init>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8008a28:	f7ff fc60 	bl	80082ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a30:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8008a32:	463b      	mov	r3, r7
 8008a34:	4619      	mov	r1, r3
 8008a36:	4806      	ldr	r0, [pc, #24]	; (8008a50 <MX_TIM9_Init+0x6c>)
 8008a38:	f7fb f974 	bl	8003d24 <HAL_TIM_ConfigClockSource>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8008a42:	f7ff fc53 	bl	80082ec <Error_Handler>
  }

}
 8008a46:	bf00      	nop
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000458 	.word	0x20000458
 8008a54:	40014000 	.word	0x40014000

08008a58 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8008a5c:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <MX_TIM10_Init+0x40>)
 8008a5e:	4a0f      	ldr	r2, [pc, #60]	; (8008a9c <MX_TIM10_Init+0x44>)
 8008a60:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8008a62:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <MX_TIM10_Init+0x40>)
 8008a64:	f242 720f 	movw	r2, #9999	; 0x270f
 8008a68:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a6a:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <MX_TIM10_Init+0x40>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8008a70:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <MX_TIM10_Init+0x40>)
 8008a72:	f242 720f 	movw	r2, #9999	; 0x270f
 8008a76:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a78:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <MX_TIM10_Init+0x40>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a7e:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <MX_TIM10_Init+0x40>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008a84:	4804      	ldr	r0, [pc, #16]	; (8008a98 <MX_TIM10_Init+0x40>)
 8008a86:	f7fa fd49 	bl	800351c <HAL_TIM_Base_Init>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8008a90:	f7ff fc2c 	bl	80082ec <Error_Handler>
  }

}
 8008a94:	bf00      	nop
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20000358 	.word	0x20000358
 8008a9c:	40014400 	.word	0x40014400

08008aa0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <MX_TIM11_Init+0x40>)
 8008aa6:	4a0f      	ldr	r2, [pc, #60]	; (8008ae4 <MX_TIM11_Init+0x44>)
 8008aa8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 199;
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <MX_TIM11_Init+0x40>)
 8008aac:	22c7      	movs	r2, #199	; 0xc7
 8008aae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	; (8008ae0 <MX_TIM11_Init+0x40>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8008ab6:	4b0a      	ldr	r3, [pc, #40]	; (8008ae0 <MX_TIM11_Init+0x40>)
 8008ab8:	f242 720f 	movw	r2, #9999	; 0x270f
 8008abc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008abe:	4b08      	ldr	r3, [pc, #32]	; (8008ae0 <MX_TIM11_Init+0x40>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ac4:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <MX_TIM11_Init+0x40>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8008aca:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <MX_TIM11_Init+0x40>)
 8008acc:	f7fa fd26 	bl	800351c <HAL_TIM_Base_Init>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8008ad6:	f7ff fc09 	bl	80082ec <Error_Handler>
  }

}
 8008ada:	bf00      	nop
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	200003d8 	.word	0x200003d8
 8008ae4:	40014800 	.word	0x40014800

08008ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b090      	sub	sp, #64	; 0x40
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008af4:	2200      	movs	r2, #0
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	605a      	str	r2, [r3, #4]
 8008afa:	609a      	str	r2, [r3, #8]
 8008afc:	60da      	str	r2, [r3, #12]
 8008afe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a79      	ldr	r2, [pc, #484]	; (8008cec <HAL_TIM_Base_MspInit+0x204>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d126      	bne.n	8008b58 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b0e:	4b78      	ldr	r3, [pc, #480]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b12:	4a77      	ldr	r2, [pc, #476]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008b14:	f043 0301 	orr.w	r3, r3, #1
 8008b18:	6453      	str	r3, [r2, #68]	; 0x44
 8008b1a:	4b75      	ldr	r3, [pc, #468]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8008b26:	2200      	movs	r2, #0
 8008b28:	2100      	movs	r1, #0
 8008b2a:	2018      	movs	r0, #24
 8008b2c:	f7f8 fb81 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008b30:	2018      	movs	r0, #24
 8008b32:	f7f8 fb9a 	bl	800126a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	2019      	movs	r0, #25
 8008b3c:	f7f8 fb79 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008b40:	2019      	movs	r0, #25
 8008b42:	f7f8 fb92 	bl	800126a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8008b46:	2200      	movs	r2, #0
 8008b48:	2100      	movs	r1, #0
 8008b4a:	201a      	movs	r0, #26
 8008b4c:	f7f8 fb71 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008b50:	201a      	movs	r0, #26
 8008b52:	f7f8 fb8a 	bl	800126a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8008b56:	e0c4      	b.n	8008ce2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM2)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b60:	d116      	bne.n	8008b90 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008b62:	2300      	movs	r3, #0
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
 8008b66:	4b62      	ldr	r3, [pc, #392]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	4a61      	ldr	r2, [pc, #388]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008b6c:	f043 0301 	orr.w	r3, r3, #1
 8008b70:	6413      	str	r3, [r2, #64]	; 0x40
 8008b72:	4b5f      	ldr	r3, [pc, #380]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008b7e:	2200      	movs	r2, #0
 8008b80:	2100      	movs	r1, #0
 8008b82:	201c      	movs	r0, #28
 8008b84:	f7f8 fb55 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008b88:	201c      	movs	r0, #28
 8008b8a:	f7f8 fb6e 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8008b8e:	e0a8      	b.n	8008ce2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM3)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a57      	ldr	r2, [pc, #348]	; (8008cf4 <HAL_TIM_Base_MspInit+0x20c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d134      	bne.n	8008c04 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	623b      	str	r3, [r7, #32]
 8008b9e:	4b54      	ldr	r3, [pc, #336]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	4a53      	ldr	r2, [pc, #332]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008ba4:	f043 0302 	orr.w	r3, r3, #2
 8008ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8008baa:	4b51      	ldr	r3, [pc, #324]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	623b      	str	r3, [r7, #32]
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61fb      	str	r3, [r7, #28]
 8008bba:	4b4d      	ldr	r3, [pc, #308]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbe:	4a4c      	ldr	r2, [pc, #304]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008bc0:	f043 0301 	orr.w	r3, r3, #1
 8008bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8008bc6:	4b4a      	ldr	r3, [pc, #296]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	61fb      	str	r3, [r7, #28]
 8008bd0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Hc_ECHO_Pin;
 8008bd2:	2340      	movs	r3, #64	; 0x40
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bde:	2300      	movs	r3, #0
 8008be0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008be2:	2302      	movs	r3, #2
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Hc_ECHO_GPIO_Port, &GPIO_InitStruct);
 8008be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008bea:	4619      	mov	r1, r3
 8008bec:	4842      	ldr	r0, [pc, #264]	; (8008cf8 <HAL_TIM_Base_MspInit+0x210>)
 8008bee:	f7f8 fee7 	bl	80019c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	201d      	movs	r0, #29
 8008bf8:	f7f8 fb1b 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008bfc:	201d      	movs	r0, #29
 8008bfe:	f7f8 fb34 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8008c02:	e06e      	b.n	8008ce2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM4)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a3c      	ldr	r2, [pc, #240]	; (8008cfc <HAL_TIM_Base_MspInit+0x214>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d116      	bne.n	8008c3c <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61bb      	str	r3, [r7, #24]
 8008c12:	4b37      	ldr	r3, [pc, #220]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	4a36      	ldr	r2, [pc, #216]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008c18:	f043 0304 	orr.w	r3, r3, #4
 8008c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c1e:	4b34      	ldr	r3, [pc, #208]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	61bb      	str	r3, [r7, #24]
 8008c28:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	201e      	movs	r0, #30
 8008c30:	f7f8 faff 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008c34:	201e      	movs	r0, #30
 8008c36:	f7f8 fb18 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8008c3a:	e052      	b.n	8008ce2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM9)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a2f      	ldr	r2, [pc, #188]	; (8008d00 <HAL_TIM_Base_MspInit+0x218>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d116      	bne.n	8008c74 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8008c46:	2300      	movs	r3, #0
 8008c48:	617b      	str	r3, [r7, #20]
 8008c4a:	4b29      	ldr	r3, [pc, #164]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4e:	4a28      	ldr	r2, [pc, #160]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c54:	6453      	str	r3, [r2, #68]	; 0x44
 8008c56:	4b26      	ldr	r3, [pc, #152]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8008c62:	2200      	movs	r2, #0
 8008c64:	2100      	movs	r1, #0
 8008c66:	2018      	movs	r0, #24
 8008c68:	f7f8 fae3 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008c6c:	2018      	movs	r0, #24
 8008c6e:	f7f8 fafc 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8008c72:	e036      	b.n	8008ce2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM10)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a22      	ldr	r2, [pc, #136]	; (8008d04 <HAL_TIM_Base_MspInit+0x21c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d116      	bne.n	8008cac <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8008c7e:	2300      	movs	r3, #0
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	4b1b      	ldr	r3, [pc, #108]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	4a1a      	ldr	r2, [pc, #104]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c8e:	4b18      	ldr	r3, [pc, #96]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	2019      	movs	r0, #25
 8008ca0:	f7f8 fac7 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008ca4:	2019      	movs	r0, #25
 8008ca6:	f7f8 fae0 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8008caa:	e01a      	b.n	8008ce2 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM11)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a15      	ldr	r2, [pc, #84]	; (8008d08 <HAL_TIM_Base_MspInit+0x220>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d115      	bne.n	8008ce2 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cbe:	4a0c      	ldr	r2, [pc, #48]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8008cc6:	4b0a      	ldr	r3, [pc, #40]	; (8008cf0 <HAL_TIM_Base_MspInit+0x208>)
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	201a      	movs	r0, #26
 8008cd8:	f7f8 faab 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008cdc:	201a      	movs	r0, #26
 8008cde:	f7f8 fac4 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8008ce2:	bf00      	nop
 8008ce4:	3740      	adds	r7, #64	; 0x40
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40023800 	.word	0x40023800
 8008cf4:	40000400 	.word	0x40000400
 8008cf8:	40020000 	.word	0x40020000
 8008cfc:	40000800 	.word	0x40000800
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40014400 	.word	0x40014400
 8008d08:	40014800 	.word	0x40014800

08008d0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08a      	sub	sp, #40	; 0x28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d14:	f107 0314 	add.w	r3, r7, #20
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	605a      	str	r2, [r3, #4]
 8008d1e:	609a      	str	r2, [r3, #8]
 8008d20:	60da      	str	r2, [r3, #12]
 8008d22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a37      	ldr	r2, [pc, #220]	; (8008e08 <HAL_TIM_MspPostInit+0xfc>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d11f      	bne.n	8008d6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d2e:	2300      	movs	r3, #0
 8008d30:	613b      	str	r3, [r7, #16]
 8008d32:	4b36      	ldr	r3, [pc, #216]	; (8008e0c <HAL_TIM_MspPostInit+0x100>)
 8008d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d36:	4a35      	ldr	r2, [pc, #212]	; (8008e0c <HAL_TIM_MspPostInit+0x100>)
 8008d38:	f043 0301 	orr.w	r3, r3, #1
 8008d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d3e:	4b33      	ldr	r3, [pc, #204]	; (8008e0c <HAL_TIM_MspPostInit+0x100>)
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	613b      	str	r3, [r7, #16]
 8008d48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Servo_JOINT_Pin|Servo_EFFECTOR_Pin;
 8008d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d50:	2302      	movs	r3, #2
 8008d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d54:	2300      	movs	r3, #0
 8008d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d60:	f107 0314 	add.w	r3, r7, #20
 8008d64:	4619      	mov	r1, r3
 8008d66:	482a      	ldr	r0, [pc, #168]	; (8008e10 <HAL_TIM_MspPostInit+0x104>)
 8008d68:	f7f8 fe2a 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008d6c:	e047      	b.n	8008dfe <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a28      	ldr	r2, [pc, #160]	; (8008e14 <HAL_TIM_MspPostInit+0x108>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d11e      	bne.n	8008db6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	4b23      	ldr	r3, [pc, #140]	; (8008e0c <HAL_TIM_MspPostInit+0x100>)
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	4a22      	ldr	r2, [pc, #136]	; (8008e0c <HAL_TIM_MspPostInit+0x100>)
 8008d82:	f043 0302 	orr.w	r3, r3, #2
 8008d86:	6313      	str	r3, [r2, #48]	; 0x30
 8008d88:	4b20      	ldr	r3, [pc, #128]	; (8008e0c <HAL_TIM_MspPostInit+0x100>)
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Hc_TRIG_Pin;
 8008d94:	2301      	movs	r3, #1
 8008d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d98:	2302      	movs	r3, #2
 8008d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008da0:	2300      	movs	r3, #0
 8008da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008da4:	2302      	movs	r3, #2
 8008da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Hc_TRIG_GPIO_Port, &GPIO_InitStruct);
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	4619      	mov	r1, r3
 8008dae:	481a      	ldr	r0, [pc, #104]	; (8008e18 <HAL_TIM_MspPostInit+0x10c>)
 8008db0:	f7f8 fe06 	bl	80019c0 <HAL_GPIO_Init>
}
 8008db4:	e023      	b.n	8008dfe <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM4)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a18      	ldr	r2, [pc, #96]	; (8008e1c <HAL_TIM_MspPostInit+0x110>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d11e      	bne.n	8008dfe <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60bb      	str	r3, [r7, #8]
 8008dc4:	4b11      	ldr	r3, [pc, #68]	; (8008e0c <HAL_TIM_MspPostInit+0x100>)
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	4a10      	ldr	r2, [pc, #64]	; (8008e0c <HAL_TIM_MspPostInit+0x100>)
 8008dca:	f043 0308 	orr.w	r3, r3, #8
 8008dce:	6313      	str	r3, [r2, #48]	; 0x30
 8008dd0:	4b0e      	ldr	r3, [pc, #56]	; (8008e0c <HAL_TIM_MspPostInit+0x100>)
 8008dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Dc_ENB_Pin|Dc_ENA_Pin|Dc_ENABLE_DRIVER_Pin;
 8008ddc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de2:	2302      	movs	r3, #2
 8008de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dea:	2300      	movs	r3, #0
 8008dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008dee:	2302      	movs	r3, #2
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008df2:	f107 0314 	add.w	r3, r7, #20
 8008df6:	4619      	mov	r1, r3
 8008df8:	4809      	ldr	r0, [pc, #36]	; (8008e20 <HAL_TIM_MspPostInit+0x114>)
 8008dfa:	f7f8 fde1 	bl	80019c0 <HAL_GPIO_Init>
}
 8008dfe:	bf00      	nop
 8008e00:	3728      	adds	r7, #40	; 0x28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	40010000 	.word	0x40010000
 8008e0c:	40023800 	.word	0x40023800
 8008e10:	40020000 	.word	0x40020000
 8008e14:	40000400 	.word	0x40000400
 8008e18:	40020400 	.word	0x40020400
 8008e1c:	40000800 	.word	0x40000800
 8008e20:	40020c00 	.word	0x40020c00

08008e24 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008e28:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <MX_USART2_UART_Init+0x4c>)
 8008e2a:	4a12      	ldr	r2, [pc, #72]	; (8008e74 <MX_USART2_UART_Init+0x50>)
 8008e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8008e2e:	4b10      	ldr	r3, [pc, #64]	; (8008e70 <MX_USART2_UART_Init+0x4c>)
 8008e30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008e36:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <MX_USART2_UART_Init+0x4c>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008e3c:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <MX_USART2_UART_Init+0x4c>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008e42:	4b0b      	ldr	r3, [pc, #44]	; (8008e70 <MX_USART2_UART_Init+0x4c>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008e48:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <MX_USART2_UART_Init+0x4c>)
 8008e4a:	220c      	movs	r2, #12
 8008e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e4e:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <MX_USART2_UART_Init+0x4c>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e54:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <MX_USART2_UART_Init+0x4c>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008e5a:	4805      	ldr	r0, [pc, #20]	; (8008e70 <MX_USART2_UART_Init+0x4c>)
 8008e5c:	f7fb fcf6 	bl	800484c <HAL_UART_Init>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008e66:	f7ff fa41 	bl	80082ec <Error_Handler>
  }

}
 8008e6a:	bf00      	nop
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000538 	.word	0x20000538
 8008e74:	40004400 	.word	0x40004400

08008e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	; 0x28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e80:	f107 0314 	add.w	r3, r7, #20
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	605a      	str	r2, [r3, #4]
 8008e8a:	609a      	str	r2, [r3, #8]
 8008e8c:	60da      	str	r2, [r3, #12]
 8008e8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a34      	ldr	r2, [pc, #208]	; (8008f68 <HAL_UART_MspInit+0xf0>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d162      	bne.n	8008f60 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	613b      	str	r3, [r7, #16]
 8008e9e:	4b33      	ldr	r3, [pc, #204]	; (8008f6c <HAL_UART_MspInit+0xf4>)
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	4a32      	ldr	r2, [pc, #200]	; (8008f6c <HAL_UART_MspInit+0xf4>)
 8008ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8008eaa:	4b30      	ldr	r3, [pc, #192]	; (8008f6c <HAL_UART_MspInit+0xf4>)
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb2:	613b      	str	r3, [r7, #16]
 8008eb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
 8008eba:	4b2c      	ldr	r3, [pc, #176]	; (8008f6c <HAL_UART_MspInit+0xf4>)
 8008ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebe:	4a2b      	ldr	r2, [pc, #172]	; (8008f6c <HAL_UART_MspInit+0xf4>)
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ec6:	4b29      	ldr	r3, [pc, #164]	; (8008f6c <HAL_UART_MspInit+0xf4>)
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008ed2:	230c      	movs	r3, #12
 8008ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008ee2:	2307      	movs	r3, #7
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ee6:	f107 0314 	add.w	r3, r7, #20
 8008eea:	4619      	mov	r1, r3
 8008eec:	4820      	ldr	r0, [pc, #128]	; (8008f70 <HAL_UART_MspInit+0xf8>)
 8008eee:	f7f8 fd67 	bl	80019c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8008ef2:	4b20      	ldr	r3, [pc, #128]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008ef4:	4a20      	ldr	r2, [pc, #128]	; (8008f78 <HAL_UART_MspInit+0x100>)
 8008ef6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8008ef8:	4b1e      	ldr	r3, [pc, #120]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008efe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f00:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f06:	4b1b      	ldr	r3, [pc, #108]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008f0c:	4b19      	ldr	r3, [pc, #100]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f12:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008f14:	4b17      	ldr	r3, [pc, #92]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008f1a:	4b16      	ldr	r3, [pc, #88]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008f20:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008f28:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008f2e:	4b11      	ldr	r3, [pc, #68]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008f34:	480f      	ldr	r0, [pc, #60]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f36:	f7f8 f9b3 	bl	80012a0 <HAL_DMA_Init>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8008f40:	f7ff f9d4 	bl	80082ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a0b      	ldr	r2, [pc, #44]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f48:	635a      	str	r2, [r3, #52]	; 0x34
 8008f4a:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <HAL_UART_MspInit+0xfc>)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008f50:	2200      	movs	r2, #0
 8008f52:	2100      	movs	r1, #0
 8008f54:	2026      	movs	r0, #38	; 0x26
 8008f56:	f7f8 f96c 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008f5a:	2026      	movs	r0, #38	; 0x26
 8008f5c:	f7f8 f985 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008f60:	bf00      	nop
 8008f62:	3728      	adds	r7, #40	; 0x28
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	40004400 	.word	0x40004400
 8008f6c:	40023800 	.word	0x40023800
 8008f70:	40020000 	.word	0x40020000
 8008f74:	200004d8 	.word	0x200004d8
 8008f78:	40026088 	.word	0x40026088

08008f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008f82:	e003      	b.n	8008f8c <LoopCopyDataInit>

08008f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008f84:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008f8a:	3104      	adds	r1, #4

08008f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008f8c:	480b      	ldr	r0, [pc, #44]	; (8008fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008f94:	d3f6      	bcc.n	8008f84 <CopyDataInit>
  ldr  r2, =_sbss
 8008f96:	4a0b      	ldr	r2, [pc, #44]	; (8008fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008f98:	e002      	b.n	8008fa0 <LoopFillZerobss>

08008f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008f9c:	f842 3b04 	str.w	r3, [r2], #4

08008fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008fa0:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008fa4:	d3f9      	bcc.n	8008f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008fa6:	f7ff fad9 	bl	800855c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008faa:	f000 f81b 	bl	8008fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008fae:	f7fe fe51 	bl	8007c54 <main>
  bx  lr    
 8008fb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008fb4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008fb8:	0800ffe0 	.word	0x0800ffe0
  ldr  r0, =_sdata
 8008fbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008fc0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8008fc4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8008fc8:	2000057c 	.word	0x2000057c

08008fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008fcc:	e7fe      	b.n	8008fcc <ADC_IRQHandler>

08008fce <atoi>:
 8008fce:	220a      	movs	r2, #10
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	f001 bdb3 	b.w	800ab3c <strtol>
	...

08008fd8 <__errno>:
 8008fd8:	4b01      	ldr	r3, [pc, #4]	; (8008fe0 <__errno+0x8>)
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	2000000c 	.word	0x2000000c

08008fe4 <__libc_init_array>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	4e0d      	ldr	r6, [pc, #52]	; (800901c <__libc_init_array+0x38>)
 8008fe8:	4c0d      	ldr	r4, [pc, #52]	; (8009020 <__libc_init_array+0x3c>)
 8008fea:	1ba4      	subs	r4, r4, r6
 8008fec:	10a4      	asrs	r4, r4, #2
 8008fee:	2500      	movs	r5, #0
 8008ff0:	42a5      	cmp	r5, r4
 8008ff2:	d109      	bne.n	8009008 <__libc_init_array+0x24>
 8008ff4:	4e0b      	ldr	r6, [pc, #44]	; (8009024 <__libc_init_array+0x40>)
 8008ff6:	4c0c      	ldr	r4, [pc, #48]	; (8009028 <__libc_init_array+0x44>)
 8008ff8:	f006 fc0e 	bl	800f818 <_init>
 8008ffc:	1ba4      	subs	r4, r4, r6
 8008ffe:	10a4      	asrs	r4, r4, #2
 8009000:	2500      	movs	r5, #0
 8009002:	42a5      	cmp	r5, r4
 8009004:	d105      	bne.n	8009012 <__libc_init_array+0x2e>
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800900c:	4798      	blx	r3
 800900e:	3501      	adds	r5, #1
 8009010:	e7ee      	b.n	8008ff0 <__libc_init_array+0xc>
 8009012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009016:	4798      	blx	r3
 8009018:	3501      	adds	r5, #1
 800901a:	e7f2      	b.n	8009002 <__libc_init_array+0x1e>
 800901c:	0800ffd8 	.word	0x0800ffd8
 8009020:	0800ffd8 	.word	0x0800ffd8
 8009024:	0800ffd8 	.word	0x0800ffd8
 8009028:	0800ffdc 	.word	0x0800ffdc

0800902c <memset>:
 800902c:	4402      	add	r2, r0
 800902e:	4603      	mov	r3, r0
 8009030:	4293      	cmp	r3, r2
 8009032:	d100      	bne.n	8009036 <memset+0xa>
 8009034:	4770      	bx	lr
 8009036:	f803 1b01 	strb.w	r1, [r3], #1
 800903a:	e7f9      	b.n	8009030 <memset+0x4>

0800903c <__cvt>:
 800903c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009040:	ec55 4b10 	vmov	r4, r5, d0
 8009044:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009046:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800904a:	2d00      	cmp	r5, #0
 800904c:	460e      	mov	r6, r1
 800904e:	4691      	mov	r9, r2
 8009050:	4619      	mov	r1, r3
 8009052:	bfb8      	it	lt
 8009054:	4622      	movlt	r2, r4
 8009056:	462b      	mov	r3, r5
 8009058:	f027 0720 	bic.w	r7, r7, #32
 800905c:	bfbb      	ittet	lt
 800905e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009062:	461d      	movlt	r5, r3
 8009064:	2300      	movge	r3, #0
 8009066:	232d      	movlt	r3, #45	; 0x2d
 8009068:	bfb8      	it	lt
 800906a:	4614      	movlt	r4, r2
 800906c:	2f46      	cmp	r7, #70	; 0x46
 800906e:	700b      	strb	r3, [r1, #0]
 8009070:	d004      	beq.n	800907c <__cvt+0x40>
 8009072:	2f45      	cmp	r7, #69	; 0x45
 8009074:	d100      	bne.n	8009078 <__cvt+0x3c>
 8009076:	3601      	adds	r6, #1
 8009078:	2102      	movs	r1, #2
 800907a:	e000      	b.n	800907e <__cvt+0x42>
 800907c:	2103      	movs	r1, #3
 800907e:	ab03      	add	r3, sp, #12
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	ab02      	add	r3, sp, #8
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	4632      	mov	r2, r6
 8009088:	4653      	mov	r3, sl
 800908a:	ec45 4b10 	vmov	d0, r4, r5
 800908e:	f001 fdf7 	bl	800ac80 <_dtoa_r>
 8009092:	2f47      	cmp	r7, #71	; 0x47
 8009094:	4680      	mov	r8, r0
 8009096:	d102      	bne.n	800909e <__cvt+0x62>
 8009098:	f019 0f01 	tst.w	r9, #1
 800909c:	d026      	beq.n	80090ec <__cvt+0xb0>
 800909e:	2f46      	cmp	r7, #70	; 0x46
 80090a0:	eb08 0906 	add.w	r9, r8, r6
 80090a4:	d111      	bne.n	80090ca <__cvt+0x8e>
 80090a6:	f898 3000 	ldrb.w	r3, [r8]
 80090aa:	2b30      	cmp	r3, #48	; 0x30
 80090ac:	d10a      	bne.n	80090c4 <__cvt+0x88>
 80090ae:	2200      	movs	r2, #0
 80090b0:	2300      	movs	r3, #0
 80090b2:	4620      	mov	r0, r4
 80090b4:	4629      	mov	r1, r5
 80090b6:	f7f7 fd0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80090ba:	b918      	cbnz	r0, 80090c4 <__cvt+0x88>
 80090bc:	f1c6 0601 	rsb	r6, r6, #1
 80090c0:	f8ca 6000 	str.w	r6, [sl]
 80090c4:	f8da 3000 	ldr.w	r3, [sl]
 80090c8:	4499      	add	r9, r3
 80090ca:	2200      	movs	r2, #0
 80090cc:	2300      	movs	r3, #0
 80090ce:	4620      	mov	r0, r4
 80090d0:	4629      	mov	r1, r5
 80090d2:	f7f7 fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 80090d6:	b938      	cbnz	r0, 80090e8 <__cvt+0xac>
 80090d8:	2230      	movs	r2, #48	; 0x30
 80090da:	9b03      	ldr	r3, [sp, #12]
 80090dc:	454b      	cmp	r3, r9
 80090de:	d205      	bcs.n	80090ec <__cvt+0xb0>
 80090e0:	1c59      	adds	r1, r3, #1
 80090e2:	9103      	str	r1, [sp, #12]
 80090e4:	701a      	strb	r2, [r3, #0]
 80090e6:	e7f8      	b.n	80090da <__cvt+0x9e>
 80090e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80090ec:	9b03      	ldr	r3, [sp, #12]
 80090ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090f0:	eba3 0308 	sub.w	r3, r3, r8
 80090f4:	4640      	mov	r0, r8
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	b004      	add	sp, #16
 80090fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080090fe <__exponent>:
 80090fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009100:	2900      	cmp	r1, #0
 8009102:	4604      	mov	r4, r0
 8009104:	bfba      	itte	lt
 8009106:	4249      	neglt	r1, r1
 8009108:	232d      	movlt	r3, #45	; 0x2d
 800910a:	232b      	movge	r3, #43	; 0x2b
 800910c:	2909      	cmp	r1, #9
 800910e:	f804 2b02 	strb.w	r2, [r4], #2
 8009112:	7043      	strb	r3, [r0, #1]
 8009114:	dd20      	ble.n	8009158 <__exponent+0x5a>
 8009116:	f10d 0307 	add.w	r3, sp, #7
 800911a:	461f      	mov	r7, r3
 800911c:	260a      	movs	r6, #10
 800911e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009122:	fb06 1115 	mls	r1, r6, r5, r1
 8009126:	3130      	adds	r1, #48	; 0x30
 8009128:	2d09      	cmp	r5, #9
 800912a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800912e:	f103 32ff 	add.w	r2, r3, #4294967295
 8009132:	4629      	mov	r1, r5
 8009134:	dc09      	bgt.n	800914a <__exponent+0x4c>
 8009136:	3130      	adds	r1, #48	; 0x30
 8009138:	3b02      	subs	r3, #2
 800913a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800913e:	42bb      	cmp	r3, r7
 8009140:	4622      	mov	r2, r4
 8009142:	d304      	bcc.n	800914e <__exponent+0x50>
 8009144:	1a10      	subs	r0, r2, r0
 8009146:	b003      	add	sp, #12
 8009148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914a:	4613      	mov	r3, r2
 800914c:	e7e7      	b.n	800911e <__exponent+0x20>
 800914e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009152:	f804 2b01 	strb.w	r2, [r4], #1
 8009156:	e7f2      	b.n	800913e <__exponent+0x40>
 8009158:	2330      	movs	r3, #48	; 0x30
 800915a:	4419      	add	r1, r3
 800915c:	7083      	strb	r3, [r0, #2]
 800915e:	1d02      	adds	r2, r0, #4
 8009160:	70c1      	strb	r1, [r0, #3]
 8009162:	e7ef      	b.n	8009144 <__exponent+0x46>

08009164 <_printf_float>:
 8009164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009168:	b08d      	sub	sp, #52	; 0x34
 800916a:	460c      	mov	r4, r1
 800916c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009170:	4616      	mov	r6, r2
 8009172:	461f      	mov	r7, r3
 8009174:	4605      	mov	r5, r0
 8009176:	f002 ff31 	bl	800bfdc <_localeconv_r>
 800917a:	6803      	ldr	r3, [r0, #0]
 800917c:	9304      	str	r3, [sp, #16]
 800917e:	4618      	mov	r0, r3
 8009180:	f7f7 f82e 	bl	80001e0 <strlen>
 8009184:	2300      	movs	r3, #0
 8009186:	930a      	str	r3, [sp, #40]	; 0x28
 8009188:	f8d8 3000 	ldr.w	r3, [r8]
 800918c:	9005      	str	r0, [sp, #20]
 800918e:	3307      	adds	r3, #7
 8009190:	f023 0307 	bic.w	r3, r3, #7
 8009194:	f103 0208 	add.w	r2, r3, #8
 8009198:	f894 a018 	ldrb.w	sl, [r4, #24]
 800919c:	f8d4 b000 	ldr.w	fp, [r4]
 80091a0:	f8c8 2000 	str.w	r2, [r8]
 80091a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80091ac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80091b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091b4:	9307      	str	r3, [sp, #28]
 80091b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80091ba:	f04f 32ff 	mov.w	r2, #4294967295
 80091be:	4ba7      	ldr	r3, [pc, #668]	; (800945c <_printf_float+0x2f8>)
 80091c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091c4:	f7f7 fcba 	bl	8000b3c <__aeabi_dcmpun>
 80091c8:	bb70      	cbnz	r0, 8009228 <_printf_float+0xc4>
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295
 80091ce:	4ba3      	ldr	r3, [pc, #652]	; (800945c <_printf_float+0x2f8>)
 80091d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091d4:	f7f7 fc94 	bl	8000b00 <__aeabi_dcmple>
 80091d8:	bb30      	cbnz	r0, 8009228 <_printf_float+0xc4>
 80091da:	2200      	movs	r2, #0
 80091dc:	2300      	movs	r3, #0
 80091de:	4640      	mov	r0, r8
 80091e0:	4649      	mov	r1, r9
 80091e2:	f7f7 fc83 	bl	8000aec <__aeabi_dcmplt>
 80091e6:	b110      	cbz	r0, 80091ee <_printf_float+0x8a>
 80091e8:	232d      	movs	r3, #45	; 0x2d
 80091ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ee:	4a9c      	ldr	r2, [pc, #624]	; (8009460 <_printf_float+0x2fc>)
 80091f0:	4b9c      	ldr	r3, [pc, #624]	; (8009464 <_printf_float+0x300>)
 80091f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80091f6:	bf8c      	ite	hi
 80091f8:	4690      	movhi	r8, r2
 80091fa:	4698      	movls	r8, r3
 80091fc:	2303      	movs	r3, #3
 80091fe:	f02b 0204 	bic.w	r2, fp, #4
 8009202:	6123      	str	r3, [r4, #16]
 8009204:	6022      	str	r2, [r4, #0]
 8009206:	f04f 0900 	mov.w	r9, #0
 800920a:	9700      	str	r7, [sp, #0]
 800920c:	4633      	mov	r3, r6
 800920e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009210:	4621      	mov	r1, r4
 8009212:	4628      	mov	r0, r5
 8009214:	f000 f9e6 	bl	80095e4 <_printf_common>
 8009218:	3001      	adds	r0, #1
 800921a:	f040 808d 	bne.w	8009338 <_printf_float+0x1d4>
 800921e:	f04f 30ff 	mov.w	r0, #4294967295
 8009222:	b00d      	add	sp, #52	; 0x34
 8009224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009228:	4642      	mov	r2, r8
 800922a:	464b      	mov	r3, r9
 800922c:	4640      	mov	r0, r8
 800922e:	4649      	mov	r1, r9
 8009230:	f7f7 fc84 	bl	8000b3c <__aeabi_dcmpun>
 8009234:	b110      	cbz	r0, 800923c <_printf_float+0xd8>
 8009236:	4a8c      	ldr	r2, [pc, #560]	; (8009468 <_printf_float+0x304>)
 8009238:	4b8c      	ldr	r3, [pc, #560]	; (800946c <_printf_float+0x308>)
 800923a:	e7da      	b.n	80091f2 <_printf_float+0x8e>
 800923c:	6861      	ldr	r1, [r4, #4]
 800923e:	1c4b      	adds	r3, r1, #1
 8009240:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009244:	a80a      	add	r0, sp, #40	; 0x28
 8009246:	d13e      	bne.n	80092c6 <_printf_float+0x162>
 8009248:	2306      	movs	r3, #6
 800924a:	6063      	str	r3, [r4, #4]
 800924c:	2300      	movs	r3, #0
 800924e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009252:	ab09      	add	r3, sp, #36	; 0x24
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	ec49 8b10 	vmov	d0, r8, r9
 800925a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800925e:	6022      	str	r2, [r4, #0]
 8009260:	f8cd a004 	str.w	sl, [sp, #4]
 8009264:	6861      	ldr	r1, [r4, #4]
 8009266:	4628      	mov	r0, r5
 8009268:	f7ff fee8 	bl	800903c <__cvt>
 800926c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009270:	2b47      	cmp	r3, #71	; 0x47
 8009272:	4680      	mov	r8, r0
 8009274:	d109      	bne.n	800928a <_printf_float+0x126>
 8009276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009278:	1cd8      	adds	r0, r3, #3
 800927a:	db02      	blt.n	8009282 <_printf_float+0x11e>
 800927c:	6862      	ldr	r2, [r4, #4]
 800927e:	4293      	cmp	r3, r2
 8009280:	dd47      	ble.n	8009312 <_printf_float+0x1ae>
 8009282:	f1aa 0a02 	sub.w	sl, sl, #2
 8009286:	fa5f fa8a 	uxtb.w	sl, sl
 800928a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800928e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009290:	d824      	bhi.n	80092dc <_printf_float+0x178>
 8009292:	3901      	subs	r1, #1
 8009294:	4652      	mov	r2, sl
 8009296:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800929a:	9109      	str	r1, [sp, #36]	; 0x24
 800929c:	f7ff ff2f 	bl	80090fe <__exponent>
 80092a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092a2:	1813      	adds	r3, r2, r0
 80092a4:	2a01      	cmp	r2, #1
 80092a6:	4681      	mov	r9, r0
 80092a8:	6123      	str	r3, [r4, #16]
 80092aa:	dc02      	bgt.n	80092b2 <_printf_float+0x14e>
 80092ac:	6822      	ldr	r2, [r4, #0]
 80092ae:	07d1      	lsls	r1, r2, #31
 80092b0:	d501      	bpl.n	80092b6 <_printf_float+0x152>
 80092b2:	3301      	adds	r3, #1
 80092b4:	6123      	str	r3, [r4, #16]
 80092b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0a5      	beq.n	800920a <_printf_float+0xa6>
 80092be:	232d      	movs	r3, #45	; 0x2d
 80092c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092c4:	e7a1      	b.n	800920a <_printf_float+0xa6>
 80092c6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80092ca:	f000 8177 	beq.w	80095bc <_printf_float+0x458>
 80092ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80092d2:	d1bb      	bne.n	800924c <_printf_float+0xe8>
 80092d4:	2900      	cmp	r1, #0
 80092d6:	d1b9      	bne.n	800924c <_printf_float+0xe8>
 80092d8:	2301      	movs	r3, #1
 80092da:	e7b6      	b.n	800924a <_printf_float+0xe6>
 80092dc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80092e0:	d119      	bne.n	8009316 <_printf_float+0x1b2>
 80092e2:	2900      	cmp	r1, #0
 80092e4:	6863      	ldr	r3, [r4, #4]
 80092e6:	dd0c      	ble.n	8009302 <_printf_float+0x19e>
 80092e8:	6121      	str	r1, [r4, #16]
 80092ea:	b913      	cbnz	r3, 80092f2 <_printf_float+0x18e>
 80092ec:	6822      	ldr	r2, [r4, #0]
 80092ee:	07d2      	lsls	r2, r2, #31
 80092f0:	d502      	bpl.n	80092f8 <_printf_float+0x194>
 80092f2:	3301      	adds	r3, #1
 80092f4:	440b      	add	r3, r1
 80092f6:	6123      	str	r3, [r4, #16]
 80092f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80092fc:	f04f 0900 	mov.w	r9, #0
 8009300:	e7d9      	b.n	80092b6 <_printf_float+0x152>
 8009302:	b913      	cbnz	r3, 800930a <_printf_float+0x1a6>
 8009304:	6822      	ldr	r2, [r4, #0]
 8009306:	07d0      	lsls	r0, r2, #31
 8009308:	d501      	bpl.n	800930e <_printf_float+0x1aa>
 800930a:	3302      	adds	r3, #2
 800930c:	e7f3      	b.n	80092f6 <_printf_float+0x192>
 800930e:	2301      	movs	r3, #1
 8009310:	e7f1      	b.n	80092f6 <_printf_float+0x192>
 8009312:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009316:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800931a:	4293      	cmp	r3, r2
 800931c:	db05      	blt.n	800932a <_printf_float+0x1c6>
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	07d1      	lsls	r1, r2, #31
 8009324:	d5e8      	bpl.n	80092f8 <_printf_float+0x194>
 8009326:	3301      	adds	r3, #1
 8009328:	e7e5      	b.n	80092f6 <_printf_float+0x192>
 800932a:	2b00      	cmp	r3, #0
 800932c:	bfd4      	ite	le
 800932e:	f1c3 0302 	rsble	r3, r3, #2
 8009332:	2301      	movgt	r3, #1
 8009334:	4413      	add	r3, r2
 8009336:	e7de      	b.n	80092f6 <_printf_float+0x192>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	055a      	lsls	r2, r3, #21
 800933c:	d407      	bmi.n	800934e <_printf_float+0x1ea>
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	4642      	mov	r2, r8
 8009342:	4631      	mov	r1, r6
 8009344:	4628      	mov	r0, r5
 8009346:	47b8      	blx	r7
 8009348:	3001      	adds	r0, #1
 800934a:	d12b      	bne.n	80093a4 <_printf_float+0x240>
 800934c:	e767      	b.n	800921e <_printf_float+0xba>
 800934e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009352:	f240 80dc 	bls.w	800950e <_printf_float+0x3aa>
 8009356:	2200      	movs	r2, #0
 8009358:	2300      	movs	r3, #0
 800935a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800935e:	f7f7 fbbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009362:	2800      	cmp	r0, #0
 8009364:	d033      	beq.n	80093ce <_printf_float+0x26a>
 8009366:	2301      	movs	r3, #1
 8009368:	4a41      	ldr	r2, [pc, #260]	; (8009470 <_printf_float+0x30c>)
 800936a:	4631      	mov	r1, r6
 800936c:	4628      	mov	r0, r5
 800936e:	47b8      	blx	r7
 8009370:	3001      	adds	r0, #1
 8009372:	f43f af54 	beq.w	800921e <_printf_float+0xba>
 8009376:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800937a:	429a      	cmp	r2, r3
 800937c:	db02      	blt.n	8009384 <_printf_float+0x220>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	07d8      	lsls	r0, r3, #31
 8009382:	d50f      	bpl.n	80093a4 <_printf_float+0x240>
 8009384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	f43f af45 	beq.w	800921e <_printf_float+0xba>
 8009394:	f04f 0800 	mov.w	r8, #0
 8009398:	f104 091a 	add.w	r9, r4, #26
 800939c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800939e:	3b01      	subs	r3, #1
 80093a0:	4543      	cmp	r3, r8
 80093a2:	dc09      	bgt.n	80093b8 <_printf_float+0x254>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	079b      	lsls	r3, r3, #30
 80093a8:	f100 8103 	bmi.w	80095b2 <_printf_float+0x44e>
 80093ac:	68e0      	ldr	r0, [r4, #12]
 80093ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b0:	4298      	cmp	r0, r3
 80093b2:	bfb8      	it	lt
 80093b4:	4618      	movlt	r0, r3
 80093b6:	e734      	b.n	8009222 <_printf_float+0xbe>
 80093b8:	2301      	movs	r3, #1
 80093ba:	464a      	mov	r2, r9
 80093bc:	4631      	mov	r1, r6
 80093be:	4628      	mov	r0, r5
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	f43f af2b 	beq.w	800921e <_printf_float+0xba>
 80093c8:	f108 0801 	add.w	r8, r8, #1
 80093cc:	e7e6      	b.n	800939c <_printf_float+0x238>
 80093ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc2b      	bgt.n	800942c <_printf_float+0x2c8>
 80093d4:	2301      	movs	r3, #1
 80093d6:	4a26      	ldr	r2, [pc, #152]	; (8009470 <_printf_float+0x30c>)
 80093d8:	4631      	mov	r1, r6
 80093da:	4628      	mov	r0, r5
 80093dc:	47b8      	blx	r7
 80093de:	3001      	adds	r0, #1
 80093e0:	f43f af1d 	beq.w	800921e <_printf_float+0xba>
 80093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e6:	b923      	cbnz	r3, 80093f2 <_printf_float+0x28e>
 80093e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ea:	b913      	cbnz	r3, 80093f2 <_printf_float+0x28e>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	07d9      	lsls	r1, r3, #31
 80093f0:	d5d8      	bpl.n	80093a4 <_printf_float+0x240>
 80093f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	f43f af0e 	beq.w	800921e <_printf_float+0xba>
 8009402:	f04f 0900 	mov.w	r9, #0
 8009406:	f104 0a1a 	add.w	sl, r4, #26
 800940a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940c:	425b      	negs	r3, r3
 800940e:	454b      	cmp	r3, r9
 8009410:	dc01      	bgt.n	8009416 <_printf_float+0x2b2>
 8009412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009414:	e794      	b.n	8009340 <_printf_float+0x1dc>
 8009416:	2301      	movs	r3, #1
 8009418:	4652      	mov	r2, sl
 800941a:	4631      	mov	r1, r6
 800941c:	4628      	mov	r0, r5
 800941e:	47b8      	blx	r7
 8009420:	3001      	adds	r0, #1
 8009422:	f43f aefc 	beq.w	800921e <_printf_float+0xba>
 8009426:	f109 0901 	add.w	r9, r9, #1
 800942a:	e7ee      	b.n	800940a <_printf_float+0x2a6>
 800942c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800942e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009430:	429a      	cmp	r2, r3
 8009432:	bfa8      	it	ge
 8009434:	461a      	movge	r2, r3
 8009436:	2a00      	cmp	r2, #0
 8009438:	4691      	mov	r9, r2
 800943a:	dd07      	ble.n	800944c <_printf_float+0x2e8>
 800943c:	4613      	mov	r3, r2
 800943e:	4631      	mov	r1, r6
 8009440:	4642      	mov	r2, r8
 8009442:	4628      	mov	r0, r5
 8009444:	47b8      	blx	r7
 8009446:	3001      	adds	r0, #1
 8009448:	f43f aee9 	beq.w	800921e <_printf_float+0xba>
 800944c:	f104 031a 	add.w	r3, r4, #26
 8009450:	f04f 0b00 	mov.w	fp, #0
 8009454:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009458:	9306      	str	r3, [sp, #24]
 800945a:	e015      	b.n	8009488 <_printf_float+0x324>
 800945c:	7fefffff 	.word	0x7fefffff
 8009460:	0800fbb9 	.word	0x0800fbb9
 8009464:	0800f870 	.word	0x0800f870
 8009468:	0800f878 	.word	0x0800f878
 800946c:	0800f874 	.word	0x0800f874
 8009470:	0800f87c 	.word	0x0800f87c
 8009474:	2301      	movs	r3, #1
 8009476:	9a06      	ldr	r2, [sp, #24]
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	f43f aecd 	beq.w	800921e <_printf_float+0xba>
 8009484:	f10b 0b01 	add.w	fp, fp, #1
 8009488:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800948c:	ebaa 0309 	sub.w	r3, sl, r9
 8009490:	455b      	cmp	r3, fp
 8009492:	dcef      	bgt.n	8009474 <_printf_float+0x310>
 8009494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009498:	429a      	cmp	r2, r3
 800949a:	44d0      	add	r8, sl
 800949c:	db15      	blt.n	80094ca <_printf_float+0x366>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	07da      	lsls	r2, r3, #31
 80094a2:	d412      	bmi.n	80094ca <_printf_float+0x366>
 80094a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094a8:	eba3 020a 	sub.w	r2, r3, sl
 80094ac:	eba3 0a01 	sub.w	sl, r3, r1
 80094b0:	4592      	cmp	sl, r2
 80094b2:	bfa8      	it	ge
 80094b4:	4692      	movge	sl, r2
 80094b6:	f1ba 0f00 	cmp.w	sl, #0
 80094ba:	dc0e      	bgt.n	80094da <_printf_float+0x376>
 80094bc:	f04f 0800 	mov.w	r8, #0
 80094c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094c4:	f104 091a 	add.w	r9, r4, #26
 80094c8:	e019      	b.n	80094fe <_printf_float+0x39a>
 80094ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094ce:	4631      	mov	r1, r6
 80094d0:	4628      	mov	r0, r5
 80094d2:	47b8      	blx	r7
 80094d4:	3001      	adds	r0, #1
 80094d6:	d1e5      	bne.n	80094a4 <_printf_float+0x340>
 80094d8:	e6a1      	b.n	800921e <_printf_float+0xba>
 80094da:	4653      	mov	r3, sl
 80094dc:	4642      	mov	r2, r8
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	d1e9      	bne.n	80094bc <_printf_float+0x358>
 80094e8:	e699      	b.n	800921e <_printf_float+0xba>
 80094ea:	2301      	movs	r3, #1
 80094ec:	464a      	mov	r2, r9
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f ae92 	beq.w	800921e <_printf_float+0xba>
 80094fa:	f108 0801 	add.w	r8, r8, #1
 80094fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	eba3 030a 	sub.w	r3, r3, sl
 8009508:	4543      	cmp	r3, r8
 800950a:	dcee      	bgt.n	80094ea <_printf_float+0x386>
 800950c:	e74a      	b.n	80093a4 <_printf_float+0x240>
 800950e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009510:	2a01      	cmp	r2, #1
 8009512:	dc01      	bgt.n	8009518 <_printf_float+0x3b4>
 8009514:	07db      	lsls	r3, r3, #31
 8009516:	d53a      	bpl.n	800958e <_printf_float+0x42a>
 8009518:	2301      	movs	r3, #1
 800951a:	4642      	mov	r2, r8
 800951c:	4631      	mov	r1, r6
 800951e:	4628      	mov	r0, r5
 8009520:	47b8      	blx	r7
 8009522:	3001      	adds	r0, #1
 8009524:	f43f ae7b 	beq.w	800921e <_printf_float+0xba>
 8009528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	47b8      	blx	r7
 8009532:	3001      	adds	r0, #1
 8009534:	f108 0801 	add.w	r8, r8, #1
 8009538:	f43f ae71 	beq.w	800921e <_printf_float+0xba>
 800953c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800953e:	2200      	movs	r2, #0
 8009540:	f103 3aff 	add.w	sl, r3, #4294967295
 8009544:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009548:	2300      	movs	r3, #0
 800954a:	f7f7 fac5 	bl	8000ad8 <__aeabi_dcmpeq>
 800954e:	b9c8      	cbnz	r0, 8009584 <_printf_float+0x420>
 8009550:	4653      	mov	r3, sl
 8009552:	4642      	mov	r2, r8
 8009554:	4631      	mov	r1, r6
 8009556:	4628      	mov	r0, r5
 8009558:	47b8      	blx	r7
 800955a:	3001      	adds	r0, #1
 800955c:	d10e      	bne.n	800957c <_printf_float+0x418>
 800955e:	e65e      	b.n	800921e <_printf_float+0xba>
 8009560:	2301      	movs	r3, #1
 8009562:	4652      	mov	r2, sl
 8009564:	4631      	mov	r1, r6
 8009566:	4628      	mov	r0, r5
 8009568:	47b8      	blx	r7
 800956a:	3001      	adds	r0, #1
 800956c:	f43f ae57 	beq.w	800921e <_printf_float+0xba>
 8009570:	f108 0801 	add.w	r8, r8, #1
 8009574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009576:	3b01      	subs	r3, #1
 8009578:	4543      	cmp	r3, r8
 800957a:	dcf1      	bgt.n	8009560 <_printf_float+0x3fc>
 800957c:	464b      	mov	r3, r9
 800957e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009582:	e6de      	b.n	8009342 <_printf_float+0x1de>
 8009584:	f04f 0800 	mov.w	r8, #0
 8009588:	f104 0a1a 	add.w	sl, r4, #26
 800958c:	e7f2      	b.n	8009574 <_printf_float+0x410>
 800958e:	2301      	movs	r3, #1
 8009590:	e7df      	b.n	8009552 <_printf_float+0x3ee>
 8009592:	2301      	movs	r3, #1
 8009594:	464a      	mov	r2, r9
 8009596:	4631      	mov	r1, r6
 8009598:	4628      	mov	r0, r5
 800959a:	47b8      	blx	r7
 800959c:	3001      	adds	r0, #1
 800959e:	f43f ae3e 	beq.w	800921e <_printf_float+0xba>
 80095a2:	f108 0801 	add.w	r8, r8, #1
 80095a6:	68e3      	ldr	r3, [r4, #12]
 80095a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095aa:	1a9b      	subs	r3, r3, r2
 80095ac:	4543      	cmp	r3, r8
 80095ae:	dcf0      	bgt.n	8009592 <_printf_float+0x42e>
 80095b0:	e6fc      	b.n	80093ac <_printf_float+0x248>
 80095b2:	f04f 0800 	mov.w	r8, #0
 80095b6:	f104 0919 	add.w	r9, r4, #25
 80095ba:	e7f4      	b.n	80095a6 <_printf_float+0x442>
 80095bc:	2900      	cmp	r1, #0
 80095be:	f43f ae8b 	beq.w	80092d8 <_printf_float+0x174>
 80095c2:	2300      	movs	r3, #0
 80095c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80095c8:	ab09      	add	r3, sp, #36	; 0x24
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	ec49 8b10 	vmov	d0, r8, r9
 80095d0:	6022      	str	r2, [r4, #0]
 80095d2:	f8cd a004 	str.w	sl, [sp, #4]
 80095d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095da:	4628      	mov	r0, r5
 80095dc:	f7ff fd2e 	bl	800903c <__cvt>
 80095e0:	4680      	mov	r8, r0
 80095e2:	e648      	b.n	8009276 <_printf_float+0x112>

080095e4 <_printf_common>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	4691      	mov	r9, r2
 80095ea:	461f      	mov	r7, r3
 80095ec:	688a      	ldr	r2, [r1, #8]
 80095ee:	690b      	ldr	r3, [r1, #16]
 80095f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095f4:	4293      	cmp	r3, r2
 80095f6:	bfb8      	it	lt
 80095f8:	4613      	movlt	r3, r2
 80095fa:	f8c9 3000 	str.w	r3, [r9]
 80095fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009602:	4606      	mov	r6, r0
 8009604:	460c      	mov	r4, r1
 8009606:	b112      	cbz	r2, 800960e <_printf_common+0x2a>
 8009608:	3301      	adds	r3, #1
 800960a:	f8c9 3000 	str.w	r3, [r9]
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	0699      	lsls	r1, r3, #26
 8009612:	bf42      	ittt	mi
 8009614:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009618:	3302      	addmi	r3, #2
 800961a:	f8c9 3000 	strmi.w	r3, [r9]
 800961e:	6825      	ldr	r5, [r4, #0]
 8009620:	f015 0506 	ands.w	r5, r5, #6
 8009624:	d107      	bne.n	8009636 <_printf_common+0x52>
 8009626:	f104 0a19 	add.w	sl, r4, #25
 800962a:	68e3      	ldr	r3, [r4, #12]
 800962c:	f8d9 2000 	ldr.w	r2, [r9]
 8009630:	1a9b      	subs	r3, r3, r2
 8009632:	42ab      	cmp	r3, r5
 8009634:	dc28      	bgt.n	8009688 <_printf_common+0xa4>
 8009636:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800963a:	6822      	ldr	r2, [r4, #0]
 800963c:	3300      	adds	r3, #0
 800963e:	bf18      	it	ne
 8009640:	2301      	movne	r3, #1
 8009642:	0692      	lsls	r2, r2, #26
 8009644:	d42d      	bmi.n	80096a2 <_printf_common+0xbe>
 8009646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800964a:	4639      	mov	r1, r7
 800964c:	4630      	mov	r0, r6
 800964e:	47c0      	blx	r8
 8009650:	3001      	adds	r0, #1
 8009652:	d020      	beq.n	8009696 <_printf_common+0xb2>
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	68e5      	ldr	r5, [r4, #12]
 8009658:	f8d9 2000 	ldr.w	r2, [r9]
 800965c:	f003 0306 	and.w	r3, r3, #6
 8009660:	2b04      	cmp	r3, #4
 8009662:	bf08      	it	eq
 8009664:	1aad      	subeq	r5, r5, r2
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	6922      	ldr	r2, [r4, #16]
 800966a:	bf0c      	ite	eq
 800966c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009670:	2500      	movne	r5, #0
 8009672:	4293      	cmp	r3, r2
 8009674:	bfc4      	itt	gt
 8009676:	1a9b      	subgt	r3, r3, r2
 8009678:	18ed      	addgt	r5, r5, r3
 800967a:	f04f 0900 	mov.w	r9, #0
 800967e:	341a      	adds	r4, #26
 8009680:	454d      	cmp	r5, r9
 8009682:	d11a      	bne.n	80096ba <_printf_common+0xd6>
 8009684:	2000      	movs	r0, #0
 8009686:	e008      	b.n	800969a <_printf_common+0xb6>
 8009688:	2301      	movs	r3, #1
 800968a:	4652      	mov	r2, sl
 800968c:	4639      	mov	r1, r7
 800968e:	4630      	mov	r0, r6
 8009690:	47c0      	blx	r8
 8009692:	3001      	adds	r0, #1
 8009694:	d103      	bne.n	800969e <_printf_common+0xba>
 8009696:	f04f 30ff 	mov.w	r0, #4294967295
 800969a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969e:	3501      	adds	r5, #1
 80096a0:	e7c3      	b.n	800962a <_printf_common+0x46>
 80096a2:	18e1      	adds	r1, r4, r3
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	2030      	movs	r0, #48	; 0x30
 80096a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ac:	4422      	add	r2, r4
 80096ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096b6:	3302      	adds	r3, #2
 80096b8:	e7c5      	b.n	8009646 <_printf_common+0x62>
 80096ba:	2301      	movs	r3, #1
 80096bc:	4622      	mov	r2, r4
 80096be:	4639      	mov	r1, r7
 80096c0:	4630      	mov	r0, r6
 80096c2:	47c0      	blx	r8
 80096c4:	3001      	adds	r0, #1
 80096c6:	d0e6      	beq.n	8009696 <_printf_common+0xb2>
 80096c8:	f109 0901 	add.w	r9, r9, #1
 80096cc:	e7d8      	b.n	8009680 <_printf_common+0x9c>
	...

080096d0 <_printf_i>:
 80096d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80096d8:	460c      	mov	r4, r1
 80096da:	7e09      	ldrb	r1, [r1, #24]
 80096dc:	b085      	sub	sp, #20
 80096de:	296e      	cmp	r1, #110	; 0x6e
 80096e0:	4617      	mov	r7, r2
 80096e2:	4606      	mov	r6, r0
 80096e4:	4698      	mov	r8, r3
 80096e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096e8:	f000 80b3 	beq.w	8009852 <_printf_i+0x182>
 80096ec:	d822      	bhi.n	8009734 <_printf_i+0x64>
 80096ee:	2963      	cmp	r1, #99	; 0x63
 80096f0:	d036      	beq.n	8009760 <_printf_i+0x90>
 80096f2:	d80a      	bhi.n	800970a <_printf_i+0x3a>
 80096f4:	2900      	cmp	r1, #0
 80096f6:	f000 80b9 	beq.w	800986c <_printf_i+0x19c>
 80096fa:	2958      	cmp	r1, #88	; 0x58
 80096fc:	f000 8083 	beq.w	8009806 <_printf_i+0x136>
 8009700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009704:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009708:	e032      	b.n	8009770 <_printf_i+0xa0>
 800970a:	2964      	cmp	r1, #100	; 0x64
 800970c:	d001      	beq.n	8009712 <_printf_i+0x42>
 800970e:	2969      	cmp	r1, #105	; 0x69
 8009710:	d1f6      	bne.n	8009700 <_printf_i+0x30>
 8009712:	6820      	ldr	r0, [r4, #0]
 8009714:	6813      	ldr	r3, [r2, #0]
 8009716:	0605      	lsls	r5, r0, #24
 8009718:	f103 0104 	add.w	r1, r3, #4
 800971c:	d52a      	bpl.n	8009774 <_printf_i+0xa4>
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6011      	str	r1, [r2, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	da03      	bge.n	800972e <_printf_i+0x5e>
 8009726:	222d      	movs	r2, #45	; 0x2d
 8009728:	425b      	negs	r3, r3
 800972a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800972e:	486f      	ldr	r0, [pc, #444]	; (80098ec <_printf_i+0x21c>)
 8009730:	220a      	movs	r2, #10
 8009732:	e039      	b.n	80097a8 <_printf_i+0xd8>
 8009734:	2973      	cmp	r1, #115	; 0x73
 8009736:	f000 809d 	beq.w	8009874 <_printf_i+0x1a4>
 800973a:	d808      	bhi.n	800974e <_printf_i+0x7e>
 800973c:	296f      	cmp	r1, #111	; 0x6f
 800973e:	d020      	beq.n	8009782 <_printf_i+0xb2>
 8009740:	2970      	cmp	r1, #112	; 0x70
 8009742:	d1dd      	bne.n	8009700 <_printf_i+0x30>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	f043 0320 	orr.w	r3, r3, #32
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	e003      	b.n	8009756 <_printf_i+0x86>
 800974e:	2975      	cmp	r1, #117	; 0x75
 8009750:	d017      	beq.n	8009782 <_printf_i+0xb2>
 8009752:	2978      	cmp	r1, #120	; 0x78
 8009754:	d1d4      	bne.n	8009700 <_printf_i+0x30>
 8009756:	2378      	movs	r3, #120	; 0x78
 8009758:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800975c:	4864      	ldr	r0, [pc, #400]	; (80098f0 <_printf_i+0x220>)
 800975e:	e055      	b.n	800980c <_printf_i+0x13c>
 8009760:	6813      	ldr	r3, [r2, #0]
 8009762:	1d19      	adds	r1, r3, #4
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6011      	str	r1, [r2, #0]
 8009768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800976c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009770:	2301      	movs	r3, #1
 8009772:	e08c      	b.n	800988e <_printf_i+0x1be>
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	6011      	str	r1, [r2, #0]
 8009778:	f010 0f40 	tst.w	r0, #64	; 0x40
 800977c:	bf18      	it	ne
 800977e:	b21b      	sxthne	r3, r3
 8009780:	e7cf      	b.n	8009722 <_printf_i+0x52>
 8009782:	6813      	ldr	r3, [r2, #0]
 8009784:	6825      	ldr	r5, [r4, #0]
 8009786:	1d18      	adds	r0, r3, #4
 8009788:	6010      	str	r0, [r2, #0]
 800978a:	0628      	lsls	r0, r5, #24
 800978c:	d501      	bpl.n	8009792 <_printf_i+0xc2>
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	e002      	b.n	8009798 <_printf_i+0xc8>
 8009792:	0668      	lsls	r0, r5, #25
 8009794:	d5fb      	bpl.n	800978e <_printf_i+0xbe>
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	4854      	ldr	r0, [pc, #336]	; (80098ec <_printf_i+0x21c>)
 800979a:	296f      	cmp	r1, #111	; 0x6f
 800979c:	bf14      	ite	ne
 800979e:	220a      	movne	r2, #10
 80097a0:	2208      	moveq	r2, #8
 80097a2:	2100      	movs	r1, #0
 80097a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097a8:	6865      	ldr	r5, [r4, #4]
 80097aa:	60a5      	str	r5, [r4, #8]
 80097ac:	2d00      	cmp	r5, #0
 80097ae:	f2c0 8095 	blt.w	80098dc <_printf_i+0x20c>
 80097b2:	6821      	ldr	r1, [r4, #0]
 80097b4:	f021 0104 	bic.w	r1, r1, #4
 80097b8:	6021      	str	r1, [r4, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d13d      	bne.n	800983a <_printf_i+0x16a>
 80097be:	2d00      	cmp	r5, #0
 80097c0:	f040 808e 	bne.w	80098e0 <_printf_i+0x210>
 80097c4:	4665      	mov	r5, ip
 80097c6:	2a08      	cmp	r2, #8
 80097c8:	d10b      	bne.n	80097e2 <_printf_i+0x112>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	07db      	lsls	r3, r3, #31
 80097ce:	d508      	bpl.n	80097e2 <_printf_i+0x112>
 80097d0:	6923      	ldr	r3, [r4, #16]
 80097d2:	6862      	ldr	r2, [r4, #4]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	bfde      	ittt	le
 80097d8:	2330      	movle	r3, #48	; 0x30
 80097da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097e2:	ebac 0305 	sub.w	r3, ip, r5
 80097e6:	6123      	str	r3, [r4, #16]
 80097e8:	f8cd 8000 	str.w	r8, [sp]
 80097ec:	463b      	mov	r3, r7
 80097ee:	aa03      	add	r2, sp, #12
 80097f0:	4621      	mov	r1, r4
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7ff fef6 	bl	80095e4 <_printf_common>
 80097f8:	3001      	adds	r0, #1
 80097fa:	d14d      	bne.n	8009898 <_printf_i+0x1c8>
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	b005      	add	sp, #20
 8009802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009806:	4839      	ldr	r0, [pc, #228]	; (80098ec <_printf_i+0x21c>)
 8009808:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800980c:	6813      	ldr	r3, [r2, #0]
 800980e:	6821      	ldr	r1, [r4, #0]
 8009810:	1d1d      	adds	r5, r3, #4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6015      	str	r5, [r2, #0]
 8009816:	060a      	lsls	r2, r1, #24
 8009818:	d50b      	bpl.n	8009832 <_printf_i+0x162>
 800981a:	07ca      	lsls	r2, r1, #31
 800981c:	bf44      	itt	mi
 800981e:	f041 0120 	orrmi.w	r1, r1, #32
 8009822:	6021      	strmi	r1, [r4, #0]
 8009824:	b91b      	cbnz	r3, 800982e <_printf_i+0x15e>
 8009826:	6822      	ldr	r2, [r4, #0]
 8009828:	f022 0220 	bic.w	r2, r2, #32
 800982c:	6022      	str	r2, [r4, #0]
 800982e:	2210      	movs	r2, #16
 8009830:	e7b7      	b.n	80097a2 <_printf_i+0xd2>
 8009832:	064d      	lsls	r5, r1, #25
 8009834:	bf48      	it	mi
 8009836:	b29b      	uxthmi	r3, r3
 8009838:	e7ef      	b.n	800981a <_printf_i+0x14a>
 800983a:	4665      	mov	r5, ip
 800983c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009840:	fb02 3311 	mls	r3, r2, r1, r3
 8009844:	5cc3      	ldrb	r3, [r0, r3]
 8009846:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800984a:	460b      	mov	r3, r1
 800984c:	2900      	cmp	r1, #0
 800984e:	d1f5      	bne.n	800983c <_printf_i+0x16c>
 8009850:	e7b9      	b.n	80097c6 <_printf_i+0xf6>
 8009852:	6813      	ldr	r3, [r2, #0]
 8009854:	6825      	ldr	r5, [r4, #0]
 8009856:	6961      	ldr	r1, [r4, #20]
 8009858:	1d18      	adds	r0, r3, #4
 800985a:	6010      	str	r0, [r2, #0]
 800985c:	0628      	lsls	r0, r5, #24
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	d501      	bpl.n	8009866 <_printf_i+0x196>
 8009862:	6019      	str	r1, [r3, #0]
 8009864:	e002      	b.n	800986c <_printf_i+0x19c>
 8009866:	066a      	lsls	r2, r5, #25
 8009868:	d5fb      	bpl.n	8009862 <_printf_i+0x192>
 800986a:	8019      	strh	r1, [r3, #0]
 800986c:	2300      	movs	r3, #0
 800986e:	6123      	str	r3, [r4, #16]
 8009870:	4665      	mov	r5, ip
 8009872:	e7b9      	b.n	80097e8 <_printf_i+0x118>
 8009874:	6813      	ldr	r3, [r2, #0]
 8009876:	1d19      	adds	r1, r3, #4
 8009878:	6011      	str	r1, [r2, #0]
 800987a:	681d      	ldr	r5, [r3, #0]
 800987c:	6862      	ldr	r2, [r4, #4]
 800987e:	2100      	movs	r1, #0
 8009880:	4628      	mov	r0, r5
 8009882:	f7f6 fcb5 	bl	80001f0 <memchr>
 8009886:	b108      	cbz	r0, 800988c <_printf_i+0x1bc>
 8009888:	1b40      	subs	r0, r0, r5
 800988a:	6060      	str	r0, [r4, #4]
 800988c:	6863      	ldr	r3, [r4, #4]
 800988e:	6123      	str	r3, [r4, #16]
 8009890:	2300      	movs	r3, #0
 8009892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009896:	e7a7      	b.n	80097e8 <_printf_i+0x118>
 8009898:	6923      	ldr	r3, [r4, #16]
 800989a:	462a      	mov	r2, r5
 800989c:	4639      	mov	r1, r7
 800989e:	4630      	mov	r0, r6
 80098a0:	47c0      	blx	r8
 80098a2:	3001      	adds	r0, #1
 80098a4:	d0aa      	beq.n	80097fc <_printf_i+0x12c>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	079b      	lsls	r3, r3, #30
 80098aa:	d413      	bmi.n	80098d4 <_printf_i+0x204>
 80098ac:	68e0      	ldr	r0, [r4, #12]
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	4298      	cmp	r0, r3
 80098b2:	bfb8      	it	lt
 80098b4:	4618      	movlt	r0, r3
 80098b6:	e7a3      	b.n	8009800 <_printf_i+0x130>
 80098b8:	2301      	movs	r3, #1
 80098ba:	464a      	mov	r2, r9
 80098bc:	4639      	mov	r1, r7
 80098be:	4630      	mov	r0, r6
 80098c0:	47c0      	blx	r8
 80098c2:	3001      	adds	r0, #1
 80098c4:	d09a      	beq.n	80097fc <_printf_i+0x12c>
 80098c6:	3501      	adds	r5, #1
 80098c8:	68e3      	ldr	r3, [r4, #12]
 80098ca:	9a03      	ldr	r2, [sp, #12]
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	42ab      	cmp	r3, r5
 80098d0:	dcf2      	bgt.n	80098b8 <_printf_i+0x1e8>
 80098d2:	e7eb      	b.n	80098ac <_printf_i+0x1dc>
 80098d4:	2500      	movs	r5, #0
 80098d6:	f104 0919 	add.w	r9, r4, #25
 80098da:	e7f5      	b.n	80098c8 <_printf_i+0x1f8>
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1ac      	bne.n	800983a <_printf_i+0x16a>
 80098e0:	7803      	ldrb	r3, [r0, #0]
 80098e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098ea:	e76c      	b.n	80097c6 <_printf_i+0xf6>
 80098ec:	0800f87e 	.word	0x0800f87e
 80098f0:	0800f88f 	.word	0x0800f88f

080098f4 <_scanf_float>:
 80098f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	469a      	mov	sl, r3
 80098fa:	688b      	ldr	r3, [r1, #8]
 80098fc:	4616      	mov	r6, r2
 80098fe:	1e5a      	subs	r2, r3, #1
 8009900:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009904:	b087      	sub	sp, #28
 8009906:	bf83      	ittte	hi
 8009908:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800990c:	189b      	addhi	r3, r3, r2
 800990e:	9301      	strhi	r3, [sp, #4]
 8009910:	2300      	movls	r3, #0
 8009912:	bf86      	itte	hi
 8009914:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009918:	608b      	strhi	r3, [r1, #8]
 800991a:	9301      	strls	r3, [sp, #4]
 800991c:	680b      	ldr	r3, [r1, #0]
 800991e:	4688      	mov	r8, r1
 8009920:	f04f 0b00 	mov.w	fp, #0
 8009924:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009928:	f848 3b1c 	str.w	r3, [r8], #28
 800992c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009930:	4607      	mov	r7, r0
 8009932:	460c      	mov	r4, r1
 8009934:	4645      	mov	r5, r8
 8009936:	465a      	mov	r2, fp
 8009938:	46d9      	mov	r9, fp
 800993a:	f8cd b008 	str.w	fp, [sp, #8]
 800993e:	68a1      	ldr	r1, [r4, #8]
 8009940:	b181      	cbz	r1, 8009964 <_scanf_float+0x70>
 8009942:	6833      	ldr	r3, [r6, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	2b49      	cmp	r3, #73	; 0x49
 8009948:	d071      	beq.n	8009a2e <_scanf_float+0x13a>
 800994a:	d84d      	bhi.n	80099e8 <_scanf_float+0xf4>
 800994c:	2b39      	cmp	r3, #57	; 0x39
 800994e:	d840      	bhi.n	80099d2 <_scanf_float+0xde>
 8009950:	2b31      	cmp	r3, #49	; 0x31
 8009952:	f080 8088 	bcs.w	8009a66 <_scanf_float+0x172>
 8009956:	2b2d      	cmp	r3, #45	; 0x2d
 8009958:	f000 8090 	beq.w	8009a7c <_scanf_float+0x188>
 800995c:	d815      	bhi.n	800998a <_scanf_float+0x96>
 800995e:	2b2b      	cmp	r3, #43	; 0x2b
 8009960:	f000 808c 	beq.w	8009a7c <_scanf_float+0x188>
 8009964:	f1b9 0f00 	cmp.w	r9, #0
 8009968:	d003      	beq.n	8009972 <_scanf_float+0x7e>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	3a01      	subs	r2, #1
 8009974:	2a01      	cmp	r2, #1
 8009976:	f200 80ea 	bhi.w	8009b4e <_scanf_float+0x25a>
 800997a:	4545      	cmp	r5, r8
 800997c:	f200 80dc 	bhi.w	8009b38 <_scanf_float+0x244>
 8009980:	2601      	movs	r6, #1
 8009982:	4630      	mov	r0, r6
 8009984:	b007      	add	sp, #28
 8009986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998a:	2b2e      	cmp	r3, #46	; 0x2e
 800998c:	f000 809f 	beq.w	8009ace <_scanf_float+0x1da>
 8009990:	2b30      	cmp	r3, #48	; 0x30
 8009992:	d1e7      	bne.n	8009964 <_scanf_float+0x70>
 8009994:	6820      	ldr	r0, [r4, #0]
 8009996:	f410 7f80 	tst.w	r0, #256	; 0x100
 800999a:	d064      	beq.n	8009a66 <_scanf_float+0x172>
 800999c:	9b01      	ldr	r3, [sp, #4]
 800999e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80099a2:	6020      	str	r0, [r4, #0]
 80099a4:	f109 0901 	add.w	r9, r9, #1
 80099a8:	b11b      	cbz	r3, 80099b2 <_scanf_float+0xbe>
 80099aa:	3b01      	subs	r3, #1
 80099ac:	3101      	adds	r1, #1
 80099ae:	9301      	str	r3, [sp, #4]
 80099b0:	60a1      	str	r1, [r4, #8]
 80099b2:	68a3      	ldr	r3, [r4, #8]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	60a3      	str	r3, [r4, #8]
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	3301      	adds	r3, #1
 80099bc:	6123      	str	r3, [r4, #16]
 80099be:	6873      	ldr	r3, [r6, #4]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	6073      	str	r3, [r6, #4]
 80099c6:	f340 80ac 	ble.w	8009b22 <_scanf_float+0x22e>
 80099ca:	6833      	ldr	r3, [r6, #0]
 80099cc:	3301      	adds	r3, #1
 80099ce:	6033      	str	r3, [r6, #0]
 80099d0:	e7b5      	b.n	800993e <_scanf_float+0x4a>
 80099d2:	2b45      	cmp	r3, #69	; 0x45
 80099d4:	f000 8085 	beq.w	8009ae2 <_scanf_float+0x1ee>
 80099d8:	2b46      	cmp	r3, #70	; 0x46
 80099da:	d06a      	beq.n	8009ab2 <_scanf_float+0x1be>
 80099dc:	2b41      	cmp	r3, #65	; 0x41
 80099de:	d1c1      	bne.n	8009964 <_scanf_float+0x70>
 80099e0:	2a01      	cmp	r2, #1
 80099e2:	d1bf      	bne.n	8009964 <_scanf_float+0x70>
 80099e4:	2202      	movs	r2, #2
 80099e6:	e046      	b.n	8009a76 <_scanf_float+0x182>
 80099e8:	2b65      	cmp	r3, #101	; 0x65
 80099ea:	d07a      	beq.n	8009ae2 <_scanf_float+0x1ee>
 80099ec:	d818      	bhi.n	8009a20 <_scanf_float+0x12c>
 80099ee:	2b54      	cmp	r3, #84	; 0x54
 80099f0:	d066      	beq.n	8009ac0 <_scanf_float+0x1cc>
 80099f2:	d811      	bhi.n	8009a18 <_scanf_float+0x124>
 80099f4:	2b4e      	cmp	r3, #78	; 0x4e
 80099f6:	d1b5      	bne.n	8009964 <_scanf_float+0x70>
 80099f8:	2a00      	cmp	r2, #0
 80099fa:	d146      	bne.n	8009a8a <_scanf_float+0x196>
 80099fc:	f1b9 0f00 	cmp.w	r9, #0
 8009a00:	d145      	bne.n	8009a8e <_scanf_float+0x19a>
 8009a02:	6821      	ldr	r1, [r4, #0]
 8009a04:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009a08:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009a0c:	d13f      	bne.n	8009a8e <_scanf_float+0x19a>
 8009a0e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009a12:	6021      	str	r1, [r4, #0]
 8009a14:	2201      	movs	r2, #1
 8009a16:	e02e      	b.n	8009a76 <_scanf_float+0x182>
 8009a18:	2b59      	cmp	r3, #89	; 0x59
 8009a1a:	d01e      	beq.n	8009a5a <_scanf_float+0x166>
 8009a1c:	2b61      	cmp	r3, #97	; 0x61
 8009a1e:	e7de      	b.n	80099de <_scanf_float+0xea>
 8009a20:	2b6e      	cmp	r3, #110	; 0x6e
 8009a22:	d0e9      	beq.n	80099f8 <_scanf_float+0x104>
 8009a24:	d815      	bhi.n	8009a52 <_scanf_float+0x15e>
 8009a26:	2b66      	cmp	r3, #102	; 0x66
 8009a28:	d043      	beq.n	8009ab2 <_scanf_float+0x1be>
 8009a2a:	2b69      	cmp	r3, #105	; 0x69
 8009a2c:	d19a      	bne.n	8009964 <_scanf_float+0x70>
 8009a2e:	f1bb 0f00 	cmp.w	fp, #0
 8009a32:	d138      	bne.n	8009aa6 <_scanf_float+0x1b2>
 8009a34:	f1b9 0f00 	cmp.w	r9, #0
 8009a38:	d197      	bne.n	800996a <_scanf_float+0x76>
 8009a3a:	6821      	ldr	r1, [r4, #0]
 8009a3c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009a40:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009a44:	d195      	bne.n	8009972 <_scanf_float+0x7e>
 8009a46:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009a4a:	6021      	str	r1, [r4, #0]
 8009a4c:	f04f 0b01 	mov.w	fp, #1
 8009a50:	e011      	b.n	8009a76 <_scanf_float+0x182>
 8009a52:	2b74      	cmp	r3, #116	; 0x74
 8009a54:	d034      	beq.n	8009ac0 <_scanf_float+0x1cc>
 8009a56:	2b79      	cmp	r3, #121	; 0x79
 8009a58:	d184      	bne.n	8009964 <_scanf_float+0x70>
 8009a5a:	f1bb 0f07 	cmp.w	fp, #7
 8009a5e:	d181      	bne.n	8009964 <_scanf_float+0x70>
 8009a60:	f04f 0b08 	mov.w	fp, #8
 8009a64:	e007      	b.n	8009a76 <_scanf_float+0x182>
 8009a66:	eb12 0f0b 	cmn.w	r2, fp
 8009a6a:	f47f af7b 	bne.w	8009964 <_scanf_float+0x70>
 8009a6e:	6821      	ldr	r1, [r4, #0]
 8009a70:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009a74:	6021      	str	r1, [r4, #0]
 8009a76:	702b      	strb	r3, [r5, #0]
 8009a78:	3501      	adds	r5, #1
 8009a7a:	e79a      	b.n	80099b2 <_scanf_float+0xbe>
 8009a7c:	6821      	ldr	r1, [r4, #0]
 8009a7e:	0608      	lsls	r0, r1, #24
 8009a80:	f57f af70 	bpl.w	8009964 <_scanf_float+0x70>
 8009a84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009a88:	e7f4      	b.n	8009a74 <_scanf_float+0x180>
 8009a8a:	2a02      	cmp	r2, #2
 8009a8c:	d047      	beq.n	8009b1e <_scanf_float+0x22a>
 8009a8e:	f1bb 0f01 	cmp.w	fp, #1
 8009a92:	d003      	beq.n	8009a9c <_scanf_float+0x1a8>
 8009a94:	f1bb 0f04 	cmp.w	fp, #4
 8009a98:	f47f af64 	bne.w	8009964 <_scanf_float+0x70>
 8009a9c:	f10b 0b01 	add.w	fp, fp, #1
 8009aa0:	fa5f fb8b 	uxtb.w	fp, fp
 8009aa4:	e7e7      	b.n	8009a76 <_scanf_float+0x182>
 8009aa6:	f1bb 0f03 	cmp.w	fp, #3
 8009aaa:	d0f7      	beq.n	8009a9c <_scanf_float+0x1a8>
 8009aac:	f1bb 0f05 	cmp.w	fp, #5
 8009ab0:	e7f2      	b.n	8009a98 <_scanf_float+0x1a4>
 8009ab2:	f1bb 0f02 	cmp.w	fp, #2
 8009ab6:	f47f af55 	bne.w	8009964 <_scanf_float+0x70>
 8009aba:	f04f 0b03 	mov.w	fp, #3
 8009abe:	e7da      	b.n	8009a76 <_scanf_float+0x182>
 8009ac0:	f1bb 0f06 	cmp.w	fp, #6
 8009ac4:	f47f af4e 	bne.w	8009964 <_scanf_float+0x70>
 8009ac8:	f04f 0b07 	mov.w	fp, #7
 8009acc:	e7d3      	b.n	8009a76 <_scanf_float+0x182>
 8009ace:	6821      	ldr	r1, [r4, #0]
 8009ad0:	0588      	lsls	r0, r1, #22
 8009ad2:	f57f af47 	bpl.w	8009964 <_scanf_float+0x70>
 8009ad6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009ada:	6021      	str	r1, [r4, #0]
 8009adc:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ae0:	e7c9      	b.n	8009a76 <_scanf_float+0x182>
 8009ae2:	6821      	ldr	r1, [r4, #0]
 8009ae4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009ae8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009aec:	d006      	beq.n	8009afc <_scanf_float+0x208>
 8009aee:	0548      	lsls	r0, r1, #21
 8009af0:	f57f af38 	bpl.w	8009964 <_scanf_float+0x70>
 8009af4:	f1b9 0f00 	cmp.w	r9, #0
 8009af8:	f43f af3b 	beq.w	8009972 <_scanf_float+0x7e>
 8009afc:	0588      	lsls	r0, r1, #22
 8009afe:	bf58      	it	pl
 8009b00:	9802      	ldrpl	r0, [sp, #8]
 8009b02:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009b06:	bf58      	it	pl
 8009b08:	eba9 0000 	subpl.w	r0, r9, r0
 8009b0c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009b10:	bf58      	it	pl
 8009b12:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009b16:	6021      	str	r1, [r4, #0]
 8009b18:	f04f 0900 	mov.w	r9, #0
 8009b1c:	e7ab      	b.n	8009a76 <_scanf_float+0x182>
 8009b1e:	2203      	movs	r2, #3
 8009b20:	e7a9      	b.n	8009a76 <_scanf_float+0x182>
 8009b22:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b26:	9205      	str	r2, [sp, #20]
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	4798      	blx	r3
 8009b2e:	9a05      	ldr	r2, [sp, #20]
 8009b30:	2800      	cmp	r0, #0
 8009b32:	f43f af04 	beq.w	800993e <_scanf_float+0x4a>
 8009b36:	e715      	b.n	8009964 <_scanf_float+0x70>
 8009b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009b40:	4632      	mov	r2, r6
 8009b42:	4638      	mov	r0, r7
 8009b44:	4798      	blx	r3
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	6123      	str	r3, [r4, #16]
 8009b4c:	e715      	b.n	800997a <_scanf_float+0x86>
 8009b4e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009b52:	2b06      	cmp	r3, #6
 8009b54:	d80a      	bhi.n	8009b6c <_scanf_float+0x278>
 8009b56:	f1bb 0f02 	cmp.w	fp, #2
 8009b5a:	d968      	bls.n	8009c2e <_scanf_float+0x33a>
 8009b5c:	f1ab 0b03 	sub.w	fp, fp, #3
 8009b60:	fa5f fb8b 	uxtb.w	fp, fp
 8009b64:	eba5 0b0b 	sub.w	fp, r5, fp
 8009b68:	455d      	cmp	r5, fp
 8009b6a:	d14b      	bne.n	8009c04 <_scanf_float+0x310>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	05da      	lsls	r2, r3, #23
 8009b70:	d51f      	bpl.n	8009bb2 <_scanf_float+0x2be>
 8009b72:	055b      	lsls	r3, r3, #21
 8009b74:	d468      	bmi.n	8009c48 <_scanf_float+0x354>
 8009b76:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	2965      	cmp	r1, #101	; 0x65
 8009b7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b82:	f105 3bff 	add.w	fp, r5, #4294967295
 8009b86:	6123      	str	r3, [r4, #16]
 8009b88:	d00d      	beq.n	8009ba6 <_scanf_float+0x2b2>
 8009b8a:	2945      	cmp	r1, #69	; 0x45
 8009b8c:	d00b      	beq.n	8009ba6 <_scanf_float+0x2b2>
 8009b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b92:	4632      	mov	r2, r6
 8009b94:	4638      	mov	r0, r7
 8009b96:	4798      	blx	r3
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	f1a5 0b02 	sub.w	fp, r5, #2
 8009ba4:	6123      	str	r3, [r4, #16]
 8009ba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009baa:	4632      	mov	r2, r6
 8009bac:	4638      	mov	r0, r7
 8009bae:	4798      	blx	r3
 8009bb0:	465d      	mov	r5, fp
 8009bb2:	6826      	ldr	r6, [r4, #0]
 8009bb4:	f016 0610 	ands.w	r6, r6, #16
 8009bb8:	d17a      	bne.n	8009cb0 <_scanf_float+0x3bc>
 8009bba:	702e      	strb	r6, [r5, #0]
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc6:	d142      	bne.n	8009c4e <_scanf_float+0x35a>
 8009bc8:	9b02      	ldr	r3, [sp, #8]
 8009bca:	eba9 0303 	sub.w	r3, r9, r3
 8009bce:	425a      	negs	r2, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d149      	bne.n	8009c68 <_scanf_float+0x374>
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4641      	mov	r1, r8
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f000 febd 	bl	800a958 <_strtod_r>
 8009bde:	6825      	ldr	r5, [r4, #0]
 8009be0:	f8da 3000 	ldr.w	r3, [sl]
 8009be4:	f015 0f02 	tst.w	r5, #2
 8009be8:	f103 0204 	add.w	r2, r3, #4
 8009bec:	ec59 8b10 	vmov	r8, r9, d0
 8009bf0:	f8ca 2000 	str.w	r2, [sl]
 8009bf4:	d043      	beq.n	8009c7e <_scanf_float+0x38a>
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	e9c3 8900 	strd	r8, r9, [r3]
 8009bfc:	68e3      	ldr	r3, [r4, #12]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60e3      	str	r3, [r4, #12]
 8009c02:	e6be      	b.n	8009982 <_scanf_float+0x8e>
 8009c04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	4638      	mov	r0, r7
 8009c10:	4798      	blx	r3
 8009c12:	6923      	ldr	r3, [r4, #16]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	6123      	str	r3, [r4, #16]
 8009c18:	e7a6      	b.n	8009b68 <_scanf_float+0x274>
 8009c1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c1e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009c22:	4632      	mov	r2, r6
 8009c24:	4638      	mov	r0, r7
 8009c26:	4798      	blx	r3
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	6123      	str	r3, [r4, #16]
 8009c2e:	4545      	cmp	r5, r8
 8009c30:	d8f3      	bhi.n	8009c1a <_scanf_float+0x326>
 8009c32:	e6a5      	b.n	8009980 <_scanf_float+0x8c>
 8009c34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c38:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009c3c:	4632      	mov	r2, r6
 8009c3e:	4638      	mov	r0, r7
 8009c40:	4798      	blx	r3
 8009c42:	6923      	ldr	r3, [r4, #16]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	6123      	str	r3, [r4, #16]
 8009c48:	4545      	cmp	r5, r8
 8009c4a:	d8f3      	bhi.n	8009c34 <_scanf_float+0x340>
 8009c4c:	e698      	b.n	8009980 <_scanf_float+0x8c>
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d0bf      	beq.n	8009bd4 <_scanf_float+0x2e0>
 8009c54:	9904      	ldr	r1, [sp, #16]
 8009c56:	230a      	movs	r3, #10
 8009c58:	4632      	mov	r2, r6
 8009c5a:	3101      	adds	r1, #1
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f000 ff5b 	bl	800ab18 <_strtol_r>
 8009c62:	9b03      	ldr	r3, [sp, #12]
 8009c64:	9d04      	ldr	r5, [sp, #16]
 8009c66:	1ac2      	subs	r2, r0, r3
 8009c68:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009c6c:	429d      	cmp	r5, r3
 8009c6e:	bf28      	it	cs
 8009c70:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009c74:	490f      	ldr	r1, [pc, #60]	; (8009cb4 <_scanf_float+0x3c0>)
 8009c76:	4628      	mov	r0, r5
 8009c78:	f000 f83c 	bl	8009cf4 <siprintf>
 8009c7c:	e7aa      	b.n	8009bd4 <_scanf_float+0x2e0>
 8009c7e:	f015 0504 	ands.w	r5, r5, #4
 8009c82:	d1b8      	bne.n	8009bf6 <_scanf_float+0x302>
 8009c84:	681f      	ldr	r7, [r3, #0]
 8009c86:	ee10 2a10 	vmov	r2, s0
 8009c8a:	464b      	mov	r3, r9
 8009c8c:	ee10 0a10 	vmov	r0, s0
 8009c90:	4649      	mov	r1, r9
 8009c92:	f7f6 ff53 	bl	8000b3c <__aeabi_dcmpun>
 8009c96:	b128      	cbz	r0, 8009ca4 <_scanf_float+0x3b0>
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f000 f825 	bl	8009ce8 <nanf>
 8009c9e:	ed87 0a00 	vstr	s0, [r7]
 8009ca2:	e7ab      	b.n	8009bfc <_scanf_float+0x308>
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	4649      	mov	r1, r9
 8009ca8:	f7f6 ffa6 	bl	8000bf8 <__aeabi_d2f>
 8009cac:	6038      	str	r0, [r7, #0]
 8009cae:	e7a5      	b.n	8009bfc <_scanf_float+0x308>
 8009cb0:	2600      	movs	r6, #0
 8009cb2:	e666      	b.n	8009982 <_scanf_float+0x8e>
 8009cb4:	0800f8a0 	.word	0x0800f8a0

08009cb8 <iprintf>:
 8009cb8:	b40f      	push	{r0, r1, r2, r3}
 8009cba:	4b0a      	ldr	r3, [pc, #40]	; (8009ce4 <iprintf+0x2c>)
 8009cbc:	b513      	push	{r0, r1, r4, lr}
 8009cbe:	681c      	ldr	r4, [r3, #0]
 8009cc0:	b124      	cbz	r4, 8009ccc <iprintf+0x14>
 8009cc2:	69a3      	ldr	r3, [r4, #24]
 8009cc4:	b913      	cbnz	r3, 8009ccc <iprintf+0x14>
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f001 fdd2 	bl	800b870 <__sinit>
 8009ccc:	ab05      	add	r3, sp, #20
 8009cce:	9a04      	ldr	r2, [sp, #16]
 8009cd0:	68a1      	ldr	r1, [r4, #8]
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f002 ffe5 	bl	800cca4 <_vfiprintf_r>
 8009cda:	b002      	add	sp, #8
 8009cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce0:	b004      	add	sp, #16
 8009ce2:	4770      	bx	lr
 8009ce4:	2000000c 	.word	0x2000000c

08009ce8 <nanf>:
 8009ce8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009cf0 <nanf+0x8>
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	7fc00000 	.word	0x7fc00000

08009cf4 <siprintf>:
 8009cf4:	b40e      	push	{r1, r2, r3}
 8009cf6:	b500      	push	{lr}
 8009cf8:	b09c      	sub	sp, #112	; 0x70
 8009cfa:	ab1d      	add	r3, sp, #116	; 0x74
 8009cfc:	9002      	str	r0, [sp, #8]
 8009cfe:	9006      	str	r0, [sp, #24]
 8009d00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d04:	4809      	ldr	r0, [pc, #36]	; (8009d2c <siprintf+0x38>)
 8009d06:	9107      	str	r1, [sp, #28]
 8009d08:	9104      	str	r1, [sp, #16]
 8009d0a:	4909      	ldr	r1, [pc, #36]	; (8009d30 <siprintf+0x3c>)
 8009d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d10:	9105      	str	r1, [sp, #20]
 8009d12:	6800      	ldr	r0, [r0, #0]
 8009d14:	9301      	str	r3, [sp, #4]
 8009d16:	a902      	add	r1, sp, #8
 8009d18:	f002 fea2 	bl	800ca60 <_svfiprintf_r>
 8009d1c:	9b02      	ldr	r3, [sp, #8]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
 8009d22:	b01c      	add	sp, #112	; 0x70
 8009d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d28:	b003      	add	sp, #12
 8009d2a:	4770      	bx	lr
 8009d2c:	2000000c 	.word	0x2000000c
 8009d30:	ffff0208 	.word	0xffff0208

08009d34 <sulp>:
 8009d34:	b570      	push	{r4, r5, r6, lr}
 8009d36:	4604      	mov	r4, r0
 8009d38:	460d      	mov	r5, r1
 8009d3a:	ec45 4b10 	vmov	d0, r4, r5
 8009d3e:	4616      	mov	r6, r2
 8009d40:	f002 fc4a 	bl	800c5d8 <__ulp>
 8009d44:	ec51 0b10 	vmov	r0, r1, d0
 8009d48:	b17e      	cbz	r6, 8009d6a <sulp+0x36>
 8009d4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dd09      	ble.n	8009d6a <sulp+0x36>
 8009d56:	051b      	lsls	r3, r3, #20
 8009d58:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009d5c:	2400      	movs	r4, #0
 8009d5e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009d62:	4622      	mov	r2, r4
 8009d64:	462b      	mov	r3, r5
 8009d66:	f7f6 fc4f 	bl	8000608 <__aeabi_dmul>
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
 8009d6c:	0000      	movs	r0, r0
	...

08009d70 <_strtod_l>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	461f      	mov	r7, r3
 8009d76:	b0a1      	sub	sp, #132	; 0x84
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4681      	mov	r9, r0
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	460e      	mov	r6, r1
 8009d80:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d82:	931c      	str	r3, [sp, #112]	; 0x70
 8009d84:	f002 f927 	bl	800bfd6 <__localeconv_l>
 8009d88:	4680      	mov	r8, r0
 8009d8a:	6800      	ldr	r0, [r0, #0]
 8009d8c:	f7f6 fa28 	bl	80001e0 <strlen>
 8009d90:	f04f 0a00 	mov.w	sl, #0
 8009d94:	4604      	mov	r4, r0
 8009d96:	f04f 0b00 	mov.w	fp, #0
 8009d9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8009d9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009d9e:	781a      	ldrb	r2, [r3, #0]
 8009da0:	2a0d      	cmp	r2, #13
 8009da2:	d832      	bhi.n	8009e0a <_strtod_l+0x9a>
 8009da4:	2a09      	cmp	r2, #9
 8009da6:	d236      	bcs.n	8009e16 <_strtod_l+0xa6>
 8009da8:	2a00      	cmp	r2, #0
 8009daa:	d03e      	beq.n	8009e2a <_strtod_l+0xba>
 8009dac:	2300      	movs	r3, #0
 8009dae:	930d      	str	r3, [sp, #52]	; 0x34
 8009db0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009db2:	782b      	ldrb	r3, [r5, #0]
 8009db4:	2b30      	cmp	r3, #48	; 0x30
 8009db6:	f040 80ac 	bne.w	8009f12 <_strtod_l+0x1a2>
 8009dba:	786b      	ldrb	r3, [r5, #1]
 8009dbc:	2b58      	cmp	r3, #88	; 0x58
 8009dbe:	d001      	beq.n	8009dc4 <_strtod_l+0x54>
 8009dc0:	2b78      	cmp	r3, #120	; 0x78
 8009dc2:	d167      	bne.n	8009e94 <_strtod_l+0x124>
 8009dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dc6:	9301      	str	r3, [sp, #4]
 8009dc8:	ab1c      	add	r3, sp, #112	; 0x70
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	9702      	str	r7, [sp, #8]
 8009dce:	ab1d      	add	r3, sp, #116	; 0x74
 8009dd0:	4a88      	ldr	r2, [pc, #544]	; (8009ff4 <_strtod_l+0x284>)
 8009dd2:	a91b      	add	r1, sp, #108	; 0x6c
 8009dd4:	4648      	mov	r0, r9
 8009dd6:	f001 fe24 	bl	800ba22 <__gethex>
 8009dda:	f010 0407 	ands.w	r4, r0, #7
 8009dde:	4606      	mov	r6, r0
 8009de0:	d005      	beq.n	8009dee <_strtod_l+0x7e>
 8009de2:	2c06      	cmp	r4, #6
 8009de4:	d12b      	bne.n	8009e3e <_strtod_l+0xce>
 8009de6:	3501      	adds	r5, #1
 8009de8:	2300      	movs	r3, #0
 8009dea:	951b      	str	r5, [sp, #108]	; 0x6c
 8009dec:	930d      	str	r3, [sp, #52]	; 0x34
 8009dee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f040 859a 	bne.w	800a92a <_strtod_l+0xbba>
 8009df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009df8:	b1e3      	cbz	r3, 8009e34 <_strtod_l+0xc4>
 8009dfa:	4652      	mov	r2, sl
 8009dfc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e00:	ec43 2b10 	vmov	d0, r2, r3
 8009e04:	b021      	add	sp, #132	; 0x84
 8009e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0a:	2a2b      	cmp	r2, #43	; 0x2b
 8009e0c:	d015      	beq.n	8009e3a <_strtod_l+0xca>
 8009e0e:	2a2d      	cmp	r2, #45	; 0x2d
 8009e10:	d004      	beq.n	8009e1c <_strtod_l+0xac>
 8009e12:	2a20      	cmp	r2, #32
 8009e14:	d1ca      	bne.n	8009dac <_strtod_l+0x3c>
 8009e16:	3301      	adds	r3, #1
 8009e18:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e1a:	e7bf      	b.n	8009d9c <_strtod_l+0x2c>
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	920d      	str	r2, [sp, #52]	; 0x34
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e24:	785b      	ldrb	r3, [r3, #1]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1c2      	bne.n	8009db0 <_strtod_l+0x40>
 8009e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f040 8579 	bne.w	800a926 <_strtod_l+0xbb6>
 8009e34:	4652      	mov	r2, sl
 8009e36:	465b      	mov	r3, fp
 8009e38:	e7e2      	b.n	8009e00 <_strtod_l+0x90>
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	e7ef      	b.n	8009e1e <_strtod_l+0xae>
 8009e3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e40:	b13a      	cbz	r2, 8009e52 <_strtod_l+0xe2>
 8009e42:	2135      	movs	r1, #53	; 0x35
 8009e44:	a81e      	add	r0, sp, #120	; 0x78
 8009e46:	f002 fcbf 	bl	800c7c8 <__copybits>
 8009e4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e4c:	4648      	mov	r0, r9
 8009e4e:	f002 f92c 	bl	800c0aa <_Bfree>
 8009e52:	3c01      	subs	r4, #1
 8009e54:	2c04      	cmp	r4, #4
 8009e56:	d806      	bhi.n	8009e66 <_strtod_l+0xf6>
 8009e58:	e8df f004 	tbb	[pc, r4]
 8009e5c:	1714030a 	.word	0x1714030a
 8009e60:	0a          	.byte	0x0a
 8009e61:	00          	.byte	0x00
 8009e62:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8009e66:	0730      	lsls	r0, r6, #28
 8009e68:	d5c1      	bpl.n	8009dee <_strtod_l+0x7e>
 8009e6a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009e6e:	e7be      	b.n	8009dee <_strtod_l+0x7e>
 8009e70:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8009e74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009e76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e82:	e7f0      	b.n	8009e66 <_strtod_l+0xf6>
 8009e84:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009ff8 <_strtod_l+0x288>
 8009e88:	e7ed      	b.n	8009e66 <_strtod_l+0xf6>
 8009e8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009e8e:	f04f 3aff 	mov.w	sl, #4294967295
 8009e92:	e7e8      	b.n	8009e66 <_strtod_l+0xf6>
 8009e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e9a:	785b      	ldrb	r3, [r3, #1]
 8009e9c:	2b30      	cmp	r3, #48	; 0x30
 8009e9e:	d0f9      	beq.n	8009e94 <_strtod_l+0x124>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0a4      	beq.n	8009dee <_strtod_l+0x7e>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	9306      	str	r3, [sp, #24]
 8009eaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009eac:	9308      	str	r3, [sp, #32]
 8009eae:	9507      	str	r5, [sp, #28]
 8009eb0:	9505      	str	r5, [sp, #20]
 8009eb2:	220a      	movs	r2, #10
 8009eb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009eb6:	7807      	ldrb	r7, [r0, #0]
 8009eb8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009ebc:	b2d9      	uxtb	r1, r3
 8009ebe:	2909      	cmp	r1, #9
 8009ec0:	d929      	bls.n	8009f16 <_strtod_l+0x1a6>
 8009ec2:	4622      	mov	r2, r4
 8009ec4:	f8d8 1000 	ldr.w	r1, [r8]
 8009ec8:	f003 f855 	bl	800cf76 <strncmp>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d031      	beq.n	8009f34 <_strtod_l+0x1c4>
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	9c05      	ldr	r4, [sp, #20]
 8009ed4:	9004      	str	r0, [sp, #16]
 8009ed6:	463b      	mov	r3, r7
 8009ed8:	4602      	mov	r2, r0
 8009eda:	2b65      	cmp	r3, #101	; 0x65
 8009edc:	d001      	beq.n	8009ee2 <_strtod_l+0x172>
 8009ede:	2b45      	cmp	r3, #69	; 0x45
 8009ee0:	d114      	bne.n	8009f0c <_strtod_l+0x19c>
 8009ee2:	b924      	cbnz	r4, 8009eee <_strtod_l+0x17e>
 8009ee4:	b910      	cbnz	r0, 8009eec <_strtod_l+0x17c>
 8009ee6:	9b06      	ldr	r3, [sp, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d09e      	beq.n	8009e2a <_strtod_l+0xba>
 8009eec:	2400      	movs	r4, #0
 8009eee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009ef0:	1c73      	adds	r3, r6, #1
 8009ef2:	931b      	str	r3, [sp, #108]	; 0x6c
 8009ef4:	7873      	ldrb	r3, [r6, #1]
 8009ef6:	2b2b      	cmp	r3, #43	; 0x2b
 8009ef8:	d078      	beq.n	8009fec <_strtod_l+0x27c>
 8009efa:	2b2d      	cmp	r3, #45	; 0x2d
 8009efc:	d070      	beq.n	8009fe0 <_strtod_l+0x270>
 8009efe:	f04f 0c00 	mov.w	ip, #0
 8009f02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009f06:	2f09      	cmp	r7, #9
 8009f08:	d97c      	bls.n	800a004 <_strtod_l+0x294>
 8009f0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8009f0c:	f04f 0e00 	mov.w	lr, #0
 8009f10:	e09a      	b.n	800a048 <_strtod_l+0x2d8>
 8009f12:	2300      	movs	r3, #0
 8009f14:	e7c7      	b.n	8009ea6 <_strtod_l+0x136>
 8009f16:	9905      	ldr	r1, [sp, #20]
 8009f18:	2908      	cmp	r1, #8
 8009f1a:	bfdd      	ittte	le
 8009f1c:	9907      	ldrle	r1, [sp, #28]
 8009f1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f22:	9307      	strle	r3, [sp, #28]
 8009f24:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	9305      	str	r3, [sp, #20]
 8009f30:	901b      	str	r0, [sp, #108]	; 0x6c
 8009f32:	e7bf      	b.n	8009eb4 <_strtod_l+0x144>
 8009f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f36:	191a      	adds	r2, r3, r4
 8009f38:	921b      	str	r2, [sp, #108]	; 0x6c
 8009f3a:	9a05      	ldr	r2, [sp, #20]
 8009f3c:	5d1b      	ldrb	r3, [r3, r4]
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	d037      	beq.n	8009fb2 <_strtod_l+0x242>
 8009f42:	9c05      	ldr	r4, [sp, #20]
 8009f44:	4602      	mov	r2, r0
 8009f46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009f4a:	2909      	cmp	r1, #9
 8009f4c:	d913      	bls.n	8009f76 <_strtod_l+0x206>
 8009f4e:	2101      	movs	r1, #1
 8009f50:	9104      	str	r1, [sp, #16]
 8009f52:	e7c2      	b.n	8009eda <_strtod_l+0x16a>
 8009f54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	921b      	str	r2, [sp, #108]	; 0x6c
 8009f5a:	785b      	ldrb	r3, [r3, #1]
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	2b30      	cmp	r3, #48	; 0x30
 8009f60:	d0f8      	beq.n	8009f54 <_strtod_l+0x1e4>
 8009f62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009f66:	2a08      	cmp	r2, #8
 8009f68:	f200 84e4 	bhi.w	800a934 <_strtod_l+0xbc4>
 8009f6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009f6e:	9208      	str	r2, [sp, #32]
 8009f70:	4602      	mov	r2, r0
 8009f72:	2000      	movs	r0, #0
 8009f74:	4604      	mov	r4, r0
 8009f76:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009f7a:	f100 0101 	add.w	r1, r0, #1
 8009f7e:	d012      	beq.n	8009fa6 <_strtod_l+0x236>
 8009f80:	440a      	add	r2, r1
 8009f82:	eb00 0c04 	add.w	ip, r0, r4
 8009f86:	4621      	mov	r1, r4
 8009f88:	270a      	movs	r7, #10
 8009f8a:	458c      	cmp	ip, r1
 8009f8c:	d113      	bne.n	8009fb6 <_strtod_l+0x246>
 8009f8e:	1821      	adds	r1, r4, r0
 8009f90:	2908      	cmp	r1, #8
 8009f92:	f104 0401 	add.w	r4, r4, #1
 8009f96:	4404      	add	r4, r0
 8009f98:	dc19      	bgt.n	8009fce <_strtod_l+0x25e>
 8009f9a:	9b07      	ldr	r3, [sp, #28]
 8009f9c:	210a      	movs	r1, #10
 8009f9e:	fb01 e303 	mla	r3, r1, r3, lr
 8009fa2:	9307      	str	r3, [sp, #28]
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fa8:	1c58      	adds	r0, r3, #1
 8009faa:	901b      	str	r0, [sp, #108]	; 0x6c
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	4608      	mov	r0, r1
 8009fb0:	e7c9      	b.n	8009f46 <_strtod_l+0x1d6>
 8009fb2:	9805      	ldr	r0, [sp, #20]
 8009fb4:	e7d3      	b.n	8009f5e <_strtod_l+0x1ee>
 8009fb6:	2908      	cmp	r1, #8
 8009fb8:	f101 0101 	add.w	r1, r1, #1
 8009fbc:	dc03      	bgt.n	8009fc6 <_strtod_l+0x256>
 8009fbe:	9b07      	ldr	r3, [sp, #28]
 8009fc0:	437b      	muls	r3, r7
 8009fc2:	9307      	str	r3, [sp, #28]
 8009fc4:	e7e1      	b.n	8009f8a <_strtod_l+0x21a>
 8009fc6:	2910      	cmp	r1, #16
 8009fc8:	bfd8      	it	le
 8009fca:	437d      	mulle	r5, r7
 8009fcc:	e7dd      	b.n	8009f8a <_strtod_l+0x21a>
 8009fce:	2c10      	cmp	r4, #16
 8009fd0:	bfdc      	itt	le
 8009fd2:	210a      	movle	r1, #10
 8009fd4:	fb01 e505 	mlale	r5, r1, r5, lr
 8009fd8:	e7e4      	b.n	8009fa4 <_strtod_l+0x234>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	9304      	str	r3, [sp, #16]
 8009fde:	e781      	b.n	8009ee4 <_strtod_l+0x174>
 8009fe0:	f04f 0c01 	mov.w	ip, #1
 8009fe4:	1cb3      	adds	r3, r6, #2
 8009fe6:	931b      	str	r3, [sp, #108]	; 0x6c
 8009fe8:	78b3      	ldrb	r3, [r6, #2]
 8009fea:	e78a      	b.n	8009f02 <_strtod_l+0x192>
 8009fec:	f04f 0c00 	mov.w	ip, #0
 8009ff0:	e7f8      	b.n	8009fe4 <_strtod_l+0x274>
 8009ff2:	bf00      	nop
 8009ff4:	0800f8a8 	.word	0x0800f8a8
 8009ff8:	7ff00000 	.word	0x7ff00000
 8009ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009ffe:	1c5f      	adds	r7, r3, #1
 800a000:	971b      	str	r7, [sp, #108]	; 0x6c
 800a002:	785b      	ldrb	r3, [r3, #1]
 800a004:	2b30      	cmp	r3, #48	; 0x30
 800a006:	d0f9      	beq.n	8009ffc <_strtod_l+0x28c>
 800a008:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a00c:	2f08      	cmp	r7, #8
 800a00e:	f63f af7d 	bhi.w	8009f0c <_strtod_l+0x19c>
 800a012:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a018:	930a      	str	r3, [sp, #40]	; 0x28
 800a01a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a01c:	1c5f      	adds	r7, r3, #1
 800a01e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a020:	785b      	ldrb	r3, [r3, #1]
 800a022:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a026:	f1b8 0f09 	cmp.w	r8, #9
 800a02a:	d937      	bls.n	800a09c <_strtod_l+0x32c>
 800a02c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a02e:	1a7f      	subs	r7, r7, r1
 800a030:	2f08      	cmp	r7, #8
 800a032:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a036:	dc37      	bgt.n	800a0a8 <_strtod_l+0x338>
 800a038:	45be      	cmp	lr, r7
 800a03a:	bfa8      	it	ge
 800a03c:	46be      	movge	lr, r7
 800a03e:	f1bc 0f00 	cmp.w	ip, #0
 800a042:	d001      	beq.n	800a048 <_strtod_l+0x2d8>
 800a044:	f1ce 0e00 	rsb	lr, lr, #0
 800a048:	2c00      	cmp	r4, #0
 800a04a:	d151      	bne.n	800a0f0 <_strtod_l+0x380>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f47f aece 	bne.w	8009dee <_strtod_l+0x7e>
 800a052:	9a06      	ldr	r2, [sp, #24]
 800a054:	2a00      	cmp	r2, #0
 800a056:	f47f aeca 	bne.w	8009dee <_strtod_l+0x7e>
 800a05a:	9a04      	ldr	r2, [sp, #16]
 800a05c:	2a00      	cmp	r2, #0
 800a05e:	f47f aee4 	bne.w	8009e2a <_strtod_l+0xba>
 800a062:	2b4e      	cmp	r3, #78	; 0x4e
 800a064:	d027      	beq.n	800a0b6 <_strtod_l+0x346>
 800a066:	dc21      	bgt.n	800a0ac <_strtod_l+0x33c>
 800a068:	2b49      	cmp	r3, #73	; 0x49
 800a06a:	f47f aede 	bne.w	8009e2a <_strtod_l+0xba>
 800a06e:	49a0      	ldr	r1, [pc, #640]	; (800a2f0 <_strtod_l+0x580>)
 800a070:	a81b      	add	r0, sp, #108	; 0x6c
 800a072:	f001 ff09 	bl	800be88 <__match>
 800a076:	2800      	cmp	r0, #0
 800a078:	f43f aed7 	beq.w	8009e2a <_strtod_l+0xba>
 800a07c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a07e:	499d      	ldr	r1, [pc, #628]	; (800a2f4 <_strtod_l+0x584>)
 800a080:	3b01      	subs	r3, #1
 800a082:	a81b      	add	r0, sp, #108	; 0x6c
 800a084:	931b      	str	r3, [sp, #108]	; 0x6c
 800a086:	f001 feff 	bl	800be88 <__match>
 800a08a:	b910      	cbnz	r0, 800a092 <_strtod_l+0x322>
 800a08c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a08e:	3301      	adds	r3, #1
 800a090:	931b      	str	r3, [sp, #108]	; 0x6c
 800a092:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a308 <_strtod_l+0x598>
 800a096:	f04f 0a00 	mov.w	sl, #0
 800a09a:	e6a8      	b.n	8009dee <_strtod_l+0x7e>
 800a09c:	210a      	movs	r1, #10
 800a09e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a0a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a0a6:	e7b8      	b.n	800a01a <_strtod_l+0x2aa>
 800a0a8:	46be      	mov	lr, r7
 800a0aa:	e7c8      	b.n	800a03e <_strtod_l+0x2ce>
 800a0ac:	2b69      	cmp	r3, #105	; 0x69
 800a0ae:	d0de      	beq.n	800a06e <_strtod_l+0x2fe>
 800a0b0:	2b6e      	cmp	r3, #110	; 0x6e
 800a0b2:	f47f aeba 	bne.w	8009e2a <_strtod_l+0xba>
 800a0b6:	4990      	ldr	r1, [pc, #576]	; (800a2f8 <_strtod_l+0x588>)
 800a0b8:	a81b      	add	r0, sp, #108	; 0x6c
 800a0ba:	f001 fee5 	bl	800be88 <__match>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	f43f aeb3 	beq.w	8009e2a <_strtod_l+0xba>
 800a0c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b28      	cmp	r3, #40	; 0x28
 800a0ca:	d10e      	bne.n	800a0ea <_strtod_l+0x37a>
 800a0cc:	aa1e      	add	r2, sp, #120	; 0x78
 800a0ce:	498b      	ldr	r1, [pc, #556]	; (800a2fc <_strtod_l+0x58c>)
 800a0d0:	a81b      	add	r0, sp, #108	; 0x6c
 800a0d2:	f001 feed 	bl	800beb0 <__hexnan>
 800a0d6:	2805      	cmp	r0, #5
 800a0d8:	d107      	bne.n	800a0ea <_strtod_l+0x37a>
 800a0da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a0dc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800a0e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a0e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a0e8:	e681      	b.n	8009dee <_strtod_l+0x7e>
 800a0ea:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a310 <_strtod_l+0x5a0>
 800a0ee:	e7d2      	b.n	800a096 <_strtod_l+0x326>
 800a0f0:	ebae 0302 	sub.w	r3, lr, r2
 800a0f4:	9306      	str	r3, [sp, #24]
 800a0f6:	9b05      	ldr	r3, [sp, #20]
 800a0f8:	9807      	ldr	r0, [sp, #28]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bf08      	it	eq
 800a0fe:	4623      	moveq	r3, r4
 800a100:	2c10      	cmp	r4, #16
 800a102:	9305      	str	r3, [sp, #20]
 800a104:	46a0      	mov	r8, r4
 800a106:	bfa8      	it	ge
 800a108:	f04f 0810 	movge.w	r8, #16
 800a10c:	f7f6 fa02 	bl	8000514 <__aeabi_ui2d>
 800a110:	2c09      	cmp	r4, #9
 800a112:	4682      	mov	sl, r0
 800a114:	468b      	mov	fp, r1
 800a116:	dc13      	bgt.n	800a140 <_strtod_l+0x3d0>
 800a118:	9b06      	ldr	r3, [sp, #24]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f43f ae67 	beq.w	8009dee <_strtod_l+0x7e>
 800a120:	9b06      	ldr	r3, [sp, #24]
 800a122:	dd7a      	ble.n	800a21a <_strtod_l+0x4aa>
 800a124:	2b16      	cmp	r3, #22
 800a126:	dc61      	bgt.n	800a1ec <_strtod_l+0x47c>
 800a128:	4a75      	ldr	r2, [pc, #468]	; (800a300 <_strtod_l+0x590>)
 800a12a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a12e:	e9de 0100 	ldrd	r0, r1, [lr]
 800a132:	4652      	mov	r2, sl
 800a134:	465b      	mov	r3, fp
 800a136:	f7f6 fa67 	bl	8000608 <__aeabi_dmul>
 800a13a:	4682      	mov	sl, r0
 800a13c:	468b      	mov	fp, r1
 800a13e:	e656      	b.n	8009dee <_strtod_l+0x7e>
 800a140:	4b6f      	ldr	r3, [pc, #444]	; (800a300 <_strtod_l+0x590>)
 800a142:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a146:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a14a:	f7f6 fa5d 	bl	8000608 <__aeabi_dmul>
 800a14e:	4606      	mov	r6, r0
 800a150:	4628      	mov	r0, r5
 800a152:	460f      	mov	r7, r1
 800a154:	f7f6 f9de 	bl	8000514 <__aeabi_ui2d>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4630      	mov	r0, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	f7f6 f89c 	bl	800029c <__adddf3>
 800a164:	2c0f      	cmp	r4, #15
 800a166:	4682      	mov	sl, r0
 800a168:	468b      	mov	fp, r1
 800a16a:	ddd5      	ble.n	800a118 <_strtod_l+0x3a8>
 800a16c:	9b06      	ldr	r3, [sp, #24]
 800a16e:	eba4 0808 	sub.w	r8, r4, r8
 800a172:	4498      	add	r8, r3
 800a174:	f1b8 0f00 	cmp.w	r8, #0
 800a178:	f340 8096 	ble.w	800a2a8 <_strtod_l+0x538>
 800a17c:	f018 030f 	ands.w	r3, r8, #15
 800a180:	d00a      	beq.n	800a198 <_strtod_l+0x428>
 800a182:	495f      	ldr	r1, [pc, #380]	; (800a300 <_strtod_l+0x590>)
 800a184:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a188:	4652      	mov	r2, sl
 800a18a:	465b      	mov	r3, fp
 800a18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a190:	f7f6 fa3a 	bl	8000608 <__aeabi_dmul>
 800a194:	4682      	mov	sl, r0
 800a196:	468b      	mov	fp, r1
 800a198:	f038 080f 	bics.w	r8, r8, #15
 800a19c:	d073      	beq.n	800a286 <_strtod_l+0x516>
 800a19e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a1a2:	dd47      	ble.n	800a234 <_strtod_l+0x4c4>
 800a1a4:	2400      	movs	r4, #0
 800a1a6:	46a0      	mov	r8, r4
 800a1a8:	9407      	str	r4, [sp, #28]
 800a1aa:	9405      	str	r4, [sp, #20]
 800a1ac:	2322      	movs	r3, #34	; 0x22
 800a1ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a308 <_strtod_l+0x598>
 800a1b2:	f8c9 3000 	str.w	r3, [r9]
 800a1b6:	f04f 0a00 	mov.w	sl, #0
 800a1ba:	9b07      	ldr	r3, [sp, #28]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f43f ae16 	beq.w	8009dee <_strtod_l+0x7e>
 800a1c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a1c4:	4648      	mov	r0, r9
 800a1c6:	f001 ff70 	bl	800c0aa <_Bfree>
 800a1ca:	9905      	ldr	r1, [sp, #20]
 800a1cc:	4648      	mov	r0, r9
 800a1ce:	f001 ff6c 	bl	800c0aa <_Bfree>
 800a1d2:	4641      	mov	r1, r8
 800a1d4:	4648      	mov	r0, r9
 800a1d6:	f001 ff68 	bl	800c0aa <_Bfree>
 800a1da:	9907      	ldr	r1, [sp, #28]
 800a1dc:	4648      	mov	r0, r9
 800a1de:	f001 ff64 	bl	800c0aa <_Bfree>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4648      	mov	r0, r9
 800a1e6:	f001 ff60 	bl	800c0aa <_Bfree>
 800a1ea:	e600      	b.n	8009dee <_strtod_l+0x7e>
 800a1ec:	9a06      	ldr	r2, [sp, #24]
 800a1ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	dbba      	blt.n	800a16c <_strtod_l+0x3fc>
 800a1f6:	4d42      	ldr	r5, [pc, #264]	; (800a300 <_strtod_l+0x590>)
 800a1f8:	f1c4 040f 	rsb	r4, r4, #15
 800a1fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a200:	4652      	mov	r2, sl
 800a202:	465b      	mov	r3, fp
 800a204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a208:	f7f6 f9fe 	bl	8000608 <__aeabi_dmul>
 800a20c:	9b06      	ldr	r3, [sp, #24]
 800a20e:	1b1c      	subs	r4, r3, r4
 800a210:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a214:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a218:	e78d      	b.n	800a136 <_strtod_l+0x3c6>
 800a21a:	f113 0f16 	cmn.w	r3, #22
 800a21e:	dba5      	blt.n	800a16c <_strtod_l+0x3fc>
 800a220:	4a37      	ldr	r2, [pc, #220]	; (800a300 <_strtod_l+0x590>)
 800a222:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a226:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a22a:	4650      	mov	r0, sl
 800a22c:	4659      	mov	r1, fp
 800a22e:	f7f6 fb15 	bl	800085c <__aeabi_ddiv>
 800a232:	e782      	b.n	800a13a <_strtod_l+0x3ca>
 800a234:	2300      	movs	r3, #0
 800a236:	4e33      	ldr	r6, [pc, #204]	; (800a304 <_strtod_l+0x594>)
 800a238:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a23c:	4650      	mov	r0, sl
 800a23e:	4659      	mov	r1, fp
 800a240:	461d      	mov	r5, r3
 800a242:	f1b8 0f01 	cmp.w	r8, #1
 800a246:	dc21      	bgt.n	800a28c <_strtod_l+0x51c>
 800a248:	b10b      	cbz	r3, 800a24e <_strtod_l+0x4de>
 800a24a:	4682      	mov	sl, r0
 800a24c:	468b      	mov	fp, r1
 800a24e:	4b2d      	ldr	r3, [pc, #180]	; (800a304 <_strtod_l+0x594>)
 800a250:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a254:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a258:	4652      	mov	r2, sl
 800a25a:	465b      	mov	r3, fp
 800a25c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a260:	f7f6 f9d2 	bl	8000608 <__aeabi_dmul>
 800a264:	4b28      	ldr	r3, [pc, #160]	; (800a308 <_strtod_l+0x598>)
 800a266:	460a      	mov	r2, r1
 800a268:	400b      	ands	r3, r1
 800a26a:	4928      	ldr	r1, [pc, #160]	; (800a30c <_strtod_l+0x59c>)
 800a26c:	428b      	cmp	r3, r1
 800a26e:	4682      	mov	sl, r0
 800a270:	d898      	bhi.n	800a1a4 <_strtod_l+0x434>
 800a272:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a276:	428b      	cmp	r3, r1
 800a278:	bf86      	itte	hi
 800a27a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a314 <_strtod_l+0x5a4>
 800a27e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a282:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a286:	2300      	movs	r3, #0
 800a288:	9304      	str	r3, [sp, #16]
 800a28a:	e077      	b.n	800a37c <_strtod_l+0x60c>
 800a28c:	f018 0f01 	tst.w	r8, #1
 800a290:	d006      	beq.n	800a2a0 <_strtod_l+0x530>
 800a292:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29a:	f7f6 f9b5 	bl	8000608 <__aeabi_dmul>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	3501      	adds	r5, #1
 800a2a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a2a6:	e7cc      	b.n	800a242 <_strtod_l+0x4d2>
 800a2a8:	d0ed      	beq.n	800a286 <_strtod_l+0x516>
 800a2aa:	f1c8 0800 	rsb	r8, r8, #0
 800a2ae:	f018 020f 	ands.w	r2, r8, #15
 800a2b2:	d00a      	beq.n	800a2ca <_strtod_l+0x55a>
 800a2b4:	4b12      	ldr	r3, [pc, #72]	; (800a300 <_strtod_l+0x590>)
 800a2b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ba:	4650      	mov	r0, sl
 800a2bc:	4659      	mov	r1, fp
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f6 facb 	bl	800085c <__aeabi_ddiv>
 800a2c6:	4682      	mov	sl, r0
 800a2c8:	468b      	mov	fp, r1
 800a2ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a2ce:	d0da      	beq.n	800a286 <_strtod_l+0x516>
 800a2d0:	f1b8 0f1f 	cmp.w	r8, #31
 800a2d4:	dd20      	ble.n	800a318 <_strtod_l+0x5a8>
 800a2d6:	2400      	movs	r4, #0
 800a2d8:	46a0      	mov	r8, r4
 800a2da:	9407      	str	r4, [sp, #28]
 800a2dc:	9405      	str	r4, [sp, #20]
 800a2de:	2322      	movs	r3, #34	; 0x22
 800a2e0:	f04f 0a00 	mov.w	sl, #0
 800a2e4:	f04f 0b00 	mov.w	fp, #0
 800a2e8:	f8c9 3000 	str.w	r3, [r9]
 800a2ec:	e765      	b.n	800a1ba <_strtod_l+0x44a>
 800a2ee:	bf00      	nop
 800a2f0:	0800fbba 	.word	0x0800fbba
 800a2f4:	0800f8fb 	.word	0x0800f8fb
 800a2f8:	0800f879 	.word	0x0800f879
 800a2fc:	0800f8bc 	.word	0x0800f8bc
 800a300:	0800f9a0 	.word	0x0800f9a0
 800a304:	0800f978 	.word	0x0800f978
 800a308:	7ff00000 	.word	0x7ff00000
 800a30c:	7ca00000 	.word	0x7ca00000
 800a310:	fff80000 	.word	0xfff80000
 800a314:	7fefffff 	.word	0x7fefffff
 800a318:	f018 0310 	ands.w	r3, r8, #16
 800a31c:	bf18      	it	ne
 800a31e:	236a      	movne	r3, #106	; 0x6a
 800a320:	4da0      	ldr	r5, [pc, #640]	; (800a5a4 <_strtod_l+0x834>)
 800a322:	9304      	str	r3, [sp, #16]
 800a324:	4650      	mov	r0, sl
 800a326:	4659      	mov	r1, fp
 800a328:	2300      	movs	r3, #0
 800a32a:	f1b8 0f00 	cmp.w	r8, #0
 800a32e:	f300 810a 	bgt.w	800a546 <_strtod_l+0x7d6>
 800a332:	b10b      	cbz	r3, 800a338 <_strtod_l+0x5c8>
 800a334:	4682      	mov	sl, r0
 800a336:	468b      	mov	fp, r1
 800a338:	9b04      	ldr	r3, [sp, #16]
 800a33a:	b1bb      	cbz	r3, 800a36c <_strtod_l+0x5fc>
 800a33c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a340:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a344:	2b00      	cmp	r3, #0
 800a346:	4659      	mov	r1, fp
 800a348:	dd10      	ble.n	800a36c <_strtod_l+0x5fc>
 800a34a:	2b1f      	cmp	r3, #31
 800a34c:	f340 8107 	ble.w	800a55e <_strtod_l+0x7ee>
 800a350:	2b34      	cmp	r3, #52	; 0x34
 800a352:	bfde      	ittt	le
 800a354:	3b20      	suble	r3, #32
 800a356:	f04f 32ff 	movle.w	r2, #4294967295
 800a35a:	fa02 f303 	lslle.w	r3, r2, r3
 800a35e:	f04f 0a00 	mov.w	sl, #0
 800a362:	bfcc      	ite	gt
 800a364:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a368:	ea03 0b01 	andle.w	fp, r3, r1
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	4650      	mov	r0, sl
 800a372:	4659      	mov	r1, fp
 800a374:	f7f6 fbb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1ac      	bne.n	800a2d6 <_strtod_l+0x566>
 800a37c:	9b07      	ldr	r3, [sp, #28]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	9a05      	ldr	r2, [sp, #20]
 800a382:	9908      	ldr	r1, [sp, #32]
 800a384:	4623      	mov	r3, r4
 800a386:	4648      	mov	r0, r9
 800a388:	f001 fee1 	bl	800c14e <__s2b>
 800a38c:	9007      	str	r0, [sp, #28]
 800a38e:	2800      	cmp	r0, #0
 800a390:	f43f af08 	beq.w	800a1a4 <_strtod_l+0x434>
 800a394:	9a06      	ldr	r2, [sp, #24]
 800a396:	9b06      	ldr	r3, [sp, #24]
 800a398:	2a00      	cmp	r2, #0
 800a39a:	f1c3 0300 	rsb	r3, r3, #0
 800a39e:	bfa8      	it	ge
 800a3a0:	2300      	movge	r3, #0
 800a3a2:	930e      	str	r3, [sp, #56]	; 0x38
 800a3a4:	2400      	movs	r4, #0
 800a3a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a3aa:	9316      	str	r3, [sp, #88]	; 0x58
 800a3ac:	46a0      	mov	r8, r4
 800a3ae:	9b07      	ldr	r3, [sp, #28]
 800a3b0:	4648      	mov	r0, r9
 800a3b2:	6859      	ldr	r1, [r3, #4]
 800a3b4:	f001 fe45 	bl	800c042 <_Balloc>
 800a3b8:	9005      	str	r0, [sp, #20]
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	f43f aef6 	beq.w	800a1ac <_strtod_l+0x43c>
 800a3c0:	9b07      	ldr	r3, [sp, #28]
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	3202      	adds	r2, #2
 800a3c6:	f103 010c 	add.w	r1, r3, #12
 800a3ca:	0092      	lsls	r2, r2, #2
 800a3cc:	300c      	adds	r0, #12
 800a3ce:	f001 fe2d 	bl	800c02c <memcpy>
 800a3d2:	aa1e      	add	r2, sp, #120	; 0x78
 800a3d4:	a91d      	add	r1, sp, #116	; 0x74
 800a3d6:	ec4b ab10 	vmov	d0, sl, fp
 800a3da:	4648      	mov	r0, r9
 800a3dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a3e0:	f002 f970 	bl	800c6c4 <__d2b>
 800a3e4:	901c      	str	r0, [sp, #112]	; 0x70
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f43f aee0 	beq.w	800a1ac <_strtod_l+0x43c>
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	4648      	mov	r0, r9
 800a3f0:	f001 ff39 	bl	800c266 <__i2b>
 800a3f4:	4680      	mov	r8, r0
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f43f aed8 	beq.w	800a1ac <_strtod_l+0x43c>
 800a3fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a3fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a400:	2e00      	cmp	r6, #0
 800a402:	bfab      	itete	ge
 800a404:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a406:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a408:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a40a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a40c:	bfac      	ite	ge
 800a40e:	18f7      	addge	r7, r6, r3
 800a410:	1b9d      	sublt	r5, r3, r6
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	1af6      	subs	r6, r6, r3
 800a416:	4416      	add	r6, r2
 800a418:	4b63      	ldr	r3, [pc, #396]	; (800a5a8 <_strtod_l+0x838>)
 800a41a:	3e01      	subs	r6, #1
 800a41c:	429e      	cmp	r6, r3
 800a41e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a422:	f280 80af 	bge.w	800a584 <_strtod_l+0x814>
 800a426:	1b9b      	subs	r3, r3, r6
 800a428:	2b1f      	cmp	r3, #31
 800a42a:	eba2 0203 	sub.w	r2, r2, r3
 800a42e:	f04f 0101 	mov.w	r1, #1
 800a432:	f300 809b 	bgt.w	800a56c <_strtod_l+0x7fc>
 800a436:	fa01 f303 	lsl.w	r3, r1, r3
 800a43a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a43c:	2300      	movs	r3, #0
 800a43e:	930a      	str	r3, [sp, #40]	; 0x28
 800a440:	18be      	adds	r6, r7, r2
 800a442:	9b04      	ldr	r3, [sp, #16]
 800a444:	42b7      	cmp	r7, r6
 800a446:	4415      	add	r5, r2
 800a448:	441d      	add	r5, r3
 800a44a:	463b      	mov	r3, r7
 800a44c:	bfa8      	it	ge
 800a44e:	4633      	movge	r3, r6
 800a450:	42ab      	cmp	r3, r5
 800a452:	bfa8      	it	ge
 800a454:	462b      	movge	r3, r5
 800a456:	2b00      	cmp	r3, #0
 800a458:	bfc2      	ittt	gt
 800a45a:	1af6      	subgt	r6, r6, r3
 800a45c:	1aed      	subgt	r5, r5, r3
 800a45e:	1aff      	subgt	r7, r7, r3
 800a460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a462:	b1bb      	cbz	r3, 800a494 <_strtod_l+0x724>
 800a464:	4641      	mov	r1, r8
 800a466:	461a      	mov	r2, r3
 800a468:	4648      	mov	r0, r9
 800a46a:	f001 ff9b 	bl	800c3a4 <__pow5mult>
 800a46e:	4680      	mov	r8, r0
 800a470:	2800      	cmp	r0, #0
 800a472:	f43f ae9b 	beq.w	800a1ac <_strtod_l+0x43c>
 800a476:	4601      	mov	r1, r0
 800a478:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a47a:	4648      	mov	r0, r9
 800a47c:	f001 fefc 	bl	800c278 <__multiply>
 800a480:	900c      	str	r0, [sp, #48]	; 0x30
 800a482:	2800      	cmp	r0, #0
 800a484:	f43f ae92 	beq.w	800a1ac <_strtod_l+0x43c>
 800a488:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a48a:	4648      	mov	r0, r9
 800a48c:	f001 fe0d 	bl	800c0aa <_Bfree>
 800a490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a492:	931c      	str	r3, [sp, #112]	; 0x70
 800a494:	2e00      	cmp	r6, #0
 800a496:	dc7a      	bgt.n	800a58e <_strtod_l+0x81e>
 800a498:	9b06      	ldr	r3, [sp, #24]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	dd08      	ble.n	800a4b0 <_strtod_l+0x740>
 800a49e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a4a0:	9905      	ldr	r1, [sp, #20]
 800a4a2:	4648      	mov	r0, r9
 800a4a4:	f001 ff7e 	bl	800c3a4 <__pow5mult>
 800a4a8:	9005      	str	r0, [sp, #20]
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	f43f ae7e 	beq.w	800a1ac <_strtod_l+0x43c>
 800a4b0:	2d00      	cmp	r5, #0
 800a4b2:	dd08      	ble.n	800a4c6 <_strtod_l+0x756>
 800a4b4:	462a      	mov	r2, r5
 800a4b6:	9905      	ldr	r1, [sp, #20]
 800a4b8:	4648      	mov	r0, r9
 800a4ba:	f001 ffc1 	bl	800c440 <__lshift>
 800a4be:	9005      	str	r0, [sp, #20]
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	f43f ae73 	beq.w	800a1ac <_strtod_l+0x43c>
 800a4c6:	2f00      	cmp	r7, #0
 800a4c8:	dd08      	ble.n	800a4dc <_strtod_l+0x76c>
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	463a      	mov	r2, r7
 800a4ce:	4648      	mov	r0, r9
 800a4d0:	f001 ffb6 	bl	800c440 <__lshift>
 800a4d4:	4680      	mov	r8, r0
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	f43f ae68 	beq.w	800a1ac <_strtod_l+0x43c>
 800a4dc:	9a05      	ldr	r2, [sp, #20]
 800a4de:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a4e0:	4648      	mov	r0, r9
 800a4e2:	f002 f81b 	bl	800c51c <__mdiff>
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	f43f ae5f 	beq.w	800a1ac <_strtod_l+0x43c>
 800a4ee:	68c3      	ldr	r3, [r0, #12]
 800a4f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60c3      	str	r3, [r0, #12]
 800a4f6:	4641      	mov	r1, r8
 800a4f8:	f001 fff6 	bl	800c4e8 <__mcmp>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	da55      	bge.n	800a5ac <_strtod_l+0x83c>
 800a500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a502:	b9e3      	cbnz	r3, 800a53e <_strtod_l+0x7ce>
 800a504:	f1ba 0f00 	cmp.w	sl, #0
 800a508:	d119      	bne.n	800a53e <_strtod_l+0x7ce>
 800a50a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a50e:	b9b3      	cbnz	r3, 800a53e <_strtod_l+0x7ce>
 800a510:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a514:	0d1b      	lsrs	r3, r3, #20
 800a516:	051b      	lsls	r3, r3, #20
 800a518:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a51c:	d90f      	bls.n	800a53e <_strtod_l+0x7ce>
 800a51e:	6963      	ldr	r3, [r4, #20]
 800a520:	b913      	cbnz	r3, 800a528 <_strtod_l+0x7b8>
 800a522:	6923      	ldr	r3, [r4, #16]
 800a524:	2b01      	cmp	r3, #1
 800a526:	dd0a      	ble.n	800a53e <_strtod_l+0x7ce>
 800a528:	4621      	mov	r1, r4
 800a52a:	2201      	movs	r2, #1
 800a52c:	4648      	mov	r0, r9
 800a52e:	f001 ff87 	bl	800c440 <__lshift>
 800a532:	4641      	mov	r1, r8
 800a534:	4604      	mov	r4, r0
 800a536:	f001 ffd7 	bl	800c4e8 <__mcmp>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	dc67      	bgt.n	800a60e <_strtod_l+0x89e>
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d171      	bne.n	800a628 <_strtod_l+0x8b8>
 800a544:	e63d      	b.n	800a1c2 <_strtod_l+0x452>
 800a546:	f018 0f01 	tst.w	r8, #1
 800a54a:	d004      	beq.n	800a556 <_strtod_l+0x7e6>
 800a54c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a550:	f7f6 f85a 	bl	8000608 <__aeabi_dmul>
 800a554:	2301      	movs	r3, #1
 800a556:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a55a:	3508      	adds	r5, #8
 800a55c:	e6e5      	b.n	800a32a <_strtod_l+0x5ba>
 800a55e:	f04f 32ff 	mov.w	r2, #4294967295
 800a562:	fa02 f303 	lsl.w	r3, r2, r3
 800a566:	ea03 0a0a 	and.w	sl, r3, sl
 800a56a:	e6ff      	b.n	800a36c <_strtod_l+0x5fc>
 800a56c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a570:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a574:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a578:	36e2      	adds	r6, #226	; 0xe2
 800a57a:	fa01 f306 	lsl.w	r3, r1, r6
 800a57e:	930a      	str	r3, [sp, #40]	; 0x28
 800a580:	910f      	str	r1, [sp, #60]	; 0x3c
 800a582:	e75d      	b.n	800a440 <_strtod_l+0x6d0>
 800a584:	2300      	movs	r3, #0
 800a586:	930a      	str	r3, [sp, #40]	; 0x28
 800a588:	2301      	movs	r3, #1
 800a58a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a58c:	e758      	b.n	800a440 <_strtod_l+0x6d0>
 800a58e:	4632      	mov	r2, r6
 800a590:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a592:	4648      	mov	r0, r9
 800a594:	f001 ff54 	bl	800c440 <__lshift>
 800a598:	901c      	str	r0, [sp, #112]	; 0x70
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f47f af7c 	bne.w	800a498 <_strtod_l+0x728>
 800a5a0:	e604      	b.n	800a1ac <_strtod_l+0x43c>
 800a5a2:	bf00      	nop
 800a5a4:	0800f8d0 	.word	0x0800f8d0
 800a5a8:	fffffc02 	.word	0xfffffc02
 800a5ac:	465d      	mov	r5, fp
 800a5ae:	f040 8086 	bne.w	800a6be <_strtod_l+0x94e>
 800a5b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5b8:	b32a      	cbz	r2, 800a606 <_strtod_l+0x896>
 800a5ba:	4aaf      	ldr	r2, [pc, #700]	; (800a878 <_strtod_l+0xb08>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d153      	bne.n	800a668 <_strtod_l+0x8f8>
 800a5c0:	9b04      	ldr	r3, [sp, #16]
 800a5c2:	4650      	mov	r0, sl
 800a5c4:	b1d3      	cbz	r3, 800a5fc <_strtod_l+0x88c>
 800a5c6:	4aad      	ldr	r2, [pc, #692]	; (800a87c <_strtod_l+0xb0c>)
 800a5c8:	402a      	ands	r2, r5
 800a5ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a5ce:	f04f 31ff 	mov.w	r1, #4294967295
 800a5d2:	d816      	bhi.n	800a602 <_strtod_l+0x892>
 800a5d4:	0d12      	lsrs	r2, r2, #20
 800a5d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a5da:	fa01 f303 	lsl.w	r3, r1, r3
 800a5de:	4298      	cmp	r0, r3
 800a5e0:	d142      	bne.n	800a668 <_strtod_l+0x8f8>
 800a5e2:	4ba7      	ldr	r3, [pc, #668]	; (800a880 <_strtod_l+0xb10>)
 800a5e4:	429d      	cmp	r5, r3
 800a5e6:	d102      	bne.n	800a5ee <_strtod_l+0x87e>
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	f43f addf 	beq.w	800a1ac <_strtod_l+0x43c>
 800a5ee:	4ba3      	ldr	r3, [pc, #652]	; (800a87c <_strtod_l+0xb0c>)
 800a5f0:	402b      	ands	r3, r5
 800a5f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a5f6:	f04f 0a00 	mov.w	sl, #0
 800a5fa:	e7a0      	b.n	800a53e <_strtod_l+0x7ce>
 800a5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a600:	e7ed      	b.n	800a5de <_strtod_l+0x86e>
 800a602:	460b      	mov	r3, r1
 800a604:	e7eb      	b.n	800a5de <_strtod_l+0x86e>
 800a606:	bb7b      	cbnz	r3, 800a668 <_strtod_l+0x8f8>
 800a608:	f1ba 0f00 	cmp.w	sl, #0
 800a60c:	d12c      	bne.n	800a668 <_strtod_l+0x8f8>
 800a60e:	9904      	ldr	r1, [sp, #16]
 800a610:	4a9a      	ldr	r2, [pc, #616]	; (800a87c <_strtod_l+0xb0c>)
 800a612:	465b      	mov	r3, fp
 800a614:	b1f1      	cbz	r1, 800a654 <_strtod_l+0x8e4>
 800a616:	ea02 010b 	and.w	r1, r2, fp
 800a61a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a61e:	dc19      	bgt.n	800a654 <_strtod_l+0x8e4>
 800a620:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a624:	f77f ae5b 	ble.w	800a2de <_strtod_l+0x56e>
 800a628:	4a96      	ldr	r2, [pc, #600]	; (800a884 <_strtod_l+0xb14>)
 800a62a:	2300      	movs	r3, #0
 800a62c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a630:	4650      	mov	r0, sl
 800a632:	4659      	mov	r1, fp
 800a634:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a638:	f7f5 ffe6 	bl	8000608 <__aeabi_dmul>
 800a63c:	4682      	mov	sl, r0
 800a63e:	468b      	mov	fp, r1
 800a640:	2900      	cmp	r1, #0
 800a642:	f47f adbe 	bne.w	800a1c2 <_strtod_l+0x452>
 800a646:	2800      	cmp	r0, #0
 800a648:	f47f adbb 	bne.w	800a1c2 <_strtod_l+0x452>
 800a64c:	2322      	movs	r3, #34	; 0x22
 800a64e:	f8c9 3000 	str.w	r3, [r9]
 800a652:	e5b6      	b.n	800a1c2 <_strtod_l+0x452>
 800a654:	4013      	ands	r3, r2
 800a656:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a65a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a65e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a662:	f04f 3aff 	mov.w	sl, #4294967295
 800a666:	e76a      	b.n	800a53e <_strtod_l+0x7ce>
 800a668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a66a:	b193      	cbz	r3, 800a692 <_strtod_l+0x922>
 800a66c:	422b      	tst	r3, r5
 800a66e:	f43f af66 	beq.w	800a53e <_strtod_l+0x7ce>
 800a672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a674:	9a04      	ldr	r2, [sp, #16]
 800a676:	4650      	mov	r0, sl
 800a678:	4659      	mov	r1, fp
 800a67a:	b173      	cbz	r3, 800a69a <_strtod_l+0x92a>
 800a67c:	f7ff fb5a 	bl	8009d34 <sulp>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a688:	f7f5 fe08 	bl	800029c <__adddf3>
 800a68c:	4682      	mov	sl, r0
 800a68e:	468b      	mov	fp, r1
 800a690:	e755      	b.n	800a53e <_strtod_l+0x7ce>
 800a692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a694:	ea13 0f0a 	tst.w	r3, sl
 800a698:	e7e9      	b.n	800a66e <_strtod_l+0x8fe>
 800a69a:	f7ff fb4b 	bl	8009d34 <sulp>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a6a6:	f7f5 fdf7 	bl	8000298 <__aeabi_dsub>
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	468b      	mov	fp, r1
 800a6b2:	f7f6 fa11 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	f47f ae11 	bne.w	800a2de <_strtod_l+0x56e>
 800a6bc:	e73f      	b.n	800a53e <_strtod_l+0x7ce>
 800a6be:	4641      	mov	r1, r8
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f002 f84e 	bl	800c762 <__ratio>
 800a6c6:	ec57 6b10 	vmov	r6, r7, d0
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6d0:	ee10 0a10 	vmov	r0, s0
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	f7f6 fa13 	bl	8000b00 <__aeabi_dcmple>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d077      	beq.n	800a7ce <_strtod_l+0xa5e>
 800a6de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d04a      	beq.n	800a77a <_strtod_l+0xa0a>
 800a6e4:	4b68      	ldr	r3, [pc, #416]	; (800a888 <_strtod_l+0xb18>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a6ec:	4f66      	ldr	r7, [pc, #408]	; (800a888 <_strtod_l+0xb18>)
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	4b62      	ldr	r3, [pc, #392]	; (800a87c <_strtod_l+0xb0c>)
 800a6f2:	402b      	ands	r3, r5
 800a6f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6f8:	4b64      	ldr	r3, [pc, #400]	; (800a88c <_strtod_l+0xb1c>)
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	f040 80ce 	bne.w	800a89c <_strtod_l+0xb2c>
 800a700:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a704:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a708:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a70c:	ec4b ab10 	vmov	d0, sl, fp
 800a710:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a714:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a718:	f001 ff5e 	bl	800c5d8 <__ulp>
 800a71c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a720:	ec53 2b10 	vmov	r2, r3, d0
 800a724:	f7f5 ff70 	bl	8000608 <__aeabi_dmul>
 800a728:	4652      	mov	r2, sl
 800a72a:	465b      	mov	r3, fp
 800a72c:	f7f5 fdb6 	bl	800029c <__adddf3>
 800a730:	460b      	mov	r3, r1
 800a732:	4952      	ldr	r1, [pc, #328]	; (800a87c <_strtod_l+0xb0c>)
 800a734:	4a56      	ldr	r2, [pc, #344]	; (800a890 <_strtod_l+0xb20>)
 800a736:	4019      	ands	r1, r3
 800a738:	4291      	cmp	r1, r2
 800a73a:	4682      	mov	sl, r0
 800a73c:	d95b      	bls.n	800a7f6 <_strtod_l+0xa86>
 800a73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a740:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a744:	4293      	cmp	r3, r2
 800a746:	d103      	bne.n	800a750 <_strtod_l+0x9e0>
 800a748:	9b08      	ldr	r3, [sp, #32]
 800a74a:	3301      	adds	r3, #1
 800a74c:	f43f ad2e 	beq.w	800a1ac <_strtod_l+0x43c>
 800a750:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a880 <_strtod_l+0xb10>
 800a754:	f04f 3aff 	mov.w	sl, #4294967295
 800a758:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a75a:	4648      	mov	r0, r9
 800a75c:	f001 fca5 	bl	800c0aa <_Bfree>
 800a760:	9905      	ldr	r1, [sp, #20]
 800a762:	4648      	mov	r0, r9
 800a764:	f001 fca1 	bl	800c0aa <_Bfree>
 800a768:	4641      	mov	r1, r8
 800a76a:	4648      	mov	r0, r9
 800a76c:	f001 fc9d 	bl	800c0aa <_Bfree>
 800a770:	4621      	mov	r1, r4
 800a772:	4648      	mov	r0, r9
 800a774:	f001 fc99 	bl	800c0aa <_Bfree>
 800a778:	e619      	b.n	800a3ae <_strtod_l+0x63e>
 800a77a:	f1ba 0f00 	cmp.w	sl, #0
 800a77e:	d11a      	bne.n	800a7b6 <_strtod_l+0xa46>
 800a780:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a784:	b9eb      	cbnz	r3, 800a7c2 <_strtod_l+0xa52>
 800a786:	2200      	movs	r2, #0
 800a788:	4b3f      	ldr	r3, [pc, #252]	; (800a888 <_strtod_l+0xb18>)
 800a78a:	4630      	mov	r0, r6
 800a78c:	4639      	mov	r1, r7
 800a78e:	f7f6 f9ad 	bl	8000aec <__aeabi_dcmplt>
 800a792:	b9c8      	cbnz	r0, 800a7c8 <_strtod_l+0xa58>
 800a794:	4630      	mov	r0, r6
 800a796:	4639      	mov	r1, r7
 800a798:	2200      	movs	r2, #0
 800a79a:	4b3e      	ldr	r3, [pc, #248]	; (800a894 <_strtod_l+0xb24>)
 800a79c:	f7f5 ff34 	bl	8000608 <__aeabi_dmul>
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	460f      	mov	r7, r1
 800a7a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a7a8:	9618      	str	r6, [sp, #96]	; 0x60
 800a7aa:	9319      	str	r3, [sp, #100]	; 0x64
 800a7ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a7b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a7b4:	e79c      	b.n	800a6f0 <_strtod_l+0x980>
 800a7b6:	f1ba 0f01 	cmp.w	sl, #1
 800a7ba:	d102      	bne.n	800a7c2 <_strtod_l+0xa52>
 800a7bc:	2d00      	cmp	r5, #0
 800a7be:	f43f ad8e 	beq.w	800a2de <_strtod_l+0x56e>
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	4b34      	ldr	r3, [pc, #208]	; (800a898 <_strtod_l+0xb28>)
 800a7c6:	e78f      	b.n	800a6e8 <_strtod_l+0x978>
 800a7c8:	2600      	movs	r6, #0
 800a7ca:	4f32      	ldr	r7, [pc, #200]	; (800a894 <_strtod_l+0xb24>)
 800a7cc:	e7ea      	b.n	800a7a4 <_strtod_l+0xa34>
 800a7ce:	4b31      	ldr	r3, [pc, #196]	; (800a894 <_strtod_l+0xb24>)
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f7f5 ff17 	bl	8000608 <__aeabi_dmul>
 800a7da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7dc:	4606      	mov	r6, r0
 800a7de:	460f      	mov	r7, r1
 800a7e0:	b933      	cbnz	r3, 800a7f0 <_strtod_l+0xa80>
 800a7e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7e6:	9010      	str	r0, [sp, #64]	; 0x40
 800a7e8:	9311      	str	r3, [sp, #68]	; 0x44
 800a7ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7ee:	e7df      	b.n	800a7b0 <_strtod_l+0xa40>
 800a7f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a7f4:	e7f9      	b.n	800a7ea <_strtod_l+0xa7a>
 800a7f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a7fa:	9b04      	ldr	r3, [sp, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1ab      	bne.n	800a758 <_strtod_l+0x9e8>
 800a800:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a804:	0d1b      	lsrs	r3, r3, #20
 800a806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a808:	051b      	lsls	r3, r3, #20
 800a80a:	429a      	cmp	r2, r3
 800a80c:	465d      	mov	r5, fp
 800a80e:	d1a3      	bne.n	800a758 <_strtod_l+0x9e8>
 800a810:	4639      	mov	r1, r7
 800a812:	4630      	mov	r0, r6
 800a814:	f7f6 f9a8 	bl	8000b68 <__aeabi_d2iz>
 800a818:	f7f5 fe8c 	bl	8000534 <__aeabi_i2d>
 800a81c:	460b      	mov	r3, r1
 800a81e:	4602      	mov	r2, r0
 800a820:	4639      	mov	r1, r7
 800a822:	4630      	mov	r0, r6
 800a824:	f7f5 fd38 	bl	8000298 <__aeabi_dsub>
 800a828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	b933      	cbnz	r3, 800a83e <_strtod_l+0xace>
 800a830:	f1ba 0f00 	cmp.w	sl, #0
 800a834:	d103      	bne.n	800a83e <_strtod_l+0xace>
 800a836:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a83a:	2d00      	cmp	r5, #0
 800a83c:	d06d      	beq.n	800a91a <_strtod_l+0xbaa>
 800a83e:	a30a      	add	r3, pc, #40	; (adr r3, 800a868 <_strtod_l+0xaf8>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	4630      	mov	r0, r6
 800a846:	4639      	mov	r1, r7
 800a848:	f7f6 f950 	bl	8000aec <__aeabi_dcmplt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f47f acb8 	bne.w	800a1c2 <_strtod_l+0x452>
 800a852:	a307      	add	r3, pc, #28	; (adr r3, 800a870 <_strtod_l+0xb00>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	4630      	mov	r0, r6
 800a85a:	4639      	mov	r1, r7
 800a85c:	f7f6 f964 	bl	8000b28 <__aeabi_dcmpgt>
 800a860:	2800      	cmp	r0, #0
 800a862:	f43f af79 	beq.w	800a758 <_strtod_l+0x9e8>
 800a866:	e4ac      	b.n	800a1c2 <_strtod_l+0x452>
 800a868:	94a03595 	.word	0x94a03595
 800a86c:	3fdfffff 	.word	0x3fdfffff
 800a870:	35afe535 	.word	0x35afe535
 800a874:	3fe00000 	.word	0x3fe00000
 800a878:	000fffff 	.word	0x000fffff
 800a87c:	7ff00000 	.word	0x7ff00000
 800a880:	7fefffff 	.word	0x7fefffff
 800a884:	39500000 	.word	0x39500000
 800a888:	3ff00000 	.word	0x3ff00000
 800a88c:	7fe00000 	.word	0x7fe00000
 800a890:	7c9fffff 	.word	0x7c9fffff
 800a894:	3fe00000 	.word	0x3fe00000
 800a898:	bff00000 	.word	0xbff00000
 800a89c:	9b04      	ldr	r3, [sp, #16]
 800a89e:	b333      	cbz	r3, 800a8ee <_strtod_l+0xb7e>
 800a8a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8a6:	d822      	bhi.n	800a8ee <_strtod_l+0xb7e>
 800a8a8:	a327      	add	r3, pc, #156	; (adr r3, 800a948 <_strtod_l+0xbd8>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f6 f925 	bl	8000b00 <__aeabi_dcmple>
 800a8b6:	b1a0      	cbz	r0, 800a8e2 <_strtod_l+0xb72>
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7f6 f97c 	bl	8000bb8 <__aeabi_d2uiz>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	bf08      	it	eq
 800a8c4:	2001      	moveq	r0, #1
 800a8c6:	f7f5 fe25 	bl	8000514 <__aeabi_ui2d>
 800a8ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	460f      	mov	r7, r1
 800a8d0:	bb03      	cbnz	r3, 800a914 <_strtod_l+0xba4>
 800a8d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8d6:	9012      	str	r0, [sp, #72]	; 0x48
 800a8d8:	9313      	str	r3, [sp, #76]	; 0x4c
 800a8da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a8de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a8f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a8f6:	f001 fe6f 	bl	800c5d8 <__ulp>
 800a8fa:	4650      	mov	r0, sl
 800a8fc:	ec53 2b10 	vmov	r2, r3, d0
 800a900:	4659      	mov	r1, fp
 800a902:	f7f5 fe81 	bl	8000608 <__aeabi_dmul>
 800a906:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a90a:	f7f5 fcc7 	bl	800029c <__adddf3>
 800a90e:	4682      	mov	sl, r0
 800a910:	468b      	mov	fp, r1
 800a912:	e772      	b.n	800a7fa <_strtod_l+0xa8a>
 800a914:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a918:	e7df      	b.n	800a8da <_strtod_l+0xb6a>
 800a91a:	a30d      	add	r3, pc, #52	; (adr r3, 800a950 <_strtod_l+0xbe0>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f7f6 f8e4 	bl	8000aec <__aeabi_dcmplt>
 800a924:	e79c      	b.n	800a860 <_strtod_l+0xaf0>
 800a926:	2300      	movs	r3, #0
 800a928:	930d      	str	r3, [sp, #52]	; 0x34
 800a92a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a92c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	f7ff ba61 	b.w	8009df6 <_strtod_l+0x86>
 800a934:	2b65      	cmp	r3, #101	; 0x65
 800a936:	f04f 0200 	mov.w	r2, #0
 800a93a:	f43f ab4e 	beq.w	8009fda <_strtod_l+0x26a>
 800a93e:	2101      	movs	r1, #1
 800a940:	4614      	mov	r4, r2
 800a942:	9104      	str	r1, [sp, #16]
 800a944:	f7ff bacb 	b.w	8009ede <_strtod_l+0x16e>
 800a948:	ffc00000 	.word	0xffc00000
 800a94c:	41dfffff 	.word	0x41dfffff
 800a950:	94a03595 	.word	0x94a03595
 800a954:	3fcfffff 	.word	0x3fcfffff

0800a958 <_strtod_r>:
 800a958:	4b05      	ldr	r3, [pc, #20]	; (800a970 <_strtod_r+0x18>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	b410      	push	{r4}
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	4c04      	ldr	r4, [pc, #16]	; (800a974 <_strtod_r+0x1c>)
 800a962:	2b00      	cmp	r3, #0
 800a964:	bf08      	it	eq
 800a966:	4623      	moveq	r3, r4
 800a968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a96c:	f7ff ba00 	b.w	8009d70 <_strtod_l>
 800a970:	2000000c 	.word	0x2000000c
 800a974:	20000070 	.word	0x20000070

0800a978 <strtok>:
 800a978:	4b13      	ldr	r3, [pc, #76]	; (800a9c8 <strtok+0x50>)
 800a97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a97e:	681d      	ldr	r5, [r3, #0]
 800a980:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	b9b4      	cbnz	r4, 800a9b6 <strtok+0x3e>
 800a988:	2050      	movs	r0, #80	; 0x50
 800a98a:	f001 fb35 	bl	800bff8 <malloc>
 800a98e:	65a8      	str	r0, [r5, #88]	; 0x58
 800a990:	e9c0 4400 	strd	r4, r4, [r0]
 800a994:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a998:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a99c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a9a0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a9a4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a9a8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a9ac:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a9b0:	6184      	str	r4, [r0, #24]
 800a9b2:	7704      	strb	r4, [r0, #28]
 800a9b4:	6244      	str	r4, [r0, #36]	; 0x24
 800a9b6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c2:	f000 b803 	b.w	800a9cc <__strtok_r>
 800a9c6:	bf00      	nop
 800a9c8:	2000000c 	.word	0x2000000c

0800a9cc <__strtok_r>:
 800a9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ce:	b918      	cbnz	r0, 800a9d8 <__strtok_r+0xc>
 800a9d0:	6810      	ldr	r0, [r2, #0]
 800a9d2:	b908      	cbnz	r0, 800a9d8 <__strtok_r+0xc>
 800a9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4604      	mov	r4, r0
 800a9da:	460f      	mov	r7, r1
 800a9dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a9e0:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a9e4:	b91e      	cbnz	r6, 800a9ee <__strtok_r+0x22>
 800a9e6:	b96d      	cbnz	r5, 800aa04 <__strtok_r+0x38>
 800a9e8:	6015      	str	r5, [r2, #0]
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	e7f2      	b.n	800a9d4 <__strtok_r+0x8>
 800a9ee:	42b5      	cmp	r5, r6
 800a9f0:	d1f6      	bne.n	800a9e0 <__strtok_r+0x14>
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1ef      	bne.n	800a9d6 <__strtok_r+0xa>
 800a9f6:	6014      	str	r4, [r2, #0]
 800a9f8:	7003      	strb	r3, [r0, #0]
 800a9fa:	e7eb      	b.n	800a9d4 <__strtok_r+0x8>
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	e00d      	b.n	800aa1c <__strtok_r+0x50>
 800aa00:	b926      	cbnz	r6, 800aa0c <__strtok_r+0x40>
 800aa02:	461c      	mov	r4, r3
 800aa04:	4623      	mov	r3, r4
 800aa06:	460f      	mov	r7, r1
 800aa08:	f813 5b01 	ldrb.w	r5, [r3], #1
 800aa0c:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aa10:	42b5      	cmp	r5, r6
 800aa12:	d1f5      	bne.n	800aa00 <__strtok_r+0x34>
 800aa14:	2d00      	cmp	r5, #0
 800aa16:	d0f1      	beq.n	800a9fc <__strtok_r+0x30>
 800aa18:	2100      	movs	r1, #0
 800aa1a:	7021      	strb	r1, [r4, #0]
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	e7d9      	b.n	800a9d4 <__strtok_r+0x8>

0800aa20 <_strtol_l.isra.0>:
 800aa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	4680      	mov	r8, r0
 800aa26:	4689      	mov	r9, r1
 800aa28:	4692      	mov	sl, r2
 800aa2a:	461e      	mov	r6, r3
 800aa2c:	460f      	mov	r7, r1
 800aa2e:	463d      	mov	r5, r7
 800aa30:	9808      	ldr	r0, [sp, #32]
 800aa32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa36:	f001 facb 	bl	800bfd0 <__locale_ctype_ptr_l>
 800aa3a:	4420      	add	r0, r4
 800aa3c:	7843      	ldrb	r3, [r0, #1]
 800aa3e:	f013 0308 	ands.w	r3, r3, #8
 800aa42:	d132      	bne.n	800aaaa <_strtol_l.isra.0+0x8a>
 800aa44:	2c2d      	cmp	r4, #45	; 0x2d
 800aa46:	d132      	bne.n	800aaae <_strtol_l.isra.0+0x8e>
 800aa48:	787c      	ldrb	r4, [r7, #1]
 800aa4a:	1cbd      	adds	r5, r7, #2
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	2e00      	cmp	r6, #0
 800aa50:	d05d      	beq.n	800ab0e <_strtol_l.isra.0+0xee>
 800aa52:	2e10      	cmp	r6, #16
 800aa54:	d109      	bne.n	800aa6a <_strtol_l.isra.0+0x4a>
 800aa56:	2c30      	cmp	r4, #48	; 0x30
 800aa58:	d107      	bne.n	800aa6a <_strtol_l.isra.0+0x4a>
 800aa5a:	782b      	ldrb	r3, [r5, #0]
 800aa5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa60:	2b58      	cmp	r3, #88	; 0x58
 800aa62:	d14f      	bne.n	800ab04 <_strtol_l.isra.0+0xe4>
 800aa64:	786c      	ldrb	r4, [r5, #1]
 800aa66:	2610      	movs	r6, #16
 800aa68:	3502      	adds	r5, #2
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	bf14      	ite	ne
 800aa6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aa72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800aa76:	2700      	movs	r7, #0
 800aa78:	fbb1 fcf6 	udiv	ip, r1, r6
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800aa82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800aa86:	2b09      	cmp	r3, #9
 800aa88:	d817      	bhi.n	800aaba <_strtol_l.isra.0+0x9a>
 800aa8a:	461c      	mov	r4, r3
 800aa8c:	42a6      	cmp	r6, r4
 800aa8e:	dd23      	ble.n	800aad8 <_strtol_l.isra.0+0xb8>
 800aa90:	1c7b      	adds	r3, r7, #1
 800aa92:	d007      	beq.n	800aaa4 <_strtol_l.isra.0+0x84>
 800aa94:	4584      	cmp	ip, r0
 800aa96:	d31c      	bcc.n	800aad2 <_strtol_l.isra.0+0xb2>
 800aa98:	d101      	bne.n	800aa9e <_strtol_l.isra.0+0x7e>
 800aa9a:	45a6      	cmp	lr, r4
 800aa9c:	db19      	blt.n	800aad2 <_strtol_l.isra.0+0xb2>
 800aa9e:	fb00 4006 	mla	r0, r0, r6, r4
 800aaa2:	2701      	movs	r7, #1
 800aaa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaa8:	e7eb      	b.n	800aa82 <_strtol_l.isra.0+0x62>
 800aaaa:	462f      	mov	r7, r5
 800aaac:	e7bf      	b.n	800aa2e <_strtol_l.isra.0+0xe>
 800aaae:	2c2b      	cmp	r4, #43	; 0x2b
 800aab0:	bf04      	itt	eq
 800aab2:	1cbd      	addeq	r5, r7, #2
 800aab4:	787c      	ldrbeq	r4, [r7, #1]
 800aab6:	461a      	mov	r2, r3
 800aab8:	e7c9      	b.n	800aa4e <_strtol_l.isra.0+0x2e>
 800aaba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800aabe:	2b19      	cmp	r3, #25
 800aac0:	d801      	bhi.n	800aac6 <_strtol_l.isra.0+0xa6>
 800aac2:	3c37      	subs	r4, #55	; 0x37
 800aac4:	e7e2      	b.n	800aa8c <_strtol_l.isra.0+0x6c>
 800aac6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800aaca:	2b19      	cmp	r3, #25
 800aacc:	d804      	bhi.n	800aad8 <_strtol_l.isra.0+0xb8>
 800aace:	3c57      	subs	r4, #87	; 0x57
 800aad0:	e7dc      	b.n	800aa8c <_strtol_l.isra.0+0x6c>
 800aad2:	f04f 37ff 	mov.w	r7, #4294967295
 800aad6:	e7e5      	b.n	800aaa4 <_strtol_l.isra.0+0x84>
 800aad8:	1c7b      	adds	r3, r7, #1
 800aada:	d108      	bne.n	800aaee <_strtol_l.isra.0+0xce>
 800aadc:	2322      	movs	r3, #34	; 0x22
 800aade:	f8c8 3000 	str.w	r3, [r8]
 800aae2:	4608      	mov	r0, r1
 800aae4:	f1ba 0f00 	cmp.w	sl, #0
 800aae8:	d107      	bne.n	800aafa <_strtol_l.isra.0+0xda>
 800aaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaee:	b102      	cbz	r2, 800aaf2 <_strtol_l.isra.0+0xd2>
 800aaf0:	4240      	negs	r0, r0
 800aaf2:	f1ba 0f00 	cmp.w	sl, #0
 800aaf6:	d0f8      	beq.n	800aaea <_strtol_l.isra.0+0xca>
 800aaf8:	b10f      	cbz	r7, 800aafe <_strtol_l.isra.0+0xde>
 800aafa:	f105 39ff 	add.w	r9, r5, #4294967295
 800aafe:	f8ca 9000 	str.w	r9, [sl]
 800ab02:	e7f2      	b.n	800aaea <_strtol_l.isra.0+0xca>
 800ab04:	2430      	movs	r4, #48	; 0x30
 800ab06:	2e00      	cmp	r6, #0
 800ab08:	d1af      	bne.n	800aa6a <_strtol_l.isra.0+0x4a>
 800ab0a:	2608      	movs	r6, #8
 800ab0c:	e7ad      	b.n	800aa6a <_strtol_l.isra.0+0x4a>
 800ab0e:	2c30      	cmp	r4, #48	; 0x30
 800ab10:	d0a3      	beq.n	800aa5a <_strtol_l.isra.0+0x3a>
 800ab12:	260a      	movs	r6, #10
 800ab14:	e7a9      	b.n	800aa6a <_strtol_l.isra.0+0x4a>
	...

0800ab18 <_strtol_r>:
 800ab18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab1a:	4c06      	ldr	r4, [pc, #24]	; (800ab34 <_strtol_r+0x1c>)
 800ab1c:	4d06      	ldr	r5, [pc, #24]	; (800ab38 <_strtol_r+0x20>)
 800ab1e:	6824      	ldr	r4, [r4, #0]
 800ab20:	6a24      	ldr	r4, [r4, #32]
 800ab22:	2c00      	cmp	r4, #0
 800ab24:	bf08      	it	eq
 800ab26:	462c      	moveq	r4, r5
 800ab28:	9400      	str	r4, [sp, #0]
 800ab2a:	f7ff ff79 	bl	800aa20 <_strtol_l.isra.0>
 800ab2e:	b003      	add	sp, #12
 800ab30:	bd30      	pop	{r4, r5, pc}
 800ab32:	bf00      	nop
 800ab34:	2000000c 	.word	0x2000000c
 800ab38:	20000070 	.word	0x20000070

0800ab3c <strtol>:
 800ab3c:	4b08      	ldr	r3, [pc, #32]	; (800ab60 <strtol+0x24>)
 800ab3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab40:	681c      	ldr	r4, [r3, #0]
 800ab42:	4d08      	ldr	r5, [pc, #32]	; (800ab64 <strtol+0x28>)
 800ab44:	6a23      	ldr	r3, [r4, #32]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bf08      	it	eq
 800ab4a:	462b      	moveq	r3, r5
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	460a      	mov	r2, r1
 800ab52:	4601      	mov	r1, r0
 800ab54:	4620      	mov	r0, r4
 800ab56:	f7ff ff63 	bl	800aa20 <_strtol_l.isra.0>
 800ab5a:	b003      	add	sp, #12
 800ab5c:	bd30      	pop	{r4, r5, pc}
 800ab5e:	bf00      	nop
 800ab60:	2000000c 	.word	0x2000000c
 800ab64:	20000070 	.word	0x20000070

0800ab68 <quorem>:
 800ab68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	6903      	ldr	r3, [r0, #16]
 800ab6e:	690c      	ldr	r4, [r1, #16]
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	4680      	mov	r8, r0
 800ab74:	f2c0 8082 	blt.w	800ac7c <quorem+0x114>
 800ab78:	3c01      	subs	r4, #1
 800ab7a:	f101 0714 	add.w	r7, r1, #20
 800ab7e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ab82:	f100 0614 	add.w	r6, r0, #20
 800ab86:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ab8a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ab8e:	eb06 030c 	add.w	r3, r6, ip
 800ab92:	3501      	adds	r5, #1
 800ab94:	eb07 090c 	add.w	r9, r7, ip
 800ab98:	9301      	str	r3, [sp, #4]
 800ab9a:	fbb0 f5f5 	udiv	r5, r0, r5
 800ab9e:	b395      	cbz	r5, 800ac06 <quorem+0x9e>
 800aba0:	f04f 0a00 	mov.w	sl, #0
 800aba4:	4638      	mov	r0, r7
 800aba6:	46b6      	mov	lr, r6
 800aba8:	46d3      	mov	fp, sl
 800abaa:	f850 2b04 	ldr.w	r2, [r0], #4
 800abae:	b293      	uxth	r3, r2
 800abb0:	fb05 a303 	mla	r3, r5, r3, sl
 800abb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abb8:	b29b      	uxth	r3, r3
 800abba:	ebab 0303 	sub.w	r3, fp, r3
 800abbe:	0c12      	lsrs	r2, r2, #16
 800abc0:	f8de b000 	ldr.w	fp, [lr]
 800abc4:	fb05 a202 	mla	r2, r5, r2, sl
 800abc8:	fa13 f38b 	uxtah	r3, r3, fp
 800abcc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800abd0:	fa1f fb82 	uxth.w	fp, r2
 800abd4:	f8de 2000 	ldr.w	r2, [lr]
 800abd8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800abdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abe6:	4581      	cmp	r9, r0
 800abe8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800abec:	f84e 3b04 	str.w	r3, [lr], #4
 800abf0:	d2db      	bcs.n	800abaa <quorem+0x42>
 800abf2:	f856 300c 	ldr.w	r3, [r6, ip]
 800abf6:	b933      	cbnz	r3, 800ac06 <quorem+0x9e>
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	3b04      	subs	r3, #4
 800abfc:	429e      	cmp	r6, r3
 800abfe:	461a      	mov	r2, r3
 800ac00:	d330      	bcc.n	800ac64 <quorem+0xfc>
 800ac02:	f8c8 4010 	str.w	r4, [r8, #16]
 800ac06:	4640      	mov	r0, r8
 800ac08:	f001 fc6e 	bl	800c4e8 <__mcmp>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	db25      	blt.n	800ac5c <quorem+0xf4>
 800ac10:	3501      	adds	r5, #1
 800ac12:	4630      	mov	r0, r6
 800ac14:	f04f 0c00 	mov.w	ip, #0
 800ac18:	f857 2b04 	ldr.w	r2, [r7], #4
 800ac1c:	f8d0 e000 	ldr.w	lr, [r0]
 800ac20:	b293      	uxth	r3, r2
 800ac22:	ebac 0303 	sub.w	r3, ip, r3
 800ac26:	0c12      	lsrs	r2, r2, #16
 800ac28:	fa13 f38e 	uxtah	r3, r3, lr
 800ac2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac3a:	45b9      	cmp	r9, r7
 800ac3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac40:	f840 3b04 	str.w	r3, [r0], #4
 800ac44:	d2e8      	bcs.n	800ac18 <quorem+0xb0>
 800ac46:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ac4a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ac4e:	b92a      	cbnz	r2, 800ac5c <quorem+0xf4>
 800ac50:	3b04      	subs	r3, #4
 800ac52:	429e      	cmp	r6, r3
 800ac54:	461a      	mov	r2, r3
 800ac56:	d30b      	bcc.n	800ac70 <quorem+0x108>
 800ac58:	f8c8 4010 	str.w	r4, [r8, #16]
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	b003      	add	sp, #12
 800ac60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac64:	6812      	ldr	r2, [r2, #0]
 800ac66:	3b04      	subs	r3, #4
 800ac68:	2a00      	cmp	r2, #0
 800ac6a:	d1ca      	bne.n	800ac02 <quorem+0x9a>
 800ac6c:	3c01      	subs	r4, #1
 800ac6e:	e7c5      	b.n	800abfc <quorem+0x94>
 800ac70:	6812      	ldr	r2, [r2, #0]
 800ac72:	3b04      	subs	r3, #4
 800ac74:	2a00      	cmp	r2, #0
 800ac76:	d1ef      	bne.n	800ac58 <quorem+0xf0>
 800ac78:	3c01      	subs	r4, #1
 800ac7a:	e7ea      	b.n	800ac52 <quorem+0xea>
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	e7ee      	b.n	800ac5e <quorem+0xf6>

0800ac80 <_dtoa_r>:
 800ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	ec57 6b10 	vmov	r6, r7, d0
 800ac88:	b097      	sub	sp, #92	; 0x5c
 800ac8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac8c:	9106      	str	r1, [sp, #24]
 800ac8e:	4604      	mov	r4, r0
 800ac90:	920b      	str	r2, [sp, #44]	; 0x2c
 800ac92:	9312      	str	r3, [sp, #72]	; 0x48
 800ac94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac98:	e9cd 6700 	strd	r6, r7, [sp]
 800ac9c:	b93d      	cbnz	r5, 800acae <_dtoa_r+0x2e>
 800ac9e:	2010      	movs	r0, #16
 800aca0:	f001 f9aa 	bl	800bff8 <malloc>
 800aca4:	6260      	str	r0, [r4, #36]	; 0x24
 800aca6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acaa:	6005      	str	r5, [r0, #0]
 800acac:	60c5      	str	r5, [r0, #12]
 800acae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	b151      	cbz	r1, 800acca <_dtoa_r+0x4a>
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	604a      	str	r2, [r1, #4]
 800acb8:	2301      	movs	r3, #1
 800acba:	4093      	lsls	r3, r2
 800acbc:	608b      	str	r3, [r1, #8]
 800acbe:	4620      	mov	r0, r4
 800acc0:	f001 f9f3 	bl	800c0aa <_Bfree>
 800acc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acc6:	2200      	movs	r2, #0
 800acc8:	601a      	str	r2, [r3, #0]
 800acca:	1e3b      	subs	r3, r7, #0
 800accc:	bfbb      	ittet	lt
 800acce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800acd2:	9301      	strlt	r3, [sp, #4]
 800acd4:	2300      	movge	r3, #0
 800acd6:	2201      	movlt	r2, #1
 800acd8:	bfac      	ite	ge
 800acda:	f8c8 3000 	strge.w	r3, [r8]
 800acde:	f8c8 2000 	strlt.w	r2, [r8]
 800ace2:	4baf      	ldr	r3, [pc, #700]	; (800afa0 <_dtoa_r+0x320>)
 800ace4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ace8:	ea33 0308 	bics.w	r3, r3, r8
 800acec:	d114      	bne.n	800ad18 <_dtoa_r+0x98>
 800acee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acf0:	f242 730f 	movw	r3, #9999	; 0x270f
 800acf4:	6013      	str	r3, [r2, #0]
 800acf6:	9b00      	ldr	r3, [sp, #0]
 800acf8:	b923      	cbnz	r3, 800ad04 <_dtoa_r+0x84>
 800acfa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f000 8542 	beq.w	800b788 <_dtoa_r+0xb08>
 800ad04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad06:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800afb4 <_dtoa_r+0x334>
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 8544 	beq.w	800b798 <_dtoa_r+0xb18>
 800ad10:	f10b 0303 	add.w	r3, fp, #3
 800ad14:	f000 bd3e 	b.w	800b794 <_dtoa_r+0xb14>
 800ad18:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	2300      	movs	r3, #0
 800ad20:	4630      	mov	r0, r6
 800ad22:	4639      	mov	r1, r7
 800ad24:	f7f5 fed8 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad28:	4681      	mov	r9, r0
 800ad2a:	b168      	cbz	r0, 800ad48 <_dtoa_r+0xc8>
 800ad2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad2e:	2301      	movs	r3, #1
 800ad30:	6013      	str	r3, [r2, #0]
 800ad32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 8524 	beq.w	800b782 <_dtoa_r+0xb02>
 800ad3a:	4b9a      	ldr	r3, [pc, #616]	; (800afa4 <_dtoa_r+0x324>)
 800ad3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad3e:	f103 3bff 	add.w	fp, r3, #4294967295
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	f000 bd28 	b.w	800b798 <_dtoa_r+0xb18>
 800ad48:	aa14      	add	r2, sp, #80	; 0x50
 800ad4a:	a915      	add	r1, sp, #84	; 0x54
 800ad4c:	ec47 6b10 	vmov	d0, r6, r7
 800ad50:	4620      	mov	r0, r4
 800ad52:	f001 fcb7 	bl	800c6c4 <__d2b>
 800ad56:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ad5a:	9004      	str	r0, [sp, #16]
 800ad5c:	2d00      	cmp	r5, #0
 800ad5e:	d07c      	beq.n	800ae5a <_dtoa_r+0x1da>
 800ad60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad64:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ad68:	46b2      	mov	sl, r6
 800ad6a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ad6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad72:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ad76:	2200      	movs	r2, #0
 800ad78:	4b8b      	ldr	r3, [pc, #556]	; (800afa8 <_dtoa_r+0x328>)
 800ad7a:	4650      	mov	r0, sl
 800ad7c:	4659      	mov	r1, fp
 800ad7e:	f7f5 fa8b 	bl	8000298 <__aeabi_dsub>
 800ad82:	a381      	add	r3, pc, #516	; (adr r3, 800af88 <_dtoa_r+0x308>)
 800ad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad88:	f7f5 fc3e 	bl	8000608 <__aeabi_dmul>
 800ad8c:	a380      	add	r3, pc, #512	; (adr r3, 800af90 <_dtoa_r+0x310>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f7f5 fa83 	bl	800029c <__adddf3>
 800ad96:	4606      	mov	r6, r0
 800ad98:	4628      	mov	r0, r5
 800ad9a:	460f      	mov	r7, r1
 800ad9c:	f7f5 fbca 	bl	8000534 <__aeabi_i2d>
 800ada0:	a37d      	add	r3, pc, #500	; (adr r3, 800af98 <_dtoa_r+0x318>)
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	f7f5 fc2f 	bl	8000608 <__aeabi_dmul>
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4630      	mov	r0, r6
 800adb0:	4639      	mov	r1, r7
 800adb2:	f7f5 fa73 	bl	800029c <__adddf3>
 800adb6:	4606      	mov	r6, r0
 800adb8:	460f      	mov	r7, r1
 800adba:	f7f5 fed5 	bl	8000b68 <__aeabi_d2iz>
 800adbe:	2200      	movs	r2, #0
 800adc0:	4682      	mov	sl, r0
 800adc2:	2300      	movs	r3, #0
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fe90 	bl	8000aec <__aeabi_dcmplt>
 800adcc:	b148      	cbz	r0, 800ade2 <_dtoa_r+0x162>
 800adce:	4650      	mov	r0, sl
 800add0:	f7f5 fbb0 	bl	8000534 <__aeabi_i2d>
 800add4:	4632      	mov	r2, r6
 800add6:	463b      	mov	r3, r7
 800add8:	f7f5 fe7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800addc:	b908      	cbnz	r0, 800ade2 <_dtoa_r+0x162>
 800adde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ade2:	f1ba 0f16 	cmp.w	sl, #22
 800ade6:	d859      	bhi.n	800ae9c <_dtoa_r+0x21c>
 800ade8:	4970      	ldr	r1, [pc, #448]	; (800afac <_dtoa_r+0x32c>)
 800adea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800adee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf6:	f7f5 fe97 	bl	8000b28 <__aeabi_dcmpgt>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d050      	beq.n	800aea0 <_dtoa_r+0x220>
 800adfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae02:	2300      	movs	r3, #0
 800ae04:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae08:	1b5d      	subs	r5, r3, r5
 800ae0a:	f1b5 0801 	subs.w	r8, r5, #1
 800ae0e:	bf49      	itett	mi
 800ae10:	f1c5 0301 	rsbmi	r3, r5, #1
 800ae14:	2300      	movpl	r3, #0
 800ae16:	9305      	strmi	r3, [sp, #20]
 800ae18:	f04f 0800 	movmi.w	r8, #0
 800ae1c:	bf58      	it	pl
 800ae1e:	9305      	strpl	r3, [sp, #20]
 800ae20:	f1ba 0f00 	cmp.w	sl, #0
 800ae24:	db3e      	blt.n	800aea4 <_dtoa_r+0x224>
 800ae26:	2300      	movs	r3, #0
 800ae28:	44d0      	add	r8, sl
 800ae2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ae2e:	9307      	str	r3, [sp, #28]
 800ae30:	9b06      	ldr	r3, [sp, #24]
 800ae32:	2b09      	cmp	r3, #9
 800ae34:	f200 8090 	bhi.w	800af58 <_dtoa_r+0x2d8>
 800ae38:	2b05      	cmp	r3, #5
 800ae3a:	bfc4      	itt	gt
 800ae3c:	3b04      	subgt	r3, #4
 800ae3e:	9306      	strgt	r3, [sp, #24]
 800ae40:	9b06      	ldr	r3, [sp, #24]
 800ae42:	f1a3 0302 	sub.w	r3, r3, #2
 800ae46:	bfcc      	ite	gt
 800ae48:	2500      	movgt	r5, #0
 800ae4a:	2501      	movle	r5, #1
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	f200 808f 	bhi.w	800af70 <_dtoa_r+0x2f0>
 800ae52:	e8df f003 	tbb	[pc, r3]
 800ae56:	7f7d      	.short	0x7f7d
 800ae58:	7131      	.short	0x7131
 800ae5a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ae5e:	441d      	add	r5, r3
 800ae60:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ae64:	2820      	cmp	r0, #32
 800ae66:	dd13      	ble.n	800ae90 <_dtoa_r+0x210>
 800ae68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ae6c:	9b00      	ldr	r3, [sp, #0]
 800ae6e:	fa08 f800 	lsl.w	r8, r8, r0
 800ae72:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ae76:	fa23 f000 	lsr.w	r0, r3, r0
 800ae7a:	ea48 0000 	orr.w	r0, r8, r0
 800ae7e:	f7f5 fb49 	bl	8000514 <__aeabi_ui2d>
 800ae82:	2301      	movs	r3, #1
 800ae84:	4682      	mov	sl, r0
 800ae86:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ae8a:	3d01      	subs	r5, #1
 800ae8c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae8e:	e772      	b.n	800ad76 <_dtoa_r+0xf6>
 800ae90:	9b00      	ldr	r3, [sp, #0]
 800ae92:	f1c0 0020 	rsb	r0, r0, #32
 800ae96:	fa03 f000 	lsl.w	r0, r3, r0
 800ae9a:	e7f0      	b.n	800ae7e <_dtoa_r+0x1fe>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e7b1      	b.n	800ae04 <_dtoa_r+0x184>
 800aea0:	900f      	str	r0, [sp, #60]	; 0x3c
 800aea2:	e7b0      	b.n	800ae06 <_dtoa_r+0x186>
 800aea4:	9b05      	ldr	r3, [sp, #20]
 800aea6:	eba3 030a 	sub.w	r3, r3, sl
 800aeaa:	9305      	str	r3, [sp, #20]
 800aeac:	f1ca 0300 	rsb	r3, sl, #0
 800aeb0:	9307      	str	r3, [sp, #28]
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	930e      	str	r3, [sp, #56]	; 0x38
 800aeb6:	e7bb      	b.n	800ae30 <_dtoa_r+0x1b0>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	930a      	str	r3, [sp, #40]	; 0x28
 800aebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	dd59      	ble.n	800af76 <_dtoa_r+0x2f6>
 800aec2:	9302      	str	r3, [sp, #8]
 800aec4:	4699      	mov	r9, r3
 800aec6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aec8:	2200      	movs	r2, #0
 800aeca:	6072      	str	r2, [r6, #4]
 800aecc:	2204      	movs	r2, #4
 800aece:	f102 0014 	add.w	r0, r2, #20
 800aed2:	4298      	cmp	r0, r3
 800aed4:	6871      	ldr	r1, [r6, #4]
 800aed6:	d953      	bls.n	800af80 <_dtoa_r+0x300>
 800aed8:	4620      	mov	r0, r4
 800aeda:	f001 f8b2 	bl	800c042 <_Balloc>
 800aede:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee0:	6030      	str	r0, [r6, #0]
 800aee2:	f1b9 0f0e 	cmp.w	r9, #14
 800aee6:	f8d3 b000 	ldr.w	fp, [r3]
 800aeea:	f200 80e6 	bhi.w	800b0ba <_dtoa_r+0x43a>
 800aeee:	2d00      	cmp	r5, #0
 800aef0:	f000 80e3 	beq.w	800b0ba <_dtoa_r+0x43a>
 800aef4:	ed9d 7b00 	vldr	d7, [sp]
 800aef8:	f1ba 0f00 	cmp.w	sl, #0
 800aefc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800af00:	dd74      	ble.n	800afec <_dtoa_r+0x36c>
 800af02:	4a2a      	ldr	r2, [pc, #168]	; (800afac <_dtoa_r+0x32c>)
 800af04:	f00a 030f 	and.w	r3, sl, #15
 800af08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af0c:	ed93 7b00 	vldr	d7, [r3]
 800af10:	ea4f 162a 	mov.w	r6, sl, asr #4
 800af14:	06f0      	lsls	r0, r6, #27
 800af16:	ed8d 7b08 	vstr	d7, [sp, #32]
 800af1a:	d565      	bpl.n	800afe8 <_dtoa_r+0x368>
 800af1c:	4b24      	ldr	r3, [pc, #144]	; (800afb0 <_dtoa_r+0x330>)
 800af1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af26:	f7f5 fc99 	bl	800085c <__aeabi_ddiv>
 800af2a:	e9cd 0100 	strd	r0, r1, [sp]
 800af2e:	f006 060f 	and.w	r6, r6, #15
 800af32:	2503      	movs	r5, #3
 800af34:	4f1e      	ldr	r7, [pc, #120]	; (800afb0 <_dtoa_r+0x330>)
 800af36:	e04c      	b.n	800afd2 <_dtoa_r+0x352>
 800af38:	2301      	movs	r3, #1
 800af3a:	930a      	str	r3, [sp, #40]	; 0x28
 800af3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af3e:	4453      	add	r3, sl
 800af40:	f103 0901 	add.w	r9, r3, #1
 800af44:	9302      	str	r3, [sp, #8]
 800af46:	464b      	mov	r3, r9
 800af48:	2b01      	cmp	r3, #1
 800af4a:	bfb8      	it	lt
 800af4c:	2301      	movlt	r3, #1
 800af4e:	e7ba      	b.n	800aec6 <_dtoa_r+0x246>
 800af50:	2300      	movs	r3, #0
 800af52:	e7b2      	b.n	800aeba <_dtoa_r+0x23a>
 800af54:	2300      	movs	r3, #0
 800af56:	e7f0      	b.n	800af3a <_dtoa_r+0x2ba>
 800af58:	2501      	movs	r5, #1
 800af5a:	2300      	movs	r3, #0
 800af5c:	9306      	str	r3, [sp, #24]
 800af5e:	950a      	str	r5, [sp, #40]	; 0x28
 800af60:	f04f 33ff 	mov.w	r3, #4294967295
 800af64:	9302      	str	r3, [sp, #8]
 800af66:	4699      	mov	r9, r3
 800af68:	2200      	movs	r2, #0
 800af6a:	2312      	movs	r3, #18
 800af6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800af6e:	e7aa      	b.n	800aec6 <_dtoa_r+0x246>
 800af70:	2301      	movs	r3, #1
 800af72:	930a      	str	r3, [sp, #40]	; 0x28
 800af74:	e7f4      	b.n	800af60 <_dtoa_r+0x2e0>
 800af76:	2301      	movs	r3, #1
 800af78:	9302      	str	r3, [sp, #8]
 800af7a:	4699      	mov	r9, r3
 800af7c:	461a      	mov	r2, r3
 800af7e:	e7f5      	b.n	800af6c <_dtoa_r+0x2ec>
 800af80:	3101      	adds	r1, #1
 800af82:	6071      	str	r1, [r6, #4]
 800af84:	0052      	lsls	r2, r2, #1
 800af86:	e7a2      	b.n	800aece <_dtoa_r+0x24e>
 800af88:	636f4361 	.word	0x636f4361
 800af8c:	3fd287a7 	.word	0x3fd287a7
 800af90:	8b60c8b3 	.word	0x8b60c8b3
 800af94:	3fc68a28 	.word	0x3fc68a28
 800af98:	509f79fb 	.word	0x509f79fb
 800af9c:	3fd34413 	.word	0x3fd34413
 800afa0:	7ff00000 	.word	0x7ff00000
 800afa4:	0800f87d 	.word	0x0800f87d
 800afa8:	3ff80000 	.word	0x3ff80000
 800afac:	0800f9a0 	.word	0x0800f9a0
 800afb0:	0800f978 	.word	0x0800f978
 800afb4:	0800f901 	.word	0x0800f901
 800afb8:	07f1      	lsls	r1, r6, #31
 800afba:	d508      	bpl.n	800afce <_dtoa_r+0x34e>
 800afbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800afc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afc4:	f7f5 fb20 	bl	8000608 <__aeabi_dmul>
 800afc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afcc:	3501      	adds	r5, #1
 800afce:	1076      	asrs	r6, r6, #1
 800afd0:	3708      	adds	r7, #8
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	d1f0      	bne.n	800afb8 <_dtoa_r+0x338>
 800afd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800afda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afde:	f7f5 fc3d 	bl	800085c <__aeabi_ddiv>
 800afe2:	e9cd 0100 	strd	r0, r1, [sp]
 800afe6:	e01a      	b.n	800b01e <_dtoa_r+0x39e>
 800afe8:	2502      	movs	r5, #2
 800afea:	e7a3      	b.n	800af34 <_dtoa_r+0x2b4>
 800afec:	f000 80a0 	beq.w	800b130 <_dtoa_r+0x4b0>
 800aff0:	f1ca 0600 	rsb	r6, sl, #0
 800aff4:	4b9f      	ldr	r3, [pc, #636]	; (800b274 <_dtoa_r+0x5f4>)
 800aff6:	4fa0      	ldr	r7, [pc, #640]	; (800b278 <_dtoa_r+0x5f8>)
 800aff8:	f006 020f 	and.w	r2, r6, #15
 800affc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b008:	f7f5 fafe 	bl	8000608 <__aeabi_dmul>
 800b00c:	e9cd 0100 	strd	r0, r1, [sp]
 800b010:	1136      	asrs	r6, r6, #4
 800b012:	2300      	movs	r3, #0
 800b014:	2502      	movs	r5, #2
 800b016:	2e00      	cmp	r6, #0
 800b018:	d17f      	bne.n	800b11a <_dtoa_r+0x49a>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1e1      	bne.n	800afe2 <_dtoa_r+0x362>
 800b01e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 8087 	beq.w	800b134 <_dtoa_r+0x4b4>
 800b026:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b02a:	2200      	movs	r2, #0
 800b02c:	4b93      	ldr	r3, [pc, #588]	; (800b27c <_dtoa_r+0x5fc>)
 800b02e:	4630      	mov	r0, r6
 800b030:	4639      	mov	r1, r7
 800b032:	f7f5 fd5b 	bl	8000aec <__aeabi_dcmplt>
 800b036:	2800      	cmp	r0, #0
 800b038:	d07c      	beq.n	800b134 <_dtoa_r+0x4b4>
 800b03a:	f1b9 0f00 	cmp.w	r9, #0
 800b03e:	d079      	beq.n	800b134 <_dtoa_r+0x4b4>
 800b040:	9b02      	ldr	r3, [sp, #8]
 800b042:	2b00      	cmp	r3, #0
 800b044:	dd35      	ble.n	800b0b2 <_dtoa_r+0x432>
 800b046:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b04a:	9308      	str	r3, [sp, #32]
 800b04c:	4639      	mov	r1, r7
 800b04e:	2200      	movs	r2, #0
 800b050:	4b8b      	ldr	r3, [pc, #556]	; (800b280 <_dtoa_r+0x600>)
 800b052:	4630      	mov	r0, r6
 800b054:	f7f5 fad8 	bl	8000608 <__aeabi_dmul>
 800b058:	e9cd 0100 	strd	r0, r1, [sp]
 800b05c:	9f02      	ldr	r7, [sp, #8]
 800b05e:	3501      	adds	r5, #1
 800b060:	4628      	mov	r0, r5
 800b062:	f7f5 fa67 	bl	8000534 <__aeabi_i2d>
 800b066:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b06a:	f7f5 facd 	bl	8000608 <__aeabi_dmul>
 800b06e:	2200      	movs	r2, #0
 800b070:	4b84      	ldr	r3, [pc, #528]	; (800b284 <_dtoa_r+0x604>)
 800b072:	f7f5 f913 	bl	800029c <__adddf3>
 800b076:	4605      	mov	r5, r0
 800b078:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b07c:	2f00      	cmp	r7, #0
 800b07e:	d15d      	bne.n	800b13c <_dtoa_r+0x4bc>
 800b080:	2200      	movs	r2, #0
 800b082:	4b81      	ldr	r3, [pc, #516]	; (800b288 <_dtoa_r+0x608>)
 800b084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b088:	f7f5 f906 	bl	8000298 <__aeabi_dsub>
 800b08c:	462a      	mov	r2, r5
 800b08e:	4633      	mov	r3, r6
 800b090:	e9cd 0100 	strd	r0, r1, [sp]
 800b094:	f7f5 fd48 	bl	8000b28 <__aeabi_dcmpgt>
 800b098:	2800      	cmp	r0, #0
 800b09a:	f040 8288 	bne.w	800b5ae <_dtoa_r+0x92e>
 800b09e:	462a      	mov	r2, r5
 800b0a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b0a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0a8:	f7f5 fd20 	bl	8000aec <__aeabi_dcmplt>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	f040 827c 	bne.w	800b5aa <_dtoa_r+0x92a>
 800b0b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0b6:	e9cd 2300 	strd	r2, r3, [sp]
 800b0ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f2c0 8150 	blt.w	800b362 <_dtoa_r+0x6e2>
 800b0c2:	f1ba 0f0e 	cmp.w	sl, #14
 800b0c6:	f300 814c 	bgt.w	800b362 <_dtoa_r+0x6e2>
 800b0ca:	4b6a      	ldr	r3, [pc, #424]	; (800b274 <_dtoa_r+0x5f4>)
 800b0cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0d0:	ed93 7b00 	vldr	d7, [r3]
 800b0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b0dc:	f280 80d8 	bge.w	800b290 <_dtoa_r+0x610>
 800b0e0:	f1b9 0f00 	cmp.w	r9, #0
 800b0e4:	f300 80d4 	bgt.w	800b290 <_dtoa_r+0x610>
 800b0e8:	f040 825e 	bne.w	800b5a8 <_dtoa_r+0x928>
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	4b66      	ldr	r3, [pc, #408]	; (800b288 <_dtoa_r+0x608>)
 800b0f0:	ec51 0b17 	vmov	r0, r1, d7
 800b0f4:	f7f5 fa88 	bl	8000608 <__aeabi_dmul>
 800b0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0fc:	f7f5 fd0a 	bl	8000b14 <__aeabi_dcmpge>
 800b100:	464f      	mov	r7, r9
 800b102:	464e      	mov	r6, r9
 800b104:	2800      	cmp	r0, #0
 800b106:	f040 8234 	bne.w	800b572 <_dtoa_r+0x8f2>
 800b10a:	2331      	movs	r3, #49	; 0x31
 800b10c:	f10b 0501 	add.w	r5, fp, #1
 800b110:	f88b 3000 	strb.w	r3, [fp]
 800b114:	f10a 0a01 	add.w	sl, sl, #1
 800b118:	e22f      	b.n	800b57a <_dtoa_r+0x8fa>
 800b11a:	07f2      	lsls	r2, r6, #31
 800b11c:	d505      	bpl.n	800b12a <_dtoa_r+0x4aa>
 800b11e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b122:	f7f5 fa71 	bl	8000608 <__aeabi_dmul>
 800b126:	3501      	adds	r5, #1
 800b128:	2301      	movs	r3, #1
 800b12a:	1076      	asrs	r6, r6, #1
 800b12c:	3708      	adds	r7, #8
 800b12e:	e772      	b.n	800b016 <_dtoa_r+0x396>
 800b130:	2502      	movs	r5, #2
 800b132:	e774      	b.n	800b01e <_dtoa_r+0x39e>
 800b134:	f8cd a020 	str.w	sl, [sp, #32]
 800b138:	464f      	mov	r7, r9
 800b13a:	e791      	b.n	800b060 <_dtoa_r+0x3e0>
 800b13c:	4b4d      	ldr	r3, [pc, #308]	; (800b274 <_dtoa_r+0x5f4>)
 800b13e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b142:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d047      	beq.n	800b1dc <_dtoa_r+0x55c>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	2000      	movs	r0, #0
 800b152:	494e      	ldr	r1, [pc, #312]	; (800b28c <_dtoa_r+0x60c>)
 800b154:	f7f5 fb82 	bl	800085c <__aeabi_ddiv>
 800b158:	462a      	mov	r2, r5
 800b15a:	4633      	mov	r3, r6
 800b15c:	f7f5 f89c 	bl	8000298 <__aeabi_dsub>
 800b160:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b164:	465d      	mov	r5, fp
 800b166:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b16a:	f7f5 fcfd 	bl	8000b68 <__aeabi_d2iz>
 800b16e:	4606      	mov	r6, r0
 800b170:	f7f5 f9e0 	bl	8000534 <__aeabi_i2d>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b17c:	f7f5 f88c 	bl	8000298 <__aeabi_dsub>
 800b180:	3630      	adds	r6, #48	; 0x30
 800b182:	f805 6b01 	strb.w	r6, [r5], #1
 800b186:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b18a:	e9cd 0100 	strd	r0, r1, [sp]
 800b18e:	f7f5 fcad 	bl	8000aec <__aeabi_dcmplt>
 800b192:	2800      	cmp	r0, #0
 800b194:	d163      	bne.n	800b25e <_dtoa_r+0x5de>
 800b196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b19a:	2000      	movs	r0, #0
 800b19c:	4937      	ldr	r1, [pc, #220]	; (800b27c <_dtoa_r+0x5fc>)
 800b19e:	f7f5 f87b 	bl	8000298 <__aeabi_dsub>
 800b1a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b1a6:	f7f5 fca1 	bl	8000aec <__aeabi_dcmplt>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	f040 80b7 	bne.w	800b31e <_dtoa_r+0x69e>
 800b1b0:	eba5 030b 	sub.w	r3, r5, fp
 800b1b4:	429f      	cmp	r7, r3
 800b1b6:	f77f af7c 	ble.w	800b0b2 <_dtoa_r+0x432>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	4b30      	ldr	r3, [pc, #192]	; (800b280 <_dtoa_r+0x600>)
 800b1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1c2:	f7f5 fa21 	bl	8000608 <__aeabi_dmul>
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b1cc:	4b2c      	ldr	r3, [pc, #176]	; (800b280 <_dtoa_r+0x600>)
 800b1ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1d2:	f7f5 fa19 	bl	8000608 <__aeabi_dmul>
 800b1d6:	e9cd 0100 	strd	r0, r1, [sp]
 800b1da:	e7c4      	b.n	800b166 <_dtoa_r+0x4e6>
 800b1dc:	462a      	mov	r2, r5
 800b1de:	4633      	mov	r3, r6
 800b1e0:	f7f5 fa12 	bl	8000608 <__aeabi_dmul>
 800b1e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b1e8:	eb0b 0507 	add.w	r5, fp, r7
 800b1ec:	465e      	mov	r6, fp
 800b1ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1f2:	f7f5 fcb9 	bl	8000b68 <__aeabi_d2iz>
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	f7f5 f99c 	bl	8000534 <__aeabi_i2d>
 800b1fc:	3730      	adds	r7, #48	; 0x30
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b206:	f7f5 f847 	bl	8000298 <__aeabi_dsub>
 800b20a:	f806 7b01 	strb.w	r7, [r6], #1
 800b20e:	42ae      	cmp	r6, r5
 800b210:	e9cd 0100 	strd	r0, r1, [sp]
 800b214:	f04f 0200 	mov.w	r2, #0
 800b218:	d126      	bne.n	800b268 <_dtoa_r+0x5e8>
 800b21a:	4b1c      	ldr	r3, [pc, #112]	; (800b28c <_dtoa_r+0x60c>)
 800b21c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b220:	f7f5 f83c 	bl	800029c <__adddf3>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b22c:	f7f5 fc7c 	bl	8000b28 <__aeabi_dcmpgt>
 800b230:	2800      	cmp	r0, #0
 800b232:	d174      	bne.n	800b31e <_dtoa_r+0x69e>
 800b234:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b238:	2000      	movs	r0, #0
 800b23a:	4914      	ldr	r1, [pc, #80]	; (800b28c <_dtoa_r+0x60c>)
 800b23c:	f7f5 f82c 	bl	8000298 <__aeabi_dsub>
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b248:	f7f5 fc50 	bl	8000aec <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	f43f af30 	beq.w	800b0b2 <_dtoa_r+0x432>
 800b252:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b256:	2b30      	cmp	r3, #48	; 0x30
 800b258:	f105 32ff 	add.w	r2, r5, #4294967295
 800b25c:	d002      	beq.n	800b264 <_dtoa_r+0x5e4>
 800b25e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b262:	e04a      	b.n	800b2fa <_dtoa_r+0x67a>
 800b264:	4615      	mov	r5, r2
 800b266:	e7f4      	b.n	800b252 <_dtoa_r+0x5d2>
 800b268:	4b05      	ldr	r3, [pc, #20]	; (800b280 <_dtoa_r+0x600>)
 800b26a:	f7f5 f9cd 	bl	8000608 <__aeabi_dmul>
 800b26e:	e9cd 0100 	strd	r0, r1, [sp]
 800b272:	e7bc      	b.n	800b1ee <_dtoa_r+0x56e>
 800b274:	0800f9a0 	.word	0x0800f9a0
 800b278:	0800f978 	.word	0x0800f978
 800b27c:	3ff00000 	.word	0x3ff00000
 800b280:	40240000 	.word	0x40240000
 800b284:	401c0000 	.word	0x401c0000
 800b288:	40140000 	.word	0x40140000
 800b28c:	3fe00000 	.word	0x3fe00000
 800b290:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b294:	465d      	mov	r5, fp
 800b296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b29a:	4630      	mov	r0, r6
 800b29c:	4639      	mov	r1, r7
 800b29e:	f7f5 fadd 	bl	800085c <__aeabi_ddiv>
 800b2a2:	f7f5 fc61 	bl	8000b68 <__aeabi_d2iz>
 800b2a6:	4680      	mov	r8, r0
 800b2a8:	f7f5 f944 	bl	8000534 <__aeabi_i2d>
 800b2ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2b0:	f7f5 f9aa 	bl	8000608 <__aeabi_dmul>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b2c0:	f7f4 ffea 	bl	8000298 <__aeabi_dsub>
 800b2c4:	f805 6b01 	strb.w	r6, [r5], #1
 800b2c8:	eba5 060b 	sub.w	r6, r5, fp
 800b2cc:	45b1      	cmp	r9, r6
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	d139      	bne.n	800b348 <_dtoa_r+0x6c8>
 800b2d4:	f7f4 ffe2 	bl	800029c <__adddf3>
 800b2d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2dc:	4606      	mov	r6, r0
 800b2de:	460f      	mov	r7, r1
 800b2e0:	f7f5 fc22 	bl	8000b28 <__aeabi_dcmpgt>
 800b2e4:	b9c8      	cbnz	r0, 800b31a <_dtoa_r+0x69a>
 800b2e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	f7f5 fbf3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2f2:	b110      	cbz	r0, 800b2fa <_dtoa_r+0x67a>
 800b2f4:	f018 0f01 	tst.w	r8, #1
 800b2f8:	d10f      	bne.n	800b31a <_dtoa_r+0x69a>
 800b2fa:	9904      	ldr	r1, [sp, #16]
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 fed4 	bl	800c0aa <_Bfree>
 800b302:	2300      	movs	r3, #0
 800b304:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b306:	702b      	strb	r3, [r5, #0]
 800b308:	f10a 0301 	add.w	r3, sl, #1
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 8241 	beq.w	800b798 <_dtoa_r+0xb18>
 800b316:	601d      	str	r5, [r3, #0]
 800b318:	e23e      	b.n	800b798 <_dtoa_r+0xb18>
 800b31a:	f8cd a020 	str.w	sl, [sp, #32]
 800b31e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b322:	2a39      	cmp	r2, #57	; 0x39
 800b324:	f105 33ff 	add.w	r3, r5, #4294967295
 800b328:	d108      	bne.n	800b33c <_dtoa_r+0x6bc>
 800b32a:	459b      	cmp	fp, r3
 800b32c:	d10a      	bne.n	800b344 <_dtoa_r+0x6c4>
 800b32e:	9b08      	ldr	r3, [sp, #32]
 800b330:	3301      	adds	r3, #1
 800b332:	9308      	str	r3, [sp, #32]
 800b334:	2330      	movs	r3, #48	; 0x30
 800b336:	f88b 3000 	strb.w	r3, [fp]
 800b33a:	465b      	mov	r3, fp
 800b33c:	781a      	ldrb	r2, [r3, #0]
 800b33e:	3201      	adds	r2, #1
 800b340:	701a      	strb	r2, [r3, #0]
 800b342:	e78c      	b.n	800b25e <_dtoa_r+0x5de>
 800b344:	461d      	mov	r5, r3
 800b346:	e7ea      	b.n	800b31e <_dtoa_r+0x69e>
 800b348:	2200      	movs	r2, #0
 800b34a:	4b9b      	ldr	r3, [pc, #620]	; (800b5b8 <_dtoa_r+0x938>)
 800b34c:	f7f5 f95c 	bl	8000608 <__aeabi_dmul>
 800b350:	2200      	movs	r2, #0
 800b352:	2300      	movs	r3, #0
 800b354:	4606      	mov	r6, r0
 800b356:	460f      	mov	r7, r1
 800b358:	f7f5 fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	d09a      	beq.n	800b296 <_dtoa_r+0x616>
 800b360:	e7cb      	b.n	800b2fa <_dtoa_r+0x67a>
 800b362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b364:	2a00      	cmp	r2, #0
 800b366:	f000 808b 	beq.w	800b480 <_dtoa_r+0x800>
 800b36a:	9a06      	ldr	r2, [sp, #24]
 800b36c:	2a01      	cmp	r2, #1
 800b36e:	dc6e      	bgt.n	800b44e <_dtoa_r+0x7ce>
 800b370:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b372:	2a00      	cmp	r2, #0
 800b374:	d067      	beq.n	800b446 <_dtoa_r+0x7c6>
 800b376:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b37a:	9f07      	ldr	r7, [sp, #28]
 800b37c:	9d05      	ldr	r5, [sp, #20]
 800b37e:	9a05      	ldr	r2, [sp, #20]
 800b380:	2101      	movs	r1, #1
 800b382:	441a      	add	r2, r3
 800b384:	4620      	mov	r0, r4
 800b386:	9205      	str	r2, [sp, #20]
 800b388:	4498      	add	r8, r3
 800b38a:	f000 ff6c 	bl	800c266 <__i2b>
 800b38e:	4606      	mov	r6, r0
 800b390:	2d00      	cmp	r5, #0
 800b392:	dd0c      	ble.n	800b3ae <_dtoa_r+0x72e>
 800b394:	f1b8 0f00 	cmp.w	r8, #0
 800b398:	dd09      	ble.n	800b3ae <_dtoa_r+0x72e>
 800b39a:	4545      	cmp	r5, r8
 800b39c:	9a05      	ldr	r2, [sp, #20]
 800b39e:	462b      	mov	r3, r5
 800b3a0:	bfa8      	it	ge
 800b3a2:	4643      	movge	r3, r8
 800b3a4:	1ad2      	subs	r2, r2, r3
 800b3a6:	9205      	str	r2, [sp, #20]
 800b3a8:	1aed      	subs	r5, r5, r3
 800b3aa:	eba8 0803 	sub.w	r8, r8, r3
 800b3ae:	9b07      	ldr	r3, [sp, #28]
 800b3b0:	b1eb      	cbz	r3, 800b3ee <_dtoa_r+0x76e>
 800b3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d067      	beq.n	800b488 <_dtoa_r+0x808>
 800b3b8:	b18f      	cbz	r7, 800b3de <_dtoa_r+0x75e>
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	463a      	mov	r2, r7
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 fff0 	bl	800c3a4 <__pow5mult>
 800b3c4:	9a04      	ldr	r2, [sp, #16]
 800b3c6:	4601      	mov	r1, r0
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 ff54 	bl	800c278 <__multiply>
 800b3d0:	9904      	ldr	r1, [sp, #16]
 800b3d2:	9008      	str	r0, [sp, #32]
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 fe68 	bl	800c0aa <_Bfree>
 800b3da:	9b08      	ldr	r3, [sp, #32]
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	9b07      	ldr	r3, [sp, #28]
 800b3e0:	1bda      	subs	r2, r3, r7
 800b3e2:	d004      	beq.n	800b3ee <_dtoa_r+0x76e>
 800b3e4:	9904      	ldr	r1, [sp, #16]
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 ffdc 	bl	800c3a4 <__pow5mult>
 800b3ec:	9004      	str	r0, [sp, #16]
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f000 ff38 	bl	800c266 <__i2b>
 800b3f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	f000 81d0 	beq.w	800b7a0 <_dtoa_r+0xb20>
 800b400:	461a      	mov	r2, r3
 800b402:	4601      	mov	r1, r0
 800b404:	4620      	mov	r0, r4
 800b406:	f000 ffcd 	bl	800c3a4 <__pow5mult>
 800b40a:	9b06      	ldr	r3, [sp, #24]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	4607      	mov	r7, r0
 800b410:	dc40      	bgt.n	800b494 <_dtoa_r+0x814>
 800b412:	9b00      	ldr	r3, [sp, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d139      	bne.n	800b48c <_dtoa_r+0x80c>
 800b418:	9b01      	ldr	r3, [sp, #4]
 800b41a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d136      	bne.n	800b490 <_dtoa_r+0x810>
 800b422:	9b01      	ldr	r3, [sp, #4]
 800b424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b428:	0d1b      	lsrs	r3, r3, #20
 800b42a:	051b      	lsls	r3, r3, #20
 800b42c:	b12b      	cbz	r3, 800b43a <_dtoa_r+0x7ba>
 800b42e:	9b05      	ldr	r3, [sp, #20]
 800b430:	3301      	adds	r3, #1
 800b432:	9305      	str	r3, [sp, #20]
 800b434:	f108 0801 	add.w	r8, r8, #1
 800b438:	2301      	movs	r3, #1
 800b43a:	9307      	str	r3, [sp, #28]
 800b43c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d12a      	bne.n	800b498 <_dtoa_r+0x818>
 800b442:	2001      	movs	r0, #1
 800b444:	e030      	b.n	800b4a8 <_dtoa_r+0x828>
 800b446:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b448:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b44c:	e795      	b.n	800b37a <_dtoa_r+0x6fa>
 800b44e:	9b07      	ldr	r3, [sp, #28]
 800b450:	f109 37ff 	add.w	r7, r9, #4294967295
 800b454:	42bb      	cmp	r3, r7
 800b456:	bfbf      	itttt	lt
 800b458:	9b07      	ldrlt	r3, [sp, #28]
 800b45a:	9707      	strlt	r7, [sp, #28]
 800b45c:	1afa      	sublt	r2, r7, r3
 800b45e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b460:	bfbb      	ittet	lt
 800b462:	189b      	addlt	r3, r3, r2
 800b464:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b466:	1bdf      	subge	r7, r3, r7
 800b468:	2700      	movlt	r7, #0
 800b46a:	f1b9 0f00 	cmp.w	r9, #0
 800b46e:	bfb5      	itete	lt
 800b470:	9b05      	ldrlt	r3, [sp, #20]
 800b472:	9d05      	ldrge	r5, [sp, #20]
 800b474:	eba3 0509 	sublt.w	r5, r3, r9
 800b478:	464b      	movge	r3, r9
 800b47a:	bfb8      	it	lt
 800b47c:	2300      	movlt	r3, #0
 800b47e:	e77e      	b.n	800b37e <_dtoa_r+0x6fe>
 800b480:	9f07      	ldr	r7, [sp, #28]
 800b482:	9d05      	ldr	r5, [sp, #20]
 800b484:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b486:	e783      	b.n	800b390 <_dtoa_r+0x710>
 800b488:	9a07      	ldr	r2, [sp, #28]
 800b48a:	e7ab      	b.n	800b3e4 <_dtoa_r+0x764>
 800b48c:	2300      	movs	r3, #0
 800b48e:	e7d4      	b.n	800b43a <_dtoa_r+0x7ba>
 800b490:	9b00      	ldr	r3, [sp, #0]
 800b492:	e7d2      	b.n	800b43a <_dtoa_r+0x7ba>
 800b494:	2300      	movs	r3, #0
 800b496:	9307      	str	r3, [sp, #28]
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b49e:	6918      	ldr	r0, [r3, #16]
 800b4a0:	f000 fe93 	bl	800c1ca <__hi0bits>
 800b4a4:	f1c0 0020 	rsb	r0, r0, #32
 800b4a8:	4440      	add	r0, r8
 800b4aa:	f010 001f 	ands.w	r0, r0, #31
 800b4ae:	d047      	beq.n	800b540 <_dtoa_r+0x8c0>
 800b4b0:	f1c0 0320 	rsb	r3, r0, #32
 800b4b4:	2b04      	cmp	r3, #4
 800b4b6:	dd3b      	ble.n	800b530 <_dtoa_r+0x8b0>
 800b4b8:	9b05      	ldr	r3, [sp, #20]
 800b4ba:	f1c0 001c 	rsb	r0, r0, #28
 800b4be:	4403      	add	r3, r0
 800b4c0:	9305      	str	r3, [sp, #20]
 800b4c2:	4405      	add	r5, r0
 800b4c4:	4480      	add	r8, r0
 800b4c6:	9b05      	ldr	r3, [sp, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	dd05      	ble.n	800b4d8 <_dtoa_r+0x858>
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	9904      	ldr	r1, [sp, #16]
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 ffb5 	bl	800c440 <__lshift>
 800b4d6:	9004      	str	r0, [sp, #16]
 800b4d8:	f1b8 0f00 	cmp.w	r8, #0
 800b4dc:	dd05      	ble.n	800b4ea <_dtoa_r+0x86a>
 800b4de:	4639      	mov	r1, r7
 800b4e0:	4642      	mov	r2, r8
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 ffac 	bl	800c440 <__lshift>
 800b4e8:	4607      	mov	r7, r0
 800b4ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4ec:	b353      	cbz	r3, 800b544 <_dtoa_r+0x8c4>
 800b4ee:	4639      	mov	r1, r7
 800b4f0:	9804      	ldr	r0, [sp, #16]
 800b4f2:	f000 fff9 	bl	800c4e8 <__mcmp>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	da24      	bge.n	800b544 <_dtoa_r+0x8c4>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	220a      	movs	r2, #10
 800b4fe:	9904      	ldr	r1, [sp, #16]
 800b500:	4620      	mov	r0, r4
 800b502:	f000 fde9 	bl	800c0d8 <__multadd>
 800b506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b508:	9004      	str	r0, [sp, #16]
 800b50a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f000 814d 	beq.w	800b7ae <_dtoa_r+0xb2e>
 800b514:	2300      	movs	r3, #0
 800b516:	4631      	mov	r1, r6
 800b518:	220a      	movs	r2, #10
 800b51a:	4620      	mov	r0, r4
 800b51c:	f000 fddc 	bl	800c0d8 <__multadd>
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	4606      	mov	r6, r0
 800b526:	dc4f      	bgt.n	800b5c8 <_dtoa_r+0x948>
 800b528:	9b06      	ldr	r3, [sp, #24]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	dd4c      	ble.n	800b5c8 <_dtoa_r+0x948>
 800b52e:	e011      	b.n	800b554 <_dtoa_r+0x8d4>
 800b530:	d0c9      	beq.n	800b4c6 <_dtoa_r+0x846>
 800b532:	9a05      	ldr	r2, [sp, #20]
 800b534:	331c      	adds	r3, #28
 800b536:	441a      	add	r2, r3
 800b538:	9205      	str	r2, [sp, #20]
 800b53a:	441d      	add	r5, r3
 800b53c:	4498      	add	r8, r3
 800b53e:	e7c2      	b.n	800b4c6 <_dtoa_r+0x846>
 800b540:	4603      	mov	r3, r0
 800b542:	e7f6      	b.n	800b532 <_dtoa_r+0x8b2>
 800b544:	f1b9 0f00 	cmp.w	r9, #0
 800b548:	dc38      	bgt.n	800b5bc <_dtoa_r+0x93c>
 800b54a:	9b06      	ldr	r3, [sp, #24]
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	dd35      	ble.n	800b5bc <_dtoa_r+0x93c>
 800b550:	f8cd 9008 	str.w	r9, [sp, #8]
 800b554:	9b02      	ldr	r3, [sp, #8]
 800b556:	b963      	cbnz	r3, 800b572 <_dtoa_r+0x8f2>
 800b558:	4639      	mov	r1, r7
 800b55a:	2205      	movs	r2, #5
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 fdbb 	bl	800c0d8 <__multadd>
 800b562:	4601      	mov	r1, r0
 800b564:	4607      	mov	r7, r0
 800b566:	9804      	ldr	r0, [sp, #16]
 800b568:	f000 ffbe 	bl	800c4e8 <__mcmp>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	f73f adcc 	bgt.w	800b10a <_dtoa_r+0x48a>
 800b572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b574:	465d      	mov	r5, fp
 800b576:	ea6f 0a03 	mvn.w	sl, r3
 800b57a:	f04f 0900 	mov.w	r9, #0
 800b57e:	4639      	mov	r1, r7
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fd92 	bl	800c0aa <_Bfree>
 800b586:	2e00      	cmp	r6, #0
 800b588:	f43f aeb7 	beq.w	800b2fa <_dtoa_r+0x67a>
 800b58c:	f1b9 0f00 	cmp.w	r9, #0
 800b590:	d005      	beq.n	800b59e <_dtoa_r+0x91e>
 800b592:	45b1      	cmp	r9, r6
 800b594:	d003      	beq.n	800b59e <_dtoa_r+0x91e>
 800b596:	4649      	mov	r1, r9
 800b598:	4620      	mov	r0, r4
 800b59a:	f000 fd86 	bl	800c0aa <_Bfree>
 800b59e:	4631      	mov	r1, r6
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 fd82 	bl	800c0aa <_Bfree>
 800b5a6:	e6a8      	b.n	800b2fa <_dtoa_r+0x67a>
 800b5a8:	2700      	movs	r7, #0
 800b5aa:	463e      	mov	r6, r7
 800b5ac:	e7e1      	b.n	800b572 <_dtoa_r+0x8f2>
 800b5ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b5b2:	463e      	mov	r6, r7
 800b5b4:	e5a9      	b.n	800b10a <_dtoa_r+0x48a>
 800b5b6:	bf00      	nop
 800b5b8:	40240000 	.word	0x40240000
 800b5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5be:	f8cd 9008 	str.w	r9, [sp, #8]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 80fa 	beq.w	800b7bc <_dtoa_r+0xb3c>
 800b5c8:	2d00      	cmp	r5, #0
 800b5ca:	dd05      	ble.n	800b5d8 <_dtoa_r+0x958>
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f000 ff35 	bl	800c440 <__lshift>
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	9b07      	ldr	r3, [sp, #28]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d04c      	beq.n	800b678 <_dtoa_r+0x9f8>
 800b5de:	6871      	ldr	r1, [r6, #4]
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f000 fd2e 	bl	800c042 <_Balloc>
 800b5e6:	6932      	ldr	r2, [r6, #16]
 800b5e8:	3202      	adds	r2, #2
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	0092      	lsls	r2, r2, #2
 800b5ee:	f106 010c 	add.w	r1, r6, #12
 800b5f2:	300c      	adds	r0, #12
 800b5f4:	f000 fd1a 	bl	800c02c <memcpy>
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f000 ff1f 	bl	800c440 <__lshift>
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	f8cd b014 	str.w	fp, [sp, #20]
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	46b1      	mov	r9, r6
 800b60e:	9307      	str	r3, [sp, #28]
 800b610:	4606      	mov	r6, r0
 800b612:	4639      	mov	r1, r7
 800b614:	9804      	ldr	r0, [sp, #16]
 800b616:	f7ff faa7 	bl	800ab68 <quorem>
 800b61a:	4649      	mov	r1, r9
 800b61c:	4605      	mov	r5, r0
 800b61e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b622:	9804      	ldr	r0, [sp, #16]
 800b624:	f000 ff60 	bl	800c4e8 <__mcmp>
 800b628:	4632      	mov	r2, r6
 800b62a:	9000      	str	r0, [sp, #0]
 800b62c:	4639      	mov	r1, r7
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 ff74 	bl	800c51c <__mdiff>
 800b634:	68c3      	ldr	r3, [r0, #12]
 800b636:	4602      	mov	r2, r0
 800b638:	bb03      	cbnz	r3, 800b67c <_dtoa_r+0x9fc>
 800b63a:	4601      	mov	r1, r0
 800b63c:	9008      	str	r0, [sp, #32]
 800b63e:	9804      	ldr	r0, [sp, #16]
 800b640:	f000 ff52 	bl	800c4e8 <__mcmp>
 800b644:	9a08      	ldr	r2, [sp, #32]
 800b646:	4603      	mov	r3, r0
 800b648:	4611      	mov	r1, r2
 800b64a:	4620      	mov	r0, r4
 800b64c:	9308      	str	r3, [sp, #32]
 800b64e:	f000 fd2c 	bl	800c0aa <_Bfree>
 800b652:	9b08      	ldr	r3, [sp, #32]
 800b654:	b9a3      	cbnz	r3, 800b680 <_dtoa_r+0xa00>
 800b656:	9a06      	ldr	r2, [sp, #24]
 800b658:	b992      	cbnz	r2, 800b680 <_dtoa_r+0xa00>
 800b65a:	9a07      	ldr	r2, [sp, #28]
 800b65c:	b982      	cbnz	r2, 800b680 <_dtoa_r+0xa00>
 800b65e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b662:	d029      	beq.n	800b6b8 <_dtoa_r+0xa38>
 800b664:	9b00      	ldr	r3, [sp, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	dd01      	ble.n	800b66e <_dtoa_r+0x9ee>
 800b66a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b66e:	9b05      	ldr	r3, [sp, #20]
 800b670:	1c5d      	adds	r5, r3, #1
 800b672:	f883 8000 	strb.w	r8, [r3]
 800b676:	e782      	b.n	800b57e <_dtoa_r+0x8fe>
 800b678:	4630      	mov	r0, r6
 800b67a:	e7c2      	b.n	800b602 <_dtoa_r+0x982>
 800b67c:	2301      	movs	r3, #1
 800b67e:	e7e3      	b.n	800b648 <_dtoa_r+0x9c8>
 800b680:	9a00      	ldr	r2, [sp, #0]
 800b682:	2a00      	cmp	r2, #0
 800b684:	db04      	blt.n	800b690 <_dtoa_r+0xa10>
 800b686:	d125      	bne.n	800b6d4 <_dtoa_r+0xa54>
 800b688:	9a06      	ldr	r2, [sp, #24]
 800b68a:	bb1a      	cbnz	r2, 800b6d4 <_dtoa_r+0xa54>
 800b68c:	9a07      	ldr	r2, [sp, #28]
 800b68e:	bb0a      	cbnz	r2, 800b6d4 <_dtoa_r+0xa54>
 800b690:	2b00      	cmp	r3, #0
 800b692:	ddec      	ble.n	800b66e <_dtoa_r+0x9ee>
 800b694:	2201      	movs	r2, #1
 800b696:	9904      	ldr	r1, [sp, #16]
 800b698:	4620      	mov	r0, r4
 800b69a:	f000 fed1 	bl	800c440 <__lshift>
 800b69e:	4639      	mov	r1, r7
 800b6a0:	9004      	str	r0, [sp, #16]
 800b6a2:	f000 ff21 	bl	800c4e8 <__mcmp>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	dc03      	bgt.n	800b6b2 <_dtoa_r+0xa32>
 800b6aa:	d1e0      	bne.n	800b66e <_dtoa_r+0x9ee>
 800b6ac:	f018 0f01 	tst.w	r8, #1
 800b6b0:	d0dd      	beq.n	800b66e <_dtoa_r+0x9ee>
 800b6b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b6b6:	d1d8      	bne.n	800b66a <_dtoa_r+0x9ea>
 800b6b8:	9b05      	ldr	r3, [sp, #20]
 800b6ba:	9a05      	ldr	r2, [sp, #20]
 800b6bc:	1c5d      	adds	r5, r3, #1
 800b6be:	2339      	movs	r3, #57	; 0x39
 800b6c0:	7013      	strb	r3, [r2, #0]
 800b6c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b6c6:	2b39      	cmp	r3, #57	; 0x39
 800b6c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800b6cc:	d04f      	beq.n	800b76e <_dtoa_r+0xaee>
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	7013      	strb	r3, [r2, #0]
 800b6d2:	e754      	b.n	800b57e <_dtoa_r+0x8fe>
 800b6d4:	9a05      	ldr	r2, [sp, #20]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f102 0501 	add.w	r5, r2, #1
 800b6dc:	dd06      	ble.n	800b6ec <_dtoa_r+0xa6c>
 800b6de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b6e2:	d0e9      	beq.n	800b6b8 <_dtoa_r+0xa38>
 800b6e4:	f108 0801 	add.w	r8, r8, #1
 800b6e8:	9b05      	ldr	r3, [sp, #20]
 800b6ea:	e7c2      	b.n	800b672 <_dtoa_r+0x9f2>
 800b6ec:	9a02      	ldr	r2, [sp, #8]
 800b6ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b6f2:	eba5 030b 	sub.w	r3, r5, fp
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d021      	beq.n	800b73e <_dtoa_r+0xabe>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	220a      	movs	r2, #10
 800b6fe:	9904      	ldr	r1, [sp, #16]
 800b700:	4620      	mov	r0, r4
 800b702:	f000 fce9 	bl	800c0d8 <__multadd>
 800b706:	45b1      	cmp	r9, r6
 800b708:	9004      	str	r0, [sp, #16]
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	f04f 020a 	mov.w	r2, #10
 800b712:	4649      	mov	r1, r9
 800b714:	4620      	mov	r0, r4
 800b716:	d105      	bne.n	800b724 <_dtoa_r+0xaa4>
 800b718:	f000 fcde 	bl	800c0d8 <__multadd>
 800b71c:	4681      	mov	r9, r0
 800b71e:	4606      	mov	r6, r0
 800b720:	9505      	str	r5, [sp, #20]
 800b722:	e776      	b.n	800b612 <_dtoa_r+0x992>
 800b724:	f000 fcd8 	bl	800c0d8 <__multadd>
 800b728:	4631      	mov	r1, r6
 800b72a:	4681      	mov	r9, r0
 800b72c:	2300      	movs	r3, #0
 800b72e:	220a      	movs	r2, #10
 800b730:	4620      	mov	r0, r4
 800b732:	f000 fcd1 	bl	800c0d8 <__multadd>
 800b736:	4606      	mov	r6, r0
 800b738:	e7f2      	b.n	800b720 <_dtoa_r+0xaa0>
 800b73a:	f04f 0900 	mov.w	r9, #0
 800b73e:	2201      	movs	r2, #1
 800b740:	9904      	ldr	r1, [sp, #16]
 800b742:	4620      	mov	r0, r4
 800b744:	f000 fe7c 	bl	800c440 <__lshift>
 800b748:	4639      	mov	r1, r7
 800b74a:	9004      	str	r0, [sp, #16]
 800b74c:	f000 fecc 	bl	800c4e8 <__mcmp>
 800b750:	2800      	cmp	r0, #0
 800b752:	dcb6      	bgt.n	800b6c2 <_dtoa_r+0xa42>
 800b754:	d102      	bne.n	800b75c <_dtoa_r+0xadc>
 800b756:	f018 0f01 	tst.w	r8, #1
 800b75a:	d1b2      	bne.n	800b6c2 <_dtoa_r+0xa42>
 800b75c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b760:	2b30      	cmp	r3, #48	; 0x30
 800b762:	f105 32ff 	add.w	r2, r5, #4294967295
 800b766:	f47f af0a 	bne.w	800b57e <_dtoa_r+0x8fe>
 800b76a:	4615      	mov	r5, r2
 800b76c:	e7f6      	b.n	800b75c <_dtoa_r+0xadc>
 800b76e:	4593      	cmp	fp, r2
 800b770:	d105      	bne.n	800b77e <_dtoa_r+0xafe>
 800b772:	2331      	movs	r3, #49	; 0x31
 800b774:	f10a 0a01 	add.w	sl, sl, #1
 800b778:	f88b 3000 	strb.w	r3, [fp]
 800b77c:	e6ff      	b.n	800b57e <_dtoa_r+0x8fe>
 800b77e:	4615      	mov	r5, r2
 800b780:	e79f      	b.n	800b6c2 <_dtoa_r+0xa42>
 800b782:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b7e8 <_dtoa_r+0xb68>
 800b786:	e007      	b.n	800b798 <_dtoa_r+0xb18>
 800b788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b78a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b7ec <_dtoa_r+0xb6c>
 800b78e:	b11b      	cbz	r3, 800b798 <_dtoa_r+0xb18>
 800b790:	f10b 0308 	add.w	r3, fp, #8
 800b794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	4658      	mov	r0, fp
 800b79a:	b017      	add	sp, #92	; 0x5c
 800b79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a0:	9b06      	ldr	r3, [sp, #24]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	f77f ae35 	ble.w	800b412 <_dtoa_r+0x792>
 800b7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7aa:	9307      	str	r3, [sp, #28]
 800b7ac:	e649      	b.n	800b442 <_dtoa_r+0x7c2>
 800b7ae:	9b02      	ldr	r3, [sp, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dc03      	bgt.n	800b7bc <_dtoa_r+0xb3c>
 800b7b4:	9b06      	ldr	r3, [sp, #24]
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	f73f aecc 	bgt.w	800b554 <_dtoa_r+0x8d4>
 800b7bc:	465d      	mov	r5, fp
 800b7be:	4639      	mov	r1, r7
 800b7c0:	9804      	ldr	r0, [sp, #16]
 800b7c2:	f7ff f9d1 	bl	800ab68 <quorem>
 800b7c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b7ca:	f805 8b01 	strb.w	r8, [r5], #1
 800b7ce:	9a02      	ldr	r2, [sp, #8]
 800b7d0:	eba5 030b 	sub.w	r3, r5, fp
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	ddb0      	ble.n	800b73a <_dtoa_r+0xaba>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	220a      	movs	r2, #10
 800b7dc:	9904      	ldr	r1, [sp, #16]
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f000 fc7a 	bl	800c0d8 <__multadd>
 800b7e4:	9004      	str	r0, [sp, #16]
 800b7e6:	e7ea      	b.n	800b7be <_dtoa_r+0xb3e>
 800b7e8:	0800f87c 	.word	0x0800f87c
 800b7ec:	0800f8f8 	.word	0x0800f8f8

0800b7f0 <std>:
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	b510      	push	{r4, lr}
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7fa:	6083      	str	r3, [r0, #8]
 800b7fc:	8181      	strh	r1, [r0, #12]
 800b7fe:	6643      	str	r3, [r0, #100]	; 0x64
 800b800:	81c2      	strh	r2, [r0, #14]
 800b802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b806:	6183      	str	r3, [r0, #24]
 800b808:	4619      	mov	r1, r3
 800b80a:	2208      	movs	r2, #8
 800b80c:	305c      	adds	r0, #92	; 0x5c
 800b80e:	f7fd fc0d 	bl	800902c <memset>
 800b812:	4b05      	ldr	r3, [pc, #20]	; (800b828 <std+0x38>)
 800b814:	6263      	str	r3, [r4, #36]	; 0x24
 800b816:	4b05      	ldr	r3, [pc, #20]	; (800b82c <std+0x3c>)
 800b818:	62a3      	str	r3, [r4, #40]	; 0x28
 800b81a:	4b05      	ldr	r3, [pc, #20]	; (800b830 <std+0x40>)
 800b81c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b81e:	4b05      	ldr	r3, [pc, #20]	; (800b834 <std+0x44>)
 800b820:	6224      	str	r4, [r4, #32]
 800b822:	6323      	str	r3, [r4, #48]	; 0x30
 800b824:	bd10      	pop	{r4, pc}
 800b826:	bf00      	nop
 800b828:	0800cef1 	.word	0x0800cef1
 800b82c:	0800cf13 	.word	0x0800cf13
 800b830:	0800cf4b 	.word	0x0800cf4b
 800b834:	0800cf6f 	.word	0x0800cf6f

0800b838 <_cleanup_r>:
 800b838:	4901      	ldr	r1, [pc, #4]	; (800b840 <_cleanup_r+0x8>)
 800b83a:	f000 b885 	b.w	800b948 <_fwalk_reent>
 800b83e:	bf00      	nop
 800b840:	0800d289 	.word	0x0800d289

0800b844 <__sfmoreglue>:
 800b844:	b570      	push	{r4, r5, r6, lr}
 800b846:	1e4a      	subs	r2, r1, #1
 800b848:	2568      	movs	r5, #104	; 0x68
 800b84a:	4355      	muls	r5, r2
 800b84c:	460e      	mov	r6, r1
 800b84e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b852:	f001 f851 	bl	800c8f8 <_malloc_r>
 800b856:	4604      	mov	r4, r0
 800b858:	b140      	cbz	r0, 800b86c <__sfmoreglue+0x28>
 800b85a:	2100      	movs	r1, #0
 800b85c:	e9c0 1600 	strd	r1, r6, [r0]
 800b860:	300c      	adds	r0, #12
 800b862:	60a0      	str	r0, [r4, #8]
 800b864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b868:	f7fd fbe0 	bl	800902c <memset>
 800b86c:	4620      	mov	r0, r4
 800b86e:	bd70      	pop	{r4, r5, r6, pc}

0800b870 <__sinit>:
 800b870:	6983      	ldr	r3, [r0, #24]
 800b872:	b510      	push	{r4, lr}
 800b874:	4604      	mov	r4, r0
 800b876:	bb33      	cbnz	r3, 800b8c6 <__sinit+0x56>
 800b878:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b87c:	6503      	str	r3, [r0, #80]	; 0x50
 800b87e:	4b12      	ldr	r3, [pc, #72]	; (800b8c8 <__sinit+0x58>)
 800b880:	4a12      	ldr	r2, [pc, #72]	; (800b8cc <__sinit+0x5c>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6282      	str	r2, [r0, #40]	; 0x28
 800b886:	4298      	cmp	r0, r3
 800b888:	bf04      	itt	eq
 800b88a:	2301      	moveq	r3, #1
 800b88c:	6183      	streq	r3, [r0, #24]
 800b88e:	f000 f81f 	bl	800b8d0 <__sfp>
 800b892:	6060      	str	r0, [r4, #4]
 800b894:	4620      	mov	r0, r4
 800b896:	f000 f81b 	bl	800b8d0 <__sfp>
 800b89a:	60a0      	str	r0, [r4, #8]
 800b89c:	4620      	mov	r0, r4
 800b89e:	f000 f817 	bl	800b8d0 <__sfp>
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	60e0      	str	r0, [r4, #12]
 800b8a6:	2104      	movs	r1, #4
 800b8a8:	6860      	ldr	r0, [r4, #4]
 800b8aa:	f7ff ffa1 	bl	800b7f0 <std>
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	2109      	movs	r1, #9
 800b8b2:	68a0      	ldr	r0, [r4, #8]
 800b8b4:	f7ff ff9c 	bl	800b7f0 <std>
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	2112      	movs	r1, #18
 800b8bc:	68e0      	ldr	r0, [r4, #12]
 800b8be:	f7ff ff97 	bl	800b7f0 <std>
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	61a3      	str	r3, [r4, #24]
 800b8c6:	bd10      	pop	{r4, pc}
 800b8c8:	0800f86c 	.word	0x0800f86c
 800b8cc:	0800b839 	.word	0x0800b839

0800b8d0 <__sfp>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <__sfp+0x70>)
 800b8d4:	681e      	ldr	r6, [r3, #0]
 800b8d6:	69b3      	ldr	r3, [r6, #24]
 800b8d8:	4607      	mov	r7, r0
 800b8da:	b913      	cbnz	r3, 800b8e2 <__sfp+0x12>
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f7ff ffc7 	bl	800b870 <__sinit>
 800b8e2:	3648      	adds	r6, #72	; 0x48
 800b8e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	d503      	bpl.n	800b8f4 <__sfp+0x24>
 800b8ec:	6833      	ldr	r3, [r6, #0]
 800b8ee:	b133      	cbz	r3, 800b8fe <__sfp+0x2e>
 800b8f0:	6836      	ldr	r6, [r6, #0]
 800b8f2:	e7f7      	b.n	800b8e4 <__sfp+0x14>
 800b8f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8f8:	b16d      	cbz	r5, 800b916 <__sfp+0x46>
 800b8fa:	3468      	adds	r4, #104	; 0x68
 800b8fc:	e7f4      	b.n	800b8e8 <__sfp+0x18>
 800b8fe:	2104      	movs	r1, #4
 800b900:	4638      	mov	r0, r7
 800b902:	f7ff ff9f 	bl	800b844 <__sfmoreglue>
 800b906:	6030      	str	r0, [r6, #0]
 800b908:	2800      	cmp	r0, #0
 800b90a:	d1f1      	bne.n	800b8f0 <__sfp+0x20>
 800b90c:	230c      	movs	r3, #12
 800b90e:	603b      	str	r3, [r7, #0]
 800b910:	4604      	mov	r4, r0
 800b912:	4620      	mov	r0, r4
 800b914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <__sfp+0x74>)
 800b918:	6665      	str	r5, [r4, #100]	; 0x64
 800b91a:	e9c4 5500 	strd	r5, r5, [r4]
 800b91e:	60a5      	str	r5, [r4, #8]
 800b920:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b924:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b928:	2208      	movs	r2, #8
 800b92a:	4629      	mov	r1, r5
 800b92c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b930:	f7fd fb7c 	bl	800902c <memset>
 800b934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b93c:	e7e9      	b.n	800b912 <__sfp+0x42>
 800b93e:	bf00      	nop
 800b940:	0800f86c 	.word	0x0800f86c
 800b944:	ffff0001 	.word	0xffff0001

0800b948 <_fwalk_reent>:
 800b948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b94c:	4680      	mov	r8, r0
 800b94e:	4689      	mov	r9, r1
 800b950:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b954:	2600      	movs	r6, #0
 800b956:	b914      	cbnz	r4, 800b95e <_fwalk_reent+0x16>
 800b958:	4630      	mov	r0, r6
 800b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b962:	3f01      	subs	r7, #1
 800b964:	d501      	bpl.n	800b96a <_fwalk_reent+0x22>
 800b966:	6824      	ldr	r4, [r4, #0]
 800b968:	e7f5      	b.n	800b956 <_fwalk_reent+0xe>
 800b96a:	89ab      	ldrh	r3, [r5, #12]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d907      	bls.n	800b980 <_fwalk_reent+0x38>
 800b970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b974:	3301      	adds	r3, #1
 800b976:	d003      	beq.n	800b980 <_fwalk_reent+0x38>
 800b978:	4629      	mov	r1, r5
 800b97a:	4640      	mov	r0, r8
 800b97c:	47c8      	blx	r9
 800b97e:	4306      	orrs	r6, r0
 800b980:	3568      	adds	r5, #104	; 0x68
 800b982:	e7ee      	b.n	800b962 <_fwalk_reent+0x1a>

0800b984 <rshift>:
 800b984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b986:	6906      	ldr	r6, [r0, #16]
 800b988:	114b      	asrs	r3, r1, #5
 800b98a:	429e      	cmp	r6, r3
 800b98c:	f100 0414 	add.w	r4, r0, #20
 800b990:	dd30      	ble.n	800b9f4 <rshift+0x70>
 800b992:	f011 011f 	ands.w	r1, r1, #31
 800b996:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b99a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b99e:	d108      	bne.n	800b9b2 <rshift+0x2e>
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	42b2      	cmp	r2, r6
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	d211      	bcs.n	800b9cc <rshift+0x48>
 800b9a8:	f852 3b04 	ldr.w	r3, [r2], #4
 800b9ac:	f841 3b04 	str.w	r3, [r1], #4
 800b9b0:	e7f7      	b.n	800b9a2 <rshift+0x1e>
 800b9b2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b9b6:	f1c1 0c20 	rsb	ip, r1, #32
 800b9ba:	40cd      	lsrs	r5, r1
 800b9bc:	3204      	adds	r2, #4
 800b9be:	4623      	mov	r3, r4
 800b9c0:	42b2      	cmp	r2, r6
 800b9c2:	4617      	mov	r7, r2
 800b9c4:	d30c      	bcc.n	800b9e0 <rshift+0x5c>
 800b9c6:	601d      	str	r5, [r3, #0]
 800b9c8:	b105      	cbz	r5, 800b9cc <rshift+0x48>
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	1b1a      	subs	r2, r3, r4
 800b9ce:	42a3      	cmp	r3, r4
 800b9d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b9d4:	bf08      	it	eq
 800b9d6:	2300      	moveq	r3, #0
 800b9d8:	6102      	str	r2, [r0, #16]
 800b9da:	bf08      	it	eq
 800b9dc:	6143      	streq	r3, [r0, #20]
 800b9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e0:	683f      	ldr	r7, [r7, #0]
 800b9e2:	fa07 f70c 	lsl.w	r7, r7, ip
 800b9e6:	433d      	orrs	r5, r7
 800b9e8:	f843 5b04 	str.w	r5, [r3], #4
 800b9ec:	f852 5b04 	ldr.w	r5, [r2], #4
 800b9f0:	40cd      	lsrs	r5, r1
 800b9f2:	e7e5      	b.n	800b9c0 <rshift+0x3c>
 800b9f4:	4623      	mov	r3, r4
 800b9f6:	e7e9      	b.n	800b9cc <rshift+0x48>

0800b9f8 <__hexdig_fun>:
 800b9f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b9fc:	2b09      	cmp	r3, #9
 800b9fe:	d802      	bhi.n	800ba06 <__hexdig_fun+0xe>
 800ba00:	3820      	subs	r0, #32
 800ba02:	b2c0      	uxtb	r0, r0
 800ba04:	4770      	bx	lr
 800ba06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba0a:	2b05      	cmp	r3, #5
 800ba0c:	d801      	bhi.n	800ba12 <__hexdig_fun+0x1a>
 800ba0e:	3847      	subs	r0, #71	; 0x47
 800ba10:	e7f7      	b.n	800ba02 <__hexdig_fun+0xa>
 800ba12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ba16:	2b05      	cmp	r3, #5
 800ba18:	d801      	bhi.n	800ba1e <__hexdig_fun+0x26>
 800ba1a:	3827      	subs	r0, #39	; 0x27
 800ba1c:	e7f1      	b.n	800ba02 <__hexdig_fun+0xa>
 800ba1e:	2000      	movs	r0, #0
 800ba20:	4770      	bx	lr

0800ba22 <__gethex>:
 800ba22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba26:	b08b      	sub	sp, #44	; 0x2c
 800ba28:	468a      	mov	sl, r1
 800ba2a:	9002      	str	r0, [sp, #8]
 800ba2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ba2e:	9306      	str	r3, [sp, #24]
 800ba30:	4690      	mov	r8, r2
 800ba32:	f000 fad0 	bl	800bfd6 <__localeconv_l>
 800ba36:	6803      	ldr	r3, [r0, #0]
 800ba38:	9303      	str	r3, [sp, #12]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7f4 fbd0 	bl	80001e0 <strlen>
 800ba40:	9b03      	ldr	r3, [sp, #12]
 800ba42:	9001      	str	r0, [sp, #4]
 800ba44:	4403      	add	r3, r0
 800ba46:	f04f 0b00 	mov.w	fp, #0
 800ba4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ba4e:	9307      	str	r3, [sp, #28]
 800ba50:	f8da 3000 	ldr.w	r3, [sl]
 800ba54:	3302      	adds	r3, #2
 800ba56:	461f      	mov	r7, r3
 800ba58:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba5c:	2830      	cmp	r0, #48	; 0x30
 800ba5e:	d06c      	beq.n	800bb3a <__gethex+0x118>
 800ba60:	f7ff ffca 	bl	800b9f8 <__hexdig_fun>
 800ba64:	4604      	mov	r4, r0
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d16a      	bne.n	800bb40 <__gethex+0x11e>
 800ba6a:	9a01      	ldr	r2, [sp, #4]
 800ba6c:	9903      	ldr	r1, [sp, #12]
 800ba6e:	4638      	mov	r0, r7
 800ba70:	f001 fa81 	bl	800cf76 <strncmp>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d166      	bne.n	800bb46 <__gethex+0x124>
 800ba78:	9b01      	ldr	r3, [sp, #4]
 800ba7a:	5cf8      	ldrb	r0, [r7, r3]
 800ba7c:	18fe      	adds	r6, r7, r3
 800ba7e:	f7ff ffbb 	bl	800b9f8 <__hexdig_fun>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d062      	beq.n	800bb4c <__gethex+0x12a>
 800ba86:	4633      	mov	r3, r6
 800ba88:	7818      	ldrb	r0, [r3, #0]
 800ba8a:	2830      	cmp	r0, #48	; 0x30
 800ba8c:	461f      	mov	r7, r3
 800ba8e:	f103 0301 	add.w	r3, r3, #1
 800ba92:	d0f9      	beq.n	800ba88 <__gethex+0x66>
 800ba94:	f7ff ffb0 	bl	800b9f8 <__hexdig_fun>
 800ba98:	fab0 f580 	clz	r5, r0
 800ba9c:	096d      	lsrs	r5, r5, #5
 800ba9e:	4634      	mov	r4, r6
 800baa0:	f04f 0b01 	mov.w	fp, #1
 800baa4:	463a      	mov	r2, r7
 800baa6:	4616      	mov	r6, r2
 800baa8:	3201      	adds	r2, #1
 800baaa:	7830      	ldrb	r0, [r6, #0]
 800baac:	f7ff ffa4 	bl	800b9f8 <__hexdig_fun>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d1f8      	bne.n	800baa6 <__gethex+0x84>
 800bab4:	9a01      	ldr	r2, [sp, #4]
 800bab6:	9903      	ldr	r1, [sp, #12]
 800bab8:	4630      	mov	r0, r6
 800baba:	f001 fa5c 	bl	800cf76 <strncmp>
 800babe:	b950      	cbnz	r0, 800bad6 <__gethex+0xb4>
 800bac0:	b954      	cbnz	r4, 800bad8 <__gethex+0xb6>
 800bac2:	9b01      	ldr	r3, [sp, #4]
 800bac4:	18f4      	adds	r4, r6, r3
 800bac6:	4622      	mov	r2, r4
 800bac8:	4616      	mov	r6, r2
 800baca:	3201      	adds	r2, #1
 800bacc:	7830      	ldrb	r0, [r6, #0]
 800bace:	f7ff ff93 	bl	800b9f8 <__hexdig_fun>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	d1f8      	bne.n	800bac8 <__gethex+0xa6>
 800bad6:	b10c      	cbz	r4, 800badc <__gethex+0xba>
 800bad8:	1ba4      	subs	r4, r4, r6
 800bada:	00a4      	lsls	r4, r4, #2
 800badc:	7833      	ldrb	r3, [r6, #0]
 800bade:	2b50      	cmp	r3, #80	; 0x50
 800bae0:	d001      	beq.n	800bae6 <__gethex+0xc4>
 800bae2:	2b70      	cmp	r3, #112	; 0x70
 800bae4:	d140      	bne.n	800bb68 <__gethex+0x146>
 800bae6:	7873      	ldrb	r3, [r6, #1]
 800bae8:	2b2b      	cmp	r3, #43	; 0x2b
 800baea:	d031      	beq.n	800bb50 <__gethex+0x12e>
 800baec:	2b2d      	cmp	r3, #45	; 0x2d
 800baee:	d033      	beq.n	800bb58 <__gethex+0x136>
 800baf0:	1c71      	adds	r1, r6, #1
 800baf2:	f04f 0900 	mov.w	r9, #0
 800baf6:	7808      	ldrb	r0, [r1, #0]
 800baf8:	f7ff ff7e 	bl	800b9f8 <__hexdig_fun>
 800bafc:	1e43      	subs	r3, r0, #1
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b18      	cmp	r3, #24
 800bb02:	d831      	bhi.n	800bb68 <__gethex+0x146>
 800bb04:	f1a0 0210 	sub.w	r2, r0, #16
 800bb08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb0c:	f7ff ff74 	bl	800b9f8 <__hexdig_fun>
 800bb10:	1e43      	subs	r3, r0, #1
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b18      	cmp	r3, #24
 800bb16:	d922      	bls.n	800bb5e <__gethex+0x13c>
 800bb18:	f1b9 0f00 	cmp.w	r9, #0
 800bb1c:	d000      	beq.n	800bb20 <__gethex+0xfe>
 800bb1e:	4252      	negs	r2, r2
 800bb20:	4414      	add	r4, r2
 800bb22:	f8ca 1000 	str.w	r1, [sl]
 800bb26:	b30d      	cbz	r5, 800bb6c <__gethex+0x14a>
 800bb28:	f1bb 0f00 	cmp.w	fp, #0
 800bb2c:	bf0c      	ite	eq
 800bb2e:	2706      	moveq	r7, #6
 800bb30:	2700      	movne	r7, #0
 800bb32:	4638      	mov	r0, r7
 800bb34:	b00b      	add	sp, #44	; 0x2c
 800bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3a:	f10b 0b01 	add.w	fp, fp, #1
 800bb3e:	e78a      	b.n	800ba56 <__gethex+0x34>
 800bb40:	2500      	movs	r5, #0
 800bb42:	462c      	mov	r4, r5
 800bb44:	e7ae      	b.n	800baa4 <__gethex+0x82>
 800bb46:	463e      	mov	r6, r7
 800bb48:	2501      	movs	r5, #1
 800bb4a:	e7c7      	b.n	800badc <__gethex+0xba>
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	e7fb      	b.n	800bb48 <__gethex+0x126>
 800bb50:	f04f 0900 	mov.w	r9, #0
 800bb54:	1cb1      	adds	r1, r6, #2
 800bb56:	e7ce      	b.n	800baf6 <__gethex+0xd4>
 800bb58:	f04f 0901 	mov.w	r9, #1
 800bb5c:	e7fa      	b.n	800bb54 <__gethex+0x132>
 800bb5e:	230a      	movs	r3, #10
 800bb60:	fb03 0202 	mla	r2, r3, r2, r0
 800bb64:	3a10      	subs	r2, #16
 800bb66:	e7cf      	b.n	800bb08 <__gethex+0xe6>
 800bb68:	4631      	mov	r1, r6
 800bb6a:	e7da      	b.n	800bb22 <__gethex+0x100>
 800bb6c:	1bf3      	subs	r3, r6, r7
 800bb6e:	3b01      	subs	r3, #1
 800bb70:	4629      	mov	r1, r5
 800bb72:	2b07      	cmp	r3, #7
 800bb74:	dc49      	bgt.n	800bc0a <__gethex+0x1e8>
 800bb76:	9802      	ldr	r0, [sp, #8]
 800bb78:	f000 fa63 	bl	800c042 <_Balloc>
 800bb7c:	9b01      	ldr	r3, [sp, #4]
 800bb7e:	f100 0914 	add.w	r9, r0, #20
 800bb82:	f04f 0b00 	mov.w	fp, #0
 800bb86:	f1c3 0301 	rsb	r3, r3, #1
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	f8cd 9010 	str.w	r9, [sp, #16]
 800bb90:	46da      	mov	sl, fp
 800bb92:	9308      	str	r3, [sp, #32]
 800bb94:	42b7      	cmp	r7, r6
 800bb96:	d33b      	bcc.n	800bc10 <__gethex+0x1ee>
 800bb98:	9804      	ldr	r0, [sp, #16]
 800bb9a:	f840 ab04 	str.w	sl, [r0], #4
 800bb9e:	eba0 0009 	sub.w	r0, r0, r9
 800bba2:	1080      	asrs	r0, r0, #2
 800bba4:	6128      	str	r0, [r5, #16]
 800bba6:	0147      	lsls	r7, r0, #5
 800bba8:	4650      	mov	r0, sl
 800bbaa:	f000 fb0e 	bl	800c1ca <__hi0bits>
 800bbae:	f8d8 6000 	ldr.w	r6, [r8]
 800bbb2:	1a3f      	subs	r7, r7, r0
 800bbb4:	42b7      	cmp	r7, r6
 800bbb6:	dd64      	ble.n	800bc82 <__gethex+0x260>
 800bbb8:	1bbf      	subs	r7, r7, r6
 800bbba:	4639      	mov	r1, r7
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	f000 fe1d 	bl	800c7fc <__any_on>
 800bbc2:	4682      	mov	sl, r0
 800bbc4:	b178      	cbz	r0, 800bbe6 <__gethex+0x1c4>
 800bbc6:	1e7b      	subs	r3, r7, #1
 800bbc8:	1159      	asrs	r1, r3, #5
 800bbca:	f003 021f 	and.w	r2, r3, #31
 800bbce:	f04f 0a01 	mov.w	sl, #1
 800bbd2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bbd6:	fa0a f202 	lsl.w	r2, sl, r2
 800bbda:	420a      	tst	r2, r1
 800bbdc:	d003      	beq.n	800bbe6 <__gethex+0x1c4>
 800bbde:	4553      	cmp	r3, sl
 800bbe0:	dc46      	bgt.n	800bc70 <__gethex+0x24e>
 800bbe2:	f04f 0a02 	mov.w	sl, #2
 800bbe6:	4639      	mov	r1, r7
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f7ff fecb 	bl	800b984 <rshift>
 800bbee:	443c      	add	r4, r7
 800bbf0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbf4:	42a3      	cmp	r3, r4
 800bbf6:	da52      	bge.n	800bc9e <__gethex+0x27c>
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	9802      	ldr	r0, [sp, #8]
 800bbfc:	f000 fa55 	bl	800c0aa <_Bfree>
 800bc00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc02:	2300      	movs	r3, #0
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	27a3      	movs	r7, #163	; 0xa3
 800bc08:	e793      	b.n	800bb32 <__gethex+0x110>
 800bc0a:	3101      	adds	r1, #1
 800bc0c:	105b      	asrs	r3, r3, #1
 800bc0e:	e7b0      	b.n	800bb72 <__gethex+0x150>
 800bc10:	1e73      	subs	r3, r6, #1
 800bc12:	9305      	str	r3, [sp, #20]
 800bc14:	9a07      	ldr	r2, [sp, #28]
 800bc16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d018      	beq.n	800bc50 <__gethex+0x22e>
 800bc1e:	f1bb 0f20 	cmp.w	fp, #32
 800bc22:	d107      	bne.n	800bc34 <__gethex+0x212>
 800bc24:	9b04      	ldr	r3, [sp, #16]
 800bc26:	f8c3 a000 	str.w	sl, [r3]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	f04f 0a00 	mov.w	sl, #0
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	46d3      	mov	fp, sl
 800bc34:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bc38:	f7ff fede 	bl	800b9f8 <__hexdig_fun>
 800bc3c:	f000 000f 	and.w	r0, r0, #15
 800bc40:	fa00 f00b 	lsl.w	r0, r0, fp
 800bc44:	ea4a 0a00 	orr.w	sl, sl, r0
 800bc48:	f10b 0b04 	add.w	fp, fp, #4
 800bc4c:	9b05      	ldr	r3, [sp, #20]
 800bc4e:	e00d      	b.n	800bc6c <__gethex+0x24a>
 800bc50:	9b05      	ldr	r3, [sp, #20]
 800bc52:	9a08      	ldr	r2, [sp, #32]
 800bc54:	4413      	add	r3, r2
 800bc56:	42bb      	cmp	r3, r7
 800bc58:	d3e1      	bcc.n	800bc1e <__gethex+0x1fc>
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	9a01      	ldr	r2, [sp, #4]
 800bc5e:	9903      	ldr	r1, [sp, #12]
 800bc60:	9309      	str	r3, [sp, #36]	; 0x24
 800bc62:	f001 f988 	bl	800cf76 <strncmp>
 800bc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d1d8      	bne.n	800bc1e <__gethex+0x1fc>
 800bc6c:	461e      	mov	r6, r3
 800bc6e:	e791      	b.n	800bb94 <__gethex+0x172>
 800bc70:	1eb9      	subs	r1, r7, #2
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 fdc2 	bl	800c7fc <__any_on>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d0b2      	beq.n	800bbe2 <__gethex+0x1c0>
 800bc7c:	f04f 0a03 	mov.w	sl, #3
 800bc80:	e7b1      	b.n	800bbe6 <__gethex+0x1c4>
 800bc82:	da09      	bge.n	800bc98 <__gethex+0x276>
 800bc84:	1bf7      	subs	r7, r6, r7
 800bc86:	4629      	mov	r1, r5
 800bc88:	463a      	mov	r2, r7
 800bc8a:	9802      	ldr	r0, [sp, #8]
 800bc8c:	f000 fbd8 	bl	800c440 <__lshift>
 800bc90:	1be4      	subs	r4, r4, r7
 800bc92:	4605      	mov	r5, r0
 800bc94:	f100 0914 	add.w	r9, r0, #20
 800bc98:	f04f 0a00 	mov.w	sl, #0
 800bc9c:	e7a8      	b.n	800bbf0 <__gethex+0x1ce>
 800bc9e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bca2:	42a0      	cmp	r0, r4
 800bca4:	dd6a      	ble.n	800bd7c <__gethex+0x35a>
 800bca6:	1b04      	subs	r4, r0, r4
 800bca8:	42a6      	cmp	r6, r4
 800bcaa:	dc2e      	bgt.n	800bd0a <__gethex+0x2e8>
 800bcac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d022      	beq.n	800bcfa <__gethex+0x2d8>
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	d024      	beq.n	800bd02 <__gethex+0x2e0>
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d115      	bne.n	800bce8 <__gethex+0x2c6>
 800bcbc:	42a6      	cmp	r6, r4
 800bcbe:	d113      	bne.n	800bce8 <__gethex+0x2c6>
 800bcc0:	2e01      	cmp	r6, #1
 800bcc2:	dc0b      	bgt.n	800bcdc <__gethex+0x2ba>
 800bcc4:	9a06      	ldr	r2, [sp, #24]
 800bcc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	2301      	movs	r3, #1
 800bcce:	612b      	str	r3, [r5, #16]
 800bcd0:	f8c9 3000 	str.w	r3, [r9]
 800bcd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcd6:	2762      	movs	r7, #98	; 0x62
 800bcd8:	601d      	str	r5, [r3, #0]
 800bcda:	e72a      	b.n	800bb32 <__gethex+0x110>
 800bcdc:	1e71      	subs	r1, r6, #1
 800bcde:	4628      	mov	r0, r5
 800bce0:	f000 fd8c 	bl	800c7fc <__any_on>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d1ed      	bne.n	800bcc4 <__gethex+0x2a2>
 800bce8:	4629      	mov	r1, r5
 800bcea:	9802      	ldr	r0, [sp, #8]
 800bcec:	f000 f9dd 	bl	800c0aa <_Bfree>
 800bcf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	2750      	movs	r7, #80	; 0x50
 800bcf8:	e71b      	b.n	800bb32 <__gethex+0x110>
 800bcfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d0e1      	beq.n	800bcc4 <__gethex+0x2a2>
 800bd00:	e7f2      	b.n	800bce8 <__gethex+0x2c6>
 800bd02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d1dd      	bne.n	800bcc4 <__gethex+0x2a2>
 800bd08:	e7ee      	b.n	800bce8 <__gethex+0x2c6>
 800bd0a:	1e67      	subs	r7, r4, #1
 800bd0c:	f1ba 0f00 	cmp.w	sl, #0
 800bd10:	d131      	bne.n	800bd76 <__gethex+0x354>
 800bd12:	b127      	cbz	r7, 800bd1e <__gethex+0x2fc>
 800bd14:	4639      	mov	r1, r7
 800bd16:	4628      	mov	r0, r5
 800bd18:	f000 fd70 	bl	800c7fc <__any_on>
 800bd1c:	4682      	mov	sl, r0
 800bd1e:	117a      	asrs	r2, r7, #5
 800bd20:	2301      	movs	r3, #1
 800bd22:	f007 071f 	and.w	r7, r7, #31
 800bd26:	fa03 f707 	lsl.w	r7, r3, r7
 800bd2a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800bd2e:	4621      	mov	r1, r4
 800bd30:	421f      	tst	r7, r3
 800bd32:	4628      	mov	r0, r5
 800bd34:	bf18      	it	ne
 800bd36:	f04a 0a02 	orrne.w	sl, sl, #2
 800bd3a:	1b36      	subs	r6, r6, r4
 800bd3c:	f7ff fe22 	bl	800b984 <rshift>
 800bd40:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800bd44:	2702      	movs	r7, #2
 800bd46:	f1ba 0f00 	cmp.w	sl, #0
 800bd4a:	d048      	beq.n	800bdde <__gethex+0x3bc>
 800bd4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	d015      	beq.n	800bd80 <__gethex+0x35e>
 800bd54:	2b03      	cmp	r3, #3
 800bd56:	d017      	beq.n	800bd88 <__gethex+0x366>
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d109      	bne.n	800bd70 <__gethex+0x34e>
 800bd5c:	f01a 0f02 	tst.w	sl, #2
 800bd60:	d006      	beq.n	800bd70 <__gethex+0x34e>
 800bd62:	f8d9 3000 	ldr.w	r3, [r9]
 800bd66:	ea4a 0a03 	orr.w	sl, sl, r3
 800bd6a:	f01a 0f01 	tst.w	sl, #1
 800bd6e:	d10e      	bne.n	800bd8e <__gethex+0x36c>
 800bd70:	f047 0710 	orr.w	r7, r7, #16
 800bd74:	e033      	b.n	800bdde <__gethex+0x3bc>
 800bd76:	f04f 0a01 	mov.w	sl, #1
 800bd7a:	e7d0      	b.n	800bd1e <__gethex+0x2fc>
 800bd7c:	2701      	movs	r7, #1
 800bd7e:	e7e2      	b.n	800bd46 <__gethex+0x324>
 800bd80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd82:	f1c3 0301 	rsb	r3, r3, #1
 800bd86:	9315      	str	r3, [sp, #84]	; 0x54
 800bd88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d0f0      	beq.n	800bd70 <__gethex+0x34e>
 800bd8e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800bd92:	f105 0314 	add.w	r3, r5, #20
 800bd96:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800bd9a:	eb03 010a 	add.w	r1, r3, sl
 800bd9e:	f04f 0c00 	mov.w	ip, #0
 800bda2:	4618      	mov	r0, r3
 800bda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bdac:	d01c      	beq.n	800bde8 <__gethex+0x3c6>
 800bdae:	3201      	adds	r2, #1
 800bdb0:	6002      	str	r2, [r0, #0]
 800bdb2:	2f02      	cmp	r7, #2
 800bdb4:	f105 0314 	add.w	r3, r5, #20
 800bdb8:	d138      	bne.n	800be2c <__gethex+0x40a>
 800bdba:	f8d8 2000 	ldr.w	r2, [r8]
 800bdbe:	3a01      	subs	r2, #1
 800bdc0:	42b2      	cmp	r2, r6
 800bdc2:	d10a      	bne.n	800bdda <__gethex+0x3b8>
 800bdc4:	1171      	asrs	r1, r6, #5
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f006 061f 	and.w	r6, r6, #31
 800bdcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bdd0:	fa02 f606 	lsl.w	r6, r2, r6
 800bdd4:	421e      	tst	r6, r3
 800bdd6:	bf18      	it	ne
 800bdd8:	4617      	movne	r7, r2
 800bdda:	f047 0720 	orr.w	r7, r7, #32
 800bdde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bde0:	601d      	str	r5, [r3, #0]
 800bde2:	9b06      	ldr	r3, [sp, #24]
 800bde4:	601c      	str	r4, [r3, #0]
 800bde6:	e6a4      	b.n	800bb32 <__gethex+0x110>
 800bde8:	4299      	cmp	r1, r3
 800bdea:	f843 cc04 	str.w	ip, [r3, #-4]
 800bdee:	d8d8      	bhi.n	800bda2 <__gethex+0x380>
 800bdf0:	68ab      	ldr	r3, [r5, #8]
 800bdf2:	4599      	cmp	r9, r3
 800bdf4:	db12      	blt.n	800be1c <__gethex+0x3fa>
 800bdf6:	6869      	ldr	r1, [r5, #4]
 800bdf8:	9802      	ldr	r0, [sp, #8]
 800bdfa:	3101      	adds	r1, #1
 800bdfc:	f000 f921 	bl	800c042 <_Balloc>
 800be00:	692a      	ldr	r2, [r5, #16]
 800be02:	3202      	adds	r2, #2
 800be04:	f105 010c 	add.w	r1, r5, #12
 800be08:	4683      	mov	fp, r0
 800be0a:	0092      	lsls	r2, r2, #2
 800be0c:	300c      	adds	r0, #12
 800be0e:	f000 f90d 	bl	800c02c <memcpy>
 800be12:	4629      	mov	r1, r5
 800be14:	9802      	ldr	r0, [sp, #8]
 800be16:	f000 f948 	bl	800c0aa <_Bfree>
 800be1a:	465d      	mov	r5, fp
 800be1c:	692b      	ldr	r3, [r5, #16]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800be24:	612a      	str	r2, [r5, #16]
 800be26:	2201      	movs	r2, #1
 800be28:	615a      	str	r2, [r3, #20]
 800be2a:	e7c2      	b.n	800bdb2 <__gethex+0x390>
 800be2c:	692a      	ldr	r2, [r5, #16]
 800be2e:	454a      	cmp	r2, r9
 800be30:	dd0b      	ble.n	800be4a <__gethex+0x428>
 800be32:	2101      	movs	r1, #1
 800be34:	4628      	mov	r0, r5
 800be36:	f7ff fda5 	bl	800b984 <rshift>
 800be3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be3e:	3401      	adds	r4, #1
 800be40:	42a3      	cmp	r3, r4
 800be42:	f6ff aed9 	blt.w	800bbf8 <__gethex+0x1d6>
 800be46:	2701      	movs	r7, #1
 800be48:	e7c7      	b.n	800bdda <__gethex+0x3b8>
 800be4a:	f016 061f 	ands.w	r6, r6, #31
 800be4e:	d0fa      	beq.n	800be46 <__gethex+0x424>
 800be50:	449a      	add	sl, r3
 800be52:	f1c6 0620 	rsb	r6, r6, #32
 800be56:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800be5a:	f000 f9b6 	bl	800c1ca <__hi0bits>
 800be5e:	42b0      	cmp	r0, r6
 800be60:	dbe7      	blt.n	800be32 <__gethex+0x410>
 800be62:	e7f0      	b.n	800be46 <__gethex+0x424>

0800be64 <L_shift>:
 800be64:	f1c2 0208 	rsb	r2, r2, #8
 800be68:	0092      	lsls	r2, r2, #2
 800be6a:	b570      	push	{r4, r5, r6, lr}
 800be6c:	f1c2 0620 	rsb	r6, r2, #32
 800be70:	6843      	ldr	r3, [r0, #4]
 800be72:	6804      	ldr	r4, [r0, #0]
 800be74:	fa03 f506 	lsl.w	r5, r3, r6
 800be78:	432c      	orrs	r4, r5
 800be7a:	40d3      	lsrs	r3, r2
 800be7c:	6004      	str	r4, [r0, #0]
 800be7e:	f840 3f04 	str.w	r3, [r0, #4]!
 800be82:	4288      	cmp	r0, r1
 800be84:	d3f4      	bcc.n	800be70 <L_shift+0xc>
 800be86:	bd70      	pop	{r4, r5, r6, pc}

0800be88 <__match>:
 800be88:	b530      	push	{r4, r5, lr}
 800be8a:	6803      	ldr	r3, [r0, #0]
 800be8c:	3301      	adds	r3, #1
 800be8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be92:	b914      	cbnz	r4, 800be9a <__match+0x12>
 800be94:	6003      	str	r3, [r0, #0]
 800be96:	2001      	movs	r0, #1
 800be98:	bd30      	pop	{r4, r5, pc}
 800be9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bea2:	2d19      	cmp	r5, #25
 800bea4:	bf98      	it	ls
 800bea6:	3220      	addls	r2, #32
 800bea8:	42a2      	cmp	r2, r4
 800beaa:	d0f0      	beq.n	800be8e <__match+0x6>
 800beac:	2000      	movs	r0, #0
 800beae:	e7f3      	b.n	800be98 <__match+0x10>

0800beb0 <__hexnan>:
 800beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	680b      	ldr	r3, [r1, #0]
 800beb6:	6801      	ldr	r1, [r0, #0]
 800beb8:	115f      	asrs	r7, r3, #5
 800beba:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800bebe:	f013 031f 	ands.w	r3, r3, #31
 800bec2:	b087      	sub	sp, #28
 800bec4:	bf18      	it	ne
 800bec6:	3704      	addne	r7, #4
 800bec8:	2500      	movs	r5, #0
 800beca:	1f3e      	subs	r6, r7, #4
 800becc:	4682      	mov	sl, r0
 800bece:	4690      	mov	r8, r2
 800bed0:	9301      	str	r3, [sp, #4]
 800bed2:	f847 5c04 	str.w	r5, [r7, #-4]
 800bed6:	46b1      	mov	r9, r6
 800bed8:	4634      	mov	r4, r6
 800beda:	9502      	str	r5, [sp, #8]
 800bedc:	46ab      	mov	fp, r5
 800bede:	784a      	ldrb	r2, [r1, #1]
 800bee0:	1c4b      	adds	r3, r1, #1
 800bee2:	9303      	str	r3, [sp, #12]
 800bee4:	b342      	cbz	r2, 800bf38 <__hexnan+0x88>
 800bee6:	4610      	mov	r0, r2
 800bee8:	9105      	str	r1, [sp, #20]
 800beea:	9204      	str	r2, [sp, #16]
 800beec:	f7ff fd84 	bl	800b9f8 <__hexdig_fun>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d143      	bne.n	800bf7c <__hexnan+0xcc>
 800bef4:	9a04      	ldr	r2, [sp, #16]
 800bef6:	9905      	ldr	r1, [sp, #20]
 800bef8:	2a20      	cmp	r2, #32
 800befa:	d818      	bhi.n	800bf2e <__hexnan+0x7e>
 800befc:	9b02      	ldr	r3, [sp, #8]
 800befe:	459b      	cmp	fp, r3
 800bf00:	dd13      	ble.n	800bf2a <__hexnan+0x7a>
 800bf02:	454c      	cmp	r4, r9
 800bf04:	d206      	bcs.n	800bf14 <__hexnan+0x64>
 800bf06:	2d07      	cmp	r5, #7
 800bf08:	dc04      	bgt.n	800bf14 <__hexnan+0x64>
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f7ff ffa8 	bl	800be64 <L_shift>
 800bf14:	4544      	cmp	r4, r8
 800bf16:	d944      	bls.n	800bfa2 <__hexnan+0xf2>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f1a4 0904 	sub.w	r9, r4, #4
 800bf1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf22:	f8cd b008 	str.w	fp, [sp, #8]
 800bf26:	464c      	mov	r4, r9
 800bf28:	461d      	mov	r5, r3
 800bf2a:	9903      	ldr	r1, [sp, #12]
 800bf2c:	e7d7      	b.n	800bede <__hexnan+0x2e>
 800bf2e:	2a29      	cmp	r2, #41	; 0x29
 800bf30:	d14a      	bne.n	800bfc8 <__hexnan+0x118>
 800bf32:	3102      	adds	r1, #2
 800bf34:	f8ca 1000 	str.w	r1, [sl]
 800bf38:	f1bb 0f00 	cmp.w	fp, #0
 800bf3c:	d044      	beq.n	800bfc8 <__hexnan+0x118>
 800bf3e:	454c      	cmp	r4, r9
 800bf40:	d206      	bcs.n	800bf50 <__hexnan+0xa0>
 800bf42:	2d07      	cmp	r5, #7
 800bf44:	dc04      	bgt.n	800bf50 <__hexnan+0xa0>
 800bf46:	462a      	mov	r2, r5
 800bf48:	4649      	mov	r1, r9
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f7ff ff8a 	bl	800be64 <L_shift>
 800bf50:	4544      	cmp	r4, r8
 800bf52:	d928      	bls.n	800bfa6 <__hexnan+0xf6>
 800bf54:	4643      	mov	r3, r8
 800bf56:	f854 2b04 	ldr.w	r2, [r4], #4
 800bf5a:	f843 2b04 	str.w	r2, [r3], #4
 800bf5e:	42a6      	cmp	r6, r4
 800bf60:	d2f9      	bcs.n	800bf56 <__hexnan+0xa6>
 800bf62:	2200      	movs	r2, #0
 800bf64:	f843 2b04 	str.w	r2, [r3], #4
 800bf68:	429e      	cmp	r6, r3
 800bf6a:	d2fb      	bcs.n	800bf64 <__hexnan+0xb4>
 800bf6c:	6833      	ldr	r3, [r6, #0]
 800bf6e:	b91b      	cbnz	r3, 800bf78 <__hexnan+0xc8>
 800bf70:	4546      	cmp	r6, r8
 800bf72:	d127      	bne.n	800bfc4 <__hexnan+0x114>
 800bf74:	2301      	movs	r3, #1
 800bf76:	6033      	str	r3, [r6, #0]
 800bf78:	2005      	movs	r0, #5
 800bf7a:	e026      	b.n	800bfca <__hexnan+0x11a>
 800bf7c:	3501      	adds	r5, #1
 800bf7e:	2d08      	cmp	r5, #8
 800bf80:	f10b 0b01 	add.w	fp, fp, #1
 800bf84:	dd06      	ble.n	800bf94 <__hexnan+0xe4>
 800bf86:	4544      	cmp	r4, r8
 800bf88:	d9cf      	bls.n	800bf2a <__hexnan+0x7a>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf90:	2501      	movs	r5, #1
 800bf92:	3c04      	subs	r4, #4
 800bf94:	6822      	ldr	r2, [r4, #0]
 800bf96:	f000 000f 	and.w	r0, r0, #15
 800bf9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bf9e:	6020      	str	r0, [r4, #0]
 800bfa0:	e7c3      	b.n	800bf2a <__hexnan+0x7a>
 800bfa2:	2508      	movs	r5, #8
 800bfa4:	e7c1      	b.n	800bf2a <__hexnan+0x7a>
 800bfa6:	9b01      	ldr	r3, [sp, #4]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d0df      	beq.n	800bf6c <__hexnan+0xbc>
 800bfac:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb0:	f1c3 0320 	rsb	r3, r3, #32
 800bfb4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800bfbc:	401a      	ands	r2, r3
 800bfbe:	f847 2c04 	str.w	r2, [r7, #-4]
 800bfc2:	e7d3      	b.n	800bf6c <__hexnan+0xbc>
 800bfc4:	3e04      	subs	r6, #4
 800bfc6:	e7d1      	b.n	800bf6c <__hexnan+0xbc>
 800bfc8:	2004      	movs	r0, #4
 800bfca:	b007      	add	sp, #28
 800bfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfd0 <__locale_ctype_ptr_l>:
 800bfd0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800bfd4:	4770      	bx	lr

0800bfd6 <__localeconv_l>:
 800bfd6:	30f0      	adds	r0, #240	; 0xf0
 800bfd8:	4770      	bx	lr
	...

0800bfdc <_localeconv_r>:
 800bfdc:	4b04      	ldr	r3, [pc, #16]	; (800bff0 <_localeconv_r+0x14>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6a18      	ldr	r0, [r3, #32]
 800bfe2:	4b04      	ldr	r3, [pc, #16]	; (800bff4 <_localeconv_r+0x18>)
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	bf08      	it	eq
 800bfe8:	4618      	moveq	r0, r3
 800bfea:	30f0      	adds	r0, #240	; 0xf0
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	2000000c 	.word	0x2000000c
 800bff4:	20000070 	.word	0x20000070

0800bff8 <malloc>:
 800bff8:	4b02      	ldr	r3, [pc, #8]	; (800c004 <malloc+0xc>)
 800bffa:	4601      	mov	r1, r0
 800bffc:	6818      	ldr	r0, [r3, #0]
 800bffe:	f000 bc7b 	b.w	800c8f8 <_malloc_r>
 800c002:	bf00      	nop
 800c004:	2000000c 	.word	0x2000000c

0800c008 <__ascii_mbtowc>:
 800c008:	b082      	sub	sp, #8
 800c00a:	b901      	cbnz	r1, 800c00e <__ascii_mbtowc+0x6>
 800c00c:	a901      	add	r1, sp, #4
 800c00e:	b142      	cbz	r2, 800c022 <__ascii_mbtowc+0x1a>
 800c010:	b14b      	cbz	r3, 800c026 <__ascii_mbtowc+0x1e>
 800c012:	7813      	ldrb	r3, [r2, #0]
 800c014:	600b      	str	r3, [r1, #0]
 800c016:	7812      	ldrb	r2, [r2, #0]
 800c018:	1c10      	adds	r0, r2, #0
 800c01a:	bf18      	it	ne
 800c01c:	2001      	movne	r0, #1
 800c01e:	b002      	add	sp, #8
 800c020:	4770      	bx	lr
 800c022:	4610      	mov	r0, r2
 800c024:	e7fb      	b.n	800c01e <__ascii_mbtowc+0x16>
 800c026:	f06f 0001 	mvn.w	r0, #1
 800c02a:	e7f8      	b.n	800c01e <__ascii_mbtowc+0x16>

0800c02c <memcpy>:
 800c02c:	b510      	push	{r4, lr}
 800c02e:	1e43      	subs	r3, r0, #1
 800c030:	440a      	add	r2, r1
 800c032:	4291      	cmp	r1, r2
 800c034:	d100      	bne.n	800c038 <memcpy+0xc>
 800c036:	bd10      	pop	{r4, pc}
 800c038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c03c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c040:	e7f7      	b.n	800c032 <memcpy+0x6>

0800c042 <_Balloc>:
 800c042:	b570      	push	{r4, r5, r6, lr}
 800c044:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c046:	4604      	mov	r4, r0
 800c048:	460e      	mov	r6, r1
 800c04a:	b93d      	cbnz	r5, 800c05c <_Balloc+0x1a>
 800c04c:	2010      	movs	r0, #16
 800c04e:	f7ff ffd3 	bl	800bff8 <malloc>
 800c052:	6260      	str	r0, [r4, #36]	; 0x24
 800c054:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c058:	6005      	str	r5, [r0, #0]
 800c05a:	60c5      	str	r5, [r0, #12]
 800c05c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c05e:	68eb      	ldr	r3, [r5, #12]
 800c060:	b183      	cbz	r3, 800c084 <_Balloc+0x42>
 800c062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c06a:	b9b8      	cbnz	r0, 800c09c <_Balloc+0x5a>
 800c06c:	2101      	movs	r1, #1
 800c06e:	fa01 f506 	lsl.w	r5, r1, r6
 800c072:	1d6a      	adds	r2, r5, #5
 800c074:	0092      	lsls	r2, r2, #2
 800c076:	4620      	mov	r0, r4
 800c078:	f000 fbe1 	bl	800c83e <_calloc_r>
 800c07c:	b160      	cbz	r0, 800c098 <_Balloc+0x56>
 800c07e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c082:	e00e      	b.n	800c0a2 <_Balloc+0x60>
 800c084:	2221      	movs	r2, #33	; 0x21
 800c086:	2104      	movs	r1, #4
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 fbd8 	bl	800c83e <_calloc_r>
 800c08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c090:	60e8      	str	r0, [r5, #12]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1e4      	bne.n	800c062 <_Balloc+0x20>
 800c098:	2000      	movs	r0, #0
 800c09a:	bd70      	pop	{r4, r5, r6, pc}
 800c09c:	6802      	ldr	r2, [r0, #0]
 800c09e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0a8:	e7f7      	b.n	800c09a <_Balloc+0x58>

0800c0aa <_Bfree>:
 800c0aa:	b570      	push	{r4, r5, r6, lr}
 800c0ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	b93c      	cbnz	r4, 800c0c4 <_Bfree+0x1a>
 800c0b4:	2010      	movs	r0, #16
 800c0b6:	f7ff ff9f 	bl	800bff8 <malloc>
 800c0ba:	6270      	str	r0, [r6, #36]	; 0x24
 800c0bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0c0:	6004      	str	r4, [r0, #0]
 800c0c2:	60c4      	str	r4, [r0, #12]
 800c0c4:	b13d      	cbz	r5, 800c0d6 <_Bfree+0x2c>
 800c0c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c0c8:	686a      	ldr	r2, [r5, #4]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0d0:	6029      	str	r1, [r5, #0]
 800c0d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c0d6:	bd70      	pop	{r4, r5, r6, pc}

0800c0d8 <__multadd>:
 800c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0dc:	690d      	ldr	r5, [r1, #16]
 800c0de:	461f      	mov	r7, r3
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	f101 0c14 	add.w	ip, r1, #20
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	f8dc 0000 	ldr.w	r0, [ip]
 800c0ee:	b281      	uxth	r1, r0
 800c0f0:	fb02 7101 	mla	r1, r2, r1, r7
 800c0f4:	0c0f      	lsrs	r7, r1, #16
 800c0f6:	0c00      	lsrs	r0, r0, #16
 800c0f8:	fb02 7000 	mla	r0, r2, r0, r7
 800c0fc:	b289      	uxth	r1, r1
 800c0fe:	3301      	adds	r3, #1
 800c100:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c104:	429d      	cmp	r5, r3
 800c106:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c10a:	f84c 1b04 	str.w	r1, [ip], #4
 800c10e:	dcec      	bgt.n	800c0ea <__multadd+0x12>
 800c110:	b1d7      	cbz	r7, 800c148 <__multadd+0x70>
 800c112:	68a3      	ldr	r3, [r4, #8]
 800c114:	42ab      	cmp	r3, r5
 800c116:	dc12      	bgt.n	800c13e <__multadd+0x66>
 800c118:	6861      	ldr	r1, [r4, #4]
 800c11a:	4630      	mov	r0, r6
 800c11c:	3101      	adds	r1, #1
 800c11e:	f7ff ff90 	bl	800c042 <_Balloc>
 800c122:	6922      	ldr	r2, [r4, #16]
 800c124:	3202      	adds	r2, #2
 800c126:	f104 010c 	add.w	r1, r4, #12
 800c12a:	4680      	mov	r8, r0
 800c12c:	0092      	lsls	r2, r2, #2
 800c12e:	300c      	adds	r0, #12
 800c130:	f7ff ff7c 	bl	800c02c <memcpy>
 800c134:	4621      	mov	r1, r4
 800c136:	4630      	mov	r0, r6
 800c138:	f7ff ffb7 	bl	800c0aa <_Bfree>
 800c13c:	4644      	mov	r4, r8
 800c13e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c142:	3501      	adds	r5, #1
 800c144:	615f      	str	r7, [r3, #20]
 800c146:	6125      	str	r5, [r4, #16]
 800c148:	4620      	mov	r0, r4
 800c14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c14e <__s2b>:
 800c14e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c152:	460c      	mov	r4, r1
 800c154:	4615      	mov	r5, r2
 800c156:	461f      	mov	r7, r3
 800c158:	2209      	movs	r2, #9
 800c15a:	3308      	adds	r3, #8
 800c15c:	4606      	mov	r6, r0
 800c15e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c162:	2100      	movs	r1, #0
 800c164:	2201      	movs	r2, #1
 800c166:	429a      	cmp	r2, r3
 800c168:	db20      	blt.n	800c1ac <__s2b+0x5e>
 800c16a:	4630      	mov	r0, r6
 800c16c:	f7ff ff69 	bl	800c042 <_Balloc>
 800c170:	9b08      	ldr	r3, [sp, #32]
 800c172:	6143      	str	r3, [r0, #20]
 800c174:	2d09      	cmp	r5, #9
 800c176:	f04f 0301 	mov.w	r3, #1
 800c17a:	6103      	str	r3, [r0, #16]
 800c17c:	dd19      	ble.n	800c1b2 <__s2b+0x64>
 800c17e:	f104 0809 	add.w	r8, r4, #9
 800c182:	46c1      	mov	r9, r8
 800c184:	442c      	add	r4, r5
 800c186:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c18a:	4601      	mov	r1, r0
 800c18c:	3b30      	subs	r3, #48	; 0x30
 800c18e:	220a      	movs	r2, #10
 800c190:	4630      	mov	r0, r6
 800c192:	f7ff ffa1 	bl	800c0d8 <__multadd>
 800c196:	45a1      	cmp	r9, r4
 800c198:	d1f5      	bne.n	800c186 <__s2b+0x38>
 800c19a:	eb08 0405 	add.w	r4, r8, r5
 800c19e:	3c08      	subs	r4, #8
 800c1a0:	1b2d      	subs	r5, r5, r4
 800c1a2:	1963      	adds	r3, r4, r5
 800c1a4:	42bb      	cmp	r3, r7
 800c1a6:	db07      	blt.n	800c1b8 <__s2b+0x6a>
 800c1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ac:	0052      	lsls	r2, r2, #1
 800c1ae:	3101      	adds	r1, #1
 800c1b0:	e7d9      	b.n	800c166 <__s2b+0x18>
 800c1b2:	340a      	adds	r4, #10
 800c1b4:	2509      	movs	r5, #9
 800c1b6:	e7f3      	b.n	800c1a0 <__s2b+0x52>
 800c1b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1bc:	4601      	mov	r1, r0
 800c1be:	3b30      	subs	r3, #48	; 0x30
 800c1c0:	220a      	movs	r2, #10
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7ff ff88 	bl	800c0d8 <__multadd>
 800c1c8:	e7eb      	b.n	800c1a2 <__s2b+0x54>

0800c1ca <__hi0bits>:
 800c1ca:	0c02      	lsrs	r2, r0, #16
 800c1cc:	0412      	lsls	r2, r2, #16
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	b9b2      	cbnz	r2, 800c200 <__hi0bits+0x36>
 800c1d2:	0403      	lsls	r3, r0, #16
 800c1d4:	2010      	movs	r0, #16
 800c1d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c1da:	bf04      	itt	eq
 800c1dc:	021b      	lsleq	r3, r3, #8
 800c1de:	3008      	addeq	r0, #8
 800c1e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c1e4:	bf04      	itt	eq
 800c1e6:	011b      	lsleq	r3, r3, #4
 800c1e8:	3004      	addeq	r0, #4
 800c1ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c1ee:	bf04      	itt	eq
 800c1f0:	009b      	lsleq	r3, r3, #2
 800c1f2:	3002      	addeq	r0, #2
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	db06      	blt.n	800c206 <__hi0bits+0x3c>
 800c1f8:	005b      	lsls	r3, r3, #1
 800c1fa:	d503      	bpl.n	800c204 <__hi0bits+0x3a>
 800c1fc:	3001      	adds	r0, #1
 800c1fe:	4770      	bx	lr
 800c200:	2000      	movs	r0, #0
 800c202:	e7e8      	b.n	800c1d6 <__hi0bits+0xc>
 800c204:	2020      	movs	r0, #32
 800c206:	4770      	bx	lr

0800c208 <__lo0bits>:
 800c208:	6803      	ldr	r3, [r0, #0]
 800c20a:	f013 0207 	ands.w	r2, r3, #7
 800c20e:	4601      	mov	r1, r0
 800c210:	d00b      	beq.n	800c22a <__lo0bits+0x22>
 800c212:	07da      	lsls	r2, r3, #31
 800c214:	d423      	bmi.n	800c25e <__lo0bits+0x56>
 800c216:	0798      	lsls	r0, r3, #30
 800c218:	bf49      	itett	mi
 800c21a:	085b      	lsrmi	r3, r3, #1
 800c21c:	089b      	lsrpl	r3, r3, #2
 800c21e:	2001      	movmi	r0, #1
 800c220:	600b      	strmi	r3, [r1, #0]
 800c222:	bf5c      	itt	pl
 800c224:	600b      	strpl	r3, [r1, #0]
 800c226:	2002      	movpl	r0, #2
 800c228:	4770      	bx	lr
 800c22a:	b298      	uxth	r0, r3
 800c22c:	b9a8      	cbnz	r0, 800c25a <__lo0bits+0x52>
 800c22e:	0c1b      	lsrs	r3, r3, #16
 800c230:	2010      	movs	r0, #16
 800c232:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c236:	bf04      	itt	eq
 800c238:	0a1b      	lsreq	r3, r3, #8
 800c23a:	3008      	addeq	r0, #8
 800c23c:	071a      	lsls	r2, r3, #28
 800c23e:	bf04      	itt	eq
 800c240:	091b      	lsreq	r3, r3, #4
 800c242:	3004      	addeq	r0, #4
 800c244:	079a      	lsls	r2, r3, #30
 800c246:	bf04      	itt	eq
 800c248:	089b      	lsreq	r3, r3, #2
 800c24a:	3002      	addeq	r0, #2
 800c24c:	07da      	lsls	r2, r3, #31
 800c24e:	d402      	bmi.n	800c256 <__lo0bits+0x4e>
 800c250:	085b      	lsrs	r3, r3, #1
 800c252:	d006      	beq.n	800c262 <__lo0bits+0x5a>
 800c254:	3001      	adds	r0, #1
 800c256:	600b      	str	r3, [r1, #0]
 800c258:	4770      	bx	lr
 800c25a:	4610      	mov	r0, r2
 800c25c:	e7e9      	b.n	800c232 <__lo0bits+0x2a>
 800c25e:	2000      	movs	r0, #0
 800c260:	4770      	bx	lr
 800c262:	2020      	movs	r0, #32
 800c264:	4770      	bx	lr

0800c266 <__i2b>:
 800c266:	b510      	push	{r4, lr}
 800c268:	460c      	mov	r4, r1
 800c26a:	2101      	movs	r1, #1
 800c26c:	f7ff fee9 	bl	800c042 <_Balloc>
 800c270:	2201      	movs	r2, #1
 800c272:	6144      	str	r4, [r0, #20]
 800c274:	6102      	str	r2, [r0, #16]
 800c276:	bd10      	pop	{r4, pc}

0800c278 <__multiply>:
 800c278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	4614      	mov	r4, r2
 800c27e:	690a      	ldr	r2, [r1, #16]
 800c280:	6923      	ldr	r3, [r4, #16]
 800c282:	429a      	cmp	r2, r3
 800c284:	bfb8      	it	lt
 800c286:	460b      	movlt	r3, r1
 800c288:	4688      	mov	r8, r1
 800c28a:	bfbc      	itt	lt
 800c28c:	46a0      	movlt	r8, r4
 800c28e:	461c      	movlt	r4, r3
 800c290:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c294:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c298:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c29c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c2a0:	eb07 0609 	add.w	r6, r7, r9
 800c2a4:	42b3      	cmp	r3, r6
 800c2a6:	bfb8      	it	lt
 800c2a8:	3101      	addlt	r1, #1
 800c2aa:	f7ff feca 	bl	800c042 <_Balloc>
 800c2ae:	f100 0514 	add.w	r5, r0, #20
 800c2b2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c2b6:	462b      	mov	r3, r5
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	4573      	cmp	r3, lr
 800c2bc:	d316      	bcc.n	800c2ec <__multiply+0x74>
 800c2be:	f104 0214 	add.w	r2, r4, #20
 800c2c2:	f108 0114 	add.w	r1, r8, #20
 800c2c6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c2ca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	9b00      	ldr	r3, [sp, #0]
 800c2d2:	9201      	str	r2, [sp, #4]
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d80c      	bhi.n	800c2f2 <__multiply+0x7a>
 800c2d8:	2e00      	cmp	r6, #0
 800c2da:	dd03      	ble.n	800c2e4 <__multiply+0x6c>
 800c2dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d05d      	beq.n	800c3a0 <__multiply+0x128>
 800c2e4:	6106      	str	r6, [r0, #16]
 800c2e6:	b003      	add	sp, #12
 800c2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ec:	f843 2b04 	str.w	r2, [r3], #4
 800c2f0:	e7e3      	b.n	800c2ba <__multiply+0x42>
 800c2f2:	f8b2 b000 	ldrh.w	fp, [r2]
 800c2f6:	f1bb 0f00 	cmp.w	fp, #0
 800c2fa:	d023      	beq.n	800c344 <__multiply+0xcc>
 800c2fc:	4689      	mov	r9, r1
 800c2fe:	46ac      	mov	ip, r5
 800c300:	f04f 0800 	mov.w	r8, #0
 800c304:	f859 4b04 	ldr.w	r4, [r9], #4
 800c308:	f8dc a000 	ldr.w	sl, [ip]
 800c30c:	b2a3      	uxth	r3, r4
 800c30e:	fa1f fa8a 	uxth.w	sl, sl
 800c312:	fb0b a303 	mla	r3, fp, r3, sl
 800c316:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c31a:	f8dc 4000 	ldr.w	r4, [ip]
 800c31e:	4443      	add	r3, r8
 800c320:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c324:	fb0b 840a 	mla	r4, fp, sl, r8
 800c328:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c32c:	46e2      	mov	sl, ip
 800c32e:	b29b      	uxth	r3, r3
 800c330:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c334:	454f      	cmp	r7, r9
 800c336:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c33a:	f84a 3b04 	str.w	r3, [sl], #4
 800c33e:	d82b      	bhi.n	800c398 <__multiply+0x120>
 800c340:	f8cc 8004 	str.w	r8, [ip, #4]
 800c344:	9b01      	ldr	r3, [sp, #4]
 800c346:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c34a:	3204      	adds	r2, #4
 800c34c:	f1ba 0f00 	cmp.w	sl, #0
 800c350:	d020      	beq.n	800c394 <__multiply+0x11c>
 800c352:	682b      	ldr	r3, [r5, #0]
 800c354:	4689      	mov	r9, r1
 800c356:	46a8      	mov	r8, r5
 800c358:	f04f 0b00 	mov.w	fp, #0
 800c35c:	f8b9 c000 	ldrh.w	ip, [r9]
 800c360:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c364:	fb0a 440c 	mla	r4, sl, ip, r4
 800c368:	445c      	add	r4, fp
 800c36a:	46c4      	mov	ip, r8
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c372:	f84c 3b04 	str.w	r3, [ip], #4
 800c376:	f859 3b04 	ldr.w	r3, [r9], #4
 800c37a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c37e:	0c1b      	lsrs	r3, r3, #16
 800c380:	fb0a b303 	mla	r3, sl, r3, fp
 800c384:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c388:	454f      	cmp	r7, r9
 800c38a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c38e:	d805      	bhi.n	800c39c <__multiply+0x124>
 800c390:	f8c8 3004 	str.w	r3, [r8, #4]
 800c394:	3504      	adds	r5, #4
 800c396:	e79b      	b.n	800c2d0 <__multiply+0x58>
 800c398:	46d4      	mov	ip, sl
 800c39a:	e7b3      	b.n	800c304 <__multiply+0x8c>
 800c39c:	46e0      	mov	r8, ip
 800c39e:	e7dd      	b.n	800c35c <__multiply+0xe4>
 800c3a0:	3e01      	subs	r6, #1
 800c3a2:	e799      	b.n	800c2d8 <__multiply+0x60>

0800c3a4 <__pow5mult>:
 800c3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a8:	4615      	mov	r5, r2
 800c3aa:	f012 0203 	ands.w	r2, r2, #3
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	460f      	mov	r7, r1
 800c3b2:	d007      	beq.n	800c3c4 <__pow5mult+0x20>
 800c3b4:	3a01      	subs	r2, #1
 800c3b6:	4c21      	ldr	r4, [pc, #132]	; (800c43c <__pow5mult+0x98>)
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3be:	f7ff fe8b 	bl	800c0d8 <__multadd>
 800c3c2:	4607      	mov	r7, r0
 800c3c4:	10ad      	asrs	r5, r5, #2
 800c3c6:	d035      	beq.n	800c434 <__pow5mult+0x90>
 800c3c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c3ca:	b93c      	cbnz	r4, 800c3dc <__pow5mult+0x38>
 800c3cc:	2010      	movs	r0, #16
 800c3ce:	f7ff fe13 	bl	800bff8 <malloc>
 800c3d2:	6270      	str	r0, [r6, #36]	; 0x24
 800c3d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3d8:	6004      	str	r4, [r0, #0]
 800c3da:	60c4      	str	r4, [r0, #12]
 800c3dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c3e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3e4:	b94c      	cbnz	r4, 800c3fa <__pow5mult+0x56>
 800c3e6:	f240 2171 	movw	r1, #625	; 0x271
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f7ff ff3b 	bl	800c266 <__i2b>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	6003      	str	r3, [r0, #0]
 800c3fa:	f04f 0800 	mov.w	r8, #0
 800c3fe:	07eb      	lsls	r3, r5, #31
 800c400:	d50a      	bpl.n	800c418 <__pow5mult+0x74>
 800c402:	4639      	mov	r1, r7
 800c404:	4622      	mov	r2, r4
 800c406:	4630      	mov	r0, r6
 800c408:	f7ff ff36 	bl	800c278 <__multiply>
 800c40c:	4639      	mov	r1, r7
 800c40e:	4681      	mov	r9, r0
 800c410:	4630      	mov	r0, r6
 800c412:	f7ff fe4a 	bl	800c0aa <_Bfree>
 800c416:	464f      	mov	r7, r9
 800c418:	106d      	asrs	r5, r5, #1
 800c41a:	d00b      	beq.n	800c434 <__pow5mult+0x90>
 800c41c:	6820      	ldr	r0, [r4, #0]
 800c41e:	b938      	cbnz	r0, 800c430 <__pow5mult+0x8c>
 800c420:	4622      	mov	r2, r4
 800c422:	4621      	mov	r1, r4
 800c424:	4630      	mov	r0, r6
 800c426:	f7ff ff27 	bl	800c278 <__multiply>
 800c42a:	6020      	str	r0, [r4, #0]
 800c42c:	f8c0 8000 	str.w	r8, [r0]
 800c430:	4604      	mov	r4, r0
 800c432:	e7e4      	b.n	800c3fe <__pow5mult+0x5a>
 800c434:	4638      	mov	r0, r7
 800c436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c43a:	bf00      	nop
 800c43c:	0800fa68 	.word	0x0800fa68

0800c440 <__lshift>:
 800c440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c444:	460c      	mov	r4, r1
 800c446:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	6849      	ldr	r1, [r1, #4]
 800c44e:	eb0a 0903 	add.w	r9, sl, r3
 800c452:	68a3      	ldr	r3, [r4, #8]
 800c454:	4607      	mov	r7, r0
 800c456:	4616      	mov	r6, r2
 800c458:	f109 0501 	add.w	r5, r9, #1
 800c45c:	42ab      	cmp	r3, r5
 800c45e:	db32      	blt.n	800c4c6 <__lshift+0x86>
 800c460:	4638      	mov	r0, r7
 800c462:	f7ff fdee 	bl	800c042 <_Balloc>
 800c466:	2300      	movs	r3, #0
 800c468:	4680      	mov	r8, r0
 800c46a:	f100 0114 	add.w	r1, r0, #20
 800c46e:	461a      	mov	r2, r3
 800c470:	4553      	cmp	r3, sl
 800c472:	db2b      	blt.n	800c4cc <__lshift+0x8c>
 800c474:	6920      	ldr	r0, [r4, #16]
 800c476:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c47a:	f104 0314 	add.w	r3, r4, #20
 800c47e:	f016 021f 	ands.w	r2, r6, #31
 800c482:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c486:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c48a:	d025      	beq.n	800c4d8 <__lshift+0x98>
 800c48c:	f1c2 0e20 	rsb	lr, r2, #32
 800c490:	2000      	movs	r0, #0
 800c492:	681e      	ldr	r6, [r3, #0]
 800c494:	468a      	mov	sl, r1
 800c496:	4096      	lsls	r6, r2
 800c498:	4330      	orrs	r0, r6
 800c49a:	f84a 0b04 	str.w	r0, [sl], #4
 800c49e:	f853 0b04 	ldr.w	r0, [r3], #4
 800c4a2:	459c      	cmp	ip, r3
 800c4a4:	fa20 f00e 	lsr.w	r0, r0, lr
 800c4a8:	d814      	bhi.n	800c4d4 <__lshift+0x94>
 800c4aa:	6048      	str	r0, [r1, #4]
 800c4ac:	b108      	cbz	r0, 800c4b2 <__lshift+0x72>
 800c4ae:	f109 0502 	add.w	r5, r9, #2
 800c4b2:	3d01      	subs	r5, #1
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f8c8 5010 	str.w	r5, [r8, #16]
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	f7ff fdf5 	bl	800c0aa <_Bfree>
 800c4c0:	4640      	mov	r0, r8
 800c4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c6:	3101      	adds	r1, #1
 800c4c8:	005b      	lsls	r3, r3, #1
 800c4ca:	e7c7      	b.n	800c45c <__lshift+0x1c>
 800c4cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	e7cd      	b.n	800c470 <__lshift+0x30>
 800c4d4:	4651      	mov	r1, sl
 800c4d6:	e7dc      	b.n	800c492 <__lshift+0x52>
 800c4d8:	3904      	subs	r1, #4
 800c4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4de:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4e2:	459c      	cmp	ip, r3
 800c4e4:	d8f9      	bhi.n	800c4da <__lshift+0x9a>
 800c4e6:	e7e4      	b.n	800c4b2 <__lshift+0x72>

0800c4e8 <__mcmp>:
 800c4e8:	6903      	ldr	r3, [r0, #16]
 800c4ea:	690a      	ldr	r2, [r1, #16]
 800c4ec:	1a9b      	subs	r3, r3, r2
 800c4ee:	b530      	push	{r4, r5, lr}
 800c4f0:	d10c      	bne.n	800c50c <__mcmp+0x24>
 800c4f2:	0092      	lsls	r2, r2, #2
 800c4f4:	3014      	adds	r0, #20
 800c4f6:	3114      	adds	r1, #20
 800c4f8:	1884      	adds	r4, r0, r2
 800c4fa:	4411      	add	r1, r2
 800c4fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c500:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c504:	4295      	cmp	r5, r2
 800c506:	d003      	beq.n	800c510 <__mcmp+0x28>
 800c508:	d305      	bcc.n	800c516 <__mcmp+0x2e>
 800c50a:	2301      	movs	r3, #1
 800c50c:	4618      	mov	r0, r3
 800c50e:	bd30      	pop	{r4, r5, pc}
 800c510:	42a0      	cmp	r0, r4
 800c512:	d3f3      	bcc.n	800c4fc <__mcmp+0x14>
 800c514:	e7fa      	b.n	800c50c <__mcmp+0x24>
 800c516:	f04f 33ff 	mov.w	r3, #4294967295
 800c51a:	e7f7      	b.n	800c50c <__mcmp+0x24>

0800c51c <__mdiff>:
 800c51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c520:	460d      	mov	r5, r1
 800c522:	4607      	mov	r7, r0
 800c524:	4611      	mov	r1, r2
 800c526:	4628      	mov	r0, r5
 800c528:	4614      	mov	r4, r2
 800c52a:	f7ff ffdd 	bl	800c4e8 <__mcmp>
 800c52e:	1e06      	subs	r6, r0, #0
 800c530:	d108      	bne.n	800c544 <__mdiff+0x28>
 800c532:	4631      	mov	r1, r6
 800c534:	4638      	mov	r0, r7
 800c536:	f7ff fd84 	bl	800c042 <_Balloc>
 800c53a:	2301      	movs	r3, #1
 800c53c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c544:	bfa4      	itt	ge
 800c546:	4623      	movge	r3, r4
 800c548:	462c      	movge	r4, r5
 800c54a:	4638      	mov	r0, r7
 800c54c:	6861      	ldr	r1, [r4, #4]
 800c54e:	bfa6      	itte	ge
 800c550:	461d      	movge	r5, r3
 800c552:	2600      	movge	r6, #0
 800c554:	2601      	movlt	r6, #1
 800c556:	f7ff fd74 	bl	800c042 <_Balloc>
 800c55a:	692b      	ldr	r3, [r5, #16]
 800c55c:	60c6      	str	r6, [r0, #12]
 800c55e:	6926      	ldr	r6, [r4, #16]
 800c560:	f105 0914 	add.w	r9, r5, #20
 800c564:	f104 0214 	add.w	r2, r4, #20
 800c568:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c56c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c570:	f100 0514 	add.w	r5, r0, #20
 800c574:	f04f 0e00 	mov.w	lr, #0
 800c578:	f852 ab04 	ldr.w	sl, [r2], #4
 800c57c:	f859 4b04 	ldr.w	r4, [r9], #4
 800c580:	fa1e f18a 	uxtah	r1, lr, sl
 800c584:	b2a3      	uxth	r3, r4
 800c586:	1ac9      	subs	r1, r1, r3
 800c588:	0c23      	lsrs	r3, r4, #16
 800c58a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c58e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c592:	b289      	uxth	r1, r1
 800c594:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c598:	45c8      	cmp	r8, r9
 800c59a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c59e:	4694      	mov	ip, r2
 800c5a0:	f845 3b04 	str.w	r3, [r5], #4
 800c5a4:	d8e8      	bhi.n	800c578 <__mdiff+0x5c>
 800c5a6:	45bc      	cmp	ip, r7
 800c5a8:	d304      	bcc.n	800c5b4 <__mdiff+0x98>
 800c5aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c5ae:	b183      	cbz	r3, 800c5d2 <__mdiff+0xb6>
 800c5b0:	6106      	str	r6, [r0, #16]
 800c5b2:	e7c5      	b.n	800c540 <__mdiff+0x24>
 800c5b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c5b8:	fa1e f381 	uxtah	r3, lr, r1
 800c5bc:	141a      	asrs	r2, r3, #16
 800c5be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c5cc:	f845 3b04 	str.w	r3, [r5], #4
 800c5d0:	e7e9      	b.n	800c5a6 <__mdiff+0x8a>
 800c5d2:	3e01      	subs	r6, #1
 800c5d4:	e7e9      	b.n	800c5aa <__mdiff+0x8e>
	...

0800c5d8 <__ulp>:
 800c5d8:	4b12      	ldr	r3, [pc, #72]	; (800c624 <__ulp+0x4c>)
 800c5da:	ee10 2a90 	vmov	r2, s1
 800c5de:	401a      	ands	r2, r3
 800c5e0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dd04      	ble.n	800c5f2 <__ulp+0x1a>
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	ec41 0b10 	vmov	d0, r0, r1
 800c5f0:	4770      	bx	lr
 800c5f2:	425b      	negs	r3, r3
 800c5f4:	151b      	asrs	r3, r3, #20
 800c5f6:	2b13      	cmp	r3, #19
 800c5f8:	f04f 0000 	mov.w	r0, #0
 800c5fc:	f04f 0100 	mov.w	r1, #0
 800c600:	dc04      	bgt.n	800c60c <__ulp+0x34>
 800c602:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c606:	fa42 f103 	asr.w	r1, r2, r3
 800c60a:	e7ef      	b.n	800c5ec <__ulp+0x14>
 800c60c:	3b14      	subs	r3, #20
 800c60e:	2b1e      	cmp	r3, #30
 800c610:	f04f 0201 	mov.w	r2, #1
 800c614:	bfda      	itte	le
 800c616:	f1c3 031f 	rsble	r3, r3, #31
 800c61a:	fa02 f303 	lslle.w	r3, r2, r3
 800c61e:	4613      	movgt	r3, r2
 800c620:	4618      	mov	r0, r3
 800c622:	e7e3      	b.n	800c5ec <__ulp+0x14>
 800c624:	7ff00000 	.word	0x7ff00000

0800c628 <__b2d>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	6905      	ldr	r5, [r0, #16]
 800c62c:	f100 0714 	add.w	r7, r0, #20
 800c630:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c634:	1f2e      	subs	r6, r5, #4
 800c636:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c63a:	4620      	mov	r0, r4
 800c63c:	f7ff fdc5 	bl	800c1ca <__hi0bits>
 800c640:	f1c0 0320 	rsb	r3, r0, #32
 800c644:	280a      	cmp	r0, #10
 800c646:	600b      	str	r3, [r1, #0]
 800c648:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c6c0 <__b2d+0x98>
 800c64c:	dc14      	bgt.n	800c678 <__b2d+0x50>
 800c64e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c652:	fa24 f10e 	lsr.w	r1, r4, lr
 800c656:	42b7      	cmp	r7, r6
 800c658:	ea41 030c 	orr.w	r3, r1, ip
 800c65c:	bf34      	ite	cc
 800c65e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c662:	2100      	movcs	r1, #0
 800c664:	3015      	adds	r0, #21
 800c666:	fa04 f000 	lsl.w	r0, r4, r0
 800c66a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c66e:	ea40 0201 	orr.w	r2, r0, r1
 800c672:	ec43 2b10 	vmov	d0, r2, r3
 800c676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c678:	42b7      	cmp	r7, r6
 800c67a:	bf3a      	itte	cc
 800c67c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c680:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c684:	2100      	movcs	r1, #0
 800c686:	380b      	subs	r0, #11
 800c688:	d015      	beq.n	800c6b6 <__b2d+0x8e>
 800c68a:	4084      	lsls	r4, r0
 800c68c:	f1c0 0520 	rsb	r5, r0, #32
 800c690:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c694:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c698:	42be      	cmp	r6, r7
 800c69a:	fa21 fc05 	lsr.w	ip, r1, r5
 800c69e:	ea44 030c 	orr.w	r3, r4, ip
 800c6a2:	bf8c      	ite	hi
 800c6a4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c6a8:	2400      	movls	r4, #0
 800c6aa:	fa01 f000 	lsl.w	r0, r1, r0
 800c6ae:	40ec      	lsrs	r4, r5
 800c6b0:	ea40 0204 	orr.w	r2, r0, r4
 800c6b4:	e7dd      	b.n	800c672 <__b2d+0x4a>
 800c6b6:	ea44 030c 	orr.w	r3, r4, ip
 800c6ba:	460a      	mov	r2, r1
 800c6bc:	e7d9      	b.n	800c672 <__b2d+0x4a>
 800c6be:	bf00      	nop
 800c6c0:	3ff00000 	.word	0x3ff00000

0800c6c4 <__d2b>:
 800c6c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6c8:	460e      	mov	r6, r1
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	ec59 8b10 	vmov	r8, r9, d0
 800c6d0:	4615      	mov	r5, r2
 800c6d2:	f7ff fcb6 	bl	800c042 <_Balloc>
 800c6d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c6da:	4607      	mov	r7, r0
 800c6dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6e0:	bb34      	cbnz	r4, 800c730 <__d2b+0x6c>
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	f1b8 0300 	subs.w	r3, r8, #0
 800c6e8:	d027      	beq.n	800c73a <__d2b+0x76>
 800c6ea:	a802      	add	r0, sp, #8
 800c6ec:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c6f0:	f7ff fd8a 	bl	800c208 <__lo0bits>
 800c6f4:	9900      	ldr	r1, [sp, #0]
 800c6f6:	b1f0      	cbz	r0, 800c736 <__d2b+0x72>
 800c6f8:	9a01      	ldr	r2, [sp, #4]
 800c6fa:	f1c0 0320 	rsb	r3, r0, #32
 800c6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c702:	430b      	orrs	r3, r1
 800c704:	40c2      	lsrs	r2, r0
 800c706:	617b      	str	r3, [r7, #20]
 800c708:	9201      	str	r2, [sp, #4]
 800c70a:	9b01      	ldr	r3, [sp, #4]
 800c70c:	61bb      	str	r3, [r7, #24]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	bf14      	ite	ne
 800c712:	2102      	movne	r1, #2
 800c714:	2101      	moveq	r1, #1
 800c716:	6139      	str	r1, [r7, #16]
 800c718:	b1c4      	cbz	r4, 800c74c <__d2b+0x88>
 800c71a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c71e:	4404      	add	r4, r0
 800c720:	6034      	str	r4, [r6, #0]
 800c722:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c726:	6028      	str	r0, [r5, #0]
 800c728:	4638      	mov	r0, r7
 800c72a:	b003      	add	sp, #12
 800c72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c734:	e7d5      	b.n	800c6e2 <__d2b+0x1e>
 800c736:	6179      	str	r1, [r7, #20]
 800c738:	e7e7      	b.n	800c70a <__d2b+0x46>
 800c73a:	a801      	add	r0, sp, #4
 800c73c:	f7ff fd64 	bl	800c208 <__lo0bits>
 800c740:	9b01      	ldr	r3, [sp, #4]
 800c742:	617b      	str	r3, [r7, #20]
 800c744:	2101      	movs	r1, #1
 800c746:	6139      	str	r1, [r7, #16]
 800c748:	3020      	adds	r0, #32
 800c74a:	e7e5      	b.n	800c718 <__d2b+0x54>
 800c74c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c750:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c754:	6030      	str	r0, [r6, #0]
 800c756:	6918      	ldr	r0, [r3, #16]
 800c758:	f7ff fd37 	bl	800c1ca <__hi0bits>
 800c75c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c760:	e7e1      	b.n	800c726 <__d2b+0x62>

0800c762 <__ratio>:
 800c762:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c766:	4688      	mov	r8, r1
 800c768:	4669      	mov	r1, sp
 800c76a:	4681      	mov	r9, r0
 800c76c:	f7ff ff5c 	bl	800c628 <__b2d>
 800c770:	a901      	add	r1, sp, #4
 800c772:	4640      	mov	r0, r8
 800c774:	ec57 6b10 	vmov	r6, r7, d0
 800c778:	f7ff ff56 	bl	800c628 <__b2d>
 800c77c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c780:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c784:	eba3 0c02 	sub.w	ip, r3, r2
 800c788:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c78c:	1a9b      	subs	r3, r3, r2
 800c78e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c792:	ec5b ab10 	vmov	sl, fp, d0
 800c796:	2b00      	cmp	r3, #0
 800c798:	bfce      	itee	gt
 800c79a:	463a      	movgt	r2, r7
 800c79c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7a0:	465a      	movle	r2, fp
 800c7a2:	4659      	mov	r1, fp
 800c7a4:	463d      	mov	r5, r7
 800c7a6:	bfd4      	ite	le
 800c7a8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c7ac:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	ee10 2a10 	vmov	r2, s0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	f7f4 f84f 	bl	800085c <__aeabi_ddiv>
 800c7be:	ec41 0b10 	vmov	d0, r0, r1
 800c7c2:	b003      	add	sp, #12
 800c7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7c8 <__copybits>:
 800c7c8:	3901      	subs	r1, #1
 800c7ca:	b510      	push	{r4, lr}
 800c7cc:	1149      	asrs	r1, r1, #5
 800c7ce:	6914      	ldr	r4, [r2, #16]
 800c7d0:	3101      	adds	r1, #1
 800c7d2:	f102 0314 	add.w	r3, r2, #20
 800c7d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7de:	42a3      	cmp	r3, r4
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	d303      	bcc.n	800c7ec <__copybits+0x24>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	428a      	cmp	r2, r1
 800c7e8:	d305      	bcc.n	800c7f6 <__copybits+0x2e>
 800c7ea:	bd10      	pop	{r4, pc}
 800c7ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f0:	f840 2b04 	str.w	r2, [r0], #4
 800c7f4:	e7f3      	b.n	800c7de <__copybits+0x16>
 800c7f6:	f842 3b04 	str.w	r3, [r2], #4
 800c7fa:	e7f4      	b.n	800c7e6 <__copybits+0x1e>

0800c7fc <__any_on>:
 800c7fc:	f100 0214 	add.w	r2, r0, #20
 800c800:	6900      	ldr	r0, [r0, #16]
 800c802:	114b      	asrs	r3, r1, #5
 800c804:	4298      	cmp	r0, r3
 800c806:	b510      	push	{r4, lr}
 800c808:	db11      	blt.n	800c82e <__any_on+0x32>
 800c80a:	dd0a      	ble.n	800c822 <__any_on+0x26>
 800c80c:	f011 011f 	ands.w	r1, r1, #31
 800c810:	d007      	beq.n	800c822 <__any_on+0x26>
 800c812:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c816:	fa24 f001 	lsr.w	r0, r4, r1
 800c81a:	fa00 f101 	lsl.w	r1, r0, r1
 800c81e:	428c      	cmp	r4, r1
 800c820:	d10b      	bne.n	800c83a <__any_on+0x3e>
 800c822:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c826:	4293      	cmp	r3, r2
 800c828:	d803      	bhi.n	800c832 <__any_on+0x36>
 800c82a:	2000      	movs	r0, #0
 800c82c:	bd10      	pop	{r4, pc}
 800c82e:	4603      	mov	r3, r0
 800c830:	e7f7      	b.n	800c822 <__any_on+0x26>
 800c832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c836:	2900      	cmp	r1, #0
 800c838:	d0f5      	beq.n	800c826 <__any_on+0x2a>
 800c83a:	2001      	movs	r0, #1
 800c83c:	e7f6      	b.n	800c82c <__any_on+0x30>

0800c83e <_calloc_r>:
 800c83e:	b538      	push	{r3, r4, r5, lr}
 800c840:	fb02 f401 	mul.w	r4, r2, r1
 800c844:	4621      	mov	r1, r4
 800c846:	f000 f857 	bl	800c8f8 <_malloc_r>
 800c84a:	4605      	mov	r5, r0
 800c84c:	b118      	cbz	r0, 800c856 <_calloc_r+0x18>
 800c84e:	4622      	mov	r2, r4
 800c850:	2100      	movs	r1, #0
 800c852:	f7fc fbeb 	bl	800902c <memset>
 800c856:	4628      	mov	r0, r5
 800c858:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c85c <_free_r>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	4605      	mov	r5, r0
 800c860:	2900      	cmp	r1, #0
 800c862:	d045      	beq.n	800c8f0 <_free_r+0x94>
 800c864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c868:	1f0c      	subs	r4, r1, #4
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	bfb8      	it	lt
 800c86e:	18e4      	addlt	r4, r4, r3
 800c870:	f000 fdc3 	bl	800d3fa <__malloc_lock>
 800c874:	4a1f      	ldr	r2, [pc, #124]	; (800c8f4 <_free_r+0x98>)
 800c876:	6813      	ldr	r3, [r2, #0]
 800c878:	4610      	mov	r0, r2
 800c87a:	b933      	cbnz	r3, 800c88a <_free_r+0x2e>
 800c87c:	6063      	str	r3, [r4, #4]
 800c87e:	6014      	str	r4, [r2, #0]
 800c880:	4628      	mov	r0, r5
 800c882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c886:	f000 bdb9 	b.w	800d3fc <__malloc_unlock>
 800c88a:	42a3      	cmp	r3, r4
 800c88c:	d90c      	bls.n	800c8a8 <_free_r+0x4c>
 800c88e:	6821      	ldr	r1, [r4, #0]
 800c890:	1862      	adds	r2, r4, r1
 800c892:	4293      	cmp	r3, r2
 800c894:	bf04      	itt	eq
 800c896:	681a      	ldreq	r2, [r3, #0]
 800c898:	685b      	ldreq	r3, [r3, #4]
 800c89a:	6063      	str	r3, [r4, #4]
 800c89c:	bf04      	itt	eq
 800c89e:	1852      	addeq	r2, r2, r1
 800c8a0:	6022      	streq	r2, [r4, #0]
 800c8a2:	6004      	str	r4, [r0, #0]
 800c8a4:	e7ec      	b.n	800c880 <_free_r+0x24>
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	b10a      	cbz	r2, 800c8b0 <_free_r+0x54>
 800c8ac:	42a2      	cmp	r2, r4
 800c8ae:	d9fa      	bls.n	800c8a6 <_free_r+0x4a>
 800c8b0:	6819      	ldr	r1, [r3, #0]
 800c8b2:	1858      	adds	r0, r3, r1
 800c8b4:	42a0      	cmp	r0, r4
 800c8b6:	d10b      	bne.n	800c8d0 <_free_r+0x74>
 800c8b8:	6820      	ldr	r0, [r4, #0]
 800c8ba:	4401      	add	r1, r0
 800c8bc:	1858      	adds	r0, r3, r1
 800c8be:	4282      	cmp	r2, r0
 800c8c0:	6019      	str	r1, [r3, #0]
 800c8c2:	d1dd      	bne.n	800c880 <_free_r+0x24>
 800c8c4:	6810      	ldr	r0, [r2, #0]
 800c8c6:	6852      	ldr	r2, [r2, #4]
 800c8c8:	605a      	str	r2, [r3, #4]
 800c8ca:	4401      	add	r1, r0
 800c8cc:	6019      	str	r1, [r3, #0]
 800c8ce:	e7d7      	b.n	800c880 <_free_r+0x24>
 800c8d0:	d902      	bls.n	800c8d8 <_free_r+0x7c>
 800c8d2:	230c      	movs	r3, #12
 800c8d4:	602b      	str	r3, [r5, #0]
 800c8d6:	e7d3      	b.n	800c880 <_free_r+0x24>
 800c8d8:	6820      	ldr	r0, [r4, #0]
 800c8da:	1821      	adds	r1, r4, r0
 800c8dc:	428a      	cmp	r2, r1
 800c8de:	bf04      	itt	eq
 800c8e0:	6811      	ldreq	r1, [r2, #0]
 800c8e2:	6852      	ldreq	r2, [r2, #4]
 800c8e4:	6062      	str	r2, [r4, #4]
 800c8e6:	bf04      	itt	eq
 800c8e8:	1809      	addeq	r1, r1, r0
 800c8ea:	6021      	streq	r1, [r4, #0]
 800c8ec:	605c      	str	r4, [r3, #4]
 800c8ee:	e7c7      	b.n	800c880 <_free_r+0x24>
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
 800c8f2:	bf00      	nop
 800c8f4:	20000210 	.word	0x20000210

0800c8f8 <_malloc_r>:
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	1ccd      	adds	r5, r1, #3
 800c8fc:	f025 0503 	bic.w	r5, r5, #3
 800c900:	3508      	adds	r5, #8
 800c902:	2d0c      	cmp	r5, #12
 800c904:	bf38      	it	cc
 800c906:	250c      	movcc	r5, #12
 800c908:	2d00      	cmp	r5, #0
 800c90a:	4606      	mov	r6, r0
 800c90c:	db01      	blt.n	800c912 <_malloc_r+0x1a>
 800c90e:	42a9      	cmp	r1, r5
 800c910:	d903      	bls.n	800c91a <_malloc_r+0x22>
 800c912:	230c      	movs	r3, #12
 800c914:	6033      	str	r3, [r6, #0]
 800c916:	2000      	movs	r0, #0
 800c918:	bd70      	pop	{r4, r5, r6, pc}
 800c91a:	f000 fd6e 	bl	800d3fa <__malloc_lock>
 800c91e:	4a21      	ldr	r2, [pc, #132]	; (800c9a4 <_malloc_r+0xac>)
 800c920:	6814      	ldr	r4, [r2, #0]
 800c922:	4621      	mov	r1, r4
 800c924:	b991      	cbnz	r1, 800c94c <_malloc_r+0x54>
 800c926:	4c20      	ldr	r4, [pc, #128]	; (800c9a8 <_malloc_r+0xb0>)
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	b91b      	cbnz	r3, 800c934 <_malloc_r+0x3c>
 800c92c:	4630      	mov	r0, r6
 800c92e:	f000 facf 	bl	800ced0 <_sbrk_r>
 800c932:	6020      	str	r0, [r4, #0]
 800c934:	4629      	mov	r1, r5
 800c936:	4630      	mov	r0, r6
 800c938:	f000 faca 	bl	800ced0 <_sbrk_r>
 800c93c:	1c43      	adds	r3, r0, #1
 800c93e:	d124      	bne.n	800c98a <_malloc_r+0x92>
 800c940:	230c      	movs	r3, #12
 800c942:	6033      	str	r3, [r6, #0]
 800c944:	4630      	mov	r0, r6
 800c946:	f000 fd59 	bl	800d3fc <__malloc_unlock>
 800c94a:	e7e4      	b.n	800c916 <_malloc_r+0x1e>
 800c94c:	680b      	ldr	r3, [r1, #0]
 800c94e:	1b5b      	subs	r3, r3, r5
 800c950:	d418      	bmi.n	800c984 <_malloc_r+0x8c>
 800c952:	2b0b      	cmp	r3, #11
 800c954:	d90f      	bls.n	800c976 <_malloc_r+0x7e>
 800c956:	600b      	str	r3, [r1, #0]
 800c958:	50cd      	str	r5, [r1, r3]
 800c95a:	18cc      	adds	r4, r1, r3
 800c95c:	4630      	mov	r0, r6
 800c95e:	f000 fd4d 	bl	800d3fc <__malloc_unlock>
 800c962:	f104 000b 	add.w	r0, r4, #11
 800c966:	1d23      	adds	r3, r4, #4
 800c968:	f020 0007 	bic.w	r0, r0, #7
 800c96c:	1ac3      	subs	r3, r0, r3
 800c96e:	d0d3      	beq.n	800c918 <_malloc_r+0x20>
 800c970:	425a      	negs	r2, r3
 800c972:	50e2      	str	r2, [r4, r3]
 800c974:	e7d0      	b.n	800c918 <_malloc_r+0x20>
 800c976:	428c      	cmp	r4, r1
 800c978:	684b      	ldr	r3, [r1, #4]
 800c97a:	bf16      	itet	ne
 800c97c:	6063      	strne	r3, [r4, #4]
 800c97e:	6013      	streq	r3, [r2, #0]
 800c980:	460c      	movne	r4, r1
 800c982:	e7eb      	b.n	800c95c <_malloc_r+0x64>
 800c984:	460c      	mov	r4, r1
 800c986:	6849      	ldr	r1, [r1, #4]
 800c988:	e7cc      	b.n	800c924 <_malloc_r+0x2c>
 800c98a:	1cc4      	adds	r4, r0, #3
 800c98c:	f024 0403 	bic.w	r4, r4, #3
 800c990:	42a0      	cmp	r0, r4
 800c992:	d005      	beq.n	800c9a0 <_malloc_r+0xa8>
 800c994:	1a21      	subs	r1, r4, r0
 800c996:	4630      	mov	r0, r6
 800c998:	f000 fa9a 	bl	800ced0 <_sbrk_r>
 800c99c:	3001      	adds	r0, #1
 800c99e:	d0cf      	beq.n	800c940 <_malloc_r+0x48>
 800c9a0:	6025      	str	r5, [r4, #0]
 800c9a2:	e7db      	b.n	800c95c <_malloc_r+0x64>
 800c9a4:	20000210 	.word	0x20000210
 800c9a8:	20000214 	.word	0x20000214

0800c9ac <__ssputs_r>:
 800c9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b0:	688e      	ldr	r6, [r1, #8]
 800c9b2:	429e      	cmp	r6, r3
 800c9b4:	4682      	mov	sl, r0
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	4690      	mov	r8, r2
 800c9ba:	4699      	mov	r9, r3
 800c9bc:	d837      	bhi.n	800ca2e <__ssputs_r+0x82>
 800c9be:	898a      	ldrh	r2, [r1, #12]
 800c9c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9c4:	d031      	beq.n	800ca2a <__ssputs_r+0x7e>
 800c9c6:	6825      	ldr	r5, [r4, #0]
 800c9c8:	6909      	ldr	r1, [r1, #16]
 800c9ca:	1a6f      	subs	r7, r5, r1
 800c9cc:	6965      	ldr	r5, [r4, #20]
 800c9ce:	2302      	movs	r3, #2
 800c9d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9d4:	fb95 f5f3 	sdiv	r5, r5, r3
 800c9d8:	f109 0301 	add.w	r3, r9, #1
 800c9dc:	443b      	add	r3, r7
 800c9de:	429d      	cmp	r5, r3
 800c9e0:	bf38      	it	cc
 800c9e2:	461d      	movcc	r5, r3
 800c9e4:	0553      	lsls	r3, r2, #21
 800c9e6:	d530      	bpl.n	800ca4a <__ssputs_r+0x9e>
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	f7ff ff85 	bl	800c8f8 <_malloc_r>
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	b950      	cbnz	r0, 800ca08 <__ssputs_r+0x5c>
 800c9f2:	230c      	movs	r3, #12
 800c9f4:	f8ca 3000 	str.w	r3, [sl]
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9fe:	81a3      	strh	r3, [r4, #12]
 800ca00:	f04f 30ff 	mov.w	r0, #4294967295
 800ca04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca08:	463a      	mov	r2, r7
 800ca0a:	6921      	ldr	r1, [r4, #16]
 800ca0c:	f7ff fb0e 	bl	800c02c <memcpy>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca1a:	81a3      	strh	r3, [r4, #12]
 800ca1c:	6126      	str	r6, [r4, #16]
 800ca1e:	6165      	str	r5, [r4, #20]
 800ca20:	443e      	add	r6, r7
 800ca22:	1bed      	subs	r5, r5, r7
 800ca24:	6026      	str	r6, [r4, #0]
 800ca26:	60a5      	str	r5, [r4, #8]
 800ca28:	464e      	mov	r6, r9
 800ca2a:	454e      	cmp	r6, r9
 800ca2c:	d900      	bls.n	800ca30 <__ssputs_r+0x84>
 800ca2e:	464e      	mov	r6, r9
 800ca30:	4632      	mov	r2, r6
 800ca32:	4641      	mov	r1, r8
 800ca34:	6820      	ldr	r0, [r4, #0]
 800ca36:	f000 fcc7 	bl	800d3c8 <memmove>
 800ca3a:	68a3      	ldr	r3, [r4, #8]
 800ca3c:	1b9b      	subs	r3, r3, r6
 800ca3e:	60a3      	str	r3, [r4, #8]
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	441e      	add	r6, r3
 800ca44:	6026      	str	r6, [r4, #0]
 800ca46:	2000      	movs	r0, #0
 800ca48:	e7dc      	b.n	800ca04 <__ssputs_r+0x58>
 800ca4a:	462a      	mov	r2, r5
 800ca4c:	f000 fcd7 	bl	800d3fe <_realloc_r>
 800ca50:	4606      	mov	r6, r0
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d1e2      	bne.n	800ca1c <__ssputs_r+0x70>
 800ca56:	6921      	ldr	r1, [r4, #16]
 800ca58:	4650      	mov	r0, sl
 800ca5a:	f7ff feff 	bl	800c85c <_free_r>
 800ca5e:	e7c8      	b.n	800c9f2 <__ssputs_r+0x46>

0800ca60 <_svfiprintf_r>:
 800ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca64:	461d      	mov	r5, r3
 800ca66:	898b      	ldrh	r3, [r1, #12]
 800ca68:	061f      	lsls	r7, r3, #24
 800ca6a:	b09d      	sub	sp, #116	; 0x74
 800ca6c:	4680      	mov	r8, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	4616      	mov	r6, r2
 800ca72:	d50f      	bpl.n	800ca94 <_svfiprintf_r+0x34>
 800ca74:	690b      	ldr	r3, [r1, #16]
 800ca76:	b96b      	cbnz	r3, 800ca94 <_svfiprintf_r+0x34>
 800ca78:	2140      	movs	r1, #64	; 0x40
 800ca7a:	f7ff ff3d 	bl	800c8f8 <_malloc_r>
 800ca7e:	6020      	str	r0, [r4, #0]
 800ca80:	6120      	str	r0, [r4, #16]
 800ca82:	b928      	cbnz	r0, 800ca90 <_svfiprintf_r+0x30>
 800ca84:	230c      	movs	r3, #12
 800ca86:	f8c8 3000 	str.w	r3, [r8]
 800ca8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8e:	e0c8      	b.n	800cc22 <_svfiprintf_r+0x1c2>
 800ca90:	2340      	movs	r3, #64	; 0x40
 800ca92:	6163      	str	r3, [r4, #20]
 800ca94:	2300      	movs	r3, #0
 800ca96:	9309      	str	r3, [sp, #36]	; 0x24
 800ca98:	2320      	movs	r3, #32
 800ca9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca9e:	2330      	movs	r3, #48	; 0x30
 800caa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caa4:	9503      	str	r5, [sp, #12]
 800caa6:	f04f 0b01 	mov.w	fp, #1
 800caaa:	4637      	mov	r7, r6
 800caac:	463d      	mov	r5, r7
 800caae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cab2:	b10b      	cbz	r3, 800cab8 <_svfiprintf_r+0x58>
 800cab4:	2b25      	cmp	r3, #37	; 0x25
 800cab6:	d13e      	bne.n	800cb36 <_svfiprintf_r+0xd6>
 800cab8:	ebb7 0a06 	subs.w	sl, r7, r6
 800cabc:	d00b      	beq.n	800cad6 <_svfiprintf_r+0x76>
 800cabe:	4653      	mov	r3, sl
 800cac0:	4632      	mov	r2, r6
 800cac2:	4621      	mov	r1, r4
 800cac4:	4640      	mov	r0, r8
 800cac6:	f7ff ff71 	bl	800c9ac <__ssputs_r>
 800caca:	3001      	adds	r0, #1
 800cacc:	f000 80a4 	beq.w	800cc18 <_svfiprintf_r+0x1b8>
 800cad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad2:	4453      	add	r3, sl
 800cad4:	9309      	str	r3, [sp, #36]	; 0x24
 800cad6:	783b      	ldrb	r3, [r7, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f000 809d 	beq.w	800cc18 <_svfiprintf_r+0x1b8>
 800cade:	2300      	movs	r3, #0
 800cae0:	f04f 32ff 	mov.w	r2, #4294967295
 800cae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cae8:	9304      	str	r3, [sp, #16]
 800caea:	9307      	str	r3, [sp, #28]
 800caec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caf0:	931a      	str	r3, [sp, #104]	; 0x68
 800caf2:	462f      	mov	r7, r5
 800caf4:	2205      	movs	r2, #5
 800caf6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cafa:	4850      	ldr	r0, [pc, #320]	; (800cc3c <_svfiprintf_r+0x1dc>)
 800cafc:	f7f3 fb78 	bl	80001f0 <memchr>
 800cb00:	9b04      	ldr	r3, [sp, #16]
 800cb02:	b9d0      	cbnz	r0, 800cb3a <_svfiprintf_r+0xda>
 800cb04:	06d9      	lsls	r1, r3, #27
 800cb06:	bf44      	itt	mi
 800cb08:	2220      	movmi	r2, #32
 800cb0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb0e:	071a      	lsls	r2, r3, #28
 800cb10:	bf44      	itt	mi
 800cb12:	222b      	movmi	r2, #43	; 0x2b
 800cb14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb18:	782a      	ldrb	r2, [r5, #0]
 800cb1a:	2a2a      	cmp	r2, #42	; 0x2a
 800cb1c:	d015      	beq.n	800cb4a <_svfiprintf_r+0xea>
 800cb1e:	9a07      	ldr	r2, [sp, #28]
 800cb20:	462f      	mov	r7, r5
 800cb22:	2000      	movs	r0, #0
 800cb24:	250a      	movs	r5, #10
 800cb26:	4639      	mov	r1, r7
 800cb28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb2c:	3b30      	subs	r3, #48	; 0x30
 800cb2e:	2b09      	cmp	r3, #9
 800cb30:	d94d      	bls.n	800cbce <_svfiprintf_r+0x16e>
 800cb32:	b1b8      	cbz	r0, 800cb64 <_svfiprintf_r+0x104>
 800cb34:	e00f      	b.n	800cb56 <_svfiprintf_r+0xf6>
 800cb36:	462f      	mov	r7, r5
 800cb38:	e7b8      	b.n	800caac <_svfiprintf_r+0x4c>
 800cb3a:	4a40      	ldr	r2, [pc, #256]	; (800cc3c <_svfiprintf_r+0x1dc>)
 800cb3c:	1a80      	subs	r0, r0, r2
 800cb3e:	fa0b f000 	lsl.w	r0, fp, r0
 800cb42:	4318      	orrs	r0, r3
 800cb44:	9004      	str	r0, [sp, #16]
 800cb46:	463d      	mov	r5, r7
 800cb48:	e7d3      	b.n	800caf2 <_svfiprintf_r+0x92>
 800cb4a:	9a03      	ldr	r2, [sp, #12]
 800cb4c:	1d11      	adds	r1, r2, #4
 800cb4e:	6812      	ldr	r2, [r2, #0]
 800cb50:	9103      	str	r1, [sp, #12]
 800cb52:	2a00      	cmp	r2, #0
 800cb54:	db01      	blt.n	800cb5a <_svfiprintf_r+0xfa>
 800cb56:	9207      	str	r2, [sp, #28]
 800cb58:	e004      	b.n	800cb64 <_svfiprintf_r+0x104>
 800cb5a:	4252      	negs	r2, r2
 800cb5c:	f043 0302 	orr.w	r3, r3, #2
 800cb60:	9207      	str	r2, [sp, #28]
 800cb62:	9304      	str	r3, [sp, #16]
 800cb64:	783b      	ldrb	r3, [r7, #0]
 800cb66:	2b2e      	cmp	r3, #46	; 0x2e
 800cb68:	d10c      	bne.n	800cb84 <_svfiprintf_r+0x124>
 800cb6a:	787b      	ldrb	r3, [r7, #1]
 800cb6c:	2b2a      	cmp	r3, #42	; 0x2a
 800cb6e:	d133      	bne.n	800cbd8 <_svfiprintf_r+0x178>
 800cb70:	9b03      	ldr	r3, [sp, #12]
 800cb72:	1d1a      	adds	r2, r3, #4
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	9203      	str	r2, [sp, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	bfb8      	it	lt
 800cb7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb80:	3702      	adds	r7, #2
 800cb82:	9305      	str	r3, [sp, #20]
 800cb84:	4d2e      	ldr	r5, [pc, #184]	; (800cc40 <_svfiprintf_r+0x1e0>)
 800cb86:	7839      	ldrb	r1, [r7, #0]
 800cb88:	2203      	movs	r2, #3
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f7f3 fb30 	bl	80001f0 <memchr>
 800cb90:	b138      	cbz	r0, 800cba2 <_svfiprintf_r+0x142>
 800cb92:	2340      	movs	r3, #64	; 0x40
 800cb94:	1b40      	subs	r0, r0, r5
 800cb96:	fa03 f000 	lsl.w	r0, r3, r0
 800cb9a:	9b04      	ldr	r3, [sp, #16]
 800cb9c:	4303      	orrs	r3, r0
 800cb9e:	3701      	adds	r7, #1
 800cba0:	9304      	str	r3, [sp, #16]
 800cba2:	7839      	ldrb	r1, [r7, #0]
 800cba4:	4827      	ldr	r0, [pc, #156]	; (800cc44 <_svfiprintf_r+0x1e4>)
 800cba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbaa:	2206      	movs	r2, #6
 800cbac:	1c7e      	adds	r6, r7, #1
 800cbae:	f7f3 fb1f 	bl	80001f0 <memchr>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d038      	beq.n	800cc28 <_svfiprintf_r+0x1c8>
 800cbb6:	4b24      	ldr	r3, [pc, #144]	; (800cc48 <_svfiprintf_r+0x1e8>)
 800cbb8:	bb13      	cbnz	r3, 800cc00 <_svfiprintf_r+0x1a0>
 800cbba:	9b03      	ldr	r3, [sp, #12]
 800cbbc:	3307      	adds	r3, #7
 800cbbe:	f023 0307 	bic.w	r3, r3, #7
 800cbc2:	3308      	adds	r3, #8
 800cbc4:	9303      	str	r3, [sp, #12]
 800cbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc8:	444b      	add	r3, r9
 800cbca:	9309      	str	r3, [sp, #36]	; 0x24
 800cbcc:	e76d      	b.n	800caaa <_svfiprintf_r+0x4a>
 800cbce:	fb05 3202 	mla	r2, r5, r2, r3
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	460f      	mov	r7, r1
 800cbd6:	e7a6      	b.n	800cb26 <_svfiprintf_r+0xc6>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	3701      	adds	r7, #1
 800cbdc:	9305      	str	r3, [sp, #20]
 800cbde:	4619      	mov	r1, r3
 800cbe0:	250a      	movs	r5, #10
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbe8:	3a30      	subs	r2, #48	; 0x30
 800cbea:	2a09      	cmp	r2, #9
 800cbec:	d903      	bls.n	800cbf6 <_svfiprintf_r+0x196>
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0c8      	beq.n	800cb84 <_svfiprintf_r+0x124>
 800cbf2:	9105      	str	r1, [sp, #20]
 800cbf4:	e7c6      	b.n	800cb84 <_svfiprintf_r+0x124>
 800cbf6:	fb05 2101 	mla	r1, r5, r1, r2
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	e7f0      	b.n	800cbe2 <_svfiprintf_r+0x182>
 800cc00:	ab03      	add	r3, sp, #12
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	4622      	mov	r2, r4
 800cc06:	4b11      	ldr	r3, [pc, #68]	; (800cc4c <_svfiprintf_r+0x1ec>)
 800cc08:	a904      	add	r1, sp, #16
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	f7fc faaa 	bl	8009164 <_printf_float>
 800cc10:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cc14:	4681      	mov	r9, r0
 800cc16:	d1d6      	bne.n	800cbc6 <_svfiprintf_r+0x166>
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	065b      	lsls	r3, r3, #25
 800cc1c:	f53f af35 	bmi.w	800ca8a <_svfiprintf_r+0x2a>
 800cc20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc22:	b01d      	add	sp, #116	; 0x74
 800cc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc28:	ab03      	add	r3, sp, #12
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	4b07      	ldr	r3, [pc, #28]	; (800cc4c <_svfiprintf_r+0x1ec>)
 800cc30:	a904      	add	r1, sp, #16
 800cc32:	4640      	mov	r0, r8
 800cc34:	f7fc fd4c 	bl	80096d0 <_printf_i>
 800cc38:	e7ea      	b.n	800cc10 <_svfiprintf_r+0x1b0>
 800cc3a:	bf00      	nop
 800cc3c:	0800fa74 	.word	0x0800fa74
 800cc40:	0800fa7a 	.word	0x0800fa7a
 800cc44:	0800fa7e 	.word	0x0800fa7e
 800cc48:	08009165 	.word	0x08009165
 800cc4c:	0800c9ad 	.word	0x0800c9ad

0800cc50 <__sfputc_r>:
 800cc50:	6893      	ldr	r3, [r2, #8]
 800cc52:	3b01      	subs	r3, #1
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	b410      	push	{r4}
 800cc58:	6093      	str	r3, [r2, #8]
 800cc5a:	da08      	bge.n	800cc6e <__sfputc_r+0x1e>
 800cc5c:	6994      	ldr	r4, [r2, #24]
 800cc5e:	42a3      	cmp	r3, r4
 800cc60:	db01      	blt.n	800cc66 <__sfputc_r+0x16>
 800cc62:	290a      	cmp	r1, #10
 800cc64:	d103      	bne.n	800cc6e <__sfputc_r+0x1e>
 800cc66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc6a:	f000 b997 	b.w	800cf9c <__swbuf_r>
 800cc6e:	6813      	ldr	r3, [r2, #0]
 800cc70:	1c58      	adds	r0, r3, #1
 800cc72:	6010      	str	r0, [r2, #0]
 800cc74:	7019      	strb	r1, [r3, #0]
 800cc76:	4608      	mov	r0, r1
 800cc78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc7c:	4770      	bx	lr

0800cc7e <__sfputs_r>:
 800cc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc80:	4606      	mov	r6, r0
 800cc82:	460f      	mov	r7, r1
 800cc84:	4614      	mov	r4, r2
 800cc86:	18d5      	adds	r5, r2, r3
 800cc88:	42ac      	cmp	r4, r5
 800cc8a:	d101      	bne.n	800cc90 <__sfputs_r+0x12>
 800cc8c:	2000      	movs	r0, #0
 800cc8e:	e007      	b.n	800cca0 <__sfputs_r+0x22>
 800cc90:	463a      	mov	r2, r7
 800cc92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc96:	4630      	mov	r0, r6
 800cc98:	f7ff ffda 	bl	800cc50 <__sfputc_r>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	d1f3      	bne.n	800cc88 <__sfputs_r+0xa>
 800cca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cca4 <_vfiprintf_r>:
 800cca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca8:	460c      	mov	r4, r1
 800ccaa:	b09d      	sub	sp, #116	; 0x74
 800ccac:	4617      	mov	r7, r2
 800ccae:	461d      	mov	r5, r3
 800ccb0:	4606      	mov	r6, r0
 800ccb2:	b118      	cbz	r0, 800ccbc <_vfiprintf_r+0x18>
 800ccb4:	6983      	ldr	r3, [r0, #24]
 800ccb6:	b90b      	cbnz	r3, 800ccbc <_vfiprintf_r+0x18>
 800ccb8:	f7fe fdda 	bl	800b870 <__sinit>
 800ccbc:	4b7c      	ldr	r3, [pc, #496]	; (800ceb0 <_vfiprintf_r+0x20c>)
 800ccbe:	429c      	cmp	r4, r3
 800ccc0:	d158      	bne.n	800cd74 <_vfiprintf_r+0xd0>
 800ccc2:	6874      	ldr	r4, [r6, #4]
 800ccc4:	89a3      	ldrh	r3, [r4, #12]
 800ccc6:	0718      	lsls	r0, r3, #28
 800ccc8:	d55e      	bpl.n	800cd88 <_vfiprintf_r+0xe4>
 800ccca:	6923      	ldr	r3, [r4, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d05b      	beq.n	800cd88 <_vfiprintf_r+0xe4>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	9309      	str	r3, [sp, #36]	; 0x24
 800ccd4:	2320      	movs	r3, #32
 800ccd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccda:	2330      	movs	r3, #48	; 0x30
 800ccdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cce0:	9503      	str	r5, [sp, #12]
 800cce2:	f04f 0b01 	mov.w	fp, #1
 800cce6:	46b8      	mov	r8, r7
 800cce8:	4645      	mov	r5, r8
 800ccea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ccee:	b10b      	cbz	r3, 800ccf4 <_vfiprintf_r+0x50>
 800ccf0:	2b25      	cmp	r3, #37	; 0x25
 800ccf2:	d154      	bne.n	800cd9e <_vfiprintf_r+0xfa>
 800ccf4:	ebb8 0a07 	subs.w	sl, r8, r7
 800ccf8:	d00b      	beq.n	800cd12 <_vfiprintf_r+0x6e>
 800ccfa:	4653      	mov	r3, sl
 800ccfc:	463a      	mov	r2, r7
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4630      	mov	r0, r6
 800cd02:	f7ff ffbc 	bl	800cc7e <__sfputs_r>
 800cd06:	3001      	adds	r0, #1
 800cd08:	f000 80c2 	beq.w	800ce90 <_vfiprintf_r+0x1ec>
 800cd0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd0e:	4453      	add	r3, sl
 800cd10:	9309      	str	r3, [sp, #36]	; 0x24
 800cd12:	f898 3000 	ldrb.w	r3, [r8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 80ba 	beq.w	800ce90 <_vfiprintf_r+0x1ec>
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd26:	9304      	str	r3, [sp, #16]
 800cd28:	9307      	str	r3, [sp, #28]
 800cd2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd2e:	931a      	str	r3, [sp, #104]	; 0x68
 800cd30:	46a8      	mov	r8, r5
 800cd32:	2205      	movs	r2, #5
 800cd34:	f818 1b01 	ldrb.w	r1, [r8], #1
 800cd38:	485e      	ldr	r0, [pc, #376]	; (800ceb4 <_vfiprintf_r+0x210>)
 800cd3a:	f7f3 fa59 	bl	80001f0 <memchr>
 800cd3e:	9b04      	ldr	r3, [sp, #16]
 800cd40:	bb78      	cbnz	r0, 800cda2 <_vfiprintf_r+0xfe>
 800cd42:	06d9      	lsls	r1, r3, #27
 800cd44:	bf44      	itt	mi
 800cd46:	2220      	movmi	r2, #32
 800cd48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd4c:	071a      	lsls	r2, r3, #28
 800cd4e:	bf44      	itt	mi
 800cd50:	222b      	movmi	r2, #43	; 0x2b
 800cd52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd56:	782a      	ldrb	r2, [r5, #0]
 800cd58:	2a2a      	cmp	r2, #42	; 0x2a
 800cd5a:	d02a      	beq.n	800cdb2 <_vfiprintf_r+0x10e>
 800cd5c:	9a07      	ldr	r2, [sp, #28]
 800cd5e:	46a8      	mov	r8, r5
 800cd60:	2000      	movs	r0, #0
 800cd62:	250a      	movs	r5, #10
 800cd64:	4641      	mov	r1, r8
 800cd66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd6a:	3b30      	subs	r3, #48	; 0x30
 800cd6c:	2b09      	cmp	r3, #9
 800cd6e:	d969      	bls.n	800ce44 <_vfiprintf_r+0x1a0>
 800cd70:	b360      	cbz	r0, 800cdcc <_vfiprintf_r+0x128>
 800cd72:	e024      	b.n	800cdbe <_vfiprintf_r+0x11a>
 800cd74:	4b50      	ldr	r3, [pc, #320]	; (800ceb8 <_vfiprintf_r+0x214>)
 800cd76:	429c      	cmp	r4, r3
 800cd78:	d101      	bne.n	800cd7e <_vfiprintf_r+0xda>
 800cd7a:	68b4      	ldr	r4, [r6, #8]
 800cd7c:	e7a2      	b.n	800ccc4 <_vfiprintf_r+0x20>
 800cd7e:	4b4f      	ldr	r3, [pc, #316]	; (800cebc <_vfiprintf_r+0x218>)
 800cd80:	429c      	cmp	r4, r3
 800cd82:	bf08      	it	eq
 800cd84:	68f4      	ldreq	r4, [r6, #12]
 800cd86:	e79d      	b.n	800ccc4 <_vfiprintf_r+0x20>
 800cd88:	4621      	mov	r1, r4
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f000 f978 	bl	800d080 <__swsetup_r>
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d09d      	beq.n	800ccd0 <_vfiprintf_r+0x2c>
 800cd94:	f04f 30ff 	mov.w	r0, #4294967295
 800cd98:	b01d      	add	sp, #116	; 0x74
 800cd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9e:	46a8      	mov	r8, r5
 800cda0:	e7a2      	b.n	800cce8 <_vfiprintf_r+0x44>
 800cda2:	4a44      	ldr	r2, [pc, #272]	; (800ceb4 <_vfiprintf_r+0x210>)
 800cda4:	1a80      	subs	r0, r0, r2
 800cda6:	fa0b f000 	lsl.w	r0, fp, r0
 800cdaa:	4318      	orrs	r0, r3
 800cdac:	9004      	str	r0, [sp, #16]
 800cdae:	4645      	mov	r5, r8
 800cdb0:	e7be      	b.n	800cd30 <_vfiprintf_r+0x8c>
 800cdb2:	9a03      	ldr	r2, [sp, #12]
 800cdb4:	1d11      	adds	r1, r2, #4
 800cdb6:	6812      	ldr	r2, [r2, #0]
 800cdb8:	9103      	str	r1, [sp, #12]
 800cdba:	2a00      	cmp	r2, #0
 800cdbc:	db01      	blt.n	800cdc2 <_vfiprintf_r+0x11e>
 800cdbe:	9207      	str	r2, [sp, #28]
 800cdc0:	e004      	b.n	800cdcc <_vfiprintf_r+0x128>
 800cdc2:	4252      	negs	r2, r2
 800cdc4:	f043 0302 	orr.w	r3, r3, #2
 800cdc8:	9207      	str	r2, [sp, #28]
 800cdca:	9304      	str	r3, [sp, #16]
 800cdcc:	f898 3000 	ldrb.w	r3, [r8]
 800cdd0:	2b2e      	cmp	r3, #46	; 0x2e
 800cdd2:	d10e      	bne.n	800cdf2 <_vfiprintf_r+0x14e>
 800cdd4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cdd8:	2b2a      	cmp	r3, #42	; 0x2a
 800cdda:	d138      	bne.n	800ce4e <_vfiprintf_r+0x1aa>
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	1d1a      	adds	r2, r3, #4
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	9203      	str	r2, [sp, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	bfb8      	it	lt
 800cde8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdec:	f108 0802 	add.w	r8, r8, #2
 800cdf0:	9305      	str	r3, [sp, #20]
 800cdf2:	4d33      	ldr	r5, [pc, #204]	; (800cec0 <_vfiprintf_r+0x21c>)
 800cdf4:	f898 1000 	ldrb.w	r1, [r8]
 800cdf8:	2203      	movs	r2, #3
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f7f3 f9f8 	bl	80001f0 <memchr>
 800ce00:	b140      	cbz	r0, 800ce14 <_vfiprintf_r+0x170>
 800ce02:	2340      	movs	r3, #64	; 0x40
 800ce04:	1b40      	subs	r0, r0, r5
 800ce06:	fa03 f000 	lsl.w	r0, r3, r0
 800ce0a:	9b04      	ldr	r3, [sp, #16]
 800ce0c:	4303      	orrs	r3, r0
 800ce0e:	f108 0801 	add.w	r8, r8, #1
 800ce12:	9304      	str	r3, [sp, #16]
 800ce14:	f898 1000 	ldrb.w	r1, [r8]
 800ce18:	482a      	ldr	r0, [pc, #168]	; (800cec4 <_vfiprintf_r+0x220>)
 800ce1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce1e:	2206      	movs	r2, #6
 800ce20:	f108 0701 	add.w	r7, r8, #1
 800ce24:	f7f3 f9e4 	bl	80001f0 <memchr>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d037      	beq.n	800ce9c <_vfiprintf_r+0x1f8>
 800ce2c:	4b26      	ldr	r3, [pc, #152]	; (800cec8 <_vfiprintf_r+0x224>)
 800ce2e:	bb1b      	cbnz	r3, 800ce78 <_vfiprintf_r+0x1d4>
 800ce30:	9b03      	ldr	r3, [sp, #12]
 800ce32:	3307      	adds	r3, #7
 800ce34:	f023 0307 	bic.w	r3, r3, #7
 800ce38:	3308      	adds	r3, #8
 800ce3a:	9303      	str	r3, [sp, #12]
 800ce3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3e:	444b      	add	r3, r9
 800ce40:	9309      	str	r3, [sp, #36]	; 0x24
 800ce42:	e750      	b.n	800cce6 <_vfiprintf_r+0x42>
 800ce44:	fb05 3202 	mla	r2, r5, r2, r3
 800ce48:	2001      	movs	r0, #1
 800ce4a:	4688      	mov	r8, r1
 800ce4c:	e78a      	b.n	800cd64 <_vfiprintf_r+0xc0>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	f108 0801 	add.w	r8, r8, #1
 800ce54:	9305      	str	r3, [sp, #20]
 800ce56:	4619      	mov	r1, r3
 800ce58:	250a      	movs	r5, #10
 800ce5a:	4640      	mov	r0, r8
 800ce5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce60:	3a30      	subs	r2, #48	; 0x30
 800ce62:	2a09      	cmp	r2, #9
 800ce64:	d903      	bls.n	800ce6e <_vfiprintf_r+0x1ca>
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d0c3      	beq.n	800cdf2 <_vfiprintf_r+0x14e>
 800ce6a:	9105      	str	r1, [sp, #20]
 800ce6c:	e7c1      	b.n	800cdf2 <_vfiprintf_r+0x14e>
 800ce6e:	fb05 2101 	mla	r1, r5, r1, r2
 800ce72:	2301      	movs	r3, #1
 800ce74:	4680      	mov	r8, r0
 800ce76:	e7f0      	b.n	800ce5a <_vfiprintf_r+0x1b6>
 800ce78:	ab03      	add	r3, sp, #12
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	4b13      	ldr	r3, [pc, #76]	; (800cecc <_vfiprintf_r+0x228>)
 800ce80:	a904      	add	r1, sp, #16
 800ce82:	4630      	mov	r0, r6
 800ce84:	f7fc f96e 	bl	8009164 <_printf_float>
 800ce88:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce8c:	4681      	mov	r9, r0
 800ce8e:	d1d5      	bne.n	800ce3c <_vfiprintf_r+0x198>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	065b      	lsls	r3, r3, #25
 800ce94:	f53f af7e 	bmi.w	800cd94 <_vfiprintf_r+0xf0>
 800ce98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce9a:	e77d      	b.n	800cd98 <_vfiprintf_r+0xf4>
 800ce9c:	ab03      	add	r3, sp, #12
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	4622      	mov	r2, r4
 800cea2:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <_vfiprintf_r+0x228>)
 800cea4:	a904      	add	r1, sp, #16
 800cea6:	4630      	mov	r0, r6
 800cea8:	f7fc fc12 	bl	80096d0 <_printf_i>
 800ceac:	e7ec      	b.n	800ce88 <_vfiprintf_r+0x1e4>
 800ceae:	bf00      	nop
 800ceb0:	0800f928 	.word	0x0800f928
 800ceb4:	0800fa74 	.word	0x0800fa74
 800ceb8:	0800f948 	.word	0x0800f948
 800cebc:	0800f908 	.word	0x0800f908
 800cec0:	0800fa7a 	.word	0x0800fa7a
 800cec4:	0800fa7e 	.word	0x0800fa7e
 800cec8:	08009165 	.word	0x08009165
 800cecc:	0800cc7f 	.word	0x0800cc7f

0800ced0 <_sbrk_r>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	4c06      	ldr	r4, [pc, #24]	; (800ceec <_sbrk_r+0x1c>)
 800ced4:	2300      	movs	r3, #0
 800ced6:	4605      	mov	r5, r0
 800ced8:	4608      	mov	r0, r1
 800ceda:	6023      	str	r3, [r4, #0]
 800cedc:	f7fb fb12 	bl	8008504 <_sbrk>
 800cee0:	1c43      	adds	r3, r0, #1
 800cee2:	d102      	bne.n	800ceea <_sbrk_r+0x1a>
 800cee4:	6823      	ldr	r3, [r4, #0]
 800cee6:	b103      	cbz	r3, 800ceea <_sbrk_r+0x1a>
 800cee8:	602b      	str	r3, [r5, #0]
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	20000578 	.word	0x20000578

0800cef0 <__sread>:
 800cef0:	b510      	push	{r4, lr}
 800cef2:	460c      	mov	r4, r1
 800cef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef8:	f000 faa8 	bl	800d44c <_read_r>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	bfab      	itete	ge
 800cf00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf02:	89a3      	ldrhlt	r3, [r4, #12]
 800cf04:	181b      	addge	r3, r3, r0
 800cf06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf0a:	bfac      	ite	ge
 800cf0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf0e:	81a3      	strhlt	r3, [r4, #12]
 800cf10:	bd10      	pop	{r4, pc}

0800cf12 <__swrite>:
 800cf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf16:	461f      	mov	r7, r3
 800cf18:	898b      	ldrh	r3, [r1, #12]
 800cf1a:	05db      	lsls	r3, r3, #23
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	4616      	mov	r6, r2
 800cf22:	d505      	bpl.n	800cf30 <__swrite+0x1e>
 800cf24:	2302      	movs	r3, #2
 800cf26:	2200      	movs	r2, #0
 800cf28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf2c:	f000 f9d6 	bl	800d2dc <_lseek_r>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	4632      	mov	r2, r6
 800cf3e:	463b      	mov	r3, r7
 800cf40:	4628      	mov	r0, r5
 800cf42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf46:	f000 b889 	b.w	800d05c <_write_r>

0800cf4a <__sseek>:
 800cf4a:	b510      	push	{r4, lr}
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf52:	f000 f9c3 	bl	800d2dc <_lseek_r>
 800cf56:	1c43      	adds	r3, r0, #1
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	bf15      	itete	ne
 800cf5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf66:	81a3      	strheq	r3, [r4, #12]
 800cf68:	bf18      	it	ne
 800cf6a:	81a3      	strhne	r3, [r4, #12]
 800cf6c:	bd10      	pop	{r4, pc}

0800cf6e <__sclose>:
 800cf6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf72:	f000 b8f3 	b.w	800d15c <_close_r>

0800cf76 <strncmp>:
 800cf76:	b510      	push	{r4, lr}
 800cf78:	b16a      	cbz	r2, 800cf96 <strncmp+0x20>
 800cf7a:	3901      	subs	r1, #1
 800cf7c:	1884      	adds	r4, r0, r2
 800cf7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cf82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d103      	bne.n	800cf92 <strncmp+0x1c>
 800cf8a:	42a0      	cmp	r0, r4
 800cf8c:	d001      	beq.n	800cf92 <strncmp+0x1c>
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1f5      	bne.n	800cf7e <strncmp+0x8>
 800cf92:	1a98      	subs	r0, r3, r2
 800cf94:	bd10      	pop	{r4, pc}
 800cf96:	4610      	mov	r0, r2
 800cf98:	e7fc      	b.n	800cf94 <strncmp+0x1e>
	...

0800cf9c <__swbuf_r>:
 800cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9e:	460e      	mov	r6, r1
 800cfa0:	4614      	mov	r4, r2
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	b118      	cbz	r0, 800cfae <__swbuf_r+0x12>
 800cfa6:	6983      	ldr	r3, [r0, #24]
 800cfa8:	b90b      	cbnz	r3, 800cfae <__swbuf_r+0x12>
 800cfaa:	f7fe fc61 	bl	800b870 <__sinit>
 800cfae:	4b21      	ldr	r3, [pc, #132]	; (800d034 <__swbuf_r+0x98>)
 800cfb0:	429c      	cmp	r4, r3
 800cfb2:	d12a      	bne.n	800d00a <__swbuf_r+0x6e>
 800cfb4:	686c      	ldr	r4, [r5, #4]
 800cfb6:	69a3      	ldr	r3, [r4, #24]
 800cfb8:	60a3      	str	r3, [r4, #8]
 800cfba:	89a3      	ldrh	r3, [r4, #12]
 800cfbc:	071a      	lsls	r2, r3, #28
 800cfbe:	d52e      	bpl.n	800d01e <__swbuf_r+0x82>
 800cfc0:	6923      	ldr	r3, [r4, #16]
 800cfc2:	b363      	cbz	r3, 800d01e <__swbuf_r+0x82>
 800cfc4:	6923      	ldr	r3, [r4, #16]
 800cfc6:	6820      	ldr	r0, [r4, #0]
 800cfc8:	1ac0      	subs	r0, r0, r3
 800cfca:	6963      	ldr	r3, [r4, #20]
 800cfcc:	b2f6      	uxtb	r6, r6
 800cfce:	4283      	cmp	r3, r0
 800cfd0:	4637      	mov	r7, r6
 800cfd2:	dc04      	bgt.n	800cfde <__swbuf_r+0x42>
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	f000 f956 	bl	800d288 <_fflush_r>
 800cfdc:	bb28      	cbnz	r0, 800d02a <__swbuf_r+0x8e>
 800cfde:	68a3      	ldr	r3, [r4, #8]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	60a3      	str	r3, [r4, #8]
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	6022      	str	r2, [r4, #0]
 800cfea:	701e      	strb	r6, [r3, #0]
 800cfec:	6963      	ldr	r3, [r4, #20]
 800cfee:	3001      	adds	r0, #1
 800cff0:	4283      	cmp	r3, r0
 800cff2:	d004      	beq.n	800cffe <__swbuf_r+0x62>
 800cff4:	89a3      	ldrh	r3, [r4, #12]
 800cff6:	07db      	lsls	r3, r3, #31
 800cff8:	d519      	bpl.n	800d02e <__swbuf_r+0x92>
 800cffa:	2e0a      	cmp	r6, #10
 800cffc:	d117      	bne.n	800d02e <__swbuf_r+0x92>
 800cffe:	4621      	mov	r1, r4
 800d000:	4628      	mov	r0, r5
 800d002:	f000 f941 	bl	800d288 <_fflush_r>
 800d006:	b190      	cbz	r0, 800d02e <__swbuf_r+0x92>
 800d008:	e00f      	b.n	800d02a <__swbuf_r+0x8e>
 800d00a:	4b0b      	ldr	r3, [pc, #44]	; (800d038 <__swbuf_r+0x9c>)
 800d00c:	429c      	cmp	r4, r3
 800d00e:	d101      	bne.n	800d014 <__swbuf_r+0x78>
 800d010:	68ac      	ldr	r4, [r5, #8]
 800d012:	e7d0      	b.n	800cfb6 <__swbuf_r+0x1a>
 800d014:	4b09      	ldr	r3, [pc, #36]	; (800d03c <__swbuf_r+0xa0>)
 800d016:	429c      	cmp	r4, r3
 800d018:	bf08      	it	eq
 800d01a:	68ec      	ldreq	r4, [r5, #12]
 800d01c:	e7cb      	b.n	800cfb6 <__swbuf_r+0x1a>
 800d01e:	4621      	mov	r1, r4
 800d020:	4628      	mov	r0, r5
 800d022:	f000 f82d 	bl	800d080 <__swsetup_r>
 800d026:	2800      	cmp	r0, #0
 800d028:	d0cc      	beq.n	800cfc4 <__swbuf_r+0x28>
 800d02a:	f04f 37ff 	mov.w	r7, #4294967295
 800d02e:	4638      	mov	r0, r7
 800d030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d032:	bf00      	nop
 800d034:	0800f928 	.word	0x0800f928
 800d038:	0800f948 	.word	0x0800f948
 800d03c:	0800f908 	.word	0x0800f908

0800d040 <__ascii_wctomb>:
 800d040:	b149      	cbz	r1, 800d056 <__ascii_wctomb+0x16>
 800d042:	2aff      	cmp	r2, #255	; 0xff
 800d044:	bf85      	ittet	hi
 800d046:	238a      	movhi	r3, #138	; 0x8a
 800d048:	6003      	strhi	r3, [r0, #0]
 800d04a:	700a      	strbls	r2, [r1, #0]
 800d04c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d050:	bf98      	it	ls
 800d052:	2001      	movls	r0, #1
 800d054:	4770      	bx	lr
 800d056:	4608      	mov	r0, r1
 800d058:	4770      	bx	lr
	...

0800d05c <_write_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	4c07      	ldr	r4, [pc, #28]	; (800d07c <_write_r+0x20>)
 800d060:	4605      	mov	r5, r0
 800d062:	4608      	mov	r0, r1
 800d064:	4611      	mov	r1, r2
 800d066:	2200      	movs	r2, #0
 800d068:	6022      	str	r2, [r4, #0]
 800d06a:	461a      	mov	r2, r3
 800d06c:	f7fa fb22 	bl	80076b4 <_write>
 800d070:	1c43      	adds	r3, r0, #1
 800d072:	d102      	bne.n	800d07a <_write_r+0x1e>
 800d074:	6823      	ldr	r3, [r4, #0]
 800d076:	b103      	cbz	r3, 800d07a <_write_r+0x1e>
 800d078:	602b      	str	r3, [r5, #0]
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	20000578 	.word	0x20000578

0800d080 <__swsetup_r>:
 800d080:	4b32      	ldr	r3, [pc, #200]	; (800d14c <__swsetup_r+0xcc>)
 800d082:	b570      	push	{r4, r5, r6, lr}
 800d084:	681d      	ldr	r5, [r3, #0]
 800d086:	4606      	mov	r6, r0
 800d088:	460c      	mov	r4, r1
 800d08a:	b125      	cbz	r5, 800d096 <__swsetup_r+0x16>
 800d08c:	69ab      	ldr	r3, [r5, #24]
 800d08e:	b913      	cbnz	r3, 800d096 <__swsetup_r+0x16>
 800d090:	4628      	mov	r0, r5
 800d092:	f7fe fbed 	bl	800b870 <__sinit>
 800d096:	4b2e      	ldr	r3, [pc, #184]	; (800d150 <__swsetup_r+0xd0>)
 800d098:	429c      	cmp	r4, r3
 800d09a:	d10f      	bne.n	800d0bc <__swsetup_r+0x3c>
 800d09c:	686c      	ldr	r4, [r5, #4]
 800d09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	0715      	lsls	r5, r2, #28
 800d0a6:	d42c      	bmi.n	800d102 <__swsetup_r+0x82>
 800d0a8:	06d0      	lsls	r0, r2, #27
 800d0aa:	d411      	bmi.n	800d0d0 <__swsetup_r+0x50>
 800d0ac:	2209      	movs	r2, #9
 800d0ae:	6032      	str	r2, [r6, #0]
 800d0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0b4:	81a3      	strh	r3, [r4, #12]
 800d0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ba:	e03e      	b.n	800d13a <__swsetup_r+0xba>
 800d0bc:	4b25      	ldr	r3, [pc, #148]	; (800d154 <__swsetup_r+0xd4>)
 800d0be:	429c      	cmp	r4, r3
 800d0c0:	d101      	bne.n	800d0c6 <__swsetup_r+0x46>
 800d0c2:	68ac      	ldr	r4, [r5, #8]
 800d0c4:	e7eb      	b.n	800d09e <__swsetup_r+0x1e>
 800d0c6:	4b24      	ldr	r3, [pc, #144]	; (800d158 <__swsetup_r+0xd8>)
 800d0c8:	429c      	cmp	r4, r3
 800d0ca:	bf08      	it	eq
 800d0cc:	68ec      	ldreq	r4, [r5, #12]
 800d0ce:	e7e6      	b.n	800d09e <__swsetup_r+0x1e>
 800d0d0:	0751      	lsls	r1, r2, #29
 800d0d2:	d512      	bpl.n	800d0fa <__swsetup_r+0x7a>
 800d0d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0d6:	b141      	cbz	r1, 800d0ea <__swsetup_r+0x6a>
 800d0d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0dc:	4299      	cmp	r1, r3
 800d0de:	d002      	beq.n	800d0e6 <__swsetup_r+0x66>
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7ff fbbb 	bl	800c85c <_free_r>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	6363      	str	r3, [r4, #52]	; 0x34
 800d0ea:	89a3      	ldrh	r3, [r4, #12]
 800d0ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0f0:	81a3      	strh	r3, [r4, #12]
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	6063      	str	r3, [r4, #4]
 800d0f6:	6923      	ldr	r3, [r4, #16]
 800d0f8:	6023      	str	r3, [r4, #0]
 800d0fa:	89a3      	ldrh	r3, [r4, #12]
 800d0fc:	f043 0308 	orr.w	r3, r3, #8
 800d100:	81a3      	strh	r3, [r4, #12]
 800d102:	6923      	ldr	r3, [r4, #16]
 800d104:	b94b      	cbnz	r3, 800d11a <__swsetup_r+0x9a>
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d10c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d110:	d003      	beq.n	800d11a <__swsetup_r+0x9a>
 800d112:	4621      	mov	r1, r4
 800d114:	4630      	mov	r0, r6
 800d116:	f000 f917 	bl	800d348 <__smakebuf_r>
 800d11a:	89a2      	ldrh	r2, [r4, #12]
 800d11c:	f012 0301 	ands.w	r3, r2, #1
 800d120:	d00c      	beq.n	800d13c <__swsetup_r+0xbc>
 800d122:	2300      	movs	r3, #0
 800d124:	60a3      	str	r3, [r4, #8]
 800d126:	6963      	ldr	r3, [r4, #20]
 800d128:	425b      	negs	r3, r3
 800d12a:	61a3      	str	r3, [r4, #24]
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	b953      	cbnz	r3, 800d146 <__swsetup_r+0xc6>
 800d130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d134:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d138:	d1ba      	bne.n	800d0b0 <__swsetup_r+0x30>
 800d13a:	bd70      	pop	{r4, r5, r6, pc}
 800d13c:	0792      	lsls	r2, r2, #30
 800d13e:	bf58      	it	pl
 800d140:	6963      	ldrpl	r3, [r4, #20]
 800d142:	60a3      	str	r3, [r4, #8]
 800d144:	e7f2      	b.n	800d12c <__swsetup_r+0xac>
 800d146:	2000      	movs	r0, #0
 800d148:	e7f7      	b.n	800d13a <__swsetup_r+0xba>
 800d14a:	bf00      	nop
 800d14c:	2000000c 	.word	0x2000000c
 800d150:	0800f928 	.word	0x0800f928
 800d154:	0800f948 	.word	0x0800f948
 800d158:	0800f908 	.word	0x0800f908

0800d15c <_close_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4c06      	ldr	r4, [pc, #24]	; (800d178 <_close_r+0x1c>)
 800d160:	2300      	movs	r3, #0
 800d162:	4605      	mov	r5, r0
 800d164:	4608      	mov	r0, r1
 800d166:	6023      	str	r3, [r4, #0]
 800d168:	f7fb f997 	bl	800849a <_close>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_close_r+0x1a>
 800d170:	6823      	ldr	r3, [r4, #0]
 800d172:	b103      	cbz	r3, 800d176 <_close_r+0x1a>
 800d174:	602b      	str	r3, [r5, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	20000578 	.word	0x20000578

0800d17c <__sflush_r>:
 800d17c:	898a      	ldrh	r2, [r1, #12]
 800d17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	4605      	mov	r5, r0
 800d184:	0710      	lsls	r0, r2, #28
 800d186:	460c      	mov	r4, r1
 800d188:	d458      	bmi.n	800d23c <__sflush_r+0xc0>
 800d18a:	684b      	ldr	r3, [r1, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	dc05      	bgt.n	800d19c <__sflush_r+0x20>
 800d190:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d192:	2b00      	cmp	r3, #0
 800d194:	dc02      	bgt.n	800d19c <__sflush_r+0x20>
 800d196:	2000      	movs	r0, #0
 800d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d19c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d19e:	2e00      	cmp	r6, #0
 800d1a0:	d0f9      	beq.n	800d196 <__sflush_r+0x1a>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1a8:	682f      	ldr	r7, [r5, #0]
 800d1aa:	6a21      	ldr	r1, [r4, #32]
 800d1ac:	602b      	str	r3, [r5, #0]
 800d1ae:	d032      	beq.n	800d216 <__sflush_r+0x9a>
 800d1b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1b2:	89a3      	ldrh	r3, [r4, #12]
 800d1b4:	075a      	lsls	r2, r3, #29
 800d1b6:	d505      	bpl.n	800d1c4 <__sflush_r+0x48>
 800d1b8:	6863      	ldr	r3, [r4, #4]
 800d1ba:	1ac0      	subs	r0, r0, r3
 800d1bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1be:	b10b      	cbz	r3, 800d1c4 <__sflush_r+0x48>
 800d1c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1c2:	1ac0      	subs	r0, r0, r3
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1ca:	6a21      	ldr	r1, [r4, #32]
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	47b0      	blx	r6
 800d1d0:	1c43      	adds	r3, r0, #1
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	d106      	bne.n	800d1e4 <__sflush_r+0x68>
 800d1d6:	6829      	ldr	r1, [r5, #0]
 800d1d8:	291d      	cmp	r1, #29
 800d1da:	d848      	bhi.n	800d26e <__sflush_r+0xf2>
 800d1dc:	4a29      	ldr	r2, [pc, #164]	; (800d284 <__sflush_r+0x108>)
 800d1de:	40ca      	lsrs	r2, r1
 800d1e0:	07d6      	lsls	r6, r2, #31
 800d1e2:	d544      	bpl.n	800d26e <__sflush_r+0xf2>
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	6062      	str	r2, [r4, #4]
 800d1e8:	04d9      	lsls	r1, r3, #19
 800d1ea:	6922      	ldr	r2, [r4, #16]
 800d1ec:	6022      	str	r2, [r4, #0]
 800d1ee:	d504      	bpl.n	800d1fa <__sflush_r+0x7e>
 800d1f0:	1c42      	adds	r2, r0, #1
 800d1f2:	d101      	bne.n	800d1f8 <__sflush_r+0x7c>
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	b903      	cbnz	r3, 800d1fa <__sflush_r+0x7e>
 800d1f8:	6560      	str	r0, [r4, #84]	; 0x54
 800d1fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1fc:	602f      	str	r7, [r5, #0]
 800d1fe:	2900      	cmp	r1, #0
 800d200:	d0c9      	beq.n	800d196 <__sflush_r+0x1a>
 800d202:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d206:	4299      	cmp	r1, r3
 800d208:	d002      	beq.n	800d210 <__sflush_r+0x94>
 800d20a:	4628      	mov	r0, r5
 800d20c:	f7ff fb26 	bl	800c85c <_free_r>
 800d210:	2000      	movs	r0, #0
 800d212:	6360      	str	r0, [r4, #52]	; 0x34
 800d214:	e7c0      	b.n	800d198 <__sflush_r+0x1c>
 800d216:	2301      	movs	r3, #1
 800d218:	4628      	mov	r0, r5
 800d21a:	47b0      	blx	r6
 800d21c:	1c41      	adds	r1, r0, #1
 800d21e:	d1c8      	bne.n	800d1b2 <__sflush_r+0x36>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d0c5      	beq.n	800d1b2 <__sflush_r+0x36>
 800d226:	2b1d      	cmp	r3, #29
 800d228:	d001      	beq.n	800d22e <__sflush_r+0xb2>
 800d22a:	2b16      	cmp	r3, #22
 800d22c:	d101      	bne.n	800d232 <__sflush_r+0xb6>
 800d22e:	602f      	str	r7, [r5, #0]
 800d230:	e7b1      	b.n	800d196 <__sflush_r+0x1a>
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d238:	81a3      	strh	r3, [r4, #12]
 800d23a:	e7ad      	b.n	800d198 <__sflush_r+0x1c>
 800d23c:	690f      	ldr	r7, [r1, #16]
 800d23e:	2f00      	cmp	r7, #0
 800d240:	d0a9      	beq.n	800d196 <__sflush_r+0x1a>
 800d242:	0793      	lsls	r3, r2, #30
 800d244:	680e      	ldr	r6, [r1, #0]
 800d246:	bf08      	it	eq
 800d248:	694b      	ldreq	r3, [r1, #20]
 800d24a:	600f      	str	r7, [r1, #0]
 800d24c:	bf18      	it	ne
 800d24e:	2300      	movne	r3, #0
 800d250:	eba6 0807 	sub.w	r8, r6, r7
 800d254:	608b      	str	r3, [r1, #8]
 800d256:	f1b8 0f00 	cmp.w	r8, #0
 800d25a:	dd9c      	ble.n	800d196 <__sflush_r+0x1a>
 800d25c:	4643      	mov	r3, r8
 800d25e:	463a      	mov	r2, r7
 800d260:	6a21      	ldr	r1, [r4, #32]
 800d262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d264:	4628      	mov	r0, r5
 800d266:	47b0      	blx	r6
 800d268:	2800      	cmp	r0, #0
 800d26a:	dc06      	bgt.n	800d27a <__sflush_r+0xfe>
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	f04f 30ff 	mov.w	r0, #4294967295
 800d278:	e78e      	b.n	800d198 <__sflush_r+0x1c>
 800d27a:	4407      	add	r7, r0
 800d27c:	eba8 0800 	sub.w	r8, r8, r0
 800d280:	e7e9      	b.n	800d256 <__sflush_r+0xda>
 800d282:	bf00      	nop
 800d284:	20400001 	.word	0x20400001

0800d288 <_fflush_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	690b      	ldr	r3, [r1, #16]
 800d28c:	4605      	mov	r5, r0
 800d28e:	460c      	mov	r4, r1
 800d290:	b1db      	cbz	r3, 800d2ca <_fflush_r+0x42>
 800d292:	b118      	cbz	r0, 800d29c <_fflush_r+0x14>
 800d294:	6983      	ldr	r3, [r0, #24]
 800d296:	b90b      	cbnz	r3, 800d29c <_fflush_r+0x14>
 800d298:	f7fe faea 	bl	800b870 <__sinit>
 800d29c:	4b0c      	ldr	r3, [pc, #48]	; (800d2d0 <_fflush_r+0x48>)
 800d29e:	429c      	cmp	r4, r3
 800d2a0:	d109      	bne.n	800d2b6 <_fflush_r+0x2e>
 800d2a2:	686c      	ldr	r4, [r5, #4]
 800d2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2a8:	b17b      	cbz	r3, 800d2ca <_fflush_r+0x42>
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2b2:	f7ff bf63 	b.w	800d17c <__sflush_r>
 800d2b6:	4b07      	ldr	r3, [pc, #28]	; (800d2d4 <_fflush_r+0x4c>)
 800d2b8:	429c      	cmp	r4, r3
 800d2ba:	d101      	bne.n	800d2c0 <_fflush_r+0x38>
 800d2bc:	68ac      	ldr	r4, [r5, #8]
 800d2be:	e7f1      	b.n	800d2a4 <_fflush_r+0x1c>
 800d2c0:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <_fflush_r+0x50>)
 800d2c2:	429c      	cmp	r4, r3
 800d2c4:	bf08      	it	eq
 800d2c6:	68ec      	ldreq	r4, [r5, #12]
 800d2c8:	e7ec      	b.n	800d2a4 <_fflush_r+0x1c>
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	bd38      	pop	{r3, r4, r5, pc}
 800d2ce:	bf00      	nop
 800d2d0:	0800f928 	.word	0x0800f928
 800d2d4:	0800f948 	.word	0x0800f948
 800d2d8:	0800f908 	.word	0x0800f908

0800d2dc <_lseek_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	4c07      	ldr	r4, [pc, #28]	; (800d2fc <_lseek_r+0x20>)
 800d2e0:	4605      	mov	r5, r0
 800d2e2:	4608      	mov	r0, r1
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	6022      	str	r2, [r4, #0]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	f7fb f8fc 	bl	80084e8 <_lseek>
 800d2f0:	1c43      	adds	r3, r0, #1
 800d2f2:	d102      	bne.n	800d2fa <_lseek_r+0x1e>
 800d2f4:	6823      	ldr	r3, [r4, #0]
 800d2f6:	b103      	cbz	r3, 800d2fa <_lseek_r+0x1e>
 800d2f8:	602b      	str	r3, [r5, #0]
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
 800d2fc:	20000578 	.word	0x20000578

0800d300 <__swhatbuf_r>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	460e      	mov	r6, r1
 800d304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d308:	2900      	cmp	r1, #0
 800d30a:	b096      	sub	sp, #88	; 0x58
 800d30c:	4614      	mov	r4, r2
 800d30e:	461d      	mov	r5, r3
 800d310:	da07      	bge.n	800d322 <__swhatbuf_r+0x22>
 800d312:	2300      	movs	r3, #0
 800d314:	602b      	str	r3, [r5, #0]
 800d316:	89b3      	ldrh	r3, [r6, #12]
 800d318:	061a      	lsls	r2, r3, #24
 800d31a:	d410      	bmi.n	800d33e <__swhatbuf_r+0x3e>
 800d31c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d320:	e00e      	b.n	800d340 <__swhatbuf_r+0x40>
 800d322:	466a      	mov	r2, sp
 800d324:	f000 f8a4 	bl	800d470 <_fstat_r>
 800d328:	2800      	cmp	r0, #0
 800d32a:	dbf2      	blt.n	800d312 <__swhatbuf_r+0x12>
 800d32c:	9a01      	ldr	r2, [sp, #4]
 800d32e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d332:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d336:	425a      	negs	r2, r3
 800d338:	415a      	adcs	r2, r3
 800d33a:	602a      	str	r2, [r5, #0]
 800d33c:	e7ee      	b.n	800d31c <__swhatbuf_r+0x1c>
 800d33e:	2340      	movs	r3, #64	; 0x40
 800d340:	2000      	movs	r0, #0
 800d342:	6023      	str	r3, [r4, #0]
 800d344:	b016      	add	sp, #88	; 0x58
 800d346:	bd70      	pop	{r4, r5, r6, pc}

0800d348 <__smakebuf_r>:
 800d348:	898b      	ldrh	r3, [r1, #12]
 800d34a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d34c:	079d      	lsls	r5, r3, #30
 800d34e:	4606      	mov	r6, r0
 800d350:	460c      	mov	r4, r1
 800d352:	d507      	bpl.n	800d364 <__smakebuf_r+0x1c>
 800d354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d358:	6023      	str	r3, [r4, #0]
 800d35a:	6123      	str	r3, [r4, #16]
 800d35c:	2301      	movs	r3, #1
 800d35e:	6163      	str	r3, [r4, #20]
 800d360:	b002      	add	sp, #8
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	ab01      	add	r3, sp, #4
 800d366:	466a      	mov	r2, sp
 800d368:	f7ff ffca 	bl	800d300 <__swhatbuf_r>
 800d36c:	9900      	ldr	r1, [sp, #0]
 800d36e:	4605      	mov	r5, r0
 800d370:	4630      	mov	r0, r6
 800d372:	f7ff fac1 	bl	800c8f8 <_malloc_r>
 800d376:	b948      	cbnz	r0, 800d38c <__smakebuf_r+0x44>
 800d378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d37c:	059a      	lsls	r2, r3, #22
 800d37e:	d4ef      	bmi.n	800d360 <__smakebuf_r+0x18>
 800d380:	f023 0303 	bic.w	r3, r3, #3
 800d384:	f043 0302 	orr.w	r3, r3, #2
 800d388:	81a3      	strh	r3, [r4, #12]
 800d38a:	e7e3      	b.n	800d354 <__smakebuf_r+0xc>
 800d38c:	4b0d      	ldr	r3, [pc, #52]	; (800d3c4 <__smakebuf_r+0x7c>)
 800d38e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	6020      	str	r0, [r4, #0]
 800d394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d398:	81a3      	strh	r3, [r4, #12]
 800d39a:	9b00      	ldr	r3, [sp, #0]
 800d39c:	6163      	str	r3, [r4, #20]
 800d39e:	9b01      	ldr	r3, [sp, #4]
 800d3a0:	6120      	str	r0, [r4, #16]
 800d3a2:	b15b      	cbz	r3, 800d3bc <__smakebuf_r+0x74>
 800d3a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f000 f873 	bl	800d494 <_isatty_r>
 800d3ae:	b128      	cbz	r0, 800d3bc <__smakebuf_r+0x74>
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	f023 0303 	bic.w	r3, r3, #3
 800d3b6:	f043 0301 	orr.w	r3, r3, #1
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	431d      	orrs	r5, r3
 800d3c0:	81a5      	strh	r5, [r4, #12]
 800d3c2:	e7cd      	b.n	800d360 <__smakebuf_r+0x18>
 800d3c4:	0800b839 	.word	0x0800b839

0800d3c8 <memmove>:
 800d3c8:	4288      	cmp	r0, r1
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	eb01 0302 	add.w	r3, r1, r2
 800d3d0:	d807      	bhi.n	800d3e2 <memmove+0x1a>
 800d3d2:	1e42      	subs	r2, r0, #1
 800d3d4:	4299      	cmp	r1, r3
 800d3d6:	d00a      	beq.n	800d3ee <memmove+0x26>
 800d3d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d3e0:	e7f8      	b.n	800d3d4 <memmove+0xc>
 800d3e2:	4283      	cmp	r3, r0
 800d3e4:	d9f5      	bls.n	800d3d2 <memmove+0xa>
 800d3e6:	1881      	adds	r1, r0, r2
 800d3e8:	1ad2      	subs	r2, r2, r3
 800d3ea:	42d3      	cmn	r3, r2
 800d3ec:	d100      	bne.n	800d3f0 <memmove+0x28>
 800d3ee:	bd10      	pop	{r4, pc}
 800d3f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d3f8:	e7f7      	b.n	800d3ea <memmove+0x22>

0800d3fa <__malloc_lock>:
 800d3fa:	4770      	bx	lr

0800d3fc <__malloc_unlock>:
 800d3fc:	4770      	bx	lr

0800d3fe <_realloc_r>:
 800d3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d400:	4607      	mov	r7, r0
 800d402:	4614      	mov	r4, r2
 800d404:	460e      	mov	r6, r1
 800d406:	b921      	cbnz	r1, 800d412 <_realloc_r+0x14>
 800d408:	4611      	mov	r1, r2
 800d40a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d40e:	f7ff ba73 	b.w	800c8f8 <_malloc_r>
 800d412:	b922      	cbnz	r2, 800d41e <_realloc_r+0x20>
 800d414:	f7ff fa22 	bl	800c85c <_free_r>
 800d418:	4625      	mov	r5, r4
 800d41a:	4628      	mov	r0, r5
 800d41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d41e:	f000 f849 	bl	800d4b4 <_malloc_usable_size_r>
 800d422:	42a0      	cmp	r0, r4
 800d424:	d20f      	bcs.n	800d446 <_realloc_r+0x48>
 800d426:	4621      	mov	r1, r4
 800d428:	4638      	mov	r0, r7
 800d42a:	f7ff fa65 	bl	800c8f8 <_malloc_r>
 800d42e:	4605      	mov	r5, r0
 800d430:	2800      	cmp	r0, #0
 800d432:	d0f2      	beq.n	800d41a <_realloc_r+0x1c>
 800d434:	4631      	mov	r1, r6
 800d436:	4622      	mov	r2, r4
 800d438:	f7fe fdf8 	bl	800c02c <memcpy>
 800d43c:	4631      	mov	r1, r6
 800d43e:	4638      	mov	r0, r7
 800d440:	f7ff fa0c 	bl	800c85c <_free_r>
 800d444:	e7e9      	b.n	800d41a <_realloc_r+0x1c>
 800d446:	4635      	mov	r5, r6
 800d448:	e7e7      	b.n	800d41a <_realloc_r+0x1c>
	...

0800d44c <_read_r>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	4c07      	ldr	r4, [pc, #28]	; (800d46c <_read_r+0x20>)
 800d450:	4605      	mov	r5, r0
 800d452:	4608      	mov	r0, r1
 800d454:	4611      	mov	r1, r2
 800d456:	2200      	movs	r2, #0
 800d458:	6022      	str	r2, [r4, #0]
 800d45a:	461a      	mov	r2, r3
 800d45c:	f7fb f800 	bl	8008460 <_read>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d102      	bne.n	800d46a <_read_r+0x1e>
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	b103      	cbz	r3, 800d46a <_read_r+0x1e>
 800d468:	602b      	str	r3, [r5, #0]
 800d46a:	bd38      	pop	{r3, r4, r5, pc}
 800d46c:	20000578 	.word	0x20000578

0800d470 <_fstat_r>:
 800d470:	b538      	push	{r3, r4, r5, lr}
 800d472:	4c07      	ldr	r4, [pc, #28]	; (800d490 <_fstat_r+0x20>)
 800d474:	2300      	movs	r3, #0
 800d476:	4605      	mov	r5, r0
 800d478:	4608      	mov	r0, r1
 800d47a:	4611      	mov	r1, r2
 800d47c:	6023      	str	r3, [r4, #0]
 800d47e:	f7fb f818 	bl	80084b2 <_fstat>
 800d482:	1c43      	adds	r3, r0, #1
 800d484:	d102      	bne.n	800d48c <_fstat_r+0x1c>
 800d486:	6823      	ldr	r3, [r4, #0]
 800d488:	b103      	cbz	r3, 800d48c <_fstat_r+0x1c>
 800d48a:	602b      	str	r3, [r5, #0]
 800d48c:	bd38      	pop	{r3, r4, r5, pc}
 800d48e:	bf00      	nop
 800d490:	20000578 	.word	0x20000578

0800d494 <_isatty_r>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	4c06      	ldr	r4, [pc, #24]	; (800d4b0 <_isatty_r+0x1c>)
 800d498:	2300      	movs	r3, #0
 800d49a:	4605      	mov	r5, r0
 800d49c:	4608      	mov	r0, r1
 800d49e:	6023      	str	r3, [r4, #0]
 800d4a0:	f7fb f817 	bl	80084d2 <_isatty>
 800d4a4:	1c43      	adds	r3, r0, #1
 800d4a6:	d102      	bne.n	800d4ae <_isatty_r+0x1a>
 800d4a8:	6823      	ldr	r3, [r4, #0]
 800d4aa:	b103      	cbz	r3, 800d4ae <_isatty_r+0x1a>
 800d4ac:	602b      	str	r3, [r5, #0]
 800d4ae:	bd38      	pop	{r3, r4, r5, pc}
 800d4b0:	20000578 	.word	0x20000578

0800d4b4 <_malloc_usable_size_r>:
 800d4b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4b8:	1f18      	subs	r0, r3, #4
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	bfbc      	itt	lt
 800d4be:	580b      	ldrlt	r3, [r1, r0]
 800d4c0:	18c0      	addlt	r0, r0, r3
 800d4c2:	4770      	bx	lr

0800d4c4 <atanf>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	ee10 5a10 	vmov	r5, s0
 800d4ca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d4ce:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d4d2:	eef0 7a40 	vmov.f32	s15, s0
 800d4d6:	db10      	blt.n	800d4fa <atanf+0x36>
 800d4d8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d4dc:	dd04      	ble.n	800d4e8 <atanf+0x24>
 800d4de:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d4e2:	eeb0 0a67 	vmov.f32	s0, s15
 800d4e6:	bd38      	pop	{r3, r4, r5, pc}
 800d4e8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800d620 <atanf+0x15c>
 800d4ec:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800d624 <atanf+0x160>
 800d4f0:	2d00      	cmp	r5, #0
 800d4f2:	bfd8      	it	le
 800d4f4:	eef0 7a47 	vmovle.f32	s15, s14
 800d4f8:	e7f3      	b.n	800d4e2 <atanf+0x1e>
 800d4fa:	4b4b      	ldr	r3, [pc, #300]	; (800d628 <atanf+0x164>)
 800d4fc:	429c      	cmp	r4, r3
 800d4fe:	dc10      	bgt.n	800d522 <atanf+0x5e>
 800d500:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800d504:	da0a      	bge.n	800d51c <atanf+0x58>
 800d506:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800d62c <atanf+0x168>
 800d50a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d50e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d512:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51a:	dce2      	bgt.n	800d4e2 <atanf+0x1e>
 800d51c:	f04f 33ff 	mov.w	r3, #4294967295
 800d520:	e013      	b.n	800d54a <atanf+0x86>
 800d522:	f000 f8e3 	bl	800d6ec <fabsf>
 800d526:	4b42      	ldr	r3, [pc, #264]	; (800d630 <atanf+0x16c>)
 800d528:	429c      	cmp	r4, r3
 800d52a:	dc4f      	bgt.n	800d5cc <atanf+0x108>
 800d52c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d530:	429c      	cmp	r4, r3
 800d532:	dc41      	bgt.n	800d5b8 <atanf+0xf4>
 800d534:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800d538:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d53c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d540:	2300      	movs	r3, #0
 800d542:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d546:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d54a:	1c5a      	adds	r2, r3, #1
 800d54c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d550:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d634 <atanf+0x170>
 800d554:	eddf 5a38 	vldr	s11, [pc, #224]	; 800d638 <atanf+0x174>
 800d558:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800d63c <atanf+0x178>
 800d55c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d560:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d564:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d640 <atanf+0x17c>
 800d568:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d56c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800d644 <atanf+0x180>
 800d570:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d574:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d648 <atanf+0x184>
 800d578:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d57c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d64c <atanf+0x188>
 800d580:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d584:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800d650 <atanf+0x18c>
 800d588:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d58c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800d654 <atanf+0x190>
 800d590:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d594:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800d658 <atanf+0x194>
 800d598:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d59c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800d65c <atanf+0x198>
 800d5a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d5a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d5a8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d5ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5b0:	d121      	bne.n	800d5f6 <atanf+0x132>
 800d5b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5b6:	e794      	b.n	800d4e2 <atanf+0x1e>
 800d5b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d5bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d5c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d5ca:	e7be      	b.n	800d54a <atanf+0x86>
 800d5cc:	4b24      	ldr	r3, [pc, #144]	; (800d660 <atanf+0x19c>)
 800d5ce:	429c      	cmp	r4, r3
 800d5d0:	dc0b      	bgt.n	800d5ea <atanf+0x126>
 800d5d2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800d5d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5da:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d5de:	2302      	movs	r3, #2
 800d5e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d5e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5e8:	e7af      	b.n	800d54a <atanf+0x86>
 800d5ea:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d5ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	e7a9      	b.n	800d54a <atanf+0x86>
 800d5f6:	4a1b      	ldr	r2, [pc, #108]	; (800d664 <atanf+0x1a0>)
 800d5f8:	491b      	ldr	r1, [pc, #108]	; (800d668 <atanf+0x1a4>)
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	441a      	add	r2, r3
 800d5fe:	440b      	add	r3, r1
 800d600:	edd3 6a00 	vldr	s13, [r3]
 800d604:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d608:	2d00      	cmp	r5, #0
 800d60a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d60e:	ed92 7a00 	vldr	s14, [r2]
 800d612:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d616:	bfb8      	it	lt
 800d618:	eef1 7a67 	vneglt.f32	s15, s15
 800d61c:	e761      	b.n	800d4e2 <atanf+0x1e>
 800d61e:	bf00      	nop
 800d620:	bfc90fdb 	.word	0xbfc90fdb
 800d624:	3fc90fdb 	.word	0x3fc90fdb
 800d628:	3edfffff 	.word	0x3edfffff
 800d62c:	7149f2ca 	.word	0x7149f2ca
 800d630:	3f97ffff 	.word	0x3f97ffff
 800d634:	3c8569d7 	.word	0x3c8569d7
 800d638:	3d4bda59 	.word	0x3d4bda59
 800d63c:	bd6ef16b 	.word	0xbd6ef16b
 800d640:	3d886b35 	.word	0x3d886b35
 800d644:	3dba2e6e 	.word	0x3dba2e6e
 800d648:	3e124925 	.word	0x3e124925
 800d64c:	3eaaaaab 	.word	0x3eaaaaab
 800d650:	bd15a221 	.word	0xbd15a221
 800d654:	bd9d8795 	.word	0xbd9d8795
 800d658:	bde38e38 	.word	0xbde38e38
 800d65c:	be4ccccd 	.word	0xbe4ccccd
 800d660:	401bffff 	.word	0x401bffff
 800d664:	0800fb88 	.word	0x0800fb88
 800d668:	0800fb98 	.word	0x0800fb98

0800d66c <cosf>:
 800d66c:	ee10 3a10 	vmov	r3, s0
 800d670:	b507      	push	{r0, r1, r2, lr}
 800d672:	4a1c      	ldr	r2, [pc, #112]	; (800d6e4 <cosf+0x78>)
 800d674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d678:	4293      	cmp	r3, r2
 800d67a:	dc04      	bgt.n	800d686 <cosf+0x1a>
 800d67c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800d6e8 <cosf+0x7c>
 800d680:	f001 fbcc 	bl	800ee1c <__kernel_cosf>
 800d684:	e004      	b.n	800d690 <cosf+0x24>
 800d686:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d68a:	db04      	blt.n	800d696 <cosf+0x2a>
 800d68c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d690:	b003      	add	sp, #12
 800d692:	f85d fb04 	ldr.w	pc, [sp], #4
 800d696:	4668      	mov	r0, sp
 800d698:	f001 fa90 	bl	800ebbc <__ieee754_rem_pio2f>
 800d69c:	f000 0003 	and.w	r0, r0, #3
 800d6a0:	2801      	cmp	r0, #1
 800d6a2:	d007      	beq.n	800d6b4 <cosf+0x48>
 800d6a4:	2802      	cmp	r0, #2
 800d6a6:	d00e      	beq.n	800d6c6 <cosf+0x5a>
 800d6a8:	b9a0      	cbnz	r0, 800d6d4 <cosf+0x68>
 800d6aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800d6ae:	ed9d 0a00 	vldr	s0, [sp]
 800d6b2:	e7e5      	b.n	800d680 <cosf+0x14>
 800d6b4:	eddd 0a01 	vldr	s1, [sp, #4]
 800d6b8:	ed9d 0a00 	vldr	s0, [sp]
 800d6bc:	f001 fe8e 	bl	800f3dc <__kernel_sinf>
 800d6c0:	eeb1 0a40 	vneg.f32	s0, s0
 800d6c4:	e7e4      	b.n	800d690 <cosf+0x24>
 800d6c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d6ca:	ed9d 0a00 	vldr	s0, [sp]
 800d6ce:	f001 fba5 	bl	800ee1c <__kernel_cosf>
 800d6d2:	e7f5      	b.n	800d6c0 <cosf+0x54>
 800d6d4:	2001      	movs	r0, #1
 800d6d6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d6da:	ed9d 0a00 	vldr	s0, [sp]
 800d6de:	f001 fe7d 	bl	800f3dc <__kernel_sinf>
 800d6e2:	e7d5      	b.n	800d690 <cosf+0x24>
 800d6e4:	3f490fd8 	.word	0x3f490fd8
 800d6e8:	00000000 	.word	0x00000000

0800d6ec <fabsf>:
 800d6ec:	ee10 3a10 	vmov	r3, s0
 800d6f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6f4:	ee00 3a10 	vmov	s0, r3
 800d6f8:	4770      	bx	lr
	...

0800d6fc <sinf>:
 800d6fc:	ee10 3a10 	vmov	r3, s0
 800d700:	b507      	push	{r0, r1, r2, lr}
 800d702:	4a1d      	ldr	r2, [pc, #116]	; (800d778 <sinf+0x7c>)
 800d704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d708:	4293      	cmp	r3, r2
 800d70a:	dc05      	bgt.n	800d718 <sinf+0x1c>
 800d70c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800d77c <sinf+0x80>
 800d710:	2000      	movs	r0, #0
 800d712:	f001 fe63 	bl	800f3dc <__kernel_sinf>
 800d716:	e004      	b.n	800d722 <sinf+0x26>
 800d718:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d71c:	db04      	blt.n	800d728 <sinf+0x2c>
 800d71e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d722:	b003      	add	sp, #12
 800d724:	f85d fb04 	ldr.w	pc, [sp], #4
 800d728:	4668      	mov	r0, sp
 800d72a:	f001 fa47 	bl	800ebbc <__ieee754_rem_pio2f>
 800d72e:	f000 0003 	and.w	r0, r0, #3
 800d732:	2801      	cmp	r0, #1
 800d734:	d008      	beq.n	800d748 <sinf+0x4c>
 800d736:	2802      	cmp	r0, #2
 800d738:	d00d      	beq.n	800d756 <sinf+0x5a>
 800d73a:	b9b0      	cbnz	r0, 800d76a <sinf+0x6e>
 800d73c:	2001      	movs	r0, #1
 800d73e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d742:	ed9d 0a00 	vldr	s0, [sp]
 800d746:	e7e4      	b.n	800d712 <sinf+0x16>
 800d748:	eddd 0a01 	vldr	s1, [sp, #4]
 800d74c:	ed9d 0a00 	vldr	s0, [sp]
 800d750:	f001 fb64 	bl	800ee1c <__kernel_cosf>
 800d754:	e7e5      	b.n	800d722 <sinf+0x26>
 800d756:	2001      	movs	r0, #1
 800d758:	eddd 0a01 	vldr	s1, [sp, #4]
 800d75c:	ed9d 0a00 	vldr	s0, [sp]
 800d760:	f001 fe3c 	bl	800f3dc <__kernel_sinf>
 800d764:	eeb1 0a40 	vneg.f32	s0, s0
 800d768:	e7db      	b.n	800d722 <sinf+0x26>
 800d76a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d76e:	ed9d 0a00 	vldr	s0, [sp]
 800d772:	f001 fb53 	bl	800ee1c <__kernel_cosf>
 800d776:	e7f5      	b.n	800d764 <sinf+0x68>
 800d778:	3f490fd8 	.word	0x3f490fd8
 800d77c:	00000000 	.word	0x00000000

0800d780 <pow>:
 800d780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	ed2d 8b04 	vpush	{d8-d9}
 800d788:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800da5c <pow+0x2dc>
 800d78c:	b08d      	sub	sp, #52	; 0x34
 800d78e:	ec57 6b10 	vmov	r6, r7, d0
 800d792:	ec55 4b11 	vmov	r4, r5, d1
 800d796:	f000 fa6f 	bl	800dc78 <__ieee754_pow>
 800d79a:	f999 3000 	ldrsb.w	r3, [r9]
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	eeb0 8a40 	vmov.f32	s16, s0
 800d7a6:	eef0 8a60 	vmov.f32	s17, s1
 800d7aa:	46c8      	mov	r8, r9
 800d7ac:	d05f      	beq.n	800d86e <pow+0xee>
 800d7ae:	4622      	mov	r2, r4
 800d7b0:	462b      	mov	r3, r5
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	f7f3 f9c1 	bl	8000b3c <__aeabi_dcmpun>
 800d7ba:	4683      	mov	fp, r0
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d156      	bne.n	800d86e <pow+0xee>
 800d7c0:	4632      	mov	r2, r6
 800d7c2:	463b      	mov	r3, r7
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	4639      	mov	r1, r7
 800d7c8:	f7f3 f9b8 	bl	8000b3c <__aeabi_dcmpun>
 800d7cc:	9001      	str	r0, [sp, #4]
 800d7ce:	b1e8      	cbz	r0, 800d80c <pow+0x8c>
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	4629      	mov	r1, r5
 800d7d8:	f7f3 f97e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d046      	beq.n	800d86e <pow+0xee>
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	9302      	str	r3, [sp, #8]
 800d7e4:	4b96      	ldr	r3, [pc, #600]	; (800da40 <pow+0x2c0>)
 800d7e6:	9303      	str	r3, [sp, #12]
 800d7e8:	4b96      	ldr	r3, [pc, #600]	; (800da44 <pow+0x2c4>)
 800d7ea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d7fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d800:	d033      	beq.n	800d86a <pow+0xea>
 800d802:	a802      	add	r0, sp, #8
 800d804:	f001 fe43 	bl	800f48e <matherr>
 800d808:	bb48      	cbnz	r0, 800d85e <pow+0xde>
 800d80a:	e05d      	b.n	800d8c8 <pow+0x148>
 800d80c:	f04f 0a00 	mov.w	sl, #0
 800d810:	f04f 0b00 	mov.w	fp, #0
 800d814:	4652      	mov	r2, sl
 800d816:	465b      	mov	r3, fp
 800d818:	4630      	mov	r0, r6
 800d81a:	4639      	mov	r1, r7
 800d81c:	f7f3 f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d820:	ec4b ab19 	vmov	d9, sl, fp
 800d824:	2800      	cmp	r0, #0
 800d826:	d054      	beq.n	800d8d2 <pow+0x152>
 800d828:	4652      	mov	r2, sl
 800d82a:	465b      	mov	r3, fp
 800d82c:	4620      	mov	r0, r4
 800d82e:	4629      	mov	r1, r5
 800d830:	f7f3 f952 	bl	8000ad8 <__aeabi_dcmpeq>
 800d834:	4680      	mov	r8, r0
 800d836:	b318      	cbz	r0, 800d880 <pow+0x100>
 800d838:	2301      	movs	r3, #1
 800d83a:	9302      	str	r3, [sp, #8]
 800d83c:	4b80      	ldr	r3, [pc, #512]	; (800da40 <pow+0x2c0>)
 800d83e:	9303      	str	r3, [sp, #12]
 800d840:	9b01      	ldr	r3, [sp, #4]
 800d842:	930a      	str	r3, [sp, #40]	; 0x28
 800d844:	9b00      	ldr	r3, [sp, #0]
 800d846:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d84a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d84e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d0d5      	beq.n	800d802 <pow+0x82>
 800d856:	4b7b      	ldr	r3, [pc, #492]	; (800da44 <pow+0x2c4>)
 800d858:	2200      	movs	r2, #0
 800d85a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d860:	b11b      	cbz	r3, 800d86a <pow+0xea>
 800d862:	f7fb fbb9 	bl	8008fd8 <__errno>
 800d866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d868:	6003      	str	r3, [r0, #0]
 800d86a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800d86e:	eeb0 0a48 	vmov.f32	s0, s16
 800d872:	eef0 0a68 	vmov.f32	s1, s17
 800d876:	b00d      	add	sp, #52	; 0x34
 800d878:	ecbd 8b04 	vpop	{d8-d9}
 800d87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d880:	ec45 4b10 	vmov	d0, r4, r5
 800d884:	f001 fdfb 	bl	800f47e <finite>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d0f0      	beq.n	800d86e <pow+0xee>
 800d88c:	4652      	mov	r2, sl
 800d88e:	465b      	mov	r3, fp
 800d890:	4620      	mov	r0, r4
 800d892:	4629      	mov	r1, r5
 800d894:	f7f3 f92a 	bl	8000aec <__aeabi_dcmplt>
 800d898:	2800      	cmp	r0, #0
 800d89a:	d0e8      	beq.n	800d86e <pow+0xee>
 800d89c:	2301      	movs	r3, #1
 800d89e:	9302      	str	r3, [sp, #8]
 800d8a0:	4b67      	ldr	r3, [pc, #412]	; (800da40 <pow+0x2c0>)
 800d8a2:	9303      	str	r3, [sp, #12]
 800d8a4:	f999 3000 	ldrsb.w	r3, [r9]
 800d8a8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d8ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d8b0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d8b4:	b913      	cbnz	r3, 800d8bc <pow+0x13c>
 800d8b6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d8ba:	e7a2      	b.n	800d802 <pow+0x82>
 800d8bc:	4962      	ldr	r1, [pc, #392]	; (800da48 <pow+0x2c8>)
 800d8be:	2000      	movs	r0, #0
 800d8c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d19c      	bne.n	800d802 <pow+0x82>
 800d8c8:	f7fb fb86 	bl	8008fd8 <__errno>
 800d8cc:	2321      	movs	r3, #33	; 0x21
 800d8ce:	6003      	str	r3, [r0, #0]
 800d8d0:	e7c5      	b.n	800d85e <pow+0xde>
 800d8d2:	eeb0 0a48 	vmov.f32	s0, s16
 800d8d6:	eef0 0a68 	vmov.f32	s1, s17
 800d8da:	f001 fdd0 	bl	800f47e <finite>
 800d8de:	9000      	str	r0, [sp, #0]
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	f040 8081 	bne.w	800d9e8 <pow+0x268>
 800d8e6:	ec47 6b10 	vmov	d0, r6, r7
 800d8ea:	f001 fdc8 	bl	800f47e <finite>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d07a      	beq.n	800d9e8 <pow+0x268>
 800d8f2:	ec45 4b10 	vmov	d0, r4, r5
 800d8f6:	f001 fdc2 	bl	800f47e <finite>
 800d8fa:	2800      	cmp	r0, #0
 800d8fc:	d074      	beq.n	800d9e8 <pow+0x268>
 800d8fe:	ec53 2b18 	vmov	r2, r3, d8
 800d902:	ee18 0a10 	vmov	r0, s16
 800d906:	4619      	mov	r1, r3
 800d908:	f7f3 f918 	bl	8000b3c <__aeabi_dcmpun>
 800d90c:	f999 9000 	ldrsb.w	r9, [r9]
 800d910:	4b4b      	ldr	r3, [pc, #300]	; (800da40 <pow+0x2c0>)
 800d912:	b1b0      	cbz	r0, 800d942 <pow+0x1c2>
 800d914:	2201      	movs	r2, #1
 800d916:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d91a:	9b00      	ldr	r3, [sp, #0]
 800d91c:	930a      	str	r3, [sp, #40]	; 0x28
 800d91e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d922:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d926:	f1b9 0f00 	cmp.w	r9, #0
 800d92a:	d0c4      	beq.n	800d8b6 <pow+0x136>
 800d92c:	4652      	mov	r2, sl
 800d92e:	465b      	mov	r3, fp
 800d930:	4650      	mov	r0, sl
 800d932:	4659      	mov	r1, fp
 800d934:	f7f2 ff92 	bl	800085c <__aeabi_ddiv>
 800d938:	f1b9 0f02 	cmp.w	r9, #2
 800d93c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d940:	e7c1      	b.n	800d8c6 <pow+0x146>
 800d942:	2203      	movs	r2, #3
 800d944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d948:	900a      	str	r0, [sp, #40]	; 0x28
 800d94a:	4629      	mov	r1, r5
 800d94c:	4620      	mov	r0, r4
 800d94e:	2200      	movs	r2, #0
 800d950:	4b3e      	ldr	r3, [pc, #248]	; (800da4c <pow+0x2cc>)
 800d952:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d956:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d95a:	f7f2 fe55 	bl	8000608 <__aeabi_dmul>
 800d95e:	4604      	mov	r4, r0
 800d960:	460d      	mov	r5, r1
 800d962:	f1b9 0f00 	cmp.w	r9, #0
 800d966:	d124      	bne.n	800d9b2 <pow+0x232>
 800d968:	4b39      	ldr	r3, [pc, #228]	; (800da50 <pow+0x2d0>)
 800d96a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d96e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d972:	4630      	mov	r0, r6
 800d974:	4652      	mov	r2, sl
 800d976:	465b      	mov	r3, fp
 800d978:	4639      	mov	r1, r7
 800d97a:	f7f3 f8b7 	bl	8000aec <__aeabi_dcmplt>
 800d97e:	2800      	cmp	r0, #0
 800d980:	d056      	beq.n	800da30 <pow+0x2b0>
 800d982:	ec45 4b10 	vmov	d0, r4, r5
 800d986:	f001 fd8f 	bl	800f4a8 <rint>
 800d98a:	4622      	mov	r2, r4
 800d98c:	462b      	mov	r3, r5
 800d98e:	ec51 0b10 	vmov	r0, r1, d0
 800d992:	f7f3 f8a1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d996:	b920      	cbnz	r0, 800d9a2 <pow+0x222>
 800d998:	4b2e      	ldr	r3, [pc, #184]	; (800da54 <pow+0x2d4>)
 800d99a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d99e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9a2:	f998 3000 	ldrsb.w	r3, [r8]
 800d9a6:	2b02      	cmp	r3, #2
 800d9a8:	d142      	bne.n	800da30 <pow+0x2b0>
 800d9aa:	f7fb fb15 	bl	8008fd8 <__errno>
 800d9ae:	2322      	movs	r3, #34	; 0x22
 800d9b0:	e78d      	b.n	800d8ce <pow+0x14e>
 800d9b2:	4b29      	ldr	r3, [pc, #164]	; (800da58 <pow+0x2d8>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	4652      	mov	r2, sl
 800d9be:	465b      	mov	r3, fp
 800d9c0:	4639      	mov	r1, r7
 800d9c2:	f7f3 f893 	bl	8000aec <__aeabi_dcmplt>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d0eb      	beq.n	800d9a2 <pow+0x222>
 800d9ca:	ec45 4b10 	vmov	d0, r4, r5
 800d9ce:	f001 fd6b 	bl	800f4a8 <rint>
 800d9d2:	4622      	mov	r2, r4
 800d9d4:	462b      	mov	r3, r5
 800d9d6:	ec51 0b10 	vmov	r0, r1, d0
 800d9da:	f7f3 f87d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d1df      	bne.n	800d9a2 <pow+0x222>
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	4b18      	ldr	r3, [pc, #96]	; (800da48 <pow+0x2c8>)
 800d9e6:	e7da      	b.n	800d99e <pow+0x21e>
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	ec51 0b18 	vmov	r0, r1, d8
 800d9f0:	f7f3 f872 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	f43f af3a 	beq.w	800d86e <pow+0xee>
 800d9fa:	ec47 6b10 	vmov	d0, r6, r7
 800d9fe:	f001 fd3e 	bl	800f47e <finite>
 800da02:	2800      	cmp	r0, #0
 800da04:	f43f af33 	beq.w	800d86e <pow+0xee>
 800da08:	ec45 4b10 	vmov	d0, r4, r5
 800da0c:	f001 fd37 	bl	800f47e <finite>
 800da10:	2800      	cmp	r0, #0
 800da12:	f43f af2c 	beq.w	800d86e <pow+0xee>
 800da16:	2304      	movs	r3, #4
 800da18:	9302      	str	r3, [sp, #8]
 800da1a:	4b09      	ldr	r3, [pc, #36]	; (800da40 <pow+0x2c0>)
 800da1c:	9303      	str	r3, [sp, #12]
 800da1e:	2300      	movs	r3, #0
 800da20:	930a      	str	r3, [sp, #40]	; 0x28
 800da22:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800da26:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800da2a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800da2e:	e7b8      	b.n	800d9a2 <pow+0x222>
 800da30:	a802      	add	r0, sp, #8
 800da32:	f001 fd2c 	bl	800f48e <matherr>
 800da36:	2800      	cmp	r0, #0
 800da38:	f47f af11 	bne.w	800d85e <pow+0xde>
 800da3c:	e7b5      	b.n	800d9aa <pow+0x22a>
 800da3e:	bf00      	nop
 800da40:	0800fba8 	.word	0x0800fba8
 800da44:	3ff00000 	.word	0x3ff00000
 800da48:	fff00000 	.word	0xfff00000
 800da4c:	3fe00000 	.word	0x3fe00000
 800da50:	47efffff 	.word	0x47efffff
 800da54:	c7efffff 	.word	0xc7efffff
 800da58:	7ff00000 	.word	0x7ff00000
 800da5c:	200001dc 	.word	0x200001dc

0800da60 <sqrt>:
 800da60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da64:	ed2d 8b02 	vpush	{d8}
 800da68:	b08b      	sub	sp, #44	; 0x2c
 800da6a:	ec55 4b10 	vmov	r4, r5, d0
 800da6e:	f000 fe11 	bl	800e694 <__ieee754_sqrt>
 800da72:	4b26      	ldr	r3, [pc, #152]	; (800db0c <sqrt+0xac>)
 800da74:	eeb0 8a40 	vmov.f32	s16, s0
 800da78:	eef0 8a60 	vmov.f32	s17, s1
 800da7c:	f993 6000 	ldrsb.w	r6, [r3]
 800da80:	1c73      	adds	r3, r6, #1
 800da82:	d02a      	beq.n	800dada <sqrt+0x7a>
 800da84:	4622      	mov	r2, r4
 800da86:	462b      	mov	r3, r5
 800da88:	4620      	mov	r0, r4
 800da8a:	4629      	mov	r1, r5
 800da8c:	f7f3 f856 	bl	8000b3c <__aeabi_dcmpun>
 800da90:	4607      	mov	r7, r0
 800da92:	bb10      	cbnz	r0, 800dada <sqrt+0x7a>
 800da94:	f04f 0800 	mov.w	r8, #0
 800da98:	f04f 0900 	mov.w	r9, #0
 800da9c:	4642      	mov	r2, r8
 800da9e:	464b      	mov	r3, r9
 800daa0:	4620      	mov	r0, r4
 800daa2:	4629      	mov	r1, r5
 800daa4:	f7f3 f822 	bl	8000aec <__aeabi_dcmplt>
 800daa8:	b1b8      	cbz	r0, 800dada <sqrt+0x7a>
 800daaa:	2301      	movs	r3, #1
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	4b18      	ldr	r3, [pc, #96]	; (800db10 <sqrt+0xb0>)
 800dab0:	9301      	str	r3, [sp, #4]
 800dab2:	9708      	str	r7, [sp, #32]
 800dab4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800dab8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800dabc:	b9b6      	cbnz	r6, 800daec <sqrt+0x8c>
 800dabe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800dac2:	4668      	mov	r0, sp
 800dac4:	f001 fce3 	bl	800f48e <matherr>
 800dac8:	b1d0      	cbz	r0, 800db00 <sqrt+0xa0>
 800daca:	9b08      	ldr	r3, [sp, #32]
 800dacc:	b11b      	cbz	r3, 800dad6 <sqrt+0x76>
 800dace:	f7fb fa83 	bl	8008fd8 <__errno>
 800dad2:	9b08      	ldr	r3, [sp, #32]
 800dad4:	6003      	str	r3, [r0, #0]
 800dad6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800dada:	eeb0 0a48 	vmov.f32	s0, s16
 800dade:	eef0 0a68 	vmov.f32	s1, s17
 800dae2:	b00b      	add	sp, #44	; 0x2c
 800dae4:	ecbd 8b02 	vpop	{d8}
 800dae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daec:	4642      	mov	r2, r8
 800daee:	464b      	mov	r3, r9
 800daf0:	4640      	mov	r0, r8
 800daf2:	4649      	mov	r1, r9
 800daf4:	f7f2 feb2 	bl	800085c <__aeabi_ddiv>
 800daf8:	2e02      	cmp	r6, #2
 800dafa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dafe:	d1e0      	bne.n	800dac2 <sqrt+0x62>
 800db00:	f7fb fa6a 	bl	8008fd8 <__errno>
 800db04:	2321      	movs	r3, #33	; 0x21
 800db06:	6003      	str	r3, [r0, #0]
 800db08:	e7df      	b.n	800daca <sqrt+0x6a>
 800db0a:	bf00      	nop
 800db0c:	200001dc 	.word	0x200001dc
 800db10:	0800fbac 	.word	0x0800fbac

0800db14 <acosf>:
 800db14:	b510      	push	{r4, lr}
 800db16:	ed2d 8b02 	vpush	{d8}
 800db1a:	4c27      	ldr	r4, [pc, #156]	; (800dbb8 <acosf+0xa4>)
 800db1c:	b08a      	sub	sp, #40	; 0x28
 800db1e:	eeb0 8a40 	vmov.f32	s16, s0
 800db22:	f000 fe67 	bl	800e7f4 <__ieee754_acosf>
 800db26:	f994 3000 	ldrsb.w	r3, [r4]
 800db2a:	3301      	adds	r3, #1
 800db2c:	eef0 8a40 	vmov.f32	s17, s0
 800db30:	d03c      	beq.n	800dbac <acosf+0x98>
 800db32:	eeb4 8a48 	vcmp.f32	s16, s16
 800db36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3a:	d637      	bvs.n	800dbac <acosf+0x98>
 800db3c:	eeb0 0a48 	vmov.f32	s0, s16
 800db40:	f7ff fdd4 	bl	800d6ec <fabsf>
 800db44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800db48:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800db4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db50:	dd2c      	ble.n	800dbac <acosf+0x98>
 800db52:	2301      	movs	r3, #1
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	4b19      	ldr	r3, [pc, #100]	; (800dbbc <acosf+0xa8>)
 800db58:	9301      	str	r3, [sp, #4]
 800db5a:	ee18 0a10 	vmov	r0, s16
 800db5e:	2300      	movs	r3, #0
 800db60:	9308      	str	r3, [sp, #32]
 800db62:	f7f2 fcf9 	bl	8000558 <__aeabi_f2d>
 800db66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db6e:	4814      	ldr	r0, [pc, #80]	; (800dbc0 <acosf+0xac>)
 800db70:	f001 fc92 	bl	800f498 <nan>
 800db74:	f994 3000 	ldrsb.w	r3, [r4]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800db7e:	d104      	bne.n	800db8a <acosf+0x76>
 800db80:	f7fb fa2a 	bl	8008fd8 <__errno>
 800db84:	2321      	movs	r3, #33	; 0x21
 800db86:	6003      	str	r3, [r0, #0]
 800db88:	e004      	b.n	800db94 <acosf+0x80>
 800db8a:	4668      	mov	r0, sp
 800db8c:	f001 fc7f 	bl	800f48e <matherr>
 800db90:	2800      	cmp	r0, #0
 800db92:	d0f5      	beq.n	800db80 <acosf+0x6c>
 800db94:	9b08      	ldr	r3, [sp, #32]
 800db96:	b11b      	cbz	r3, 800dba0 <acosf+0x8c>
 800db98:	f7fb fa1e 	bl	8008fd8 <__errno>
 800db9c:	9b08      	ldr	r3, [sp, #32]
 800db9e:	6003      	str	r3, [r0, #0]
 800dba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dba4:	f7f3 f828 	bl	8000bf8 <__aeabi_d2f>
 800dba8:	ee08 0a90 	vmov	s17, r0
 800dbac:	eeb0 0a68 	vmov.f32	s0, s17
 800dbb0:	b00a      	add	sp, #40	; 0x28
 800dbb2:	ecbd 8b02 	vpop	{d8}
 800dbb6:	bd10      	pop	{r4, pc}
 800dbb8:	200001dc 	.word	0x200001dc
 800dbbc:	0800fbb1 	.word	0x0800fbb1
 800dbc0:	0800fa79 	.word	0x0800fa79

0800dbc4 <asinf>:
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	ed2d 8b02 	vpush	{d8}
 800dbca:	4c27      	ldr	r4, [pc, #156]	; (800dc68 <asinf+0xa4>)
 800dbcc:	b08a      	sub	sp, #40	; 0x28
 800dbce:	eeb0 8a40 	vmov.f32	s16, s0
 800dbd2:	f000 ff0b 	bl	800e9ec <__ieee754_asinf>
 800dbd6:	f994 3000 	ldrsb.w	r3, [r4]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	eef0 8a40 	vmov.f32	s17, s0
 800dbe0:	d03c      	beq.n	800dc5c <asinf+0x98>
 800dbe2:	eeb4 8a48 	vcmp.f32	s16, s16
 800dbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbea:	d637      	bvs.n	800dc5c <asinf+0x98>
 800dbec:	eeb0 0a48 	vmov.f32	s0, s16
 800dbf0:	f7ff fd7c 	bl	800d6ec <fabsf>
 800dbf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dbf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc00:	dd2c      	ble.n	800dc5c <asinf+0x98>
 800dc02:	2301      	movs	r3, #1
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	4b19      	ldr	r3, [pc, #100]	; (800dc6c <asinf+0xa8>)
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	ee18 0a10 	vmov	r0, s16
 800dc0e:	2300      	movs	r3, #0
 800dc10:	9308      	str	r3, [sp, #32]
 800dc12:	f7f2 fca1 	bl	8000558 <__aeabi_f2d>
 800dc16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc1e:	4814      	ldr	r0, [pc, #80]	; (800dc70 <asinf+0xac>)
 800dc20:	f001 fc3a 	bl	800f498 <nan>
 800dc24:	f994 3000 	ldrsb.w	r3, [r4]
 800dc28:	2b02      	cmp	r3, #2
 800dc2a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800dc2e:	d104      	bne.n	800dc3a <asinf+0x76>
 800dc30:	f7fb f9d2 	bl	8008fd8 <__errno>
 800dc34:	2321      	movs	r3, #33	; 0x21
 800dc36:	6003      	str	r3, [r0, #0]
 800dc38:	e004      	b.n	800dc44 <asinf+0x80>
 800dc3a:	4668      	mov	r0, sp
 800dc3c:	f001 fc27 	bl	800f48e <matherr>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d0f5      	beq.n	800dc30 <asinf+0x6c>
 800dc44:	9b08      	ldr	r3, [sp, #32]
 800dc46:	b11b      	cbz	r3, 800dc50 <asinf+0x8c>
 800dc48:	f7fb f9c6 	bl	8008fd8 <__errno>
 800dc4c:	9b08      	ldr	r3, [sp, #32]
 800dc4e:	6003      	str	r3, [r0, #0]
 800dc50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc54:	f7f2 ffd0 	bl	8000bf8 <__aeabi_d2f>
 800dc58:	ee08 0a90 	vmov	s17, r0
 800dc5c:	eeb0 0a68 	vmov.f32	s0, s17
 800dc60:	b00a      	add	sp, #40	; 0x28
 800dc62:	ecbd 8b02 	vpop	{d8}
 800dc66:	bd10      	pop	{r4, pc}
 800dc68:	200001dc 	.word	0x200001dc
 800dc6c:	0800fbb7 	.word	0x0800fbb7
 800dc70:	0800fa79 	.word	0x0800fa79
 800dc74:	00000000 	.word	0x00000000

0800dc78 <__ieee754_pow>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	b091      	sub	sp, #68	; 0x44
 800dc7e:	ed8d 1b00 	vstr	d1, [sp]
 800dc82:	e9dd 2900 	ldrd	r2, r9, [sp]
 800dc86:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800dc8a:	ea58 0302 	orrs.w	r3, r8, r2
 800dc8e:	ec57 6b10 	vmov	r6, r7, d0
 800dc92:	f000 84be 	beq.w	800e612 <__ieee754_pow+0x99a>
 800dc96:	4b7a      	ldr	r3, [pc, #488]	; (800de80 <__ieee754_pow+0x208>)
 800dc98:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800dc9c:	429c      	cmp	r4, r3
 800dc9e:	463d      	mov	r5, r7
 800dca0:	ee10 aa10 	vmov	sl, s0
 800dca4:	dc09      	bgt.n	800dcba <__ieee754_pow+0x42>
 800dca6:	d103      	bne.n	800dcb0 <__ieee754_pow+0x38>
 800dca8:	b93e      	cbnz	r6, 800dcba <__ieee754_pow+0x42>
 800dcaa:	45a0      	cmp	r8, r4
 800dcac:	dc0d      	bgt.n	800dcca <__ieee754_pow+0x52>
 800dcae:	e001      	b.n	800dcb4 <__ieee754_pow+0x3c>
 800dcb0:	4598      	cmp	r8, r3
 800dcb2:	dc02      	bgt.n	800dcba <__ieee754_pow+0x42>
 800dcb4:	4598      	cmp	r8, r3
 800dcb6:	d10e      	bne.n	800dcd6 <__ieee754_pow+0x5e>
 800dcb8:	b16a      	cbz	r2, 800dcd6 <__ieee754_pow+0x5e>
 800dcba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dcbe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dcc2:	ea54 030a 	orrs.w	r3, r4, sl
 800dcc6:	f000 84a4 	beq.w	800e612 <__ieee754_pow+0x99a>
 800dcca:	486e      	ldr	r0, [pc, #440]	; (800de84 <__ieee754_pow+0x20c>)
 800dccc:	b011      	add	sp, #68	; 0x44
 800dcce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd2:	f001 bbe1 	b.w	800f498 <nan>
 800dcd6:	2d00      	cmp	r5, #0
 800dcd8:	da53      	bge.n	800dd82 <__ieee754_pow+0x10a>
 800dcda:	4b6b      	ldr	r3, [pc, #428]	; (800de88 <__ieee754_pow+0x210>)
 800dcdc:	4598      	cmp	r8, r3
 800dcde:	dc4d      	bgt.n	800dd7c <__ieee754_pow+0x104>
 800dce0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dce4:	4598      	cmp	r8, r3
 800dce6:	dd4c      	ble.n	800dd82 <__ieee754_pow+0x10a>
 800dce8:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dcec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dcf0:	2b14      	cmp	r3, #20
 800dcf2:	dd26      	ble.n	800dd42 <__ieee754_pow+0xca>
 800dcf4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dcf8:	fa22 f103 	lsr.w	r1, r2, r3
 800dcfc:	fa01 f303 	lsl.w	r3, r1, r3
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d13e      	bne.n	800dd82 <__ieee754_pow+0x10a>
 800dd04:	f001 0101 	and.w	r1, r1, #1
 800dd08:	f1c1 0b02 	rsb	fp, r1, #2
 800dd0c:	2a00      	cmp	r2, #0
 800dd0e:	d15b      	bne.n	800ddc8 <__ieee754_pow+0x150>
 800dd10:	4b5b      	ldr	r3, [pc, #364]	; (800de80 <__ieee754_pow+0x208>)
 800dd12:	4598      	cmp	r8, r3
 800dd14:	d124      	bne.n	800dd60 <__ieee754_pow+0xe8>
 800dd16:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800dd1a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800dd1e:	ea53 030a 	orrs.w	r3, r3, sl
 800dd22:	f000 8476 	beq.w	800e612 <__ieee754_pow+0x99a>
 800dd26:	4b59      	ldr	r3, [pc, #356]	; (800de8c <__ieee754_pow+0x214>)
 800dd28:	429c      	cmp	r4, r3
 800dd2a:	dd2d      	ble.n	800dd88 <__ieee754_pow+0x110>
 800dd2c:	f1b9 0f00 	cmp.w	r9, #0
 800dd30:	f280 8473 	bge.w	800e61a <__ieee754_pow+0x9a2>
 800dd34:	2000      	movs	r0, #0
 800dd36:	2100      	movs	r1, #0
 800dd38:	ec41 0b10 	vmov	d0, r0, r1
 800dd3c:	b011      	add	sp, #68	; 0x44
 800dd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd42:	2a00      	cmp	r2, #0
 800dd44:	d13e      	bne.n	800ddc4 <__ieee754_pow+0x14c>
 800dd46:	f1c3 0314 	rsb	r3, r3, #20
 800dd4a:	fa48 f103 	asr.w	r1, r8, r3
 800dd4e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd52:	4543      	cmp	r3, r8
 800dd54:	f040 8469 	bne.w	800e62a <__ieee754_pow+0x9b2>
 800dd58:	f001 0101 	and.w	r1, r1, #1
 800dd5c:	f1c1 0b02 	rsb	fp, r1, #2
 800dd60:	4b4b      	ldr	r3, [pc, #300]	; (800de90 <__ieee754_pow+0x218>)
 800dd62:	4598      	cmp	r8, r3
 800dd64:	d118      	bne.n	800dd98 <__ieee754_pow+0x120>
 800dd66:	f1b9 0f00 	cmp.w	r9, #0
 800dd6a:	f280 845a 	bge.w	800e622 <__ieee754_pow+0x9aa>
 800dd6e:	4948      	ldr	r1, [pc, #288]	; (800de90 <__ieee754_pow+0x218>)
 800dd70:	4632      	mov	r2, r6
 800dd72:	463b      	mov	r3, r7
 800dd74:	2000      	movs	r0, #0
 800dd76:	f7f2 fd71 	bl	800085c <__aeabi_ddiv>
 800dd7a:	e7dd      	b.n	800dd38 <__ieee754_pow+0xc0>
 800dd7c:	f04f 0b02 	mov.w	fp, #2
 800dd80:	e7c4      	b.n	800dd0c <__ieee754_pow+0x94>
 800dd82:	f04f 0b00 	mov.w	fp, #0
 800dd86:	e7c1      	b.n	800dd0c <__ieee754_pow+0x94>
 800dd88:	f1b9 0f00 	cmp.w	r9, #0
 800dd8c:	dad2      	bge.n	800dd34 <__ieee754_pow+0xbc>
 800dd8e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dd92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dd96:	e7cf      	b.n	800dd38 <__ieee754_pow+0xc0>
 800dd98:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800dd9c:	d106      	bne.n	800ddac <__ieee754_pow+0x134>
 800dd9e:	4632      	mov	r2, r6
 800dda0:	463b      	mov	r3, r7
 800dda2:	4610      	mov	r0, r2
 800dda4:	4619      	mov	r1, r3
 800dda6:	f7f2 fc2f 	bl	8000608 <__aeabi_dmul>
 800ddaa:	e7c5      	b.n	800dd38 <__ieee754_pow+0xc0>
 800ddac:	4b39      	ldr	r3, [pc, #228]	; (800de94 <__ieee754_pow+0x21c>)
 800ddae:	4599      	cmp	r9, r3
 800ddb0:	d10a      	bne.n	800ddc8 <__ieee754_pow+0x150>
 800ddb2:	2d00      	cmp	r5, #0
 800ddb4:	db08      	blt.n	800ddc8 <__ieee754_pow+0x150>
 800ddb6:	ec47 6b10 	vmov	d0, r6, r7
 800ddba:	b011      	add	sp, #68	; 0x44
 800ddbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc0:	f000 bc68 	b.w	800e694 <__ieee754_sqrt>
 800ddc4:	f04f 0b00 	mov.w	fp, #0
 800ddc8:	ec47 6b10 	vmov	d0, r6, r7
 800ddcc:	f001 fb4e 	bl	800f46c <fabs>
 800ddd0:	ec51 0b10 	vmov	r0, r1, d0
 800ddd4:	f1ba 0f00 	cmp.w	sl, #0
 800ddd8:	d127      	bne.n	800de2a <__ieee754_pow+0x1b2>
 800ddda:	b124      	cbz	r4, 800dde6 <__ieee754_pow+0x16e>
 800dddc:	4b2c      	ldr	r3, [pc, #176]	; (800de90 <__ieee754_pow+0x218>)
 800ddde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d121      	bne.n	800de2a <__ieee754_pow+0x1b2>
 800dde6:	f1b9 0f00 	cmp.w	r9, #0
 800ddea:	da05      	bge.n	800ddf8 <__ieee754_pow+0x180>
 800ddec:	4602      	mov	r2, r0
 800ddee:	460b      	mov	r3, r1
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	4927      	ldr	r1, [pc, #156]	; (800de90 <__ieee754_pow+0x218>)
 800ddf4:	f7f2 fd32 	bl	800085c <__aeabi_ddiv>
 800ddf8:	2d00      	cmp	r5, #0
 800ddfa:	da9d      	bge.n	800dd38 <__ieee754_pow+0xc0>
 800ddfc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800de00:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800de04:	ea54 030b 	orrs.w	r3, r4, fp
 800de08:	d108      	bne.n	800de1c <__ieee754_pow+0x1a4>
 800de0a:	4602      	mov	r2, r0
 800de0c:	460b      	mov	r3, r1
 800de0e:	4610      	mov	r0, r2
 800de10:	4619      	mov	r1, r3
 800de12:	f7f2 fa41 	bl	8000298 <__aeabi_dsub>
 800de16:	4602      	mov	r2, r0
 800de18:	460b      	mov	r3, r1
 800de1a:	e7ac      	b.n	800dd76 <__ieee754_pow+0xfe>
 800de1c:	f1bb 0f01 	cmp.w	fp, #1
 800de20:	d18a      	bne.n	800dd38 <__ieee754_pow+0xc0>
 800de22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de26:	4619      	mov	r1, r3
 800de28:	e786      	b.n	800dd38 <__ieee754_pow+0xc0>
 800de2a:	0fed      	lsrs	r5, r5, #31
 800de2c:	1e6b      	subs	r3, r5, #1
 800de2e:	930d      	str	r3, [sp, #52]	; 0x34
 800de30:	ea5b 0303 	orrs.w	r3, fp, r3
 800de34:	d102      	bne.n	800de3c <__ieee754_pow+0x1c4>
 800de36:	4632      	mov	r2, r6
 800de38:	463b      	mov	r3, r7
 800de3a:	e7e8      	b.n	800de0e <__ieee754_pow+0x196>
 800de3c:	4b16      	ldr	r3, [pc, #88]	; (800de98 <__ieee754_pow+0x220>)
 800de3e:	4598      	cmp	r8, r3
 800de40:	f340 80fe 	ble.w	800e040 <__ieee754_pow+0x3c8>
 800de44:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800de48:	4598      	cmp	r8, r3
 800de4a:	dd0a      	ble.n	800de62 <__ieee754_pow+0x1ea>
 800de4c:	4b0f      	ldr	r3, [pc, #60]	; (800de8c <__ieee754_pow+0x214>)
 800de4e:	429c      	cmp	r4, r3
 800de50:	dc0d      	bgt.n	800de6e <__ieee754_pow+0x1f6>
 800de52:	f1b9 0f00 	cmp.w	r9, #0
 800de56:	f6bf af6d 	bge.w	800dd34 <__ieee754_pow+0xbc>
 800de5a:	a307      	add	r3, pc, #28	; (adr r3, 800de78 <__ieee754_pow+0x200>)
 800de5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de60:	e79f      	b.n	800dda2 <__ieee754_pow+0x12a>
 800de62:	4b0e      	ldr	r3, [pc, #56]	; (800de9c <__ieee754_pow+0x224>)
 800de64:	429c      	cmp	r4, r3
 800de66:	ddf4      	ble.n	800de52 <__ieee754_pow+0x1da>
 800de68:	4b09      	ldr	r3, [pc, #36]	; (800de90 <__ieee754_pow+0x218>)
 800de6a:	429c      	cmp	r4, r3
 800de6c:	dd18      	ble.n	800dea0 <__ieee754_pow+0x228>
 800de6e:	f1b9 0f00 	cmp.w	r9, #0
 800de72:	dcf2      	bgt.n	800de5a <__ieee754_pow+0x1e2>
 800de74:	e75e      	b.n	800dd34 <__ieee754_pow+0xbc>
 800de76:	bf00      	nop
 800de78:	8800759c 	.word	0x8800759c
 800de7c:	7e37e43c 	.word	0x7e37e43c
 800de80:	7ff00000 	.word	0x7ff00000
 800de84:	0800fa79 	.word	0x0800fa79
 800de88:	433fffff 	.word	0x433fffff
 800de8c:	3fefffff 	.word	0x3fefffff
 800de90:	3ff00000 	.word	0x3ff00000
 800de94:	3fe00000 	.word	0x3fe00000
 800de98:	41e00000 	.word	0x41e00000
 800de9c:	3feffffe 	.word	0x3feffffe
 800dea0:	2200      	movs	r2, #0
 800dea2:	4b63      	ldr	r3, [pc, #396]	; (800e030 <__ieee754_pow+0x3b8>)
 800dea4:	f7f2 f9f8 	bl	8000298 <__aeabi_dsub>
 800dea8:	a355      	add	r3, pc, #340	; (adr r3, 800e000 <__ieee754_pow+0x388>)
 800deaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deae:	4604      	mov	r4, r0
 800deb0:	460d      	mov	r5, r1
 800deb2:	f7f2 fba9 	bl	8000608 <__aeabi_dmul>
 800deb6:	a354      	add	r3, pc, #336	; (adr r3, 800e008 <__ieee754_pow+0x390>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	4606      	mov	r6, r0
 800debe:	460f      	mov	r7, r1
 800dec0:	4620      	mov	r0, r4
 800dec2:	4629      	mov	r1, r5
 800dec4:	f7f2 fba0 	bl	8000608 <__aeabi_dmul>
 800dec8:	2200      	movs	r2, #0
 800deca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dece:	4b59      	ldr	r3, [pc, #356]	; (800e034 <__ieee754_pow+0x3bc>)
 800ded0:	4620      	mov	r0, r4
 800ded2:	4629      	mov	r1, r5
 800ded4:	f7f2 fb98 	bl	8000608 <__aeabi_dmul>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	a14c      	add	r1, pc, #304	; (adr r1, 800e010 <__ieee754_pow+0x398>)
 800dede:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dee2:	f7f2 f9d9 	bl	8000298 <__aeabi_dsub>
 800dee6:	4622      	mov	r2, r4
 800dee8:	462b      	mov	r3, r5
 800deea:	f7f2 fb8d 	bl	8000608 <__aeabi_dmul>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	2000      	movs	r0, #0
 800def4:	4950      	ldr	r1, [pc, #320]	; (800e038 <__ieee754_pow+0x3c0>)
 800def6:	f7f2 f9cf 	bl	8000298 <__aeabi_dsub>
 800defa:	4622      	mov	r2, r4
 800defc:	462b      	mov	r3, r5
 800defe:	4680      	mov	r8, r0
 800df00:	4689      	mov	r9, r1
 800df02:	4620      	mov	r0, r4
 800df04:	4629      	mov	r1, r5
 800df06:	f7f2 fb7f 	bl	8000608 <__aeabi_dmul>
 800df0a:	4602      	mov	r2, r0
 800df0c:	460b      	mov	r3, r1
 800df0e:	4640      	mov	r0, r8
 800df10:	4649      	mov	r1, r9
 800df12:	f7f2 fb79 	bl	8000608 <__aeabi_dmul>
 800df16:	a340      	add	r3, pc, #256	; (adr r3, 800e018 <__ieee754_pow+0x3a0>)
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	f7f2 fb74 	bl	8000608 <__aeabi_dmul>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df28:	f7f2 f9b6 	bl	8000298 <__aeabi_dsub>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	4604      	mov	r4, r0
 800df32:	460d      	mov	r5, r1
 800df34:	4630      	mov	r0, r6
 800df36:	4639      	mov	r1, r7
 800df38:	f7f2 f9b0 	bl	800029c <__adddf3>
 800df3c:	2000      	movs	r0, #0
 800df3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df42:	4632      	mov	r2, r6
 800df44:	463b      	mov	r3, r7
 800df46:	f7f2 f9a7 	bl	8000298 <__aeabi_dsub>
 800df4a:	4602      	mov	r2, r0
 800df4c:	460b      	mov	r3, r1
 800df4e:	4620      	mov	r0, r4
 800df50:	4629      	mov	r1, r5
 800df52:	f7f2 f9a1 	bl	8000298 <__aeabi_dsub>
 800df56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df58:	f10b 33ff 	add.w	r3, fp, #4294967295
 800df5c:	4313      	orrs	r3, r2
 800df5e:	4606      	mov	r6, r0
 800df60:	460f      	mov	r7, r1
 800df62:	f040 81eb 	bne.w	800e33c <__ieee754_pow+0x6c4>
 800df66:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e020 <__ieee754_pow+0x3a8>
 800df6a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800df6e:	2400      	movs	r4, #0
 800df70:	4622      	mov	r2, r4
 800df72:	462b      	mov	r3, r5
 800df74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df7c:	f7f2 f98c 	bl	8000298 <__aeabi_dsub>
 800df80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df84:	f7f2 fb40 	bl	8000608 <__aeabi_dmul>
 800df88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df8c:	4680      	mov	r8, r0
 800df8e:	4689      	mov	r9, r1
 800df90:	4630      	mov	r0, r6
 800df92:	4639      	mov	r1, r7
 800df94:	f7f2 fb38 	bl	8000608 <__aeabi_dmul>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4640      	mov	r0, r8
 800df9e:	4649      	mov	r1, r9
 800dfa0:	f7f2 f97c 	bl	800029c <__adddf3>
 800dfa4:	4622      	mov	r2, r4
 800dfa6:	462b      	mov	r3, r5
 800dfa8:	4680      	mov	r8, r0
 800dfaa:	4689      	mov	r9, r1
 800dfac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfb0:	f7f2 fb2a 	bl	8000608 <__aeabi_dmul>
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	460d      	mov	r5, r1
 800dfba:	4602      	mov	r2, r0
 800dfbc:	4649      	mov	r1, r9
 800dfbe:	4640      	mov	r0, r8
 800dfc0:	e9cd 4500 	strd	r4, r5, [sp]
 800dfc4:	f7f2 f96a 	bl	800029c <__adddf3>
 800dfc8:	4b1c      	ldr	r3, [pc, #112]	; (800e03c <__ieee754_pow+0x3c4>)
 800dfca:	4299      	cmp	r1, r3
 800dfcc:	4606      	mov	r6, r0
 800dfce:	460f      	mov	r7, r1
 800dfd0:	468b      	mov	fp, r1
 800dfd2:	f340 82f7 	ble.w	800e5c4 <__ieee754_pow+0x94c>
 800dfd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dfda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dfde:	4303      	orrs	r3, r0
 800dfe0:	f000 81ea 	beq.w	800e3b8 <__ieee754_pow+0x740>
 800dfe4:	a310      	add	r3, pc, #64	; (adr r3, 800e028 <__ieee754_pow+0x3b0>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfee:	f7f2 fb0b 	bl	8000608 <__aeabi_dmul>
 800dff2:	a30d      	add	r3, pc, #52	; (adr r3, 800e028 <__ieee754_pow+0x3b0>)
 800dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff8:	e6d5      	b.n	800dda6 <__ieee754_pow+0x12e>
 800dffa:	bf00      	nop
 800dffc:	f3af 8000 	nop.w
 800e000:	60000000 	.word	0x60000000
 800e004:	3ff71547 	.word	0x3ff71547
 800e008:	f85ddf44 	.word	0xf85ddf44
 800e00c:	3e54ae0b 	.word	0x3e54ae0b
 800e010:	55555555 	.word	0x55555555
 800e014:	3fd55555 	.word	0x3fd55555
 800e018:	652b82fe 	.word	0x652b82fe
 800e01c:	3ff71547 	.word	0x3ff71547
 800e020:	00000000 	.word	0x00000000
 800e024:	bff00000 	.word	0xbff00000
 800e028:	8800759c 	.word	0x8800759c
 800e02c:	7e37e43c 	.word	0x7e37e43c
 800e030:	3ff00000 	.word	0x3ff00000
 800e034:	3fd00000 	.word	0x3fd00000
 800e038:	3fe00000 	.word	0x3fe00000
 800e03c:	408fffff 	.word	0x408fffff
 800e040:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e044:	f04f 0200 	mov.w	r2, #0
 800e048:	da05      	bge.n	800e056 <__ieee754_pow+0x3de>
 800e04a:	4bd3      	ldr	r3, [pc, #844]	; (800e398 <__ieee754_pow+0x720>)
 800e04c:	f7f2 fadc 	bl	8000608 <__aeabi_dmul>
 800e050:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e054:	460c      	mov	r4, r1
 800e056:	1523      	asrs	r3, r4, #20
 800e058:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e05c:	4413      	add	r3, r2
 800e05e:	9309      	str	r3, [sp, #36]	; 0x24
 800e060:	4bce      	ldr	r3, [pc, #824]	; (800e39c <__ieee754_pow+0x724>)
 800e062:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e066:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e06a:	429c      	cmp	r4, r3
 800e06c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e070:	dd08      	ble.n	800e084 <__ieee754_pow+0x40c>
 800e072:	4bcb      	ldr	r3, [pc, #812]	; (800e3a0 <__ieee754_pow+0x728>)
 800e074:	429c      	cmp	r4, r3
 800e076:	f340 815e 	ble.w	800e336 <__ieee754_pow+0x6be>
 800e07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e07c:	3301      	adds	r3, #1
 800e07e:	9309      	str	r3, [sp, #36]	; 0x24
 800e080:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e084:	f04f 0a00 	mov.w	sl, #0
 800e088:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e08c:	930c      	str	r3, [sp, #48]	; 0x30
 800e08e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e090:	4bc4      	ldr	r3, [pc, #784]	; (800e3a4 <__ieee754_pow+0x72c>)
 800e092:	4413      	add	r3, r2
 800e094:	ed93 7b00 	vldr	d7, [r3]
 800e098:	4629      	mov	r1, r5
 800e09a:	ec53 2b17 	vmov	r2, r3, d7
 800e09e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e0a6:	f7f2 f8f7 	bl	8000298 <__aeabi_dsub>
 800e0aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	460f      	mov	r7, r1
 800e0b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0b6:	f7f2 f8f1 	bl	800029c <__adddf3>
 800e0ba:	4602      	mov	r2, r0
 800e0bc:	460b      	mov	r3, r1
 800e0be:	2000      	movs	r0, #0
 800e0c0:	49b9      	ldr	r1, [pc, #740]	; (800e3a8 <__ieee754_pow+0x730>)
 800e0c2:	f7f2 fbcb 	bl	800085c <__aeabi_ddiv>
 800e0c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	4630      	mov	r0, r6
 800e0d0:	4639      	mov	r1, r7
 800e0d2:	f7f2 fa99 	bl	8000608 <__aeabi_dmul>
 800e0d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e0de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	9302      	str	r3, [sp, #8]
 800e0e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e0ea:	106d      	asrs	r5, r5, #1
 800e0ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e0f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e0fa:	4640      	mov	r0, r8
 800e0fc:	4649      	mov	r1, r9
 800e0fe:	4614      	mov	r4, r2
 800e100:	461d      	mov	r5, r3
 800e102:	f7f2 fa81 	bl	8000608 <__aeabi_dmul>
 800e106:	4602      	mov	r2, r0
 800e108:	460b      	mov	r3, r1
 800e10a:	4630      	mov	r0, r6
 800e10c:	4639      	mov	r1, r7
 800e10e:	f7f2 f8c3 	bl	8000298 <__aeabi_dsub>
 800e112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e116:	4606      	mov	r6, r0
 800e118:	460f      	mov	r7, r1
 800e11a:	4620      	mov	r0, r4
 800e11c:	4629      	mov	r1, r5
 800e11e:	f7f2 f8bb 	bl	8000298 <__aeabi_dsub>
 800e122:	4602      	mov	r2, r0
 800e124:	460b      	mov	r3, r1
 800e126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e12a:	f7f2 f8b5 	bl	8000298 <__aeabi_dsub>
 800e12e:	4642      	mov	r2, r8
 800e130:	464b      	mov	r3, r9
 800e132:	f7f2 fa69 	bl	8000608 <__aeabi_dmul>
 800e136:	4602      	mov	r2, r0
 800e138:	460b      	mov	r3, r1
 800e13a:	4630      	mov	r0, r6
 800e13c:	4639      	mov	r1, r7
 800e13e:	f7f2 f8ab 	bl	8000298 <__aeabi_dsub>
 800e142:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e146:	f7f2 fa5f 	bl	8000608 <__aeabi_dmul>
 800e14a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e14e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e152:	4610      	mov	r0, r2
 800e154:	4619      	mov	r1, r3
 800e156:	f7f2 fa57 	bl	8000608 <__aeabi_dmul>
 800e15a:	a37b      	add	r3, pc, #492	; (adr r3, 800e348 <__ieee754_pow+0x6d0>)
 800e15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e160:	4604      	mov	r4, r0
 800e162:	460d      	mov	r5, r1
 800e164:	f7f2 fa50 	bl	8000608 <__aeabi_dmul>
 800e168:	a379      	add	r3, pc, #484	; (adr r3, 800e350 <__ieee754_pow+0x6d8>)
 800e16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16e:	f7f2 f895 	bl	800029c <__adddf3>
 800e172:	4622      	mov	r2, r4
 800e174:	462b      	mov	r3, r5
 800e176:	f7f2 fa47 	bl	8000608 <__aeabi_dmul>
 800e17a:	a377      	add	r3, pc, #476	; (adr r3, 800e358 <__ieee754_pow+0x6e0>)
 800e17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e180:	f7f2 f88c 	bl	800029c <__adddf3>
 800e184:	4622      	mov	r2, r4
 800e186:	462b      	mov	r3, r5
 800e188:	f7f2 fa3e 	bl	8000608 <__aeabi_dmul>
 800e18c:	a374      	add	r3, pc, #464	; (adr r3, 800e360 <__ieee754_pow+0x6e8>)
 800e18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e192:	f7f2 f883 	bl	800029c <__adddf3>
 800e196:	4622      	mov	r2, r4
 800e198:	462b      	mov	r3, r5
 800e19a:	f7f2 fa35 	bl	8000608 <__aeabi_dmul>
 800e19e:	a372      	add	r3, pc, #456	; (adr r3, 800e368 <__ieee754_pow+0x6f0>)
 800e1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a4:	f7f2 f87a 	bl	800029c <__adddf3>
 800e1a8:	4622      	mov	r2, r4
 800e1aa:	462b      	mov	r3, r5
 800e1ac:	f7f2 fa2c 	bl	8000608 <__aeabi_dmul>
 800e1b0:	a36f      	add	r3, pc, #444	; (adr r3, 800e370 <__ieee754_pow+0x6f8>)
 800e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b6:	f7f2 f871 	bl	800029c <__adddf3>
 800e1ba:	4622      	mov	r2, r4
 800e1bc:	4606      	mov	r6, r0
 800e1be:	460f      	mov	r7, r1
 800e1c0:	462b      	mov	r3, r5
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	f7f2 fa1f 	bl	8000608 <__aeabi_dmul>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	4639      	mov	r1, r7
 800e1d2:	f7f2 fa19 	bl	8000608 <__aeabi_dmul>
 800e1d6:	4642      	mov	r2, r8
 800e1d8:	4604      	mov	r4, r0
 800e1da:	460d      	mov	r5, r1
 800e1dc:	464b      	mov	r3, r9
 800e1de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1e2:	f7f2 f85b 	bl	800029c <__adddf3>
 800e1e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e1ea:	f7f2 fa0d 	bl	8000608 <__aeabi_dmul>
 800e1ee:	4622      	mov	r2, r4
 800e1f0:	462b      	mov	r3, r5
 800e1f2:	f7f2 f853 	bl	800029c <__adddf3>
 800e1f6:	4642      	mov	r2, r8
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	460f      	mov	r7, r1
 800e1fc:	464b      	mov	r3, r9
 800e1fe:	4640      	mov	r0, r8
 800e200:	4649      	mov	r1, r9
 800e202:	f7f2 fa01 	bl	8000608 <__aeabi_dmul>
 800e206:	2200      	movs	r2, #0
 800e208:	4b68      	ldr	r3, [pc, #416]	; (800e3ac <__ieee754_pow+0x734>)
 800e20a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e20e:	f7f2 f845 	bl	800029c <__adddf3>
 800e212:	4632      	mov	r2, r6
 800e214:	463b      	mov	r3, r7
 800e216:	f7f2 f841 	bl	800029c <__adddf3>
 800e21a:	9802      	ldr	r0, [sp, #8]
 800e21c:	460d      	mov	r5, r1
 800e21e:	4604      	mov	r4, r0
 800e220:	4602      	mov	r2, r0
 800e222:	460b      	mov	r3, r1
 800e224:	4640      	mov	r0, r8
 800e226:	4649      	mov	r1, r9
 800e228:	f7f2 f9ee 	bl	8000608 <__aeabi_dmul>
 800e22c:	2200      	movs	r2, #0
 800e22e:	4680      	mov	r8, r0
 800e230:	4689      	mov	r9, r1
 800e232:	4b5e      	ldr	r3, [pc, #376]	; (800e3ac <__ieee754_pow+0x734>)
 800e234:	4620      	mov	r0, r4
 800e236:	4629      	mov	r1, r5
 800e238:	f7f2 f82e 	bl	8000298 <__aeabi_dsub>
 800e23c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e240:	f7f2 f82a 	bl	8000298 <__aeabi_dsub>
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	4630      	mov	r0, r6
 800e24a:	4639      	mov	r1, r7
 800e24c:	f7f2 f824 	bl	8000298 <__aeabi_dsub>
 800e250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e254:	f7f2 f9d8 	bl	8000608 <__aeabi_dmul>
 800e258:	4622      	mov	r2, r4
 800e25a:	4606      	mov	r6, r0
 800e25c:	460f      	mov	r7, r1
 800e25e:	462b      	mov	r3, r5
 800e260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e264:	f7f2 f9d0 	bl	8000608 <__aeabi_dmul>
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	4630      	mov	r0, r6
 800e26e:	4639      	mov	r1, r7
 800e270:	f7f2 f814 	bl	800029c <__adddf3>
 800e274:	4606      	mov	r6, r0
 800e276:	460f      	mov	r7, r1
 800e278:	4602      	mov	r2, r0
 800e27a:	460b      	mov	r3, r1
 800e27c:	4640      	mov	r0, r8
 800e27e:	4649      	mov	r1, r9
 800e280:	f7f2 f80c 	bl	800029c <__adddf3>
 800e284:	9802      	ldr	r0, [sp, #8]
 800e286:	a33c      	add	r3, pc, #240	; (adr r3, 800e378 <__ieee754_pow+0x700>)
 800e288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28c:	4604      	mov	r4, r0
 800e28e:	460d      	mov	r5, r1
 800e290:	f7f2 f9ba 	bl	8000608 <__aeabi_dmul>
 800e294:	4642      	mov	r2, r8
 800e296:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e29a:	464b      	mov	r3, r9
 800e29c:	4620      	mov	r0, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	f7f1 fffa 	bl	8000298 <__aeabi_dsub>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	4639      	mov	r1, r7
 800e2ac:	f7f1 fff4 	bl	8000298 <__aeabi_dsub>
 800e2b0:	a333      	add	r3, pc, #204	; (adr r3, 800e380 <__ieee754_pow+0x708>)
 800e2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b6:	f7f2 f9a7 	bl	8000608 <__aeabi_dmul>
 800e2ba:	a333      	add	r3, pc, #204	; (adr r3, 800e388 <__ieee754_pow+0x710>)
 800e2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c0:	4606      	mov	r6, r0
 800e2c2:	460f      	mov	r7, r1
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	f7f2 f99e 	bl	8000608 <__aeabi_dmul>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	4639      	mov	r1, r7
 800e2d4:	f7f1 ffe2 	bl	800029c <__adddf3>
 800e2d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2da:	4b35      	ldr	r3, [pc, #212]	; (800e3b0 <__ieee754_pow+0x738>)
 800e2dc:	4413      	add	r3, r2
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	f7f1 ffdb 	bl	800029c <__adddf3>
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	f7f2 f922 	bl	8000534 <__aeabi_i2d>
 800e2f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2f2:	4b30      	ldr	r3, [pc, #192]	; (800e3b4 <__ieee754_pow+0x73c>)
 800e2f4:	4413      	add	r3, r2
 800e2f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2fa:	4606      	mov	r6, r0
 800e2fc:	460f      	mov	r7, r1
 800e2fe:	4622      	mov	r2, r4
 800e300:	462b      	mov	r3, r5
 800e302:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e306:	f7f1 ffc9 	bl	800029c <__adddf3>
 800e30a:	4642      	mov	r2, r8
 800e30c:	464b      	mov	r3, r9
 800e30e:	f7f1 ffc5 	bl	800029c <__adddf3>
 800e312:	4632      	mov	r2, r6
 800e314:	463b      	mov	r3, r7
 800e316:	f7f1 ffc1 	bl	800029c <__adddf3>
 800e31a:	9802      	ldr	r0, [sp, #8]
 800e31c:	4632      	mov	r2, r6
 800e31e:	463b      	mov	r3, r7
 800e320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e324:	f7f1 ffb8 	bl	8000298 <__aeabi_dsub>
 800e328:	4642      	mov	r2, r8
 800e32a:	464b      	mov	r3, r9
 800e32c:	f7f1 ffb4 	bl	8000298 <__aeabi_dsub>
 800e330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e334:	e607      	b.n	800df46 <__ieee754_pow+0x2ce>
 800e336:	f04f 0a01 	mov.w	sl, #1
 800e33a:	e6a5      	b.n	800e088 <__ieee754_pow+0x410>
 800e33c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e390 <__ieee754_pow+0x718>
 800e340:	e613      	b.n	800df6a <__ieee754_pow+0x2f2>
 800e342:	bf00      	nop
 800e344:	f3af 8000 	nop.w
 800e348:	4a454eef 	.word	0x4a454eef
 800e34c:	3fca7e28 	.word	0x3fca7e28
 800e350:	93c9db65 	.word	0x93c9db65
 800e354:	3fcd864a 	.word	0x3fcd864a
 800e358:	a91d4101 	.word	0xa91d4101
 800e35c:	3fd17460 	.word	0x3fd17460
 800e360:	518f264d 	.word	0x518f264d
 800e364:	3fd55555 	.word	0x3fd55555
 800e368:	db6fabff 	.word	0xdb6fabff
 800e36c:	3fdb6db6 	.word	0x3fdb6db6
 800e370:	33333303 	.word	0x33333303
 800e374:	3fe33333 	.word	0x3fe33333
 800e378:	e0000000 	.word	0xe0000000
 800e37c:	3feec709 	.word	0x3feec709
 800e380:	dc3a03fd 	.word	0xdc3a03fd
 800e384:	3feec709 	.word	0x3feec709
 800e388:	145b01f5 	.word	0x145b01f5
 800e38c:	be3e2fe0 	.word	0xbe3e2fe0
 800e390:	00000000 	.word	0x00000000
 800e394:	3ff00000 	.word	0x3ff00000
 800e398:	43400000 	.word	0x43400000
 800e39c:	0003988e 	.word	0x0003988e
 800e3a0:	000bb679 	.word	0x000bb679
 800e3a4:	0800fbc0 	.word	0x0800fbc0
 800e3a8:	3ff00000 	.word	0x3ff00000
 800e3ac:	40080000 	.word	0x40080000
 800e3b0:	0800fbe0 	.word	0x0800fbe0
 800e3b4:	0800fbd0 	.word	0x0800fbd0
 800e3b8:	a3b4      	add	r3, pc, #720	; (adr r3, 800e68c <__ieee754_pow+0xa14>)
 800e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3be:	4640      	mov	r0, r8
 800e3c0:	4649      	mov	r1, r9
 800e3c2:	f7f1 ff6b 	bl	800029c <__adddf3>
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3cc:	462b      	mov	r3, r5
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	f7f1 ff61 	bl	8000298 <__aeabi_dsub>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	460b      	mov	r3, r1
 800e3da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3de:	f7f2 fba3 	bl	8000b28 <__aeabi_dcmpgt>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	f47f adfe 	bne.w	800dfe4 <__ieee754_pow+0x36c>
 800e3e8:	4aa3      	ldr	r2, [pc, #652]	; (800e678 <__ieee754_pow+0xa00>)
 800e3ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	f340 810a 	ble.w	800e608 <__ieee754_pow+0x990>
 800e3f4:	151b      	asrs	r3, r3, #20
 800e3f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e3fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e3fe:	fa4a f303 	asr.w	r3, sl, r3
 800e402:	445b      	add	r3, fp
 800e404:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e408:	4e9c      	ldr	r6, [pc, #624]	; (800e67c <__ieee754_pow+0xa04>)
 800e40a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e40e:	4116      	asrs	r6, r2
 800e410:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e414:	2000      	movs	r0, #0
 800e416:	ea23 0106 	bic.w	r1, r3, r6
 800e41a:	f1c2 0214 	rsb	r2, r2, #20
 800e41e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e422:	fa4a fa02 	asr.w	sl, sl, r2
 800e426:	f1bb 0f00 	cmp.w	fp, #0
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	4620      	mov	r0, r4
 800e430:	4629      	mov	r1, r5
 800e432:	bfb8      	it	lt
 800e434:	f1ca 0a00 	rsblt	sl, sl, #0
 800e438:	f7f1 ff2e 	bl	8000298 <__aeabi_dsub>
 800e43c:	e9cd 0100 	strd	r0, r1, [sp]
 800e440:	4642      	mov	r2, r8
 800e442:	464b      	mov	r3, r9
 800e444:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e448:	f7f1 ff28 	bl	800029c <__adddf3>
 800e44c:	2000      	movs	r0, #0
 800e44e:	a378      	add	r3, pc, #480	; (adr r3, 800e630 <__ieee754_pow+0x9b8>)
 800e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e454:	4604      	mov	r4, r0
 800e456:	460d      	mov	r5, r1
 800e458:	f7f2 f8d6 	bl	8000608 <__aeabi_dmul>
 800e45c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e460:	4606      	mov	r6, r0
 800e462:	460f      	mov	r7, r1
 800e464:	4620      	mov	r0, r4
 800e466:	4629      	mov	r1, r5
 800e468:	f7f1 ff16 	bl	8000298 <__aeabi_dsub>
 800e46c:	4602      	mov	r2, r0
 800e46e:	460b      	mov	r3, r1
 800e470:	4640      	mov	r0, r8
 800e472:	4649      	mov	r1, r9
 800e474:	f7f1 ff10 	bl	8000298 <__aeabi_dsub>
 800e478:	a36f      	add	r3, pc, #444	; (adr r3, 800e638 <__ieee754_pow+0x9c0>)
 800e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47e:	f7f2 f8c3 	bl	8000608 <__aeabi_dmul>
 800e482:	a36f      	add	r3, pc, #444	; (adr r3, 800e640 <__ieee754_pow+0x9c8>)
 800e484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e488:	4680      	mov	r8, r0
 800e48a:	4689      	mov	r9, r1
 800e48c:	4620      	mov	r0, r4
 800e48e:	4629      	mov	r1, r5
 800e490:	f7f2 f8ba 	bl	8000608 <__aeabi_dmul>
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	4640      	mov	r0, r8
 800e49a:	4649      	mov	r1, r9
 800e49c:	f7f1 fefe 	bl	800029c <__adddf3>
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f1 fef6 	bl	800029c <__adddf3>
 800e4b0:	4632      	mov	r2, r6
 800e4b2:	463b      	mov	r3, r7
 800e4b4:	4680      	mov	r8, r0
 800e4b6:	4689      	mov	r9, r1
 800e4b8:	f7f1 feee 	bl	8000298 <__aeabi_dsub>
 800e4bc:	4602      	mov	r2, r0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	4629      	mov	r1, r5
 800e4c4:	f7f1 fee8 	bl	8000298 <__aeabi_dsub>
 800e4c8:	4642      	mov	r2, r8
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	460f      	mov	r7, r1
 800e4ce:	464b      	mov	r3, r9
 800e4d0:	4640      	mov	r0, r8
 800e4d2:	4649      	mov	r1, r9
 800e4d4:	f7f2 f898 	bl	8000608 <__aeabi_dmul>
 800e4d8:	a35b      	add	r3, pc, #364	; (adr r3, 800e648 <__ieee754_pow+0x9d0>)
 800e4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4de:	4604      	mov	r4, r0
 800e4e0:	460d      	mov	r5, r1
 800e4e2:	f7f2 f891 	bl	8000608 <__aeabi_dmul>
 800e4e6:	a35a      	add	r3, pc, #360	; (adr r3, 800e650 <__ieee754_pow+0x9d8>)
 800e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ec:	f7f1 fed4 	bl	8000298 <__aeabi_dsub>
 800e4f0:	4622      	mov	r2, r4
 800e4f2:	462b      	mov	r3, r5
 800e4f4:	f7f2 f888 	bl	8000608 <__aeabi_dmul>
 800e4f8:	a357      	add	r3, pc, #348	; (adr r3, 800e658 <__ieee754_pow+0x9e0>)
 800e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fe:	f7f1 fecd 	bl	800029c <__adddf3>
 800e502:	4622      	mov	r2, r4
 800e504:	462b      	mov	r3, r5
 800e506:	f7f2 f87f 	bl	8000608 <__aeabi_dmul>
 800e50a:	a355      	add	r3, pc, #340	; (adr r3, 800e660 <__ieee754_pow+0x9e8>)
 800e50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e510:	f7f1 fec2 	bl	8000298 <__aeabi_dsub>
 800e514:	4622      	mov	r2, r4
 800e516:	462b      	mov	r3, r5
 800e518:	f7f2 f876 	bl	8000608 <__aeabi_dmul>
 800e51c:	a352      	add	r3, pc, #328	; (adr r3, 800e668 <__ieee754_pow+0x9f0>)
 800e51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e522:	f7f1 febb 	bl	800029c <__adddf3>
 800e526:	4622      	mov	r2, r4
 800e528:	462b      	mov	r3, r5
 800e52a:	f7f2 f86d 	bl	8000608 <__aeabi_dmul>
 800e52e:	4602      	mov	r2, r0
 800e530:	460b      	mov	r3, r1
 800e532:	4640      	mov	r0, r8
 800e534:	4649      	mov	r1, r9
 800e536:	f7f1 feaf 	bl	8000298 <__aeabi_dsub>
 800e53a:	4604      	mov	r4, r0
 800e53c:	460d      	mov	r5, r1
 800e53e:	4602      	mov	r2, r0
 800e540:	460b      	mov	r3, r1
 800e542:	4640      	mov	r0, r8
 800e544:	4649      	mov	r1, r9
 800e546:	f7f2 f85f 	bl	8000608 <__aeabi_dmul>
 800e54a:	2200      	movs	r2, #0
 800e54c:	e9cd 0100 	strd	r0, r1, [sp]
 800e550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e554:	4620      	mov	r0, r4
 800e556:	4629      	mov	r1, r5
 800e558:	f7f1 fe9e 	bl	8000298 <__aeabi_dsub>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e564:	f7f2 f97a 	bl	800085c <__aeabi_ddiv>
 800e568:	4632      	mov	r2, r6
 800e56a:	4604      	mov	r4, r0
 800e56c:	460d      	mov	r5, r1
 800e56e:	463b      	mov	r3, r7
 800e570:	4640      	mov	r0, r8
 800e572:	4649      	mov	r1, r9
 800e574:	f7f2 f848 	bl	8000608 <__aeabi_dmul>
 800e578:	4632      	mov	r2, r6
 800e57a:	463b      	mov	r3, r7
 800e57c:	f7f1 fe8e 	bl	800029c <__adddf3>
 800e580:	4602      	mov	r2, r0
 800e582:	460b      	mov	r3, r1
 800e584:	4620      	mov	r0, r4
 800e586:	4629      	mov	r1, r5
 800e588:	f7f1 fe86 	bl	8000298 <__aeabi_dsub>
 800e58c:	4642      	mov	r2, r8
 800e58e:	464b      	mov	r3, r9
 800e590:	f7f1 fe82 	bl	8000298 <__aeabi_dsub>
 800e594:	4602      	mov	r2, r0
 800e596:	460b      	mov	r3, r1
 800e598:	2000      	movs	r0, #0
 800e59a:	4939      	ldr	r1, [pc, #228]	; (800e680 <__ieee754_pow+0xa08>)
 800e59c:	f7f1 fe7c 	bl	8000298 <__aeabi_dsub>
 800e5a0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e5a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	da2f      	bge.n	800e60e <__ieee754_pow+0x996>
 800e5ae:	4650      	mov	r0, sl
 800e5b0:	ec43 2b10 	vmov	d0, r2, r3
 800e5b4:	f000 fffc 	bl	800f5b0 <scalbn>
 800e5b8:	ec51 0b10 	vmov	r0, r1, d0
 800e5bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5c0:	f7ff bbf1 	b.w	800dda6 <__ieee754_pow+0x12e>
 800e5c4:	4b2f      	ldr	r3, [pc, #188]	; (800e684 <__ieee754_pow+0xa0c>)
 800e5c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e5ca:	429e      	cmp	r6, r3
 800e5cc:	f77f af0c 	ble.w	800e3e8 <__ieee754_pow+0x770>
 800e5d0:	4b2d      	ldr	r3, [pc, #180]	; (800e688 <__ieee754_pow+0xa10>)
 800e5d2:	440b      	add	r3, r1
 800e5d4:	4303      	orrs	r3, r0
 800e5d6:	d00b      	beq.n	800e5f0 <__ieee754_pow+0x978>
 800e5d8:	a325      	add	r3, pc, #148	; (adr r3, 800e670 <__ieee754_pow+0x9f8>)
 800e5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5e2:	f7f2 f811 	bl	8000608 <__aeabi_dmul>
 800e5e6:	a322      	add	r3, pc, #136	; (adr r3, 800e670 <__ieee754_pow+0x9f8>)
 800e5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ec:	f7ff bbdb 	b.w	800dda6 <__ieee754_pow+0x12e>
 800e5f0:	4622      	mov	r2, r4
 800e5f2:	462b      	mov	r3, r5
 800e5f4:	f7f1 fe50 	bl	8000298 <__aeabi_dsub>
 800e5f8:	4642      	mov	r2, r8
 800e5fa:	464b      	mov	r3, r9
 800e5fc:	f7f2 fa8a 	bl	8000b14 <__aeabi_dcmpge>
 800e600:	2800      	cmp	r0, #0
 800e602:	f43f aef1 	beq.w	800e3e8 <__ieee754_pow+0x770>
 800e606:	e7e7      	b.n	800e5d8 <__ieee754_pow+0x960>
 800e608:	f04f 0a00 	mov.w	sl, #0
 800e60c:	e718      	b.n	800e440 <__ieee754_pow+0x7c8>
 800e60e:	4621      	mov	r1, r4
 800e610:	e7d4      	b.n	800e5bc <__ieee754_pow+0x944>
 800e612:	2000      	movs	r0, #0
 800e614:	491a      	ldr	r1, [pc, #104]	; (800e680 <__ieee754_pow+0xa08>)
 800e616:	f7ff bb8f 	b.w	800dd38 <__ieee754_pow+0xc0>
 800e61a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e61e:	f7ff bb8b 	b.w	800dd38 <__ieee754_pow+0xc0>
 800e622:	4630      	mov	r0, r6
 800e624:	4639      	mov	r1, r7
 800e626:	f7ff bb87 	b.w	800dd38 <__ieee754_pow+0xc0>
 800e62a:	4693      	mov	fp, r2
 800e62c:	f7ff bb98 	b.w	800dd60 <__ieee754_pow+0xe8>
 800e630:	00000000 	.word	0x00000000
 800e634:	3fe62e43 	.word	0x3fe62e43
 800e638:	fefa39ef 	.word	0xfefa39ef
 800e63c:	3fe62e42 	.word	0x3fe62e42
 800e640:	0ca86c39 	.word	0x0ca86c39
 800e644:	be205c61 	.word	0xbe205c61
 800e648:	72bea4d0 	.word	0x72bea4d0
 800e64c:	3e663769 	.word	0x3e663769
 800e650:	c5d26bf1 	.word	0xc5d26bf1
 800e654:	3ebbbd41 	.word	0x3ebbbd41
 800e658:	af25de2c 	.word	0xaf25de2c
 800e65c:	3f11566a 	.word	0x3f11566a
 800e660:	16bebd93 	.word	0x16bebd93
 800e664:	3f66c16c 	.word	0x3f66c16c
 800e668:	5555553e 	.word	0x5555553e
 800e66c:	3fc55555 	.word	0x3fc55555
 800e670:	c2f8f359 	.word	0xc2f8f359
 800e674:	01a56e1f 	.word	0x01a56e1f
 800e678:	3fe00000 	.word	0x3fe00000
 800e67c:	000fffff 	.word	0x000fffff
 800e680:	3ff00000 	.word	0x3ff00000
 800e684:	4090cbff 	.word	0x4090cbff
 800e688:	3f6f3400 	.word	0x3f6f3400
 800e68c:	652b82fe 	.word	0x652b82fe
 800e690:	3c971547 	.word	0x3c971547

0800e694 <__ieee754_sqrt>:
 800e694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e698:	4955      	ldr	r1, [pc, #340]	; (800e7f0 <__ieee754_sqrt+0x15c>)
 800e69a:	ec55 4b10 	vmov	r4, r5, d0
 800e69e:	43a9      	bics	r1, r5
 800e6a0:	462b      	mov	r3, r5
 800e6a2:	462a      	mov	r2, r5
 800e6a4:	d112      	bne.n	800e6cc <__ieee754_sqrt+0x38>
 800e6a6:	ee10 2a10 	vmov	r2, s0
 800e6aa:	ee10 0a10 	vmov	r0, s0
 800e6ae:	4629      	mov	r1, r5
 800e6b0:	f7f1 ffaa 	bl	8000608 <__aeabi_dmul>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	f7f1 fdee 	bl	800029c <__adddf3>
 800e6c0:	4604      	mov	r4, r0
 800e6c2:	460d      	mov	r5, r1
 800e6c4:	ec45 4b10 	vmov	d0, r4, r5
 800e6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6cc:	2d00      	cmp	r5, #0
 800e6ce:	ee10 0a10 	vmov	r0, s0
 800e6d2:	4621      	mov	r1, r4
 800e6d4:	dc0f      	bgt.n	800e6f6 <__ieee754_sqrt+0x62>
 800e6d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e6da:	4330      	orrs	r0, r6
 800e6dc:	d0f2      	beq.n	800e6c4 <__ieee754_sqrt+0x30>
 800e6de:	b155      	cbz	r5, 800e6f6 <__ieee754_sqrt+0x62>
 800e6e0:	ee10 2a10 	vmov	r2, s0
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f7f1 fdd6 	bl	8000298 <__aeabi_dsub>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	f7f2 f8b4 	bl	800085c <__aeabi_ddiv>
 800e6f4:	e7e4      	b.n	800e6c0 <__ieee754_sqrt+0x2c>
 800e6f6:	151b      	asrs	r3, r3, #20
 800e6f8:	d073      	beq.n	800e7e2 <__ieee754_sqrt+0x14e>
 800e6fa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e6fe:	07dd      	lsls	r5, r3, #31
 800e700:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e704:	bf48      	it	mi
 800e706:	0fc8      	lsrmi	r0, r1, #31
 800e708:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e70c:	bf44      	itt	mi
 800e70e:	0049      	lslmi	r1, r1, #1
 800e710:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800e714:	2500      	movs	r5, #0
 800e716:	1058      	asrs	r0, r3, #1
 800e718:	0fcb      	lsrs	r3, r1, #31
 800e71a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800e71e:	0049      	lsls	r1, r1, #1
 800e720:	2316      	movs	r3, #22
 800e722:	462c      	mov	r4, r5
 800e724:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800e728:	19a7      	adds	r7, r4, r6
 800e72a:	4297      	cmp	r7, r2
 800e72c:	bfde      	ittt	le
 800e72e:	19bc      	addle	r4, r7, r6
 800e730:	1bd2      	suble	r2, r2, r7
 800e732:	19ad      	addle	r5, r5, r6
 800e734:	0fcf      	lsrs	r7, r1, #31
 800e736:	3b01      	subs	r3, #1
 800e738:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800e73c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e740:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e744:	d1f0      	bne.n	800e728 <__ieee754_sqrt+0x94>
 800e746:	f04f 0c20 	mov.w	ip, #32
 800e74a:	469e      	mov	lr, r3
 800e74c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e750:	42a2      	cmp	r2, r4
 800e752:	eb06 070e 	add.w	r7, r6, lr
 800e756:	dc02      	bgt.n	800e75e <__ieee754_sqrt+0xca>
 800e758:	d112      	bne.n	800e780 <__ieee754_sqrt+0xec>
 800e75a:	428f      	cmp	r7, r1
 800e75c:	d810      	bhi.n	800e780 <__ieee754_sqrt+0xec>
 800e75e:	2f00      	cmp	r7, #0
 800e760:	eb07 0e06 	add.w	lr, r7, r6
 800e764:	da42      	bge.n	800e7ec <__ieee754_sqrt+0x158>
 800e766:	f1be 0f00 	cmp.w	lr, #0
 800e76a:	db3f      	blt.n	800e7ec <__ieee754_sqrt+0x158>
 800e76c:	f104 0801 	add.w	r8, r4, #1
 800e770:	1b12      	subs	r2, r2, r4
 800e772:	428f      	cmp	r7, r1
 800e774:	bf88      	it	hi
 800e776:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800e77a:	1bc9      	subs	r1, r1, r7
 800e77c:	4433      	add	r3, r6
 800e77e:	4644      	mov	r4, r8
 800e780:	0052      	lsls	r2, r2, #1
 800e782:	f1bc 0c01 	subs.w	ip, ip, #1
 800e786:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800e78a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e78e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e792:	d1dd      	bne.n	800e750 <__ieee754_sqrt+0xbc>
 800e794:	430a      	orrs	r2, r1
 800e796:	d006      	beq.n	800e7a6 <__ieee754_sqrt+0x112>
 800e798:	1c5c      	adds	r4, r3, #1
 800e79a:	bf13      	iteet	ne
 800e79c:	3301      	addne	r3, #1
 800e79e:	3501      	addeq	r5, #1
 800e7a0:	4663      	moveq	r3, ip
 800e7a2:	f023 0301 	bicne.w	r3, r3, #1
 800e7a6:	106a      	asrs	r2, r5, #1
 800e7a8:	085b      	lsrs	r3, r3, #1
 800e7aa:	07e9      	lsls	r1, r5, #31
 800e7ac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e7b0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e7b4:	bf48      	it	mi
 800e7b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e7ba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800e7be:	461c      	mov	r4, r3
 800e7c0:	e780      	b.n	800e6c4 <__ieee754_sqrt+0x30>
 800e7c2:	0aca      	lsrs	r2, r1, #11
 800e7c4:	3815      	subs	r0, #21
 800e7c6:	0549      	lsls	r1, r1, #21
 800e7c8:	2a00      	cmp	r2, #0
 800e7ca:	d0fa      	beq.n	800e7c2 <__ieee754_sqrt+0x12e>
 800e7cc:	02d6      	lsls	r6, r2, #11
 800e7ce:	d50a      	bpl.n	800e7e6 <__ieee754_sqrt+0x152>
 800e7d0:	f1c3 0420 	rsb	r4, r3, #32
 800e7d4:	fa21 f404 	lsr.w	r4, r1, r4
 800e7d8:	1e5d      	subs	r5, r3, #1
 800e7da:	4099      	lsls	r1, r3
 800e7dc:	4322      	orrs	r2, r4
 800e7de:	1b43      	subs	r3, r0, r5
 800e7e0:	e78b      	b.n	800e6fa <__ieee754_sqrt+0x66>
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	e7f0      	b.n	800e7c8 <__ieee754_sqrt+0x134>
 800e7e6:	0052      	lsls	r2, r2, #1
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	e7ef      	b.n	800e7cc <__ieee754_sqrt+0x138>
 800e7ec:	46a0      	mov	r8, r4
 800e7ee:	e7bf      	b.n	800e770 <__ieee754_sqrt+0xdc>
 800e7f0:	7ff00000 	.word	0x7ff00000

0800e7f4 <__ieee754_acosf>:
 800e7f4:	b508      	push	{r3, lr}
 800e7f6:	ee10 3a10 	vmov	r3, s0
 800e7fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e7fe:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800e802:	ed2d 8b0c 	vpush	{d8-d13}
 800e806:	d10a      	bne.n	800e81e <__ieee754_acosf+0x2a>
 800e808:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800e9a8 <__ieee754_acosf+0x1b4>
 800e80c:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800e9ac <__ieee754_acosf+0x1b8>
 800e810:	2b00      	cmp	r3, #0
 800e812:	bfd8      	it	le
 800e814:	eeb0 0a48 	vmovle.f32	s0, s16
 800e818:	ecbd 8b0c 	vpop	{d8-d13}
 800e81c:	bd08      	pop	{r3, pc}
 800e81e:	dd04      	ble.n	800e82a <__ieee754_acosf+0x36>
 800e820:	ee30 8a40 	vsub.f32	s16, s0, s0
 800e824:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e828:	e7f6      	b.n	800e818 <__ieee754_acosf+0x24>
 800e82a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800e82e:	da3e      	bge.n	800e8ae <__ieee754_acosf+0xba>
 800e830:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800e834:	f340 80b5 	ble.w	800e9a2 <__ieee754_acosf+0x1ae>
 800e838:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e83c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800e9b0 <__ieee754_acosf+0x1bc>
 800e840:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800e9b4 <__ieee754_acosf+0x1c0>
 800e844:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 800e9b8 <__ieee754_acosf+0x1c4>
 800e848:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 800e9bc <__ieee754_acosf+0x1c8>
 800e84c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e850:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800e9c0 <__ieee754_acosf+0x1cc>
 800e854:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e858:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800e9c4 <__ieee754_acosf+0x1d0>
 800e85c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e860:	eddf 6a59 	vldr	s13, [pc, #356]	; 800e9c8 <__ieee754_acosf+0x1d4>
 800e864:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e868:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800e9cc <__ieee754_acosf+0x1d8>
 800e86c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e870:	eddf 6a57 	vldr	s13, [pc, #348]	; 800e9d0 <__ieee754_acosf+0x1dc>
 800e874:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800e878:	eddf 6a56 	vldr	s13, [pc, #344]	; 800e9d4 <__ieee754_acosf+0x1e0>
 800e87c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e880:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800e9d8 <__ieee754_acosf+0x1e4>
 800e884:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e88c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e890:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e894:	eef0 7a66 	vmov.f32	s15, s13
 800e898:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e89c:	eea0 8a66 	vfms.f32	s16, s0, s13
 800e8a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e8a4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800e9dc <__ieee754_acosf+0x1e8>
 800e8a8:	ee30 0a48 	vsub.f32	s0, s0, s16
 800e8ac:	e7b4      	b.n	800e818 <__ieee754_acosf+0x24>
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	eddf da3f 	vldr	s27, [pc, #252]	; 800e9b0 <__ieee754_acosf+0x1bc>
 800e8b4:	eddf ca3f 	vldr	s25, [pc, #252]	; 800e9b4 <__ieee754_acosf+0x1c0>
 800e8b8:	ed9f ca41 	vldr	s24, [pc, #260]	; 800e9c0 <__ieee754_acosf+0x1cc>
 800e8bc:	eddf ba41 	vldr	s23, [pc, #260]	; 800e9c4 <__ieee754_acosf+0x1d0>
 800e8c0:	ed9f ba41 	vldr	s22, [pc, #260]	; 800e9c8 <__ieee754_acosf+0x1d4>
 800e8c4:	eddf 8a41 	vldr	s17, [pc, #260]	; 800e9cc <__ieee754_acosf+0x1d8>
 800e8c8:	ed9f da41 	vldr	s26, [pc, #260]	; 800e9d0 <__ieee754_acosf+0x1dc>
 800e8cc:	eddf aa3a 	vldr	s21, [pc, #232]	; 800e9b8 <__ieee754_acosf+0x1c4>
 800e8d0:	ed9f aa40 	vldr	s20, [pc, #256]	; 800e9d4 <__ieee754_acosf+0x1e0>
 800e8d4:	eddf 9a40 	vldr	s19, [pc, #256]	; 800e9d8 <__ieee754_acosf+0x1e4>
 800e8d8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800e8dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e8e0:	da28      	bge.n	800e934 <__ieee754_acosf+0x140>
 800e8e2:	ee30 0a09 	vadd.f32	s0, s0, s18
 800e8e6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e8ea:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800e8ee:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800e8f2:	eeac ca80 	vfma.f32	s24, s25, s0
 800e8f6:	eeaa aa80 	vfma.f32	s20, s21, s0
 800e8fa:	eeec ba00 	vfma.f32	s23, s24, s0
 800e8fe:	eeea 9a00 	vfma.f32	s19, s20, s0
 800e902:	eeab ba80 	vfma.f32	s22, s23, s0
 800e906:	eea9 9a80 	vfma.f32	s18, s19, s0
 800e90a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800e90e:	ee68 8a80 	vmul.f32	s17, s17, s0
 800e912:	f000 fa7f 	bl	800ee14 <__ieee754_sqrtf>
 800e916:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800e91a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800e9e0 <__ieee754_acosf+0x1ec>
 800e91e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e922:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e926:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e92a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800e9e4 <__ieee754_acosf+0x1f0>
 800e92e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e932:	e771      	b.n	800e818 <__ieee754_acosf+0x24>
 800e934:	ee39 8a40 	vsub.f32	s16, s18, s0
 800e938:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e93c:	eeb0 0a48 	vmov.f32	s0, s16
 800e940:	f000 fa68 	bl	800ee14 <__ieee754_sqrtf>
 800e944:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800e948:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800e94c:	eeac ca88 	vfma.f32	s24, s25, s16
 800e950:	eeaa aa88 	vfma.f32	s20, s21, s16
 800e954:	eeec ba08 	vfma.f32	s23, s24, s16
 800e958:	ee10 3a10 	vmov	r3, s0
 800e95c:	eeab ba88 	vfma.f32	s22, s23, s16
 800e960:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e964:	f023 030f 	bic.w	r3, r3, #15
 800e968:	eeea 9a08 	vfma.f32	s19, s20, s16
 800e96c:	ee07 3a90 	vmov	s15, r3
 800e970:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800e974:	eeb0 6a48 	vmov.f32	s12, s16
 800e978:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800e97c:	eea9 9a88 	vfma.f32	s18, s19, s16
 800e980:	ee70 6a27 	vadd.f32	s13, s0, s15
 800e984:	ee68 8a88 	vmul.f32	s17, s17, s16
 800e988:	eeb0 7a40 	vmov.f32	s14, s0
 800e98c:	ee86 0a26 	vdiv.f32	s0, s12, s13
 800e990:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800e994:	eea7 0a26 	vfma.f32	s0, s14, s13
 800e998:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e99c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e9a0:	e73a      	b.n	800e818 <__ieee754_acosf+0x24>
 800e9a2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800e9e8 <__ieee754_acosf+0x1f4>
 800e9a6:	e737      	b.n	800e818 <__ieee754_acosf+0x24>
 800e9a8:	00000000 	.word	0x00000000
 800e9ac:	40490fdb 	.word	0x40490fdb
 800e9b0:	3811ef08 	.word	0x3811ef08
 800e9b4:	3a4f7f04 	.word	0x3a4f7f04
 800e9b8:	bf303361 	.word	0xbf303361
 800e9bc:	33a22168 	.word	0x33a22168
 800e9c0:	bd241146 	.word	0xbd241146
 800e9c4:	3e4e0aa8 	.word	0x3e4e0aa8
 800e9c8:	bea6b090 	.word	0xbea6b090
 800e9cc:	3e2aaaab 	.word	0x3e2aaaab
 800e9d0:	3d9dc62e 	.word	0x3d9dc62e
 800e9d4:	4001572d 	.word	0x4001572d
 800e9d8:	c019d139 	.word	0xc019d139
 800e9dc:	3fc90fda 	.word	0x3fc90fda
 800e9e0:	b3a22168 	.word	0xb3a22168
 800e9e4:	40490fda 	.word	0x40490fda
 800e9e8:	3fc90fdb 	.word	0x3fc90fdb

0800e9ec <__ieee754_asinf>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	ee10 5a10 	vmov	r5, s0
 800e9f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e9f6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e9fa:	ed2d 8b04 	vpush	{d8-d9}
 800e9fe:	d10c      	bne.n	800ea1a <__ieee754_asinf+0x2e>
 800ea00:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800eb7c <__ieee754_asinf+0x190>
 800ea04:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800eb80 <__ieee754_asinf+0x194>
 800ea08:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ea0c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ea10:	eeb0 0a67 	vmov.f32	s0, s15
 800ea14:	ecbd 8b04 	vpop	{d8-d9}
 800ea18:	bd38      	pop	{r3, r4, r5, pc}
 800ea1a:	dd04      	ble.n	800ea26 <__ieee754_asinf+0x3a>
 800ea1c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ea20:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ea24:	e7f6      	b.n	800ea14 <__ieee754_asinf+0x28>
 800ea26:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ea2a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ea2e:	da0b      	bge.n	800ea48 <__ieee754_asinf+0x5c>
 800ea30:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ea34:	da52      	bge.n	800eadc <__ieee754_asinf+0xf0>
 800ea36:	eddf 7a53 	vldr	s15, [pc, #332]	; 800eb84 <__ieee754_asinf+0x198>
 800ea3a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ea3e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ea42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea46:	dce5      	bgt.n	800ea14 <__ieee754_asinf+0x28>
 800ea48:	f7fe fe50 	bl	800d6ec <fabsf>
 800ea4c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800ea50:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800ea54:	ee20 8a08 	vmul.f32	s16, s0, s16
 800ea58:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800eb88 <__ieee754_asinf+0x19c>
 800ea5c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800eb8c <__ieee754_asinf+0x1a0>
 800ea60:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800eb90 <__ieee754_asinf+0x1a4>
 800ea64:	eea8 7a27 	vfma.f32	s14, s16, s15
 800ea68:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800eb94 <__ieee754_asinf+0x1a8>
 800ea6c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ea70:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800eb98 <__ieee754_asinf+0x1ac>
 800ea74:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ea78:	eddf 7a48 	vldr	s15, [pc, #288]	; 800eb9c <__ieee754_asinf+0x1b0>
 800ea7c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ea80:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800eba0 <__ieee754_asinf+0x1b4>
 800ea84:	eea7 9a88 	vfma.f32	s18, s15, s16
 800ea88:	eddf 7a46 	vldr	s15, [pc, #280]	; 800eba4 <__ieee754_asinf+0x1b8>
 800ea8c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800ea90:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800eba8 <__ieee754_asinf+0x1bc>
 800ea94:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ea98:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ebac <__ieee754_asinf+0x1c0>
 800ea9c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800eaa0:	eeb0 0a48 	vmov.f32	s0, s16
 800eaa4:	eee7 8a88 	vfma.f32	s17, s15, s16
 800eaa8:	f000 f9b4 	bl	800ee14 <__ieee754_sqrtf>
 800eaac:	4b40      	ldr	r3, [pc, #256]	; (800ebb0 <__ieee754_asinf+0x1c4>)
 800eaae:	ee29 9a08 	vmul.f32	s18, s18, s16
 800eab2:	429c      	cmp	r4, r3
 800eab4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800eab8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800eabc:	dd3d      	ble.n	800eb3a <__ieee754_asinf+0x14e>
 800eabe:	eea0 0a06 	vfma.f32	s0, s0, s12
 800eac2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800ebb4 <__ieee754_asinf+0x1c8>
 800eac6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800eaca:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800eb80 <__ieee754_asinf+0x194>
 800eace:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ead2:	2d00      	cmp	r5, #0
 800ead4:	bfd8      	it	le
 800ead6:	eeb1 0a40 	vnegle.f32	s0, s0
 800eada:	e79b      	b.n	800ea14 <__ieee754_asinf+0x28>
 800eadc:	ee60 7a00 	vmul.f32	s15, s0, s0
 800eae0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800eb88 <__ieee754_asinf+0x19c>
 800eae4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800eb8c <__ieee754_asinf+0x1a0>
 800eae8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800eba0 <__ieee754_asinf+0x1b4>
 800eaec:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800eaf0:	eddf 6a28 	vldr	s13, [pc, #160]	; 800eb94 <__ieee754_asinf+0x1a8>
 800eaf4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800eaf8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800eb98 <__ieee754_asinf+0x1ac>
 800eafc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800eb00:	eddf 6a26 	vldr	s13, [pc, #152]	; 800eb9c <__ieee754_asinf+0x1b0>
 800eb04:	eee7 6a27 	vfma.f32	s13, s14, s15
 800eb08:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800eb90 <__ieee754_asinf+0x1a4>
 800eb0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800eb10:	eddf 6a24 	vldr	s13, [pc, #144]	; 800eba4 <__ieee754_asinf+0x1b8>
 800eb14:	eee7 6a86 	vfma.f32	s13, s15, s12
 800eb18:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800eba8 <__ieee754_asinf+0x1bc>
 800eb1c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800eb20:	eddf 6a22 	vldr	s13, [pc, #136]	; 800ebac <__ieee754_asinf+0x1c0>
 800eb24:	eee6 6a27 	vfma.f32	s13, s12, s15
 800eb28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb2c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800eb30:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800eb34:	eea0 0a27 	vfma.f32	s0, s0, s15
 800eb38:	e76c      	b.n	800ea14 <__ieee754_asinf+0x28>
 800eb3a:	ee10 3a10 	vmov	r3, s0
 800eb3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eb42:	f023 030f 	bic.w	r3, r3, #15
 800eb46:	ee07 3a90 	vmov	s15, r3
 800eb4a:	eef1 6a67 	vneg.f32	s13, s15
 800eb4e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800eb52:	ee70 5a00 	vadd.f32	s11, s0, s0
 800eb56:	ee37 0a80 	vadd.f32	s0, s15, s0
 800eb5a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800eb7c <__ieee754_asinf+0x190>
 800eb5e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800eb62:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ebb8 <__ieee754_asinf+0x1cc>
 800eb66:	eee5 7a47 	vfms.f32	s15, s10, s14
 800eb6a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800eb6e:	eeb0 6a40 	vmov.f32	s12, s0
 800eb72:	eea6 6a87 	vfma.f32	s12, s13, s14
 800eb76:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800eb7a:	e7a8      	b.n	800eace <__ieee754_asinf+0xe2>
 800eb7c:	b33bbd2e 	.word	0xb33bbd2e
 800eb80:	3fc90fdb 	.word	0x3fc90fdb
 800eb84:	7149f2ca 	.word	0x7149f2ca
 800eb88:	3811ef08 	.word	0x3811ef08
 800eb8c:	3a4f7f04 	.word	0x3a4f7f04
 800eb90:	3e2aaaab 	.word	0x3e2aaaab
 800eb94:	bd241146 	.word	0xbd241146
 800eb98:	3e4e0aa8 	.word	0x3e4e0aa8
 800eb9c:	bea6b090 	.word	0xbea6b090
 800eba0:	3d9dc62e 	.word	0x3d9dc62e
 800eba4:	bf303361 	.word	0xbf303361
 800eba8:	4001572d 	.word	0x4001572d
 800ebac:	c019d139 	.word	0xc019d139
 800ebb0:	3f799999 	.word	0x3f799999
 800ebb4:	333bbd2e 	.word	0x333bbd2e
 800ebb8:	3f490fdb 	.word	0x3f490fdb

0800ebbc <__ieee754_rem_pio2f>:
 800ebbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebbe:	ee10 6a10 	vmov	r6, s0
 800ebc2:	4b86      	ldr	r3, [pc, #536]	; (800eddc <__ieee754_rem_pio2f+0x220>)
 800ebc4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800ebc8:	429c      	cmp	r4, r3
 800ebca:	b087      	sub	sp, #28
 800ebcc:	4605      	mov	r5, r0
 800ebce:	dc05      	bgt.n	800ebdc <__ieee754_rem_pio2f+0x20>
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	ed85 0a00 	vstr	s0, [r5]
 800ebd6:	6043      	str	r3, [r0, #4]
 800ebd8:	2000      	movs	r0, #0
 800ebda:	e020      	b.n	800ec1e <__ieee754_rem_pio2f+0x62>
 800ebdc:	4b80      	ldr	r3, [pc, #512]	; (800ede0 <__ieee754_rem_pio2f+0x224>)
 800ebde:	429c      	cmp	r4, r3
 800ebe0:	dc38      	bgt.n	800ec54 <__ieee754_rem_pio2f+0x98>
 800ebe2:	2e00      	cmp	r6, #0
 800ebe4:	f024 040f 	bic.w	r4, r4, #15
 800ebe8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800ede4 <__ieee754_rem_pio2f+0x228>
 800ebec:	4b7e      	ldr	r3, [pc, #504]	; (800ede8 <__ieee754_rem_pio2f+0x22c>)
 800ebee:	dd18      	ble.n	800ec22 <__ieee754_rem_pio2f+0x66>
 800ebf0:	429c      	cmp	r4, r3
 800ebf2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ebf6:	bf09      	itett	eq
 800ebf8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800edec <__ieee754_rem_pio2f+0x230>
 800ebfc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800edf0 <__ieee754_rem_pio2f+0x234>
 800ec00:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ec04:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800edf4 <__ieee754_rem_pio2f+0x238>
 800ec08:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ec0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ec10:	edc0 6a00 	vstr	s13, [r0]
 800ec14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec18:	edc0 7a01 	vstr	s15, [r0, #4]
 800ec1c:	2001      	movs	r0, #1
 800ec1e:	b007      	add	sp, #28
 800ec20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec22:	429c      	cmp	r4, r3
 800ec24:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ec28:	bf09      	itett	eq
 800ec2a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800edec <__ieee754_rem_pio2f+0x230>
 800ec2e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800edf0 <__ieee754_rem_pio2f+0x234>
 800ec32:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ec36:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800edf4 <__ieee754_rem_pio2f+0x238>
 800ec3a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ec3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ec42:	edc0 6a00 	vstr	s13, [r0]
 800ec46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec4a:	edc0 7a01 	vstr	s15, [r0, #4]
 800ec4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec52:	e7e4      	b.n	800ec1e <__ieee754_rem_pio2f+0x62>
 800ec54:	4b68      	ldr	r3, [pc, #416]	; (800edf8 <__ieee754_rem_pio2f+0x23c>)
 800ec56:	429c      	cmp	r4, r3
 800ec58:	dc71      	bgt.n	800ed3e <__ieee754_rem_pio2f+0x182>
 800ec5a:	f7fe fd47 	bl	800d6ec <fabsf>
 800ec5e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800edfc <__ieee754_rem_pio2f+0x240>
 800ec62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ec66:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ec6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec6e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800ec72:	ee17 0a90 	vmov	r0, s15
 800ec76:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ede4 <__ieee754_rem_pio2f+0x228>
 800ec7a:	eeb1 7a46 	vneg.f32	s14, s12
 800ec7e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ec82:	281f      	cmp	r0, #31
 800ec84:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800edf0 <__ieee754_rem_pio2f+0x234>
 800ec88:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ec8c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ec90:	ee16 3a90 	vmov	r3, s13
 800ec94:	dc1c      	bgt.n	800ecd0 <__ieee754_rem_pio2f+0x114>
 800ec96:	1e47      	subs	r7, r0, #1
 800ec98:	4959      	ldr	r1, [pc, #356]	; (800ee00 <__ieee754_rem_pio2f+0x244>)
 800ec9a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ec9e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800eca2:	428a      	cmp	r2, r1
 800eca4:	d014      	beq.n	800ecd0 <__ieee754_rem_pio2f+0x114>
 800eca6:	602b      	str	r3, [r5, #0]
 800eca8:	ed95 7a00 	vldr	s14, [r5]
 800ecac:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ecb0:	2e00      	cmp	r6, #0
 800ecb2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ecb6:	ed85 0a01 	vstr	s0, [r5, #4]
 800ecba:	dab0      	bge.n	800ec1e <__ieee754_rem_pio2f+0x62>
 800ecbc:	eeb1 7a47 	vneg.f32	s14, s14
 800ecc0:	eeb1 0a40 	vneg.f32	s0, s0
 800ecc4:	ed85 7a00 	vstr	s14, [r5]
 800ecc8:	ed85 0a01 	vstr	s0, [r5, #4]
 800eccc:	4240      	negs	r0, r0
 800ecce:	e7a6      	b.n	800ec1e <__ieee754_rem_pio2f+0x62>
 800ecd0:	15e4      	asrs	r4, r4, #23
 800ecd2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ecd6:	1aa2      	subs	r2, r4, r2
 800ecd8:	2a08      	cmp	r2, #8
 800ecda:	dde4      	ble.n	800eca6 <__ieee754_rem_pio2f+0xea>
 800ecdc:	eddf 7a43 	vldr	s15, [pc, #268]	; 800edec <__ieee754_rem_pio2f+0x230>
 800ece0:	eef0 6a40 	vmov.f32	s13, s0
 800ece4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ece8:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ecec:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ecf0:	eddf 7a40 	vldr	s15, [pc, #256]	; 800edf4 <__ieee754_rem_pio2f+0x238>
 800ecf4:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800ecf8:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ecfc:	eef0 7a40 	vmov.f32	s15, s0
 800ed00:	ee15 3a90 	vmov	r3, s11
 800ed04:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ed08:	1aa4      	subs	r4, r4, r2
 800ed0a:	2c19      	cmp	r4, #25
 800ed0c:	dc04      	bgt.n	800ed18 <__ieee754_rem_pio2f+0x15c>
 800ed0e:	edc5 5a00 	vstr	s11, [r5]
 800ed12:	eeb0 0a66 	vmov.f32	s0, s13
 800ed16:	e7c7      	b.n	800eca8 <__ieee754_rem_pio2f+0xec>
 800ed18:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ee04 <__ieee754_rem_pio2f+0x248>
 800ed1c:	eeb0 0a66 	vmov.f32	s0, s13
 800ed20:	eea7 0a25 	vfma.f32	s0, s14, s11
 800ed24:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ed28:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ed2c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ee08 <__ieee754_rem_pio2f+0x24c>
 800ed30:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800ed34:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ed38:	ed85 7a00 	vstr	s14, [r5]
 800ed3c:	e7b4      	b.n	800eca8 <__ieee754_rem_pio2f+0xec>
 800ed3e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ed42:	db06      	blt.n	800ed52 <__ieee754_rem_pio2f+0x196>
 800ed44:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ed48:	edc0 7a01 	vstr	s15, [r0, #4]
 800ed4c:	edc0 7a00 	vstr	s15, [r0]
 800ed50:	e742      	b.n	800ebd8 <__ieee754_rem_pio2f+0x1c>
 800ed52:	15e2      	asrs	r2, r4, #23
 800ed54:	3a86      	subs	r2, #134	; 0x86
 800ed56:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800ed5a:	ee07 3a90 	vmov	s15, r3
 800ed5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ed62:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800ee0c <__ieee754_rem_pio2f+0x250>
 800ed66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ed6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed6e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ed72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ed76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ed7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ed7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed82:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ed86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ed8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ed8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed92:	edcd 7a05 	vstr	s15, [sp, #20]
 800ed96:	d11e      	bne.n	800edd6 <__ieee754_rem_pio2f+0x21a>
 800ed98:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ed9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eda0:	bf0c      	ite	eq
 800eda2:	2301      	moveq	r3, #1
 800eda4:	2302      	movne	r3, #2
 800eda6:	491a      	ldr	r1, [pc, #104]	; (800ee10 <__ieee754_rem_pio2f+0x254>)
 800eda8:	9101      	str	r1, [sp, #4]
 800edaa:	2102      	movs	r1, #2
 800edac:	9100      	str	r1, [sp, #0]
 800edae:	a803      	add	r0, sp, #12
 800edb0:	4629      	mov	r1, r5
 800edb2:	f000 f891 	bl	800eed8 <__kernel_rem_pio2f>
 800edb6:	2e00      	cmp	r6, #0
 800edb8:	f6bf af31 	bge.w	800ec1e <__ieee754_rem_pio2f+0x62>
 800edbc:	edd5 7a00 	vldr	s15, [r5]
 800edc0:	eef1 7a67 	vneg.f32	s15, s15
 800edc4:	edc5 7a00 	vstr	s15, [r5]
 800edc8:	edd5 7a01 	vldr	s15, [r5, #4]
 800edcc:	eef1 7a67 	vneg.f32	s15, s15
 800edd0:	edc5 7a01 	vstr	s15, [r5, #4]
 800edd4:	e77a      	b.n	800eccc <__ieee754_rem_pio2f+0x110>
 800edd6:	2303      	movs	r3, #3
 800edd8:	e7e5      	b.n	800eda6 <__ieee754_rem_pio2f+0x1ea>
 800edda:	bf00      	nop
 800eddc:	3f490fd8 	.word	0x3f490fd8
 800ede0:	4016cbe3 	.word	0x4016cbe3
 800ede4:	3fc90f80 	.word	0x3fc90f80
 800ede8:	3fc90fd0 	.word	0x3fc90fd0
 800edec:	37354400 	.word	0x37354400
 800edf0:	37354443 	.word	0x37354443
 800edf4:	2e85a308 	.word	0x2e85a308
 800edf8:	43490f80 	.word	0x43490f80
 800edfc:	3f22f984 	.word	0x3f22f984
 800ee00:	0800fbf0 	.word	0x0800fbf0
 800ee04:	2e85a300 	.word	0x2e85a300
 800ee08:	248d3132 	.word	0x248d3132
 800ee0c:	43800000 	.word	0x43800000
 800ee10:	0800fc70 	.word	0x0800fc70

0800ee14 <__ieee754_sqrtf>:
 800ee14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ee18:	4770      	bx	lr
	...

0800ee1c <__kernel_cosf>:
 800ee1c:	ee10 3a10 	vmov	r3, s0
 800ee20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee24:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ee28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ee2c:	da05      	bge.n	800ee3a <__kernel_cosf+0x1e>
 800ee2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ee32:	ee17 2a90 	vmov	r2, s15
 800ee36:	2a00      	cmp	r2, #0
 800ee38:	d03b      	beq.n	800eeb2 <__kernel_cosf+0x96>
 800ee3a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800ee3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ee42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800eeb8 <__kernel_cosf+0x9c>
 800ee46:	4a1d      	ldr	r2, [pc, #116]	; (800eebc <__kernel_cosf+0xa0>)
 800ee48:	ee66 7a07 	vmul.f32	s15, s12, s14
 800ee4c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800eec0 <__kernel_cosf+0xa4>
 800ee50:	eea6 7a25 	vfma.f32	s14, s12, s11
 800ee54:	4293      	cmp	r3, r2
 800ee56:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800eec4 <__kernel_cosf+0xa8>
 800ee5a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800ee5e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800eec8 <__kernel_cosf+0xac>
 800ee62:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ee66:	eddf 5a19 	vldr	s11, [pc, #100]	; 800eecc <__kernel_cosf+0xb0>
 800ee6a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800ee6e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800eed0 <__kernel_cosf+0xb4>
 800ee72:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ee76:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800ee7a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ee7e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800ee82:	dc04      	bgt.n	800ee8e <__kernel_cosf+0x72>
 800ee84:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800ee88:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800ee8c:	4770      	bx	lr
 800ee8e:	4a11      	ldr	r2, [pc, #68]	; (800eed4 <__kernel_cosf+0xb8>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	bfda      	itte	le
 800ee94:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800ee98:	ee07 3a10 	vmovle	s14, r3
 800ee9c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800eea0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eea4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800eea8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800eeac:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eeb0:	4770      	bx	lr
 800eeb2:	eeb0 0a66 	vmov.f32	s0, s13
 800eeb6:	4770      	bx	lr
 800eeb8:	ad47d74e 	.word	0xad47d74e
 800eebc:	3e999999 	.word	0x3e999999
 800eec0:	310f74f6 	.word	0x310f74f6
 800eec4:	b493f27c 	.word	0xb493f27c
 800eec8:	37d00d01 	.word	0x37d00d01
 800eecc:	bab60b61 	.word	0xbab60b61
 800eed0:	3d2aaaab 	.word	0x3d2aaaab
 800eed4:	3f480000 	.word	0x3f480000

0800eed8 <__kernel_rem_pio2f>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	ed2d 8b04 	vpush	{d8-d9}
 800eee0:	b0d7      	sub	sp, #348	; 0x15c
 800eee2:	469b      	mov	fp, r3
 800eee4:	460e      	mov	r6, r1
 800eee6:	4bbe      	ldr	r3, [pc, #760]	; (800f1e0 <__kernel_rem_pio2f+0x308>)
 800eee8:	9964      	ldr	r1, [sp, #400]	; 0x190
 800eeea:	9002      	str	r0, [sp, #8]
 800eeec:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800eef0:	9865      	ldr	r0, [sp, #404]	; 0x194
 800eef2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800f1f0 <__kernel_rem_pio2f+0x318>
 800eef6:	1ed1      	subs	r1, r2, #3
 800eef8:	2308      	movs	r3, #8
 800eefa:	fb91 f1f3 	sdiv	r1, r1, r3
 800eefe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800ef02:	f10b 3aff 	add.w	sl, fp, #4294967295
 800ef06:	1c4c      	adds	r4, r1, #1
 800ef08:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800ef0c:	eba1 050a 	sub.w	r5, r1, sl
 800ef10:	aa1a      	add	r2, sp, #104	; 0x68
 800ef12:	eb09 070a 	add.w	r7, r9, sl
 800ef16:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800ef1a:	4696      	mov	lr, r2
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	42bb      	cmp	r3, r7
 800ef20:	dd0f      	ble.n	800ef42 <__kernel_rem_pio2f+0x6a>
 800ef22:	af42      	add	r7, sp, #264	; 0x108
 800ef24:	2200      	movs	r2, #0
 800ef26:	454a      	cmp	r2, r9
 800ef28:	dc27      	bgt.n	800ef7a <__kernel_rem_pio2f+0xa2>
 800ef2a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800ef2e:	eb0b 0302 	add.w	r3, fp, r2
 800ef32:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800ef36:	9d02      	ldr	r5, [sp, #8]
 800ef38:	eddf 7aad 	vldr	s15, [pc, #692]	; 800f1f0 <__kernel_rem_pio2f+0x318>
 800ef3c:	f04f 0c00 	mov.w	ip, #0
 800ef40:	e015      	b.n	800ef6e <__kernel_rem_pio2f+0x96>
 800ef42:	42dd      	cmn	r5, r3
 800ef44:	bf5d      	ittte	pl
 800ef46:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800ef4a:	ee07 2a90 	vmovpl	s15, r2
 800ef4e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ef52:	eef0 7a47 	vmovmi.f32	s15, s14
 800ef56:	ecee 7a01 	vstmia	lr!, {s15}
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	e7df      	b.n	800ef1e <__kernel_rem_pio2f+0x46>
 800ef5e:	ecf5 6a01 	vldmia	r5!, {s13}
 800ef62:	ed33 7a01 	vldmdb	r3!, {s14}
 800ef66:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ef6a:	f10c 0c01 	add.w	ip, ip, #1
 800ef6e:	45d4      	cmp	ip, sl
 800ef70:	ddf5      	ble.n	800ef5e <__kernel_rem_pio2f+0x86>
 800ef72:	ece7 7a01 	vstmia	r7!, {s15}
 800ef76:	3201      	adds	r2, #1
 800ef78:	e7d5      	b.n	800ef26 <__kernel_rem_pio2f+0x4e>
 800ef7a:	ab06      	add	r3, sp, #24
 800ef7c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800ef80:	9304      	str	r3, [sp, #16]
 800ef82:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800f1ec <__kernel_rem_pio2f+0x314>
 800ef86:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800f1e8 <__kernel_rem_pio2f+0x310>
 800ef8a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800ef8e:	9303      	str	r3, [sp, #12]
 800ef90:	464d      	mov	r5, r9
 800ef92:	ab56      	add	r3, sp, #344	; 0x158
 800ef94:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800ef98:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800ef9c:	3f01      	subs	r7, #1
 800ef9e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800efa2:	00bf      	lsls	r7, r7, #2
 800efa4:	ab56      	add	r3, sp, #344	; 0x158
 800efa6:	19da      	adds	r2, r3, r7
 800efa8:	3a4c      	subs	r2, #76	; 0x4c
 800efaa:	2300      	movs	r3, #0
 800efac:	1ae9      	subs	r1, r5, r3
 800efae:	2900      	cmp	r1, #0
 800efb0:	dc4c      	bgt.n	800f04c <__kernel_rem_pio2f+0x174>
 800efb2:	4620      	mov	r0, r4
 800efb4:	f000 fbb4 	bl	800f720 <scalbnf>
 800efb8:	eeb0 8a40 	vmov.f32	s16, s0
 800efbc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800efc0:	ee28 0a00 	vmul.f32	s0, s16, s0
 800efc4:	f000 fb6a 	bl	800f69c <floorf>
 800efc8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800efcc:	eea0 8a67 	vfms.f32	s16, s0, s15
 800efd0:	2c00      	cmp	r4, #0
 800efd2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800efd6:	edcd 7a01 	vstr	s15, [sp, #4]
 800efda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800efde:	ee38 8a67 	vsub.f32	s16, s16, s15
 800efe2:	dd48      	ble.n	800f076 <__kernel_rem_pio2f+0x19e>
 800efe4:	1e69      	subs	r1, r5, #1
 800efe6:	ab06      	add	r3, sp, #24
 800efe8:	f1c4 0008 	rsb	r0, r4, #8
 800efec:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800eff0:	9a01      	ldr	r2, [sp, #4]
 800eff2:	fa4c f300 	asr.w	r3, ip, r0
 800eff6:	441a      	add	r2, r3
 800eff8:	4083      	lsls	r3, r0
 800effa:	9201      	str	r2, [sp, #4]
 800effc:	ebac 0203 	sub.w	r2, ip, r3
 800f000:	ab06      	add	r3, sp, #24
 800f002:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f006:	f1c4 0307 	rsb	r3, r4, #7
 800f00a:	fa42 f803 	asr.w	r8, r2, r3
 800f00e:	f1b8 0f00 	cmp.w	r8, #0
 800f012:	dd41      	ble.n	800f098 <__kernel_rem_pio2f+0x1c0>
 800f014:	9b01      	ldr	r3, [sp, #4]
 800f016:	2000      	movs	r0, #0
 800f018:	3301      	adds	r3, #1
 800f01a:	9301      	str	r3, [sp, #4]
 800f01c:	4601      	mov	r1, r0
 800f01e:	4285      	cmp	r5, r0
 800f020:	dc6d      	bgt.n	800f0fe <__kernel_rem_pio2f+0x226>
 800f022:	2c00      	cmp	r4, #0
 800f024:	dd04      	ble.n	800f030 <__kernel_rem_pio2f+0x158>
 800f026:	2c01      	cmp	r4, #1
 800f028:	d07e      	beq.n	800f128 <__kernel_rem_pio2f+0x250>
 800f02a:	2c02      	cmp	r4, #2
 800f02c:	f000 8086 	beq.w	800f13c <__kernel_rem_pio2f+0x264>
 800f030:	f1b8 0f02 	cmp.w	r8, #2
 800f034:	d130      	bne.n	800f098 <__kernel_rem_pio2f+0x1c0>
 800f036:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f03a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f03e:	b359      	cbz	r1, 800f098 <__kernel_rem_pio2f+0x1c0>
 800f040:	4620      	mov	r0, r4
 800f042:	f000 fb6d 	bl	800f720 <scalbnf>
 800f046:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f04a:	e025      	b.n	800f098 <__kernel_rem_pio2f+0x1c0>
 800f04c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f050:	a806      	add	r0, sp, #24
 800f052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f05a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f05e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f062:	ee10 1a10 	vmov	r1, s0
 800f066:	ed32 0a01 	vldmdb	r2!, {s0}
 800f06a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800f06e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f072:	3301      	adds	r3, #1
 800f074:	e79a      	b.n	800efac <__kernel_rem_pio2f+0xd4>
 800f076:	d106      	bne.n	800f086 <__kernel_rem_pio2f+0x1ae>
 800f078:	1e6b      	subs	r3, r5, #1
 800f07a:	aa06      	add	r2, sp, #24
 800f07c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f080:	ea4f 2822 	mov.w	r8, r2, asr #8
 800f084:	e7c3      	b.n	800f00e <__kernel_rem_pio2f+0x136>
 800f086:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f08a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f092:	da31      	bge.n	800f0f8 <__kernel_rem_pio2f+0x220>
 800f094:	f04f 0800 	mov.w	r8, #0
 800f098:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a0:	f040 80a8 	bne.w	800f1f4 <__kernel_rem_pio2f+0x31c>
 800f0a4:	1e6b      	subs	r3, r5, #1
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	4548      	cmp	r0, r9
 800f0ac:	da4d      	bge.n	800f14a <__kernel_rem_pio2f+0x272>
 800f0ae:	2a00      	cmp	r2, #0
 800f0b0:	f000 8087 	beq.w	800f1c2 <__kernel_rem_pio2f+0x2ea>
 800f0b4:	aa06      	add	r2, sp, #24
 800f0b6:	3c08      	subs	r4, #8
 800f0b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f0bc:	2900      	cmp	r1, #0
 800f0be:	f000 808d 	beq.w	800f1dc <__kernel_rem_pio2f+0x304>
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f0c8:	9302      	str	r3, [sp, #8]
 800f0ca:	f000 fb29 	bl	800f720 <scalbnf>
 800f0ce:	9b02      	ldr	r3, [sp, #8]
 800f0d0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f1ec <__kernel_rem_pio2f+0x314>
 800f0d4:	0099      	lsls	r1, r3, #2
 800f0d6:	aa42      	add	r2, sp, #264	; 0x108
 800f0d8:	1850      	adds	r0, r2, r1
 800f0da:	1d05      	adds	r5, r0, #4
 800f0dc:	461c      	mov	r4, r3
 800f0de:	2c00      	cmp	r4, #0
 800f0e0:	f280 80b8 	bge.w	800f254 <__kernel_rem_pio2f+0x37c>
 800f0e4:	2500      	movs	r5, #0
 800f0e6:	1b5c      	subs	r4, r3, r5
 800f0e8:	2c00      	cmp	r4, #0
 800f0ea:	f2c0 80d8 	blt.w	800f29e <__kernel_rem_pio2f+0x3c6>
 800f0ee:	4f3d      	ldr	r7, [pc, #244]	; (800f1e4 <__kernel_rem_pio2f+0x30c>)
 800f0f0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800f1f0 <__kernel_rem_pio2f+0x318>
 800f0f4:	2400      	movs	r4, #0
 800f0f6:	e0c6      	b.n	800f286 <__kernel_rem_pio2f+0x3ae>
 800f0f8:	f04f 0802 	mov.w	r8, #2
 800f0fc:	e78a      	b.n	800f014 <__kernel_rem_pio2f+0x13c>
 800f0fe:	ab06      	add	r3, sp, #24
 800f100:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f104:	b949      	cbnz	r1, 800f11a <__kernel_rem_pio2f+0x242>
 800f106:	b12b      	cbz	r3, 800f114 <__kernel_rem_pio2f+0x23c>
 800f108:	aa06      	add	r2, sp, #24
 800f10a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f10e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f112:	2301      	movs	r3, #1
 800f114:	3001      	adds	r0, #1
 800f116:	4619      	mov	r1, r3
 800f118:	e781      	b.n	800f01e <__kernel_rem_pio2f+0x146>
 800f11a:	aa06      	add	r2, sp, #24
 800f11c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f120:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f124:	460b      	mov	r3, r1
 800f126:	e7f5      	b.n	800f114 <__kernel_rem_pio2f+0x23c>
 800f128:	1e68      	subs	r0, r5, #1
 800f12a:	ab06      	add	r3, sp, #24
 800f12c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f134:	aa06      	add	r2, sp, #24
 800f136:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f13a:	e779      	b.n	800f030 <__kernel_rem_pio2f+0x158>
 800f13c:	1e68      	subs	r0, r5, #1
 800f13e:	ab06      	add	r3, sp, #24
 800f140:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f148:	e7f4      	b.n	800f134 <__kernel_rem_pio2f+0x25c>
 800f14a:	a906      	add	r1, sp, #24
 800f14c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f150:	3801      	subs	r0, #1
 800f152:	430a      	orrs	r2, r1
 800f154:	e7a9      	b.n	800f0aa <__kernel_rem_pio2f+0x1d2>
 800f156:	f10c 0c01 	add.w	ip, ip, #1
 800f15a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f15e:	2a00      	cmp	r2, #0
 800f160:	d0f9      	beq.n	800f156 <__kernel_rem_pio2f+0x27e>
 800f162:	eb0b 0305 	add.w	r3, fp, r5
 800f166:	aa1a      	add	r2, sp, #104	; 0x68
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	1898      	adds	r0, r3, r2
 800f16c:	3004      	adds	r0, #4
 800f16e:	1c69      	adds	r1, r5, #1
 800f170:	3704      	adds	r7, #4
 800f172:	2200      	movs	r2, #0
 800f174:	4465      	add	r5, ip
 800f176:	9005      	str	r0, [sp, #20]
 800f178:	428d      	cmp	r5, r1
 800f17a:	f6ff af0a 	blt.w	800ef92 <__kernel_rem_pio2f+0xba>
 800f17e:	a81a      	add	r0, sp, #104	; 0x68
 800f180:	eb02 0c03 	add.w	ip, r2, r3
 800f184:	4484      	add	ip, r0
 800f186:	9803      	ldr	r0, [sp, #12]
 800f188:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f18c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800f190:	9001      	str	r0, [sp, #4]
 800f192:	ee07 0a90 	vmov	s15, r0
 800f196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f19a:	9805      	ldr	r0, [sp, #20]
 800f19c:	edcc 7a00 	vstr	s15, [ip]
 800f1a0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800f1f0 <__kernel_rem_pio2f+0x318>
 800f1a4:	eb00 0802 	add.w	r8, r0, r2
 800f1a8:	f04f 0c00 	mov.w	ip, #0
 800f1ac:	45d4      	cmp	ip, sl
 800f1ae:	dd0c      	ble.n	800f1ca <__kernel_rem_pio2f+0x2f2>
 800f1b0:	eb02 0c07 	add.w	ip, r2, r7
 800f1b4:	a842      	add	r0, sp, #264	; 0x108
 800f1b6:	4484      	add	ip, r0
 800f1b8:	edcc 7a01 	vstr	s15, [ip, #4]
 800f1bc:	3101      	adds	r1, #1
 800f1be:	3204      	adds	r2, #4
 800f1c0:	e7da      	b.n	800f178 <__kernel_rem_pio2f+0x2a0>
 800f1c2:	9b04      	ldr	r3, [sp, #16]
 800f1c4:	f04f 0c01 	mov.w	ip, #1
 800f1c8:	e7c7      	b.n	800f15a <__kernel_rem_pio2f+0x282>
 800f1ca:	ecfe 6a01 	vldmia	lr!, {s13}
 800f1ce:	ed38 7a01 	vldmdb	r8!, {s14}
 800f1d2:	f10c 0c01 	add.w	ip, ip, #1
 800f1d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f1da:	e7e7      	b.n	800f1ac <__kernel_rem_pio2f+0x2d4>
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	e769      	b.n	800f0b4 <__kernel_rem_pio2f+0x1dc>
 800f1e0:	0800ffb4 	.word	0x0800ffb4
 800f1e4:	0800ff88 	.word	0x0800ff88
 800f1e8:	43800000 	.word	0x43800000
 800f1ec:	3b800000 	.word	0x3b800000
 800f1f0:	00000000 	.word	0x00000000
 800f1f4:	4260      	negs	r0, r4
 800f1f6:	eeb0 0a48 	vmov.f32	s0, s16
 800f1fa:	f000 fa91 	bl	800f720 <scalbnf>
 800f1fe:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800f1e8 <__kernel_rem_pio2f+0x310>
 800f202:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20a:	db1a      	blt.n	800f242 <__kernel_rem_pio2f+0x36a>
 800f20c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f1ec <__kernel_rem_pio2f+0x314>
 800f210:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f214:	aa06      	add	r2, sp, #24
 800f216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f21a:	a906      	add	r1, sp, #24
 800f21c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f220:	3408      	adds	r4, #8
 800f222:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f22a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f22e:	ee10 3a10 	vmov	r3, s0
 800f232:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f236:	1c6b      	adds	r3, r5, #1
 800f238:	ee17 2a90 	vmov	r2, s15
 800f23c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f240:	e73f      	b.n	800f0c2 <__kernel_rem_pio2f+0x1ea>
 800f242:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f246:	aa06      	add	r2, sp, #24
 800f248:	ee10 3a10 	vmov	r3, s0
 800f24c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f250:	462b      	mov	r3, r5
 800f252:	e736      	b.n	800f0c2 <__kernel_rem_pio2f+0x1ea>
 800f254:	aa06      	add	r2, sp, #24
 800f256:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f25a:	9202      	str	r2, [sp, #8]
 800f25c:	ee07 2a90 	vmov	s15, r2
 800f260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f264:	3c01      	subs	r4, #1
 800f266:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f26a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f26e:	ed65 7a01 	vstmdb	r5!, {s15}
 800f272:	e734      	b.n	800f0de <__kernel_rem_pio2f+0x206>
 800f274:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800f278:	ecf7 6a01 	vldmia	r7!, {s13}
 800f27c:	ed9c 7a00 	vldr	s14, [ip]
 800f280:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f284:	3401      	adds	r4, #1
 800f286:	454c      	cmp	r4, r9
 800f288:	dc01      	bgt.n	800f28e <__kernel_rem_pio2f+0x3b6>
 800f28a:	42a5      	cmp	r5, r4
 800f28c:	daf2      	bge.n	800f274 <__kernel_rem_pio2f+0x39c>
 800f28e:	aa56      	add	r2, sp, #344	; 0x158
 800f290:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800f294:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800f298:	3501      	adds	r5, #1
 800f29a:	3804      	subs	r0, #4
 800f29c:	e723      	b.n	800f0e6 <__kernel_rem_pio2f+0x20e>
 800f29e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f2a0:	2a03      	cmp	r2, #3
 800f2a2:	d84d      	bhi.n	800f340 <__kernel_rem_pio2f+0x468>
 800f2a4:	e8df f002 	tbb	[pc, r2]
 800f2a8:	021f1f3e 	.word	0x021f1f3e
 800f2ac:	aa56      	add	r2, sp, #344	; 0x158
 800f2ae:	4411      	add	r1, r2
 800f2b0:	399c      	subs	r1, #156	; 0x9c
 800f2b2:	4608      	mov	r0, r1
 800f2b4:	461c      	mov	r4, r3
 800f2b6:	2c00      	cmp	r4, #0
 800f2b8:	dc5f      	bgt.n	800f37a <__kernel_rem_pio2f+0x4a2>
 800f2ba:	4608      	mov	r0, r1
 800f2bc:	461c      	mov	r4, r3
 800f2be:	2c01      	cmp	r4, #1
 800f2c0:	dc6b      	bgt.n	800f39a <__kernel_rem_pio2f+0x4c2>
 800f2c2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800f1f0 <__kernel_rem_pio2f+0x318>
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	dc77      	bgt.n	800f3ba <__kernel_rem_pio2f+0x4e2>
 800f2ca:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800f2ce:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800f2d2:	f1b8 0f00 	cmp.w	r8, #0
 800f2d6:	d176      	bne.n	800f3c6 <__kernel_rem_pio2f+0x4ee>
 800f2d8:	edc6 6a00 	vstr	s13, [r6]
 800f2dc:	ed86 7a01 	vstr	s14, [r6, #4]
 800f2e0:	edc6 7a02 	vstr	s15, [r6, #8]
 800f2e4:	e02c      	b.n	800f340 <__kernel_rem_pio2f+0x468>
 800f2e6:	aa56      	add	r2, sp, #344	; 0x158
 800f2e8:	4411      	add	r1, r2
 800f2ea:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800f1f0 <__kernel_rem_pio2f+0x318>
 800f2ee:	399c      	subs	r1, #156	; 0x9c
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	da32      	bge.n	800f35c <__kernel_rem_pio2f+0x484>
 800f2f6:	f1b8 0f00 	cmp.w	r8, #0
 800f2fa:	d035      	beq.n	800f368 <__kernel_rem_pio2f+0x490>
 800f2fc:	eef1 7a47 	vneg.f32	s15, s14
 800f300:	edc6 7a00 	vstr	s15, [r6]
 800f304:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800f308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f30c:	a82f      	add	r0, sp, #188	; 0xbc
 800f30e:	2101      	movs	r1, #1
 800f310:	428b      	cmp	r3, r1
 800f312:	da2c      	bge.n	800f36e <__kernel_rem_pio2f+0x496>
 800f314:	f1b8 0f00 	cmp.w	r8, #0
 800f318:	d001      	beq.n	800f31e <__kernel_rem_pio2f+0x446>
 800f31a:	eef1 7a67 	vneg.f32	s15, s15
 800f31e:	edc6 7a01 	vstr	s15, [r6, #4]
 800f322:	e00d      	b.n	800f340 <__kernel_rem_pio2f+0x468>
 800f324:	aa56      	add	r2, sp, #344	; 0x158
 800f326:	4411      	add	r1, r2
 800f328:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800f1f0 <__kernel_rem_pio2f+0x318>
 800f32c:	399c      	subs	r1, #156	; 0x9c
 800f32e:	2b00      	cmp	r3, #0
 800f330:	da0e      	bge.n	800f350 <__kernel_rem_pio2f+0x478>
 800f332:	f1b8 0f00 	cmp.w	r8, #0
 800f336:	d001      	beq.n	800f33c <__kernel_rem_pio2f+0x464>
 800f338:	eef1 7a67 	vneg.f32	s15, s15
 800f33c:	edc6 7a00 	vstr	s15, [r6]
 800f340:	9b01      	ldr	r3, [sp, #4]
 800f342:	f003 0007 	and.w	r0, r3, #7
 800f346:	b057      	add	sp, #348	; 0x15c
 800f348:	ecbd 8b04 	vpop	{d8-d9}
 800f34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f350:	ed31 7a01 	vldmdb	r1!, {s14}
 800f354:	3b01      	subs	r3, #1
 800f356:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f35a:	e7e8      	b.n	800f32e <__kernel_rem_pio2f+0x456>
 800f35c:	ed71 7a01 	vldmdb	r1!, {s15}
 800f360:	3801      	subs	r0, #1
 800f362:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f366:	e7c4      	b.n	800f2f2 <__kernel_rem_pio2f+0x41a>
 800f368:	eef0 7a47 	vmov.f32	s15, s14
 800f36c:	e7c8      	b.n	800f300 <__kernel_rem_pio2f+0x428>
 800f36e:	ecb0 7a01 	vldmia	r0!, {s14}
 800f372:	3101      	adds	r1, #1
 800f374:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f378:	e7ca      	b.n	800f310 <__kernel_rem_pio2f+0x438>
 800f37a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f37e:	ed70 6a01 	vldmdb	r0!, {s13}
 800f382:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f386:	3c01      	subs	r4, #1
 800f388:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f38c:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f394:	edc0 7a00 	vstr	s15, [r0]
 800f398:	e78d      	b.n	800f2b6 <__kernel_rem_pio2f+0x3de>
 800f39a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f39e:	ed70 6a01 	vldmdb	r0!, {s13}
 800f3a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f3a6:	3c01      	subs	r4, #1
 800f3a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3ac:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f3b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3b4:	edc0 7a00 	vstr	s15, [r0]
 800f3b8:	e781      	b.n	800f2be <__kernel_rem_pio2f+0x3e6>
 800f3ba:	ed31 7a01 	vldmdb	r1!, {s14}
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3c4:	e77f      	b.n	800f2c6 <__kernel_rem_pio2f+0x3ee>
 800f3c6:	eef1 6a66 	vneg.f32	s13, s13
 800f3ca:	eeb1 7a47 	vneg.f32	s14, s14
 800f3ce:	edc6 6a00 	vstr	s13, [r6]
 800f3d2:	ed86 7a01 	vstr	s14, [r6, #4]
 800f3d6:	eef1 7a67 	vneg.f32	s15, s15
 800f3da:	e781      	b.n	800f2e0 <__kernel_rem_pio2f+0x408>

0800f3dc <__kernel_sinf>:
 800f3dc:	ee10 3a10 	vmov	r3, s0
 800f3e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f3e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f3e8:	da04      	bge.n	800f3f4 <__kernel_sinf+0x18>
 800f3ea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f3ee:	ee17 3a90 	vmov	r3, s15
 800f3f2:	b35b      	cbz	r3, 800f44c <__kernel_sinf+0x70>
 800f3f4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f3f8:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f450 <__kernel_sinf+0x74>
 800f3fc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800f454 <__kernel_sinf+0x78>
 800f400:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f404:	eddf 7a14 	vldr	s15, [pc, #80]	; 800f458 <__kernel_sinf+0x7c>
 800f408:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f40c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800f45c <__kernel_sinf+0x80>
 800f410:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f414:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f460 <__kernel_sinf+0x84>
 800f418:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f41c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f420:	b930      	cbnz	r0, 800f430 <__kernel_sinf+0x54>
 800f422:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800f464 <__kernel_sinf+0x88>
 800f426:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f42a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f42e:	4770      	bx	lr
 800f430:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f434:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f438:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f43c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f440:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f468 <__kernel_sinf+0x8c>
 800f444:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f448:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop
 800f450:	2f2ec9d3 	.word	0x2f2ec9d3
 800f454:	b2d72f34 	.word	0xb2d72f34
 800f458:	3638ef1b 	.word	0x3638ef1b
 800f45c:	b9500d01 	.word	0xb9500d01
 800f460:	3c088889 	.word	0x3c088889
 800f464:	be2aaaab 	.word	0xbe2aaaab
 800f468:	3e2aaaab 	.word	0x3e2aaaab

0800f46c <fabs>:
 800f46c:	ec51 0b10 	vmov	r0, r1, d0
 800f470:	ee10 2a10 	vmov	r2, s0
 800f474:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f478:	ec43 2b10 	vmov	d0, r2, r3
 800f47c:	4770      	bx	lr

0800f47e <finite>:
 800f47e:	ee10 3a90 	vmov	r3, s1
 800f482:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800f486:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f48a:	0fc0      	lsrs	r0, r0, #31
 800f48c:	4770      	bx	lr

0800f48e <matherr>:
 800f48e:	2000      	movs	r0, #0
 800f490:	4770      	bx	lr
 800f492:	0000      	movs	r0, r0
 800f494:	0000      	movs	r0, r0
	...

0800f498 <nan>:
 800f498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f4a0 <nan+0x8>
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	00000000 	.word	0x00000000
 800f4a4:	7ff80000 	.word	0x7ff80000

0800f4a8 <rint>:
 800f4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4aa:	ec51 0b10 	vmov	r0, r1, d0
 800f4ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4b2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800f4b6:	2e13      	cmp	r6, #19
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	ee10 4a10 	vmov	r4, s0
 800f4be:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800f4c2:	dc56      	bgt.n	800f572 <rint+0xca>
 800f4c4:	2e00      	cmp	r6, #0
 800f4c6:	da2b      	bge.n	800f520 <rint+0x78>
 800f4c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f4cc:	4302      	orrs	r2, r0
 800f4ce:	d023      	beq.n	800f518 <rint+0x70>
 800f4d0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800f4d4:	4302      	orrs	r2, r0
 800f4d6:	4254      	negs	r4, r2
 800f4d8:	4314      	orrs	r4, r2
 800f4da:	0c4b      	lsrs	r3, r1, #17
 800f4dc:	0b24      	lsrs	r4, r4, #12
 800f4de:	045b      	lsls	r3, r3, #17
 800f4e0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800f4e4:	ea44 0103 	orr.w	r1, r4, r3
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	492f      	ldr	r1, [pc, #188]	; (800f5a8 <rint+0x100>)
 800f4ec:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800f4f0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	4639      	mov	r1, r7
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	f7f0 fecf 	bl	800029c <__adddf3>
 800f4fe:	e9cd 0100 	strd	r0, r1, [sp]
 800f502:	463b      	mov	r3, r7
 800f504:	4632      	mov	r2, r6
 800f506:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f50a:	f7f0 fec5 	bl	8000298 <__aeabi_dsub>
 800f50e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f512:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800f516:	4639      	mov	r1, r7
 800f518:	ec41 0b10 	vmov	d0, r0, r1
 800f51c:	b003      	add	sp, #12
 800f51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f520:	4a22      	ldr	r2, [pc, #136]	; (800f5ac <rint+0x104>)
 800f522:	4132      	asrs	r2, r6
 800f524:	ea01 0702 	and.w	r7, r1, r2
 800f528:	4307      	orrs	r7, r0
 800f52a:	d0f5      	beq.n	800f518 <rint+0x70>
 800f52c:	0852      	lsrs	r2, r2, #1
 800f52e:	4011      	ands	r1, r2
 800f530:	430c      	orrs	r4, r1
 800f532:	d00b      	beq.n	800f54c <rint+0xa4>
 800f534:	ea23 0202 	bic.w	r2, r3, r2
 800f538:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f53c:	2e13      	cmp	r6, #19
 800f53e:	fa43 f306 	asr.w	r3, r3, r6
 800f542:	bf0c      	ite	eq
 800f544:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800f548:	2400      	movne	r4, #0
 800f54a:	4313      	orrs	r3, r2
 800f54c:	4916      	ldr	r1, [pc, #88]	; (800f5a8 <rint+0x100>)
 800f54e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800f552:	4622      	mov	r2, r4
 800f554:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f558:	4620      	mov	r0, r4
 800f55a:	4629      	mov	r1, r5
 800f55c:	f7f0 fe9e 	bl	800029c <__adddf3>
 800f560:	e9cd 0100 	strd	r0, r1, [sp]
 800f564:	4622      	mov	r2, r4
 800f566:	462b      	mov	r3, r5
 800f568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f56c:	f7f0 fe94 	bl	8000298 <__aeabi_dsub>
 800f570:	e7d2      	b.n	800f518 <rint+0x70>
 800f572:	2e33      	cmp	r6, #51	; 0x33
 800f574:	dd07      	ble.n	800f586 <rint+0xde>
 800f576:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f57a:	d1cd      	bne.n	800f518 <rint+0x70>
 800f57c:	ee10 2a10 	vmov	r2, s0
 800f580:	f7f0 fe8c 	bl	800029c <__adddf3>
 800f584:	e7c8      	b.n	800f518 <rint+0x70>
 800f586:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800f58a:	f04f 32ff 	mov.w	r2, #4294967295
 800f58e:	40f2      	lsrs	r2, r6
 800f590:	4210      	tst	r0, r2
 800f592:	d0c1      	beq.n	800f518 <rint+0x70>
 800f594:	0852      	lsrs	r2, r2, #1
 800f596:	4210      	tst	r0, r2
 800f598:	bf1f      	itttt	ne
 800f59a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800f59e:	ea20 0202 	bicne.w	r2, r0, r2
 800f5a2:	4134      	asrne	r4, r6
 800f5a4:	4314      	orrne	r4, r2
 800f5a6:	e7d1      	b.n	800f54c <rint+0xa4>
 800f5a8:	0800ffc0 	.word	0x0800ffc0
 800f5ac:	000fffff 	.word	0x000fffff

0800f5b0 <scalbn>:
 800f5b0:	b570      	push	{r4, r5, r6, lr}
 800f5b2:	ec55 4b10 	vmov	r4, r5, d0
 800f5b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f5ba:	4606      	mov	r6, r0
 800f5bc:	462b      	mov	r3, r5
 800f5be:	b9aa      	cbnz	r2, 800f5ec <scalbn+0x3c>
 800f5c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f5c4:	4323      	orrs	r3, r4
 800f5c6:	d03b      	beq.n	800f640 <scalbn+0x90>
 800f5c8:	4b31      	ldr	r3, [pc, #196]	; (800f690 <scalbn+0xe0>)
 800f5ca:	4629      	mov	r1, r5
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	ee10 0a10 	vmov	r0, s0
 800f5d2:	f7f1 f819 	bl	8000608 <__aeabi_dmul>
 800f5d6:	4b2f      	ldr	r3, [pc, #188]	; (800f694 <scalbn+0xe4>)
 800f5d8:	429e      	cmp	r6, r3
 800f5da:	4604      	mov	r4, r0
 800f5dc:	460d      	mov	r5, r1
 800f5de:	da12      	bge.n	800f606 <scalbn+0x56>
 800f5e0:	a327      	add	r3, pc, #156	; (adr r3, 800f680 <scalbn+0xd0>)
 800f5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e6:	f7f1 f80f 	bl	8000608 <__aeabi_dmul>
 800f5ea:	e009      	b.n	800f600 <scalbn+0x50>
 800f5ec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f5f0:	428a      	cmp	r2, r1
 800f5f2:	d10c      	bne.n	800f60e <scalbn+0x5e>
 800f5f4:	ee10 2a10 	vmov	r2, s0
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	4629      	mov	r1, r5
 800f5fc:	f7f0 fe4e 	bl	800029c <__adddf3>
 800f600:	4604      	mov	r4, r0
 800f602:	460d      	mov	r5, r1
 800f604:	e01c      	b.n	800f640 <scalbn+0x90>
 800f606:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f60a:	460b      	mov	r3, r1
 800f60c:	3a36      	subs	r2, #54	; 0x36
 800f60e:	4432      	add	r2, r6
 800f610:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f614:	428a      	cmp	r2, r1
 800f616:	dd0b      	ble.n	800f630 <scalbn+0x80>
 800f618:	ec45 4b11 	vmov	d1, r4, r5
 800f61c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800f688 <scalbn+0xd8>
 800f620:	f000 f8de 	bl	800f7e0 <copysign>
 800f624:	a318      	add	r3, pc, #96	; (adr r3, 800f688 <scalbn+0xd8>)
 800f626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62a:	ec51 0b10 	vmov	r0, r1, d0
 800f62e:	e7da      	b.n	800f5e6 <scalbn+0x36>
 800f630:	2a00      	cmp	r2, #0
 800f632:	dd08      	ble.n	800f646 <scalbn+0x96>
 800f634:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f638:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f63c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f640:	ec45 4b10 	vmov	d0, r4, r5
 800f644:	bd70      	pop	{r4, r5, r6, pc}
 800f646:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f64a:	da0d      	bge.n	800f668 <scalbn+0xb8>
 800f64c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f650:	429e      	cmp	r6, r3
 800f652:	ec45 4b11 	vmov	d1, r4, r5
 800f656:	dce1      	bgt.n	800f61c <scalbn+0x6c>
 800f658:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800f680 <scalbn+0xd0>
 800f65c:	f000 f8c0 	bl	800f7e0 <copysign>
 800f660:	a307      	add	r3, pc, #28	; (adr r3, 800f680 <scalbn+0xd0>)
 800f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f666:	e7e0      	b.n	800f62a <scalbn+0x7a>
 800f668:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f66c:	3236      	adds	r2, #54	; 0x36
 800f66e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f672:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f676:	4620      	mov	r0, r4
 800f678:	4629      	mov	r1, r5
 800f67a:	2200      	movs	r2, #0
 800f67c:	4b06      	ldr	r3, [pc, #24]	; (800f698 <scalbn+0xe8>)
 800f67e:	e7b2      	b.n	800f5e6 <scalbn+0x36>
 800f680:	c2f8f359 	.word	0xc2f8f359
 800f684:	01a56e1f 	.word	0x01a56e1f
 800f688:	8800759c 	.word	0x8800759c
 800f68c:	7e37e43c 	.word	0x7e37e43c
 800f690:	43500000 	.word	0x43500000
 800f694:	ffff3cb0 	.word	0xffff3cb0
 800f698:	3c900000 	.word	0x3c900000

0800f69c <floorf>:
 800f69c:	ee10 3a10 	vmov	r3, s0
 800f6a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f6a4:	0dca      	lsrs	r2, r1, #23
 800f6a6:	3a7f      	subs	r2, #127	; 0x7f
 800f6a8:	2a16      	cmp	r2, #22
 800f6aa:	dc2a      	bgt.n	800f702 <floorf+0x66>
 800f6ac:	2a00      	cmp	r2, #0
 800f6ae:	da11      	bge.n	800f6d4 <floorf+0x38>
 800f6b0:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f714 <floorf+0x78>
 800f6b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f6b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c0:	dd05      	ble.n	800f6ce <floorf+0x32>
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	da23      	bge.n	800f70e <floorf+0x72>
 800f6c6:	4a14      	ldr	r2, [pc, #80]	; (800f718 <floorf+0x7c>)
 800f6c8:	2900      	cmp	r1, #0
 800f6ca:	bf18      	it	ne
 800f6cc:	4613      	movne	r3, r2
 800f6ce:	ee00 3a10 	vmov	s0, r3
 800f6d2:	4770      	bx	lr
 800f6d4:	4911      	ldr	r1, [pc, #68]	; (800f71c <floorf+0x80>)
 800f6d6:	4111      	asrs	r1, r2
 800f6d8:	420b      	tst	r3, r1
 800f6da:	d0fa      	beq.n	800f6d2 <floorf+0x36>
 800f6dc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f714 <floorf+0x78>
 800f6e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f6e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ec:	ddef      	ble.n	800f6ce <floorf+0x32>
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	bfbe      	ittt	lt
 800f6f2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f6f6:	fa40 f202 	asrlt.w	r2, r0, r2
 800f6fa:	189b      	addlt	r3, r3, r2
 800f6fc:	ea23 0301 	bic.w	r3, r3, r1
 800f700:	e7e5      	b.n	800f6ce <floorf+0x32>
 800f702:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f706:	d3e4      	bcc.n	800f6d2 <floorf+0x36>
 800f708:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f70c:	4770      	bx	lr
 800f70e:	2300      	movs	r3, #0
 800f710:	e7dd      	b.n	800f6ce <floorf+0x32>
 800f712:	bf00      	nop
 800f714:	7149f2ca 	.word	0x7149f2ca
 800f718:	bf800000 	.word	0xbf800000
 800f71c:	007fffff 	.word	0x007fffff

0800f720 <scalbnf>:
 800f720:	b508      	push	{r3, lr}
 800f722:	ee10 2a10 	vmov	r2, s0
 800f726:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f72a:	ed2d 8b02 	vpush	{d8}
 800f72e:	eef0 0a40 	vmov.f32	s1, s0
 800f732:	d004      	beq.n	800f73e <scalbnf+0x1e>
 800f734:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f738:	d306      	bcc.n	800f748 <scalbnf+0x28>
 800f73a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800f73e:	ecbd 8b02 	vpop	{d8}
 800f742:	eeb0 0a60 	vmov.f32	s0, s1
 800f746:	bd08      	pop	{r3, pc}
 800f748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f74c:	d21c      	bcs.n	800f788 <scalbnf+0x68>
 800f74e:	4b1f      	ldr	r3, [pc, #124]	; (800f7cc <scalbnf+0xac>)
 800f750:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f7d0 <scalbnf+0xb0>
 800f754:	4298      	cmp	r0, r3
 800f756:	ee60 0a27 	vmul.f32	s1, s0, s15
 800f75a:	db10      	blt.n	800f77e <scalbnf+0x5e>
 800f75c:	ee10 2a90 	vmov	r2, s1
 800f760:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800f764:	3b19      	subs	r3, #25
 800f766:	4403      	add	r3, r0
 800f768:	2bfe      	cmp	r3, #254	; 0xfe
 800f76a:	dd0f      	ble.n	800f78c <scalbnf+0x6c>
 800f76c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800f7d4 <scalbnf+0xb4>
 800f770:	eeb0 0a48 	vmov.f32	s0, s16
 800f774:	f000 f843 	bl	800f7fe <copysignf>
 800f778:	ee60 0a08 	vmul.f32	s1, s0, s16
 800f77c:	e7df      	b.n	800f73e <scalbnf+0x1e>
 800f77e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800f7d8 <scalbnf+0xb8>
 800f782:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f786:	e7da      	b.n	800f73e <scalbnf+0x1e>
 800f788:	0ddb      	lsrs	r3, r3, #23
 800f78a:	e7ec      	b.n	800f766 <scalbnf+0x46>
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	dd06      	ble.n	800f79e <scalbnf+0x7e>
 800f790:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f794:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f798:	ee00 3a90 	vmov	s1, r3
 800f79c:	e7cf      	b.n	800f73e <scalbnf+0x1e>
 800f79e:	f113 0f16 	cmn.w	r3, #22
 800f7a2:	da06      	bge.n	800f7b2 <scalbnf+0x92>
 800f7a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f7a8:	4298      	cmp	r0, r3
 800f7aa:	dcdf      	bgt.n	800f76c <scalbnf+0x4c>
 800f7ac:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800f7d8 <scalbnf+0xb8>
 800f7b0:	e7de      	b.n	800f770 <scalbnf+0x50>
 800f7b2:	3319      	adds	r3, #25
 800f7b4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f7b8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f7bc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f7dc <scalbnf+0xbc>
 800f7c0:	ee07 3a10 	vmov	s14, r3
 800f7c4:	ee67 0a27 	vmul.f32	s1, s14, s15
 800f7c8:	e7b9      	b.n	800f73e <scalbnf+0x1e>
 800f7ca:	bf00      	nop
 800f7cc:	ffff3cb0 	.word	0xffff3cb0
 800f7d0:	4c000000 	.word	0x4c000000
 800f7d4:	7149f2ca 	.word	0x7149f2ca
 800f7d8:	0da24260 	.word	0x0da24260
 800f7dc:	33000000 	.word	0x33000000

0800f7e0 <copysign>:
 800f7e0:	ec51 0b10 	vmov	r0, r1, d0
 800f7e4:	ee11 0a90 	vmov	r0, s3
 800f7e8:	ee10 2a10 	vmov	r2, s0
 800f7ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f7f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f7f4:	ea41 0300 	orr.w	r3, r1, r0
 800f7f8:	ec43 2b10 	vmov	d0, r2, r3
 800f7fc:	4770      	bx	lr

0800f7fe <copysignf>:
 800f7fe:	ee10 3a10 	vmov	r3, s0
 800f802:	ee10 2a90 	vmov	r2, s1
 800f806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f80a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f80e:	4313      	orrs	r3, r2
 800f810:	ee00 3a10 	vmov	s0, r3
 800f814:	4770      	bx	lr
	...

0800f818 <_init>:
 800f818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f81a:	bf00      	nop
 800f81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f81e:	bc08      	pop	{r3}
 800f820:	469e      	mov	lr, r3
 800f822:	4770      	bx	lr

0800f824 <_fini>:
 800f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f826:	bf00      	nop
 800f828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f82a:	bc08      	pop	{r3}
 800f82c:	469e      	mov	lr, r3
 800f82e:	4770      	bx	lr
