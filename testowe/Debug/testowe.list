
testowe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800a990  0800a990  0001a990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf0  0800acf0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acf8  0800acf8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf8  0800acf8  0001acf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acfc  0800acfc  0001acfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800ad00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200001dc  0800aedc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800aedc  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113a8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002635  00000000  00000000  000315b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001010  00000000  00000000  00033bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  00034c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018649  00000000  00000000  00035b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d329  00000000  00000000  0004e149  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009126d  00000000  00000000  0005b472  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec6df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005634  00000000  00000000  000ec75c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a974 	.word	0x0800a974

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800a974 	.word	0x0800a974

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f92b 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f004 fbf0 	bl	80057b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f943 	bl	8001286 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f90b 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000004 	.word	0x20000004
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000004 	.word	0x20000004
 8001060:	20000208 	.word	0x20000208

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000208 	.word	0x20000208

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff feda 	bl	8001064 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e099      	b.n	80013f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0201 	bic.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012dc:	e00f      	b.n	80012fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012de:	f7ff fec1 	bl	8001064 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b05      	cmp	r3, #5
 80012ea:	d908      	bls.n	80012fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2203      	movs	r2, #3
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e078      	b.n	80013f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e8      	bne.n	80012de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <HAL_DMA_Init+0x158>)
 8001318:	4013      	ands	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800132a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	2b04      	cmp	r3, #4
 8001356:	d107      	bne.n	8001368 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4313      	orrs	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f023 0307 	bic.w	r3, r3, #7
 800137e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4313      	orrs	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	2b04      	cmp	r3, #4
 8001390:	d117      	bne.n	80013c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fa91 	bl	80018cc <DMA_CheckFifoParam>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2240      	movs	r2, #64	; 0x40
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013be:	2301      	movs	r3, #1
 80013c0:	e016      	b.n	80013f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fa48 	bl	8001860 <DMA_CalcBaseAndBitshift>
 80013d0:	4603      	mov	r3, r0
 80013d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	223f      	movs	r2, #63	; 0x3f
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	f010803f 	.word	0xf010803f

080013fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
 8001408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800141a:	2b01      	cmp	r3, #1
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Start_IT+0x26>
 800141e:	2302      	movs	r3, #2
 8001420:	e040      	b.n	80014a4 <HAL_DMA_Start_IT+0xa8>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b01      	cmp	r3, #1
 8001434:	d12f      	bne.n	8001496 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2202      	movs	r2, #2
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f9da 	bl	8001804 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	223f      	movs	r2, #63	; 0x3f
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0216 	orr.w	r2, r2, #22
 800146a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d007      	beq.n	8001484 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0208 	orr.w	r2, r2, #8
 8001482:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e005      	b.n	80014a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800149e:	2302      	movs	r3, #2
 80014a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d004      	beq.n	80014ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00c      	b.n	80014e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2205      	movs	r2, #5
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_DMA_IRQHandler+0x258>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a92      	ldr	r2, [pc, #584]	; (800174c <HAL_DMA_IRQHandler+0x25c>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0a9b      	lsrs	r3, r3, #10
 8001508:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	2208      	movs	r2, #8
 800151c:	409a      	lsls	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01a      	beq.n	800155c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0204 	bic.w	r2, r2, #4
 8001542:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	2208      	movs	r2, #8
 800154a:	409a      	lsls	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001560:	2201      	movs	r2, #1
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d012      	beq.n	8001592 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00b      	beq.n	8001592 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2201      	movs	r2, #1
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	f043 0202 	orr.w	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001596:	2204      	movs	r2, #4
 8001598:	409a      	lsls	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d012      	beq.n	80015c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2204      	movs	r2, #4
 80015b6:	409a      	lsls	r2, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	f043 0204 	orr.w	r2, r3, #4
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2210      	movs	r2, #16
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d043      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d03c      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ea:	2210      	movs	r2, #16
 80015ec:	409a      	lsls	r2, r3
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d018      	beq.n	8001632 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	d024      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
 800161e:	e01f      	b.n	8001660 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01b      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
 8001630:	e016      	b.n	8001660 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d107      	bne.n	8001650 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0208 	bic.w	r2, r2, #8
 800164e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001664:	2220      	movs	r2, #32
 8001666:	409a      	lsls	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 808e 	beq.w	800178e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8086 	beq.w	800178e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	2220      	movs	r2, #32
 8001688:	409a      	lsls	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b05      	cmp	r3, #5
 8001698:	d136      	bne.n	8001708 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0216 	bic.w	r2, r2, #22
 80016a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <HAL_DMA_IRQHandler+0x1da>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0208 	bic.w	r2, r2, #8
 80016d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	223f      	movs	r2, #63	; 0x3f
 80016e0:	409a      	lsls	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d07d      	beq.n	80017fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
        }
        return;
 8001706:	e078      	b.n	80017fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01c      	beq.n	8001750 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d108      	bne.n	8001736 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	2b00      	cmp	r3, #0
 800172a:	d030      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
 8001734:	e02b      	b.n	800178e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d027      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	4798      	blx	r3
 8001746:	e022      	b.n	800178e <HAL_DMA_IRQHandler+0x29e>
 8001748:	20000008 	.word	0x20000008
 800174c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10f      	bne.n	800177e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0210 	bic.w	r2, r2, #16
 800176c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	2b00      	cmp	r3, #0
 8001794:	d032      	beq.n	80017fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d022      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2205      	movs	r2, #5
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d307      	bcc.n	80017d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f2      	bne.n	80017ba <HAL_DMA_IRQHandler+0x2ca>
 80017d4:	e000      	b.n	80017d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
 80017f8:	e000      	b.n	80017fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80017fa:	bf00      	nop
    }
  }
}
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop

08001804 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001820:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d108      	bne.n	8001844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001842:	e007      	b.n	8001854 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3b10      	subs	r3, #16
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <DMA_CalcBaseAndBitshift+0x68>)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b03      	cmp	r3, #3
 800188c:	d909      	bls.n	80018a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	1d1a      	adds	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	659a      	str	r2, [r3, #88]	; 0x58
 80018a0:	e007      	b.n	80018b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018aa:	f023 0303 	bic.w	r3, r3, #3
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	aaaaaaab 	.word	0xaaaaaaab
 80018c8:	0800a9ac 	.word	0x0800a9ac

080018cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d11f      	bne.n	8001926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d855      	bhi.n	8001998 <DMA_CheckFifoParam+0xcc>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <DMA_CheckFifoParam+0x28>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001917 	.word	0x08001917
 80018fc:	08001905 	.word	0x08001905
 8001900:	08001999 	.word	0x08001999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d045      	beq.n	800199c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001914:	e042      	b.n	800199c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800191e:	d13f      	bne.n	80019a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001924:	e03c      	b.n	80019a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800192e:	d121      	bne.n	8001974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d836      	bhi.n	80019a4 <DMA_CheckFifoParam+0xd8>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <DMA_CheckFifoParam+0x70>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001953 	.word	0x08001953
 8001944:	0800194d 	.word	0x0800194d
 8001948:	08001965 	.word	0x08001965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
      break;
 8001950:	e02f      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d024      	beq.n	80019a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001962:	e021      	b.n	80019a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800196c:	d11e      	bne.n	80019ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001972:	e01b      	b.n	80019ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d902      	bls.n	8001980 <DMA_CheckFifoParam+0xb4>
 800197a:	2b03      	cmp	r3, #3
 800197c:	d003      	beq.n	8001986 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800197e:	e018      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
      break;
 8001984:	e015      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
      break;
 8001996:	e00b      	b.n	80019b0 <DMA_CheckFifoParam+0xe4>
      break;
 8001998:	bf00      	nop
 800199a:	e00a      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 800199c:	bf00      	nop
 800199e:	e008      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a0:	bf00      	nop
 80019a2:	e006      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a4:	bf00      	nop
 80019a6:	e004      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a8:	bf00      	nop
 80019aa:	e002      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80019ac:	bf00      	nop
 80019ae:	e000      	b.n	80019b2 <DMA_CheckFifoParam+0xe6>
      break;
 80019b0:	bf00      	nop
    }
  } 
  
  return status; 
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e159      	b.n	8001c90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8148 	bne.w	8001c8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d00b      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0e:	2b11      	cmp	r3, #17
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0xfc>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a2 	beq.w	8001c8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a55      	ldr	r2, [pc, #340]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b62:	4a51      	ldr	r2, [pc, #324]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_GPIO_Init+0x2ec>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x202>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x1fe>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <HAL_GPIO_Init+0x2f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x1f6>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a44      	ldr	r2, [pc, #272]	; (8001cbc <HAL_GPIO_Init+0x2fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x1f2>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd4:	4934      	ldr	r1, [pc, #208]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f aea2 	bls.w	80019dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3724      	adds	r7, #36	; 0x24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e11f      	b.n	8001f4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f003 f8dc 	bl	8004edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d5c:	f000 fd3e 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8001d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a7b      	ldr	r2, [pc, #492]	; (8001f54 <HAL_I2C_Init+0x25c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d807      	bhi.n	8001d7c <HAL_I2C_Init+0x84>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_I2C_Init+0x260>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	bf94      	ite	ls
 8001d74:	2301      	movls	r3, #1
 8001d76:	2300      	movhi	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	e006      	b.n	8001d8a <HAL_I2C_Init+0x92>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4a77      	ldr	r2, [pc, #476]	; (8001f5c <HAL_I2C_Init+0x264>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e0db      	b.n	8001f4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <HAL_I2C_Init+0x268>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0c9b      	lsrs	r3, r3, #18
 8001d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	4a64      	ldr	r2, [pc, #400]	; (8001f54 <HAL_I2C_Init+0x25c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d802      	bhi.n	8001dcc <HAL_I2C_Init+0xd4>
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	e009      	b.n	8001de0 <HAL_I2C_Init+0xe8>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	4a63      	ldr	r2, [pc, #396]	; (8001f64 <HAL_I2C_Init+0x26c>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	3301      	adds	r3, #1
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4956      	ldr	r1, [pc, #344]	; (8001f54 <HAL_I2C_Init+0x25c>)
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	d80d      	bhi.n	8001e1c <HAL_I2C_Init+0x124>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1e59      	subs	r1, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	bf38      	it	cc
 8001e18:	2304      	movcc	r3, #4
 8001e1a:	e04f      	b.n	8001ebc <HAL_I2C_Init+0x1c4>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d111      	bne.n	8001e48 <HAL_I2C_Init+0x150>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	440b      	add	r3, r1
 8001e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e012      	b.n	8001e6e <HAL_I2C_Init+0x176>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e58      	subs	r0, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	0099      	lsls	r1, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Init+0x17e>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e022      	b.n	8001ebc <HAL_I2C_Init+0x1c4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10e      	bne.n	8001e9c <HAL_I2C_Init+0x1a4>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1e58      	subs	r0, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	440b      	add	r3, r1
 8001e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9a:	e00f      	b.n	8001ebc <HAL_I2C_Init+0x1c4>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e58      	subs	r0, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	0099      	lsls	r1, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	6809      	ldr	r1, [r1, #0]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6911      	ldr	r1, [r2, #16]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68d2      	ldr	r2, [r2, #12]
 8001ef6:	4311      	orrs	r1, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	000186a0 	.word	0x000186a0
 8001f58:	001e847f 	.word	0x001e847f
 8001f5c:	003d08ff 	.word	0x003d08ff
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	10624dd3 	.word	0x10624dd3

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e25b      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d075      	beq.n	8002072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f86:	4ba3      	ldr	r3, [pc, #652]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d00c      	beq.n	8001fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f92:	4ba0      	ldr	r3, [pc, #640]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d112      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9e:	4b9d      	ldr	r3, [pc, #628]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001faa:	d10b      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	4b99      	ldr	r3, [pc, #612]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d05b      	beq.n	8002070 <HAL_RCC_OscConfig+0x108>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d157      	bne.n	8002070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e236      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x74>
 8001fce:	4b91      	ldr	r3, [pc, #580]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a90      	ldr	r2, [pc, #576]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e01d      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b8b      	ldr	r3, [pc, #556]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a8a      	ldr	r2, [pc, #552]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b88      	ldr	r3, [pc, #544]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a87      	ldr	r2, [pc, #540]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8002000:	4b84      	ldr	r3, [pc, #528]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a83      	ldr	r2, [pc, #524]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b81      	ldr	r3, [pc, #516]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a80      	ldr	r2, [pc, #512]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8002012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff f820 	bl	8001064 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002028:	f7ff f81c 	bl	8001064 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e1fb      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0xc0>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff f80c 	bl	8001064 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff f808 	bl	8001064 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1e7      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	4b6c      	ldr	r3, [pc, #432]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0xe8>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d063      	beq.n	8002146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	4b65      	ldr	r3, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208a:	4b62      	ldr	r3, [pc, #392]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002092:	2b08      	cmp	r3, #8
 8002094:	d11c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002096:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d116      	bne.n	80020d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	4b5c      	ldr	r3, [pc, #368]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_RCC_OscConfig+0x152>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d001      	beq.n	80020ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e1bb      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ba:	4b56      	ldr	r3, [pc, #344]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4952      	ldr	r1, [pc, #328]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	e03a      	b.n	8002146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d8:	4b4f      	ldr	r3, [pc, #316]	; (8002218 <HAL_RCC_OscConfig+0x2b0>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7fe ffc1 	bl	8001064 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e6:	f7fe ffbd 	bl	8001064 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e19c      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b43      	ldr	r3, [pc, #268]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4940      	ldr	r1, [pc, #256]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
 8002118:	e015      	b.n	8002146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211a:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <HAL_RCC_OscConfig+0x2b0>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe ffa0 	bl	8001064 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002128:	f7fe ff9c 	bl	8001064 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e17b      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	4b36      	ldr	r3, [pc, #216]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d030      	beq.n	80021b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d016      	beq.n	8002188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215a:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_RCC_OscConfig+0x2b4>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7fe ff80 	bl	8001064 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7fe ff7c 	bl	8001064 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e15b      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x200>
 8002186:	e015      	b.n	80021b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_OscConfig+0x2b4>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe ff69 	bl	8001064 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002196:	f7fe ff65 	bl	8001064 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e144      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a0 	beq.w	8002302 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c6:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10f      	bne.n	80021f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	6413      	str	r3, [r2, #64]	; 0x40
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ee:	2301      	movs	r3, #1
 80021f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_OscConfig+0x2b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d121      	bne.n	8002242 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_RCC_OscConfig+0x2b8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a07      	ldr	r2, [pc, #28]	; (8002220 <HAL_RCC_OscConfig+0x2b8>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220a:	f7fe ff2b 	bl	8001064 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	e011      	b.n	8002236 <HAL_RCC_OscConfig+0x2ce>
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	42470000 	.word	0x42470000
 800221c:	42470e80 	.word	0x42470e80
 8002220:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002224:	f7fe ff1e 	bl	8001064 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0fd      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002236:	4b81      	ldr	r3, [pc, #516]	; (800243c <HAL_RCC_OscConfig+0x4d4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x2f0>
 800224a:	4b7d      	ldr	r3, [pc, #500]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a7c      	ldr	r2, [pc, #496]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	e01c      	b.n	8002292 <HAL_RCC_OscConfig+0x32a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b05      	cmp	r3, #5
 800225e:	d10c      	bne.n	800227a <HAL_RCC_OscConfig+0x312>
 8002260:	4b77      	ldr	r3, [pc, #476]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a76      	ldr	r2, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	4b74      	ldr	r3, [pc, #464]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a73      	ldr	r2, [pc, #460]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
 8002278:	e00b      	b.n	8002292 <HAL_RCC_OscConfig+0x32a>
 800227a:	4b71      	ldr	r3, [pc, #452]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a70      	ldr	r2, [pc, #448]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	4b6e      	ldr	r3, [pc, #440]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a6d      	ldr	r2, [pc, #436]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 800228c:	f023 0304 	bic.w	r3, r3, #4
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d015      	beq.n	80022c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229a:	f7fe fee3 	bl	8001064 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fedf 	bl	8001064 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0bc      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b8:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ee      	beq.n	80022a2 <HAL_RCC_OscConfig+0x33a>
 80022c4:	e014      	b.n	80022f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fecd 	bl	8001064 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe fec9 	bl	8001064 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0a6      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	4b56      	ldr	r3, [pc, #344]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ee      	bne.n	80022ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f6:	4b52      	ldr	r3, [pc, #328]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a51      	ldr	r2, [pc, #324]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 80022fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8092 	beq.w	8002430 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800230c:	4b4c      	ldr	r3, [pc, #304]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	2b08      	cmp	r3, #8
 8002316:	d05c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d141      	bne.n	80023a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002320:	4b48      	ldr	r3, [pc, #288]	; (8002444 <HAL_RCC_OscConfig+0x4dc>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7fe fe9d 	bl	8001064 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fe99 	bl	8001064 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e078      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002340:	4b3f      	ldr	r3, [pc, #252]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	019b      	lsls	r3, r3, #6
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	085b      	lsrs	r3, r3, #1
 8002364:	3b01      	subs	r3, #1
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	061b      	lsls	r3, r3, #24
 8002370:	4933      	ldr	r1, [pc, #204]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002376:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_RCC_OscConfig+0x4dc>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fe72 	bl	8001064 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fe6e 	bl	8001064 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e04d      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002396:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x41c>
 80023a2:	e045      	b.n	8002430 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x4dc>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fe5b 	bl	8001064 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe fe57 	bl	8001064 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e036      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x44a>
 80023d0:	e02e      	b.n	8002430 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e029      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_RCC_OscConfig+0x4d8>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d11c      	bne.n	800242c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d115      	bne.n	800242c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002406:	4013      	ands	r3, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800240c:	4293      	cmp	r3, r2
 800240e:	d10d      	bne.n	800242c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d106      	bne.n	800242c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40007000 	.word	0x40007000
 8002440:	40023800 	.word	0x40023800
 8002444:	42470060 	.word	0x42470060

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0cc      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b68      	ldr	r3, [pc, #416]	; (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d90c      	bls.n	8002484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b65      	ldr	r3, [pc, #404]	; (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	; (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a58      	ldr	r2, [pc, #352]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d044      	beq.n	8002568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d119      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002502:	2b03      	cmp	r3, #3
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002506:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e06f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002516:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e067      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002526:	4b37      	ldr	r3, [pc, #220]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 0203 	bic.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4934      	ldr	r1, [pc, #208]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002538:	f7fe fd94 	bl	8001064 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	e00a      	b.n	8002556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002540:	f7fe fd90 	bl	8001064 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e04f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 020c 	and.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	429a      	cmp	r2, r3
 8002566:	d1eb      	bne.n	8002540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d20c      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ba:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4601      	mov	r1, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	5cd3      	ldrb	r3, [r2, r3]
 80025e2:	fa21 f303 	lsr.w	r3, r1, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fcf4 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023c00 	.word	0x40023c00
 8002604:	40023800 	.word	0x40023800
 8002608:	0800a9b4 	.word	0x0800a9b4
 800260c:	20000008 	.word	0x20000008
 8002610:	20000000 	.word	0x20000000

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	2300      	movs	r3, #0
 8002624:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d007      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x32>
 8002636:	2b08      	cmp	r3, #8
 8002638:	d008      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x38>
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 80b4 	bne.w	80027a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002640:	4b5e      	ldr	r3, [pc, #376]	; (80027bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002642:	60bb      	str	r3, [r7, #8]
       break;
 8002644:	e0b3      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002646:	4b5e      	ldr	r3, [pc, #376]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002648:	60bb      	str	r3, [r7, #8]
      break;
 800264a:	e0b0      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800264c:	4b5a      	ldr	r3, [pc, #360]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002654:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002656:	4b58      	ldr	r3, [pc, #352]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d04a      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002662:	4b55      	ldr	r3, [pc, #340]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	f04f 0400 	mov.w	r4, #0
 800266c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	ea03 0501 	and.w	r5, r3, r1
 8002678:	ea04 0602 	and.w	r6, r4, r2
 800267c:	4629      	mov	r1, r5
 800267e:	4632      	mov	r2, r6
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	f04f 0400 	mov.w	r4, #0
 8002688:	0154      	lsls	r4, r2, #5
 800268a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800268e:	014b      	lsls	r3, r1, #5
 8002690:	4619      	mov	r1, r3
 8002692:	4622      	mov	r2, r4
 8002694:	1b49      	subs	r1, r1, r5
 8002696:	eb62 0206 	sbc.w	r2, r2, r6
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	f04f 0400 	mov.w	r4, #0
 80026a2:	0194      	lsls	r4, r2, #6
 80026a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026a8:	018b      	lsls	r3, r1, #6
 80026aa:	1a5b      	subs	r3, r3, r1
 80026ac:	eb64 0402 	sbc.w	r4, r4, r2
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	00e2      	lsls	r2, r4, #3
 80026ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026be:	00d9      	lsls	r1, r3, #3
 80026c0:	460b      	mov	r3, r1
 80026c2:	4614      	mov	r4, r2
 80026c4:	195b      	adds	r3, r3, r5
 80026c6:	eb44 0406 	adc.w	r4, r4, r6
 80026ca:	f04f 0100 	mov.w	r1, #0
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	0262      	lsls	r2, r4, #9
 80026d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80026d8:	0259      	lsls	r1, r3, #9
 80026da:	460b      	mov	r3, r1
 80026dc:	4614      	mov	r4, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	4621      	mov	r1, r4
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f04f 0400 	mov.w	r4, #0
 80026e8:	461a      	mov	r2, r3
 80026ea:	4623      	mov	r3, r4
 80026ec:	f7fe fad4 	bl	8000c98 <__aeabi_uldivmod>
 80026f0:	4603      	mov	r3, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e049      	b.n	800278c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f8:	4b2f      	ldr	r3, [pc, #188]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	f04f 0400 	mov.w	r4, #0
 8002702:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	ea03 0501 	and.w	r5, r3, r1
 800270e:	ea04 0602 	and.w	r6, r4, r2
 8002712:	4629      	mov	r1, r5
 8002714:	4632      	mov	r2, r6
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	f04f 0400 	mov.w	r4, #0
 800271e:	0154      	lsls	r4, r2, #5
 8002720:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002724:	014b      	lsls	r3, r1, #5
 8002726:	4619      	mov	r1, r3
 8002728:	4622      	mov	r2, r4
 800272a:	1b49      	subs	r1, r1, r5
 800272c:	eb62 0206 	sbc.w	r2, r2, r6
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	f04f 0400 	mov.w	r4, #0
 8002738:	0194      	lsls	r4, r2, #6
 800273a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800273e:	018b      	lsls	r3, r1, #6
 8002740:	1a5b      	subs	r3, r3, r1
 8002742:	eb64 0402 	sbc.w	r4, r4, r2
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	00e2      	lsls	r2, r4, #3
 8002750:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002754:	00d9      	lsls	r1, r3, #3
 8002756:	460b      	mov	r3, r1
 8002758:	4614      	mov	r4, r2
 800275a:	195b      	adds	r3, r3, r5
 800275c:	eb44 0406 	adc.w	r4, r4, r6
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	02a2      	lsls	r2, r4, #10
 800276a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800276e:	0299      	lsls	r1, r3, #10
 8002770:	460b      	mov	r3, r1
 8002772:	4614      	mov	r4, r2
 8002774:	4618      	mov	r0, r3
 8002776:	4621      	mov	r1, r4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f04f 0400 	mov.w	r4, #0
 800277e:	461a      	mov	r2, r3
 8002780:	4623      	mov	r3, r4
 8002782:	f7fe fa89 	bl	8000c98 <__aeabi_uldivmod>
 8002786:	4603      	mov	r3, r0
 8002788:	460c      	mov	r4, r1
 800278a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	60bb      	str	r3, [r7, #8]
      break;
 80027a6:	e002      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027aa:	60bb      	str	r3, [r7, #8]
      break;
 80027ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ae:	68bb      	ldr	r3, [r7, #8]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	00f42400 	.word	0x00f42400
 80027c0:	007a1200 	.word	0x007a1200

080027c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000008 	.word	0x20000008

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027e0:	f7ff fff0 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e4:	4601      	mov	r1, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	0a9b      	lsrs	r3, r3, #10
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4a03      	ldr	r2, [pc, #12]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	0800a9c4 	.word	0x0800a9c4

08002804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002808:	f7ff ffdc 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 800280c:	4601      	mov	r1, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	0b5b      	lsrs	r3, r3, #13
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4a03      	ldr	r2, [pc, #12]	; (8002828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800281a:	5cd3      	ldrb	r3, [r2, r3]
 800281c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	0800a9c4 	.word	0x0800a9c4

0800282c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e01d      	b.n	800287a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f003 fba2 	bl	8005f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4610      	mov	r0, r2
 800286c:	f000 fcb8 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2202      	movs	r2, #2
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d007      	beq.n	80028b4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d007      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e01d      	b.n	8002960 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	d106      	bne.n	800293e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f815 	bl	8002968 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	4619      	mov	r1, r3
 8002950:	4610      	mov	r0, r2
 8002952:	f000 fc45 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 ffea 	bl	8003968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_TIM_PWM_Start+0x60>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d107      	bne.n	80029ae <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b06      	cmp	r3, #6
 80029be:	d007      	beq.n	80029d0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40010000 	.word	0x40010000

080029e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e01d      	b.n	8002a2e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f815 	bl	8002a36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f000 fbde 	bl	80031e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 ff83 	bl	8003968 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d007      	beq.n	8002a84 <HAL_TIM_IC_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b0c      	cmp	r3, #12
 8002a9e:	d841      	bhi.n	8002b24 <HAL_TIM_IC_Start_IT+0x94>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <HAL_TIM_IC_Start_IT+0x18>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002add 	.word	0x08002add
 8002aac:	08002b25 	.word	0x08002b25
 8002ab0:	08002b25 	.word	0x08002b25
 8002ab4:	08002b25 	.word	0x08002b25
 8002ab8:	08002aef 	.word	0x08002aef
 8002abc:	08002b25 	.word	0x08002b25
 8002ac0:	08002b25 	.word	0x08002b25
 8002ac4:	08002b25 	.word	0x08002b25
 8002ac8:	08002b01 	.word	0x08002b01
 8002acc:	08002b25 	.word	0x08002b25
 8002ad0:	08002b25 	.word	0x08002b25
 8002ad4:	08002b25 	.word	0x08002b25
 8002ad8:	08002b13 	.word	0x08002b13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0202 	orr.w	r2, r2, #2
 8002aea:	60da      	str	r2, [r3, #12]
      break;
 8002aec:	e01b      	b.n	8002b26 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0204 	orr.w	r2, r2, #4
 8002afc:	60da      	str	r2, [r3, #12]
      break;
 8002afe:	e012      	b.n	8002b26 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0208 	orr.w	r2, r2, #8
 8002b0e:	60da      	str	r2, [r3, #12]
      break;
 8002b10:	e009      	b.n	8002b26 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0210 	orr.w	r2, r2, #16
 8002b20:	60da      	str	r2, [r3, #12]
      break;
 8002b22:	e000      	b.n	8002b26 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002b24:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 ff1a 	bl	8003968 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d007      	beq.n	8002b56 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0202 	mvn.w	r2, #2
 8002b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f002 f9f8 	bl	8004f98 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 faf9 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fb00 	bl	80031b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0204 	mvn.w	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f002 f9ce 	bl	8004f98 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 facf 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fad6 	bl	80031b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0208 	mvn.w	r2, #8
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f002 f9a4 	bl	8004f98 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 faa5 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 faac 	bl	80031b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0210 	mvn.w	r2, #16
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f002 f97a 	bl	8004f98 <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fa7b 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fa82 	bl	80031b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0201 	mvn.w	r2, #1
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f002 f9de 	bl	80050a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 ff1c 	bl	8003b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa47 	bl	80031ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d10e      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d107      	bne.n	8002d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0220 	mvn.w	r2, #32
 8002d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fee6 	bl	8003b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e08a      	b.n	8002ea0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d11b      	bne.n	8002dd8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f000 fc22 	bl	80035f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 020c 	bic.w	r2, r2, #12
 8002dc2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6999      	ldr	r1, [r3, #24]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	619a      	str	r2, [r3, #24]
 8002dd6:	e05a      	b.n	8002e8e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d11c      	bne.n	8002e18 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f000 fc9a 	bl	8003726 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e00:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6999      	ldr	r1, [r3, #24]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	021a      	lsls	r2, r3, #8
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	619a      	str	r2, [r3, #24]
 8002e16:	e03a      	b.n	8002e8e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11b      	bne.n	8002e56 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f000 fce7 	bl	8003800 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 020c 	bic.w	r2, r2, #12
 8002e40:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69d9      	ldr	r1, [r3, #28]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]
 8002e54:	e01b      	b.n	8002e8e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6819      	ldr	r1, [r3, #0]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f000 fd07 	bl	8003878 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e78:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	021a      	lsls	r2, r3, #8
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e0b4      	b.n	800302c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	f200 809f 	bhi.w	8003018 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002eda:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002f15 	.word	0x08002f15
 8002ee4:	08003019 	.word	0x08003019
 8002ee8:	08003019 	.word	0x08003019
 8002eec:	08003019 	.word	0x08003019
 8002ef0:	08002f55 	.word	0x08002f55
 8002ef4:	08003019 	.word	0x08003019
 8002ef8:	08003019 	.word	0x08003019
 8002efc:	08003019 	.word	0x08003019
 8002f00:	08002f97 	.word	0x08002f97
 8002f04:	08003019 	.word	0x08003019
 8002f08:	08003019 	.word	0x08003019
 8002f0c:	08003019 	.word	0x08003019
 8002f10:	08002fd7 	.word	0x08002fd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f9e0 	bl	80032e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0208 	orr.w	r2, r2, #8
 8002f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0204 	bic.w	r2, r2, #4
 8002f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6999      	ldr	r1, [r3, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	619a      	str	r2, [r3, #24]
      break;
 8002f52:	e062      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fa26 	bl	80033ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6999      	ldr	r1, [r3, #24]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	021a      	lsls	r2, r3, #8
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	619a      	str	r2, [r3, #24]
      break;
 8002f94:	e041      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fa71 	bl	8003484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0208 	orr.w	r2, r2, #8
 8002fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0204 	bic.w	r2, r2, #4
 8002fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69d9      	ldr	r1, [r3, #28]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	61da      	str	r2, [r3, #28]
      break;
 8002fd4:	e021      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fabb 	bl	8003558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	021a      	lsls	r2, r3, #8
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	61da      	str	r2, [r3, #28]
      break;
 8003016:	e000      	b.n	800301a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003018:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIM_ConfigClockSource+0x18>
 8003048:	2302      	movs	r3, #2
 800304a:	e0a6      	b.n	800319a <HAL_TIM_ConfigClockSource+0x166>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800306a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003072:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d067      	beq.n	8003154 <HAL_TIM_ConfigClockSource+0x120>
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d80b      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x6c>
 8003088:	2b10      	cmp	r3, #16
 800308a:	d073      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0x140>
 800308c:	2b10      	cmp	r3, #16
 800308e:	d802      	bhi.n	8003096 <HAL_TIM_ConfigClockSource+0x62>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d06f      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003094:	e078      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003096:	2b20      	cmp	r3, #32
 8003098:	d06c      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0x140>
 800309a:	2b30      	cmp	r3, #48	; 0x30
 800309c:	d06a      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800309e:	e073      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030a0:	2b70      	cmp	r3, #112	; 0x70
 80030a2:	d00d      	beq.n	80030c0 <HAL_TIM_ConfigClockSource+0x8c>
 80030a4:	2b70      	cmp	r3, #112	; 0x70
 80030a6:	d804      	bhi.n	80030b2 <HAL_TIM_ConfigClockSource+0x7e>
 80030a8:	2b50      	cmp	r3, #80	; 0x50
 80030aa:	d033      	beq.n	8003114 <HAL_TIM_ConfigClockSource+0xe0>
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d041      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030b0:	e06a      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b6:	d066      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x152>
 80030b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030bc:	d017      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030be:	e063      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f000 fc2a 	bl	8003928 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	609a      	str	r2, [r3, #8]
      break;
 80030ec:	e04c      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6899      	ldr	r1, [r3, #8]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f000 fc13 	bl	8003928 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003110:	609a      	str	r2, [r3, #8]
      break;
 8003112:	e039      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	461a      	mov	r2, r3
 8003122:	f000 fad1 	bl	80036c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2150      	movs	r1, #80	; 0x50
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fbe0 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003132:	e029      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	461a      	mov	r2, r3
 8003142:	f000 fb2d 	bl	80037a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2160      	movs	r1, #96	; 0x60
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fbd0 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003152:	e019      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	461a      	mov	r2, r3
 8003162:	f000 fab1 	bl	80036c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2140      	movs	r1, #64	; 0x40
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fbc0 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003172:	e009      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f000 fbb7 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 8003184:	e000      	b.n	8003188 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <TIM_Base_SetConfig+0xe4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00f      	beq.n	8003218 <TIM_Base_SetConfig+0x38>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d00b      	beq.n	8003218 <TIM_Base_SetConfig+0x38>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a31      	ldr	r2, [pc, #196]	; (80032c8 <TIM_Base_SetConfig+0xe8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d007      	beq.n	8003218 <TIM_Base_SetConfig+0x38>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a30      	ldr	r2, [pc, #192]	; (80032cc <TIM_Base_SetConfig+0xec>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d003      	beq.n	8003218 <TIM_Base_SetConfig+0x38>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <TIM_Base_SetConfig+0xf0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d108      	bne.n	800322a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a25      	ldr	r2, [pc, #148]	; (80032c4 <TIM_Base_SetConfig+0xe4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d01b      	beq.n	800326a <TIM_Base_SetConfig+0x8a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003238:	d017      	beq.n	800326a <TIM_Base_SetConfig+0x8a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <TIM_Base_SetConfig+0xe8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <TIM_Base_SetConfig+0x8a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <TIM_Base_SetConfig+0xec>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00f      	beq.n	800326a <TIM_Base_SetConfig+0x8a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <TIM_Base_SetConfig+0xf0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00b      	beq.n	800326a <TIM_Base_SetConfig+0x8a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <TIM_Base_SetConfig+0xf4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d007      	beq.n	800326a <TIM_Base_SetConfig+0x8a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1e      	ldr	r2, [pc, #120]	; (80032d8 <TIM_Base_SetConfig+0xf8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_Base_SetConfig+0x8a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <TIM_Base_SetConfig+0xfc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d108      	bne.n	800327c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <TIM_Base_SetConfig+0xe4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d103      	bne.n	80032b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	615a      	str	r2, [r3, #20]
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40010000 	.word	0x40010000
 80032c8:	40000400 	.word	0x40000400
 80032cc:	40000800 	.word	0x40000800
 80032d0:	40000c00 	.word	0x40000c00
 80032d4:	40014000 	.word	0x40014000
 80032d8:	40014400 	.word	0x40014400
 80032dc:	40014800 	.word	0x40014800

080032e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f023 0201 	bic.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f023 0302 	bic.w	r3, r3, #2
 8003328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a1c      	ldr	r2, [pc, #112]	; (80033a8 <TIM_OC1_SetConfig+0xc8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d10c      	bne.n	8003356 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0308 	bic.w	r3, r3, #8
 8003342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <TIM_OC1_SetConfig+0xc8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d111      	bne.n	8003382 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800336c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	621a      	str	r2, [r3, #32]
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40010000 	.word	0x40010000

080033ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0210 	bic.w	r2, r3, #16
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0320 	bic.w	r3, r3, #32
 80033f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <TIM_OC2_SetConfig+0xd4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10d      	bne.n	8003428 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003426:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a15      	ldr	r2, [pc, #84]	; (8003480 <TIM_OC2_SetConfig+0xd4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d113      	bne.n	8003458 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003436:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800343e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000

08003484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <TIM_OC3_SetConfig+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10d      	bne.n	80034fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <TIM_OC3_SetConfig+0xd0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d113      	bne.n	800352e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800350c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40010000 	.word	0x40010000

08003558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	031b      	lsls	r3, r3, #12
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <TIM_OC4_SetConfig+0x9c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d109      	bne.n	80035cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40010000 	.word	0x40010000

080035f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a24      	ldr	r2, [pc, #144]	; (80036b4 <TIM_TI1_SetConfig+0xbc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d00f      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <TIM_TI1_SetConfig+0xc0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a20      	ldr	r2, [pc, #128]	; (80036bc <TIM_TI1_SetConfig+0xc4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <TIM_TI1_SetConfig+0xc8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_TI1_SetConfig+0x56>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <TIM_TI1_SetConfig+0xcc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <TIM_TI1_SetConfig+0x5a>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <TIM_TI1_SetConfig+0x5c>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e003      	b.n	8003672 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003678:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	b2db      	uxtb	r3, r3
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f023 030a 	bic.w	r3, r3, #10
 800368c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	f003 030a 	and.w	r3, r3, #10
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40010000 	.word	0x40010000
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40000c00 	.word	0x40000c00
 80036c4:	40014000 	.word	0x40014000

080036c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 030a 	bic.w	r3, r3, #10
 8003704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003726:	b480      	push	{r7}
 8003728:	b087      	sub	sp, #28
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	f023 0210 	bic.w	r2, r3, #16
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	031b      	lsls	r3, r3, #12
 800376a:	b29b      	uxth	r3, r3
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003778:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	621a      	str	r2, [r3, #32]
}
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f023 0210 	bic.w	r2, r3, #16
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	031b      	lsls	r3, r3, #12
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f023 0303 	bic.w	r3, r3, #3
 800382c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800383c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	b2db      	uxtb	r3, r3
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003850:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	031b      	lsls	r3, r3, #12
 80038bc:	b29b      	uxth	r3, r3
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80038ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	031b      	lsls	r3, r3, #12
 80038d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	f043 0307 	orr.w	r3, r3, #7
 8003914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	021a      	lsls	r2, r3, #8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	431a      	orrs	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1a      	ldr	r2, [r3, #32]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e050      	b.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d018      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d013      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10c      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40014000 	.word	0x40014000

08003a90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e03d      	b.n	8003b28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e03f      	b.n	8003bee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f002 fbd2 	bl	800632c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fc6d 	bl	8004480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b088      	sub	sp, #32
 8003bfa:	af02      	add	r7, sp, #8
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	f040 8083 	bne.w	8003d1e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_UART_Transmit+0x2e>
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e07b      	b.n	8003d20 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Transmit+0x40>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e074      	b.n	8003d20 <HAL_UART_Transmit+0x12a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2221      	movs	r2, #33	; 0x21
 8003c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c4c:	f7fd fa0a 	bl	8001064 <HAL_GetTick>
 8003c50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	88fa      	ldrh	r2, [r7, #6]
 8003c56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003c66:	e042      	b.n	8003cee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d122      	bne.n	8003cc6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2200      	movs	r2, #0
 8003c88:	2180      	movs	r1, #128	; 0x80
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fa76 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e042      	b.n	8003d20 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3302      	adds	r3, #2
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	e017      	b.n	8003cee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	e013      	b.n	8003cee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fa53 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e01f      	b.n	8003d20 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	60ba      	str	r2, [r7, #8]
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1b7      	bne.n	8003c68 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2140      	movs	r1, #64	; 0x40
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fa3a 	bl	800417c <UART_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e006      	b.n	8003d20 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d166      	bne.n	8003e10 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_UART_Receive_DMA+0x26>
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e05f      	b.n	8003e12 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_UART_Receive_DMA+0x38>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e058      	b.n	8003e12 <HAL_UART_Receive_DMA+0xea>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	88fa      	ldrh	r2, [r7, #6]
 8003d72:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2222      	movs	r2, #34	; 0x22
 8003d7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	4a25      	ldr	r2, [pc, #148]	; (8003e1c <HAL_UART_Receive_DMA+0xf4>)
 8003d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <HAL_UART_Receive_DMA+0xf8>)
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	4a23      	ldr	r2, [pc, #140]	; (8003e24 <HAL_UART_Receive_DMA+0xfc>)
 8003d98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2200      	movs	r2, #0
 8003da0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003da2:	f107 0308 	add.w	r3, r7, #8
 8003da6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	f7fd fb1f 	bl	80013fc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e0a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e000      	b.n	8003e12 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
  }
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	08004065 	.word	0x08004065
 8003e20:	080040cd 	.word	0x080040cd
 8003e24:	080040e9 	.word	0x080040e9

08003e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_UART_IRQHandler+0x52>
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa82 	bl	800437c <UART_Receive_IT>
      return;
 8003e78:	e0d1      	b.n	800401e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80b0 	beq.w	8003fe2 <HAL_UART_IRQHandler+0x1ba>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_UART_IRQHandler+0x70>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80a5 	beq.w	8003fe2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x90>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xb0>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	f043 0202 	orr.w	r2, r3, #2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_UART_IRQHandler+0xd0>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	f043 0204 	orr.w	r2, r3, #4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00f      	beq.n	8003f22 <HAL_UART_IRQHandler+0xfa>
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <HAL_UART_IRQHandler+0xee>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	f043 0208 	orr.w	r2, r3, #8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d078      	beq.n	800401c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_UART_IRQHandler+0x11c>
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fa1c 	bl	800437c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d102      	bne.n	8003f6c <HAL_UART_IRQHandler+0x144>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d031      	beq.n	8003fd0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f965 	bl	800423c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d123      	bne.n	8003fc8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695a      	ldr	r2, [r3, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d013      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9c:	4a21      	ldr	r2, [pc, #132]	; (8004024 <HAL_UART_IRQHandler+0x1fc>)
 8003f9e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fa81 	bl	80014ac <HAL_DMA_Abort_IT>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d016      	beq.n	8003fde <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbe:	e00e      	b.n	8003fde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f845 	bl	8004050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc6:	e00a      	b.n	8003fde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f841 	bl	8004050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fce:	e006      	b.n	8003fde <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f83d 	bl	8004050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003fdc:	e01e      	b.n	800401c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fde:	bf00      	nop
    return;
 8003fe0:	e01c      	b.n	800401c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_UART_IRQHandler+0x1d6>
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f952 	bl	80042a0 <UART_Transmit_IT>
    return;
 8003ffc:	e00f      	b.n	800401e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_UART_IRQHandler+0x1f6>
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f99a 	bl	800434c <UART_EndTransmit_IT>
    return;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_UART_IRQHandler+0x1f6>
    return;
 800401c:	bf00      	nop
  }
}
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	08004279 	.word	0x08004279

08004028 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d11e      	bne.n	80040be <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004094:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695a      	ldr	r2, [r3, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0201 	bic.w	r2, r2, #1
 80040a4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f001 f8e2 	bl	8005288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff ffae 	bl	800403c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004104:	2b80      	cmp	r3, #128	; 0x80
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b21      	cmp	r3, #33	; 0x21
 800411a:	d108      	bne.n	800412e <UART_DMAError+0x46>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2200      	movs	r2, #0
 8004126:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004128:	68b8      	ldr	r0, [r7, #8]
 800412a:	f000 f871 	bl	8004210 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b22      	cmp	r3, #34	; 0x22
 800414e:	d108      	bne.n	8004162 <UART_DMAError+0x7a>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2200      	movs	r2, #0
 800415a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800415c:	68b8      	ldr	r0, [r7, #8]
 800415e:	f000 f86d 	bl	800423c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	f043 0210 	orr.w	r2, r3, #16
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800416e:	68b8      	ldr	r0, [r7, #8]
 8004170:	f7ff ff6e 	bl	8004050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418c:	e02c      	b.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d028      	beq.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <UART_WaitOnFlagUntilTimeout+0x30>
 800419c:	f7fc ff62 	bl	8001064 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d21d      	bcs.n	80041e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e00f      	b.n	8004208 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4013      	ands	r3, r2
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	bf0c      	ite	eq
 80041f8:	2301      	moveq	r3, #1
 80041fa:	2300      	movne	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	429a      	cmp	r2, r3
 8004204:	d0c3      	beq.n	800418e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004226:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004252:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fedc 	bl	8004050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b21      	cmp	r3, #33	; 0x21
 80042b2:	d144      	bne.n	800433e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d11a      	bne.n	80042f4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	1c9a      	adds	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	621a      	str	r2, [r3, #32]
 80042e6:	e00e      	b.n	8004306 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	621a      	str	r2, [r3, #32]
 80042f2:	e008      	b.n	8004306 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	1c59      	adds	r1, r3, #1
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6211      	str	r1, [r2, #32]
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29b      	uxth	r3, r3
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4619      	mov	r1, r3
 8004314:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004328:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004338:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	e000      	b.n	8004340 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
  }
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004362:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fe5b 	bl	8004028 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b22      	cmp	r3, #34	; 0x22
 800438e:	d171      	bne.n	8004474 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d123      	bne.n	80043e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10e      	bne.n	80043c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	1c9a      	adds	r2, r3, #2
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
 80043c4:	e029      	b.n	800441a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
 80043e0:	e01b      	b.n	800441a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6858      	ldr	r0, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	1c59      	adds	r1, r3, #1
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6291      	str	r1, [r2, #40]	; 0x28
 80043fa:	b2c2      	uxtb	r2, r0
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e00c      	b.n	800441a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	1c58      	adds	r0, r3, #1
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	6288      	str	r0, [r1, #40]	; 0x28
 8004412:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29b      	uxth	r3, r3
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4619      	mov	r1, r3
 8004428:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800442a:	2b00      	cmp	r3, #0
 800442c:	d120      	bne.n	8004470 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0220 	bic.w	r2, r2, #32
 800443c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800444c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 ff0e 	bl	8005288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	e002      	b.n	8004476 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80044c2:	f023 030c 	bic.w	r3, r3, #12
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	430b      	orrs	r3, r1
 80044ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ee:	f040 818b 	bne.w	8004808 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4ac1      	ldr	r2, [pc, #772]	; (80047fc <UART_SetConfig+0x37c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d005      	beq.n	8004508 <UART_SetConfig+0x88>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4abf      	ldr	r2, [pc, #764]	; (8004800 <UART_SetConfig+0x380>)
 8004502:	4293      	cmp	r3, r2
 8004504:	f040 80bd 	bne.w	8004682 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004508:	f7fe f97c 	bl	8002804 <HAL_RCC_GetPCLK2Freq>
 800450c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	461d      	mov	r5, r3
 8004512:	f04f 0600 	mov.w	r6, #0
 8004516:	46a8      	mov	r8, r5
 8004518:	46b1      	mov	r9, r6
 800451a:	eb18 0308 	adds.w	r3, r8, r8
 800451e:	eb49 0409 	adc.w	r4, r9, r9
 8004522:	4698      	mov	r8, r3
 8004524:	46a1      	mov	r9, r4
 8004526:	eb18 0805 	adds.w	r8, r8, r5
 800452a:	eb49 0906 	adc.w	r9, r9, r6
 800452e:	f04f 0100 	mov.w	r1, #0
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800453a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800453e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004542:	4688      	mov	r8, r1
 8004544:	4691      	mov	r9, r2
 8004546:	eb18 0005 	adds.w	r0, r8, r5
 800454a:	eb49 0106 	adc.w	r1, r9, r6
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	461d      	mov	r5, r3
 8004554:	f04f 0600 	mov.w	r6, #0
 8004558:	196b      	adds	r3, r5, r5
 800455a:	eb46 0406 	adc.w	r4, r6, r6
 800455e:	461a      	mov	r2, r3
 8004560:	4623      	mov	r3, r4
 8004562:	f7fc fb99 	bl	8000c98 <__aeabi_uldivmod>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	461a      	mov	r2, r3
 800456c:	4ba5      	ldr	r3, [pc, #660]	; (8004804 <UART_SetConfig+0x384>)
 800456e:	fba3 2302 	umull	r2, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	461d      	mov	r5, r3
 800457c:	f04f 0600 	mov.w	r6, #0
 8004580:	46a9      	mov	r9, r5
 8004582:	46b2      	mov	sl, r6
 8004584:	eb19 0309 	adds.w	r3, r9, r9
 8004588:	eb4a 040a 	adc.w	r4, sl, sl
 800458c:	4699      	mov	r9, r3
 800458e:	46a2      	mov	sl, r4
 8004590:	eb19 0905 	adds.w	r9, r9, r5
 8004594:	eb4a 0a06 	adc.w	sl, sl, r6
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045ac:	4689      	mov	r9, r1
 80045ae:	4692      	mov	sl, r2
 80045b0:	eb19 0005 	adds.w	r0, r9, r5
 80045b4:	eb4a 0106 	adc.w	r1, sl, r6
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	461d      	mov	r5, r3
 80045be:	f04f 0600 	mov.w	r6, #0
 80045c2:	196b      	adds	r3, r5, r5
 80045c4:	eb46 0406 	adc.w	r4, r6, r6
 80045c8:	461a      	mov	r2, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	f7fc fb64 	bl	8000c98 <__aeabi_uldivmod>
 80045d0:	4603      	mov	r3, r0
 80045d2:	460c      	mov	r4, r1
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b8b      	ldr	r3, [pc, #556]	; (8004804 <UART_SetConfig+0x384>)
 80045d8:	fba3 1302 	umull	r1, r3, r3, r2
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	2164      	movs	r1, #100	; 0x64
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	3332      	adds	r3, #50	; 0x32
 80045ea:	4a86      	ldr	r2, [pc, #536]	; (8004804 <UART_SetConfig+0x384>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045f8:	4498      	add	r8, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	461d      	mov	r5, r3
 80045fe:	f04f 0600 	mov.w	r6, #0
 8004602:	46a9      	mov	r9, r5
 8004604:	46b2      	mov	sl, r6
 8004606:	eb19 0309 	adds.w	r3, r9, r9
 800460a:	eb4a 040a 	adc.w	r4, sl, sl
 800460e:	4699      	mov	r9, r3
 8004610:	46a2      	mov	sl, r4
 8004612:	eb19 0905 	adds.w	r9, r9, r5
 8004616:	eb4a 0a06 	adc.w	sl, sl, r6
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004626:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800462a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800462e:	4689      	mov	r9, r1
 8004630:	4692      	mov	sl, r2
 8004632:	eb19 0005 	adds.w	r0, r9, r5
 8004636:	eb4a 0106 	adc.w	r1, sl, r6
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	461d      	mov	r5, r3
 8004640:	f04f 0600 	mov.w	r6, #0
 8004644:	196b      	adds	r3, r5, r5
 8004646:	eb46 0406 	adc.w	r4, r6, r6
 800464a:	461a      	mov	r2, r3
 800464c:	4623      	mov	r3, r4
 800464e:	f7fc fb23 	bl	8000c98 <__aeabi_uldivmod>
 8004652:	4603      	mov	r3, r0
 8004654:	460c      	mov	r4, r1
 8004656:	461a      	mov	r2, r3
 8004658:	4b6a      	ldr	r3, [pc, #424]	; (8004804 <UART_SetConfig+0x384>)
 800465a:	fba3 1302 	umull	r1, r3, r3, r2
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2164      	movs	r1, #100	; 0x64
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	3332      	adds	r3, #50	; 0x32
 800466c:	4a65      	ldr	r2, [pc, #404]	; (8004804 <UART_SetConfig+0x384>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f003 0207 	and.w	r2, r3, #7
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4442      	add	r2, r8
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	e26f      	b.n	8004b62 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004682:	f7fe f8ab 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8004686:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	461d      	mov	r5, r3
 800468c:	f04f 0600 	mov.w	r6, #0
 8004690:	46a8      	mov	r8, r5
 8004692:	46b1      	mov	r9, r6
 8004694:	eb18 0308 	adds.w	r3, r8, r8
 8004698:	eb49 0409 	adc.w	r4, r9, r9
 800469c:	4698      	mov	r8, r3
 800469e:	46a1      	mov	r9, r4
 80046a0:	eb18 0805 	adds.w	r8, r8, r5
 80046a4:	eb49 0906 	adc.w	r9, r9, r6
 80046a8:	f04f 0100 	mov.w	r1, #0
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046bc:	4688      	mov	r8, r1
 80046be:	4691      	mov	r9, r2
 80046c0:	eb18 0005 	adds.w	r0, r8, r5
 80046c4:	eb49 0106 	adc.w	r1, r9, r6
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	461d      	mov	r5, r3
 80046ce:	f04f 0600 	mov.w	r6, #0
 80046d2:	196b      	adds	r3, r5, r5
 80046d4:	eb46 0406 	adc.w	r4, r6, r6
 80046d8:	461a      	mov	r2, r3
 80046da:	4623      	mov	r3, r4
 80046dc:	f7fc fadc 	bl	8000c98 <__aeabi_uldivmod>
 80046e0:	4603      	mov	r3, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <UART_SetConfig+0x384>)
 80046e8:	fba3 2302 	umull	r2, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	461d      	mov	r5, r3
 80046f6:	f04f 0600 	mov.w	r6, #0
 80046fa:	46a9      	mov	r9, r5
 80046fc:	46b2      	mov	sl, r6
 80046fe:	eb19 0309 	adds.w	r3, r9, r9
 8004702:	eb4a 040a 	adc.w	r4, sl, sl
 8004706:	4699      	mov	r9, r3
 8004708:	46a2      	mov	sl, r4
 800470a:	eb19 0905 	adds.w	r9, r9, r5
 800470e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004712:	f04f 0100 	mov.w	r1, #0
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800471e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004722:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004726:	4689      	mov	r9, r1
 8004728:	4692      	mov	sl, r2
 800472a:	eb19 0005 	adds.w	r0, r9, r5
 800472e:	eb4a 0106 	adc.w	r1, sl, r6
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	461d      	mov	r5, r3
 8004738:	f04f 0600 	mov.w	r6, #0
 800473c:	196b      	adds	r3, r5, r5
 800473e:	eb46 0406 	adc.w	r4, r6, r6
 8004742:	461a      	mov	r2, r3
 8004744:	4623      	mov	r3, r4
 8004746:	f7fc faa7 	bl	8000c98 <__aeabi_uldivmod>
 800474a:	4603      	mov	r3, r0
 800474c:	460c      	mov	r4, r1
 800474e:	461a      	mov	r2, r3
 8004750:	4b2c      	ldr	r3, [pc, #176]	; (8004804 <UART_SetConfig+0x384>)
 8004752:	fba3 1302 	umull	r1, r3, r3, r2
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	2164      	movs	r1, #100	; 0x64
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	3332      	adds	r3, #50	; 0x32
 8004764:	4a27      	ldr	r2, [pc, #156]	; (8004804 <UART_SetConfig+0x384>)
 8004766:	fba2 2303 	umull	r2, r3, r2, r3
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004772:	4498      	add	r8, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	461d      	mov	r5, r3
 8004778:	f04f 0600 	mov.w	r6, #0
 800477c:	46a9      	mov	r9, r5
 800477e:	46b2      	mov	sl, r6
 8004780:	eb19 0309 	adds.w	r3, r9, r9
 8004784:	eb4a 040a 	adc.w	r4, sl, sl
 8004788:	4699      	mov	r9, r3
 800478a:	46a2      	mov	sl, r4
 800478c:	eb19 0905 	adds.w	r9, r9, r5
 8004790:	eb4a 0a06 	adc.w	sl, sl, r6
 8004794:	f04f 0100 	mov.w	r1, #0
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047a8:	4689      	mov	r9, r1
 80047aa:	4692      	mov	sl, r2
 80047ac:	eb19 0005 	adds.w	r0, r9, r5
 80047b0:	eb4a 0106 	adc.w	r1, sl, r6
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	461d      	mov	r5, r3
 80047ba:	f04f 0600 	mov.w	r6, #0
 80047be:	196b      	adds	r3, r5, r5
 80047c0:	eb46 0406 	adc.w	r4, r6, r6
 80047c4:	461a      	mov	r2, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	f7fc fa66 	bl	8000c98 <__aeabi_uldivmod>
 80047cc:	4603      	mov	r3, r0
 80047ce:	460c      	mov	r4, r1
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <UART_SetConfig+0x384>)
 80047d4:	fba3 1302 	umull	r1, r3, r3, r2
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	2164      	movs	r1, #100	; 0x64
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	3332      	adds	r3, #50	; 0x32
 80047e6:	4a07      	ldr	r2, [pc, #28]	; (8004804 <UART_SetConfig+0x384>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	f003 0207 	and.w	r2, r3, #7
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4442      	add	r2, r8
 80047f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80047fa:	e1b2      	b.n	8004b62 <UART_SetConfig+0x6e2>
 80047fc:	40011000 	.word	0x40011000
 8004800:	40011400 	.word	0x40011400
 8004804:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4ad7      	ldr	r2, [pc, #860]	; (8004b6c <UART_SetConfig+0x6ec>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d005      	beq.n	800481e <UART_SetConfig+0x39e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4ad6      	ldr	r2, [pc, #856]	; (8004b70 <UART_SetConfig+0x6f0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	f040 80d1 	bne.w	80049c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800481e:	f7fd fff1 	bl	8002804 <HAL_RCC_GetPCLK2Freq>
 8004822:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	469a      	mov	sl, r3
 8004828:	f04f 0b00 	mov.w	fp, #0
 800482c:	46d0      	mov	r8, sl
 800482e:	46d9      	mov	r9, fp
 8004830:	eb18 0308 	adds.w	r3, r8, r8
 8004834:	eb49 0409 	adc.w	r4, r9, r9
 8004838:	4698      	mov	r8, r3
 800483a:	46a1      	mov	r9, r4
 800483c:	eb18 080a 	adds.w	r8, r8, sl
 8004840:	eb49 090b 	adc.w	r9, r9, fp
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004850:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004854:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004858:	4688      	mov	r8, r1
 800485a:	4691      	mov	r9, r2
 800485c:	eb1a 0508 	adds.w	r5, sl, r8
 8004860:	eb4b 0609 	adc.w	r6, fp, r9
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4619      	mov	r1, r3
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	f04f 0400 	mov.w	r4, #0
 8004876:	0094      	lsls	r4, r2, #2
 8004878:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800487c:	008b      	lsls	r3, r1, #2
 800487e:	461a      	mov	r2, r3
 8004880:	4623      	mov	r3, r4
 8004882:	4628      	mov	r0, r5
 8004884:	4631      	mov	r1, r6
 8004886:	f7fc fa07 	bl	8000c98 <__aeabi_uldivmod>
 800488a:	4603      	mov	r3, r0
 800488c:	460c      	mov	r4, r1
 800488e:	461a      	mov	r2, r3
 8004890:	4bb8      	ldr	r3, [pc, #736]	; (8004b74 <UART_SetConfig+0x6f4>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	469b      	mov	fp, r3
 80048a0:	f04f 0c00 	mov.w	ip, #0
 80048a4:	46d9      	mov	r9, fp
 80048a6:	46e2      	mov	sl, ip
 80048a8:	eb19 0309 	adds.w	r3, r9, r9
 80048ac:	eb4a 040a 	adc.w	r4, sl, sl
 80048b0:	4699      	mov	r9, r3
 80048b2:	46a2      	mov	sl, r4
 80048b4:	eb19 090b 	adds.w	r9, r9, fp
 80048b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048d0:	4689      	mov	r9, r1
 80048d2:	4692      	mov	sl, r2
 80048d4:	eb1b 0509 	adds.w	r5, fp, r9
 80048d8:	eb4c 060a 	adc.w	r6, ip, sl
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4619      	mov	r1, r3
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	f04f 0400 	mov.w	r4, #0
 80048ee:	0094      	lsls	r4, r2, #2
 80048f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048f4:	008b      	lsls	r3, r1, #2
 80048f6:	461a      	mov	r2, r3
 80048f8:	4623      	mov	r3, r4
 80048fa:	4628      	mov	r0, r5
 80048fc:	4631      	mov	r1, r6
 80048fe:	f7fc f9cb 	bl	8000c98 <__aeabi_uldivmod>
 8004902:	4603      	mov	r3, r0
 8004904:	460c      	mov	r4, r1
 8004906:	461a      	mov	r2, r3
 8004908:	4b9a      	ldr	r3, [pc, #616]	; (8004b74 <UART_SetConfig+0x6f4>)
 800490a:	fba3 1302 	umull	r1, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2164      	movs	r1, #100	; 0x64
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	3332      	adds	r3, #50	; 0x32
 800491c:	4a95      	ldr	r2, [pc, #596]	; (8004b74 <UART_SetConfig+0x6f4>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004928:	4498      	add	r8, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	469b      	mov	fp, r3
 800492e:	f04f 0c00 	mov.w	ip, #0
 8004932:	46d9      	mov	r9, fp
 8004934:	46e2      	mov	sl, ip
 8004936:	eb19 0309 	adds.w	r3, r9, r9
 800493a:	eb4a 040a 	adc.w	r4, sl, sl
 800493e:	4699      	mov	r9, r3
 8004940:	46a2      	mov	sl, r4
 8004942:	eb19 090b 	adds.w	r9, r9, fp
 8004946:	eb4a 0a0c 	adc.w	sl, sl, ip
 800494a:	f04f 0100 	mov.w	r1, #0
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004956:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800495a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800495e:	4689      	mov	r9, r1
 8004960:	4692      	mov	sl, r2
 8004962:	eb1b 0509 	adds.w	r5, fp, r9
 8004966:	eb4c 060a 	adc.w	r6, ip, sl
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4619      	mov	r1, r3
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	f04f 0400 	mov.w	r4, #0
 800497c:	0094      	lsls	r4, r2, #2
 800497e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004982:	008b      	lsls	r3, r1, #2
 8004984:	461a      	mov	r2, r3
 8004986:	4623      	mov	r3, r4
 8004988:	4628      	mov	r0, r5
 800498a:	4631      	mov	r1, r6
 800498c:	f7fc f984 	bl	8000c98 <__aeabi_uldivmod>
 8004990:	4603      	mov	r3, r0
 8004992:	460c      	mov	r4, r1
 8004994:	461a      	mov	r2, r3
 8004996:	4b77      	ldr	r3, [pc, #476]	; (8004b74 <UART_SetConfig+0x6f4>)
 8004998:	fba3 1302 	umull	r1, r3, r3, r2
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	2164      	movs	r1, #100	; 0x64
 80049a0:	fb01 f303 	mul.w	r3, r1, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	3332      	adds	r3, #50	; 0x32
 80049aa:	4a72      	ldr	r2, [pc, #456]	; (8004b74 <UART_SetConfig+0x6f4>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	f003 020f 	and.w	r2, r3, #15
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4442      	add	r2, r8
 80049bc:	609a      	str	r2, [r3, #8]
 80049be:	e0d0      	b.n	8004b62 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fd ff0c 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 80049c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	469a      	mov	sl, r3
 80049ca:	f04f 0b00 	mov.w	fp, #0
 80049ce:	46d0      	mov	r8, sl
 80049d0:	46d9      	mov	r9, fp
 80049d2:	eb18 0308 	adds.w	r3, r8, r8
 80049d6:	eb49 0409 	adc.w	r4, r9, r9
 80049da:	4698      	mov	r8, r3
 80049dc:	46a1      	mov	r9, r4
 80049de:	eb18 080a 	adds.w	r8, r8, sl
 80049e2:	eb49 090b 	adc.w	r9, r9, fp
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049fa:	4688      	mov	r8, r1
 80049fc:	4691      	mov	r9, r2
 80049fe:	eb1a 0508 	adds.w	r5, sl, r8
 8004a02:	eb4b 0609 	adc.w	r6, fp, r9
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	f04f 0400 	mov.w	r4, #0
 8004a18:	0094      	lsls	r4, r2, #2
 8004a1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a1e:	008b      	lsls	r3, r1, #2
 8004a20:	461a      	mov	r2, r3
 8004a22:	4623      	mov	r3, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	4631      	mov	r1, r6
 8004a28:	f7fc f936 	bl	8000c98 <__aeabi_uldivmod>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	460c      	mov	r4, r1
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b50      	ldr	r3, [pc, #320]	; (8004b74 <UART_SetConfig+0x6f4>)
 8004a34:	fba3 2302 	umull	r2, r3, r3, r2
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	469b      	mov	fp, r3
 8004a42:	f04f 0c00 	mov.w	ip, #0
 8004a46:	46d9      	mov	r9, fp
 8004a48:	46e2      	mov	sl, ip
 8004a4a:	eb19 0309 	adds.w	r3, r9, r9
 8004a4e:	eb4a 040a 	adc.w	r4, sl, sl
 8004a52:	4699      	mov	r9, r3
 8004a54:	46a2      	mov	sl, r4
 8004a56:	eb19 090b 	adds.w	r9, r9, fp
 8004a5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a5e:	f04f 0100 	mov.w	r1, #0
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a72:	4689      	mov	r9, r1
 8004a74:	4692      	mov	sl, r2
 8004a76:	eb1b 0509 	adds.w	r5, fp, r9
 8004a7a:	eb4c 060a 	adc.w	r6, ip, sl
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4619      	mov	r1, r3
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	f04f 0400 	mov.w	r4, #0
 8004a90:	0094      	lsls	r4, r2, #2
 8004a92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a96:	008b      	lsls	r3, r1, #2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	f7fc f8fa 	bl	8000c98 <__aeabi_uldivmod>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <UART_SetConfig+0x6f4>)
 8004aac:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	2164      	movs	r1, #100	; 0x64
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	3332      	adds	r3, #50	; 0x32
 8004abe:	4a2d      	ldr	r2, [pc, #180]	; (8004b74 <UART_SetConfig+0x6f4>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aca:	4498      	add	r8, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	469b      	mov	fp, r3
 8004ad0:	f04f 0c00 	mov.w	ip, #0
 8004ad4:	46d9      	mov	r9, fp
 8004ad6:	46e2      	mov	sl, ip
 8004ad8:	eb19 0309 	adds.w	r3, r9, r9
 8004adc:	eb4a 040a 	adc.w	r4, sl, sl
 8004ae0:	4699      	mov	r9, r3
 8004ae2:	46a2      	mov	sl, r4
 8004ae4:	eb19 090b 	adds.w	r9, r9, fp
 8004ae8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004aec:	f04f 0100 	mov.w	r1, #0
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004afc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b00:	4689      	mov	r9, r1
 8004b02:	4692      	mov	sl, r2
 8004b04:	eb1b 0509 	adds.w	r5, fp, r9
 8004b08:	eb4c 060a 	adc.w	r6, ip, sl
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4619      	mov	r1, r3
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	f04f 0400 	mov.w	r4, #0
 8004b1e:	0094      	lsls	r4, r2, #2
 8004b20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b24:	008b      	lsls	r3, r1, #2
 8004b26:	461a      	mov	r2, r3
 8004b28:	4623      	mov	r3, r4
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	4631      	mov	r1, r6
 8004b2e:	f7fc f8b3 	bl	8000c98 <__aeabi_uldivmod>
 8004b32:	4603      	mov	r3, r0
 8004b34:	460c      	mov	r4, r1
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <UART_SetConfig+0x6f4>)
 8004b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2164      	movs	r1, #100	; 0x64
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	3332      	adds	r3, #50	; 0x32
 8004b4c:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <UART_SetConfig+0x6f4>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	f003 020f 	and.w	r2, r3, #15
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4442      	add	r2, r8
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	e7ff      	b.n	8004b62 <UART_SetConfig+0x6e2>
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6c:	40011000 	.word	0x40011000
 8004b70:	40011400 	.word	0x40011400
 8004b74:	51eb851f 	.word	0x51eb851f

08004b78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <MX_DMA_Init+0x3c>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	4a0b      	ldr	r2, [pc, #44]	; (8004bb4 <MX_DMA_Init+0x3c>)
 8004b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8e:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <MX_DMA_Init+0x3c>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2010      	movs	r0, #16
 8004ba0:	f7fc fb47 	bl	8001232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004ba4:	2010      	movs	r0, #16
 8004ba6:	f7fc fb60 	bl	800126a <HAL_NVIC_EnableIRQ>

}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08c      	sub	sp, #48	; 0x30
 8004bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbe:	f107 031c 	add.w	r3, r7, #28
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	4ba4      	ldr	r3, [pc, #656]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	4aa3      	ldr	r2, [pc, #652]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004bd8:	f043 0310 	orr.w	r3, r3, #16
 8004bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bde:	4ba1      	ldr	r3, [pc, #644]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	4b9d      	ldr	r3, [pc, #628]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	4a9c      	ldr	r2, [pc, #624]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004bf4:	f043 0304 	orr.w	r3, r3, #4
 8004bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfa:	4b9a      	ldr	r3, [pc, #616]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	4b96      	ldr	r3, [pc, #600]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4a95      	ldr	r2, [pc, #596]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30
 8004c16:	4b93      	ldr	r3, [pc, #588]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4b8f      	ldr	r3, [pc, #572]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a8e      	ldr	r2, [pc, #568]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b8c      	ldr	r3, [pc, #560]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	4b88      	ldr	r3, [pc, #544]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a87      	ldr	r2, [pc, #540]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c48:	f043 0302 	orr.w	r3, r3, #2
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b85      	ldr	r3, [pc, #532]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	60bb      	str	r3, [r7, #8]
 8004c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	4b81      	ldr	r3, [pc, #516]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4a80      	ldr	r2, [pc, #512]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c64:	f043 0308 	orr.w	r3, r3, #8
 8004c68:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6a:	4b7e      	ldr	r3, [pc, #504]	; (8004e64 <MX_GPIO_Init+0x2ac>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	607b      	str	r3, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004c76:	2200      	movs	r2, #0
 8004c78:	2108      	movs	r1, #8
 8004c7a:	487b      	ldr	r0, [pc, #492]	; (8004e68 <MX_GPIO_Init+0x2b0>)
 8004c7c:	f7fd f822 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004c80:	2201      	movs	r2, #1
 8004c82:	2101      	movs	r1, #1
 8004c84:	4879      	ldr	r0, [pc, #484]	; (8004e6c <MX_GPIO_Init+0x2b4>)
 8004c86:	f7fd f81d 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, En_STEPPER_UPPER_Pin|En_STEPPER_LOWER_Pin|Dc_IN2_Pin|Dc_IN1_Pin 
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f648 6110 	movw	r1, #36368	; 0x8e10
 8004c90:	4877      	ldr	r0, [pc, #476]	; (8004e70 <MX_GPIO_Init+0x2b8>)
 8004c92:	f7fd f817 	bl	8001cc4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step_STEPPER_LOWER_Pin|Dir_STEPPER_LOWER_Pin|Step_STEPPER_UPPER_Pin|Dir_STEPPER_UPPER_Pin, GPIO_PIN_RESET);
 8004c96:	2200      	movs	r2, #0
 8004c98:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8004c9c:	4873      	ldr	r0, [pc, #460]	; (8004e6c <MX_GPIO_Init+0x2b4>)
 8004c9e:	f7fd f811 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ca2:	2304      	movs	r3, #4
 8004ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cae:	f107 031c 	add.w	r3, r7, #28
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	486c      	ldr	r0, [pc, #432]	; (8004e68 <MX_GPIO_Init+0x2b0>)
 8004cb6:	f7fc fe83 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004cba:	2308      	movs	r3, #8
 8004cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004cca:	f107 031c 	add.w	r3, r7, #28
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4865      	ldr	r0, [pc, #404]	; (8004e68 <MX_GPIO_Init+0x2b0>)
 8004cd2:	f7fc fe75 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8004cd6:	2332      	movs	r3, #50	; 0x32
 8004cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004cda:	4b66      	ldr	r3, [pc, #408]	; (8004e74 <MX_GPIO_Init+0x2bc>)
 8004cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ce2:	f107 031c 	add.w	r3, r7, #28
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	485f      	ldr	r0, [pc, #380]	; (8004e68 <MX_GPIO_Init+0x2b0>)
 8004cea:	f7fc fe69 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Dir_STEPPER_LOWER_Pin|Step_STEPPER_UPPER_Pin|Dir_STEPPER_UPPER_Pin;
 8004cee:	f240 3381 	movw	r3, #897	; 0x381
 8004cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d00:	f107 031c 	add.w	r3, r7, #28
 8004d04:	4619      	mov	r1, r3
 8004d06:	4859      	ldr	r0, [pc, #356]	; (8004e6c <MX_GPIO_Init+0x2b4>)
 8004d08:	f7fc fe5a 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004d0c:	2308      	movs	r3, #8
 8004d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	2302      	movs	r3, #2
 8004d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d1c:	2305      	movs	r3, #5
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004d20:	f107 031c 	add.w	r3, r7, #28
 8004d24:	4619      	mov	r1, r3
 8004d26:	4851      	ldr	r0, [pc, #324]	; (8004e6c <MX_GPIO_Init+0x2b4>)
 8004d28:	f7fc fe4a 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004d30:	4b50      	ldr	r3, [pc, #320]	; (8004e74 <MX_GPIO_Init+0x2bc>)
 8004d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d38:	f107 031c 	add.w	r3, r7, #28
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	484e      	ldr	r0, [pc, #312]	; (8004e78 <MX_GPIO_Init+0x2c0>)
 8004d40:	f7fc fe3e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004d44:	2310      	movs	r3, #16
 8004d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d54:	2306      	movs	r3, #6
 8004d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004d58:	f107 031c 	add.w	r3, r7, #28
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4846      	ldr	r0, [pc, #280]	; (8004e78 <MX_GPIO_Init+0x2c0>)
 8004d60:	f7fc fe2e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MOSI_Pin;
 8004d64:	23a0      	movs	r3, #160	; 0xa0
 8004d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d74:	2305      	movs	r3, #5
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d78:	f107 031c 	add.w	r3, r7, #28
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	483e      	ldr	r0, [pc, #248]	; (8004e78 <MX_GPIO_Init+0x2c0>)
 8004d80:	f7fc fe1e 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8004d84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d92:	2300      	movs	r3, #0
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d96:	2305      	movs	r3, #5
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d9a:	f107 031c 	add.w	r3, r7, #28
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4836      	ldr	r0, [pc, #216]	; (8004e7c <MX_GPIO_Init+0x2c4>)
 8004da2:	f7fc fe0d 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = En_STEPPER_UPPER_Pin|En_STEPPER_LOWER_Pin;
 8004da6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dac:	2301      	movs	r3, #1
 8004dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004db4:	2301      	movs	r3, #1
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004db8:	f107 031c 	add.w	r3, r7, #28
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	482c      	ldr	r0, [pc, #176]	; (8004e70 <MX_GPIO_Init+0x2b8>)
 8004dc0:	f7fc fdfe 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Dc_IN2_Pin|Dc_IN1_Pin|Audio_RST_Pin;
 8004dc4:	f648 0310 	movw	r3, #34832	; 0x8810
 8004dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004dd6:	f107 031c 	add.w	r3, r7, #28
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4824      	ldr	r0, [pc, #144]	; (8004e70 <MX_GPIO_Init+0x2b8>)
 8004dde:	f7fc fdef 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Step_STEPPER_LOWER_Pin;
 8004de2:	2340      	movs	r3, #64	; 0x40
 8004de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004de6:	2301      	movs	r3, #1
 8004de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dee:	2303      	movs	r3, #3
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Step_STEPPER_LOWER_GPIO_Port, &GPIO_InitStruct);
 8004df2:	f107 031c 	add.w	r3, r7, #28
 8004df6:	4619      	mov	r1, r3
 8004df8:	481c      	ldr	r0, [pc, #112]	; (8004e6c <MX_GPIO_Init+0x2b4>)
 8004dfa:	f7fc fde1 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004dfe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e04:	2302      	movs	r3, #2
 8004e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004e10:	230a      	movs	r3, #10
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e14:	f107 031c 	add.w	r3, r7, #28
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4817      	ldr	r0, [pc, #92]	; (8004e78 <MX_GPIO_Init+0x2c0>)
 8004e1c:	f7fc fdd0 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8004e20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e26:	2302      	movs	r3, #2
 8004e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e32:	2306      	movs	r3, #6
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e36:	f107 031c 	add.w	r3, r7, #28
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	480b      	ldr	r0, [pc, #44]	; (8004e6c <MX_GPIO_Init+0x2b4>)
 8004e3e:	f7fc fdbf 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004e42:	2320      	movs	r3, #32
 8004e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e46:	2300      	movs	r3, #0
 8004e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004e4e:	f107 031c 	add.w	r3, r7, #28
 8004e52:	4619      	mov	r1, r3
 8004e54:	4806      	ldr	r0, [pc, #24]	; (8004e70 <MX_GPIO_Init+0x2b8>)
 8004e56:	f7fc fdb3 	bl	80019c0 <HAL_GPIO_Init>

}
 8004e5a:	bf00      	nop
 8004e5c:	3730      	adds	r7, #48	; 0x30
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40023800 	.word	0x40023800
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40020800 	.word	0x40020800
 8004e70:	40020c00 	.word	0x40020c00
 8004e74:	10120000 	.word	0x10120000
 8004e78:	40020000 	.word	0x40020000
 8004e7c:	40020400 	.word	0x40020400

08004e80 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004e84:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004e86:	4a13      	ldr	r2, [pc, #76]	; (8004ed4 <MX_I2C1_Init+0x54>)
 8004e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004e8a:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004e8c:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <MX_I2C1_Init+0x58>)
 8004e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ea2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ea4:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004ebc:	4804      	ldr	r0, [pc, #16]	; (8004ed0 <MX_I2C1_Init+0x50>)
 8004ebe:	f7fc ff1b 	bl	8001cf8 <HAL_I2C_Init>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004ec8:	f000 fc6a 	bl	80057a0 <Error_Handler>
  }

}
 8004ecc:	bf00      	nop
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	2000020c 	.word	0x2000020c
 8004ed4:	40005400 	.word	0x40005400
 8004ed8:	00061a80 	.word	0x00061a80

08004edc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <HAL_I2C_MspInit+0x84>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d12c      	bne.n	8004f58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <HAL_I2C_MspInit+0x88>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	4a17      	ldr	r2, [pc, #92]	; (8004f64 <HAL_I2C_MspInit+0x88>)
 8004f08:	f043 0302 	orr.w	r3, r3, #2
 8004f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0e:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <HAL_I2C_MspInit+0x88>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8004f1a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f20:	2312      	movs	r3, #18
 8004f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f24:	2301      	movs	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f30:	f107 0314 	add.w	r3, r7, #20
 8004f34:	4619      	mov	r1, r3
 8004f36:	480c      	ldr	r0, [pc, #48]	; (8004f68 <HAL_I2C_MspInit+0x8c>)
 8004f38:	f7fc fd42 	bl	80019c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_I2C_MspInit+0x88>)
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_I2C_MspInit+0x88>)
 8004f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_I2C_MspInit+0x88>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004f58:	bf00      	nop
 8004f5a:	3728      	adds	r7, #40	; 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40005400 	.word	0x40005400
 8004f64:	40023800 	.word	0x40023800
 8004f68:	40020400 	.word	0x40020400

08004f6c <_write>:
		flaga_fabrik_gorny = 2;
	}

}

int _write(int file, char *ptr, int len) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	2332      	movs	r3, #50	; 0x32
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	4803      	ldr	r0, [pc, #12]	; (8004f90 <_write+0x24>)
 8004f82:	f7fe fe38 	bl	8003bf6 <HAL_UART_Transmit>
	return len;
 8004f86:	687b      	ldr	r3, [r7, #4]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20000528 	.word	0x20000528
 8004f94:	00000000 	.word	0x00000000

08004f98 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a39      	ldr	r2, [pc, #228]	; (8005088 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d167      	bne.n	8005078 <HAL_TIM_IC_CaptureCallback+0xe0>
		uint16_t time;
		H_sum = 0;
 8004fa8:	4b38      	ldr	r3, [pc, #224]	; (800508c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]

		time = __HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_2)
 8004fae:	4b36      	ldr	r3, [pc, #216]	; (8005088 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
				- __HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_1);
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	4b34      	ldr	r3, [pc, #208]	; (8005088 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	b29b      	uxth	r3, r3
		time = __HAL_TIM_GetCompare(&htim3, TIM_CHANNEL_2)
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	817b      	strh	r3, [r7, #10]
		if (time < 23615) {
 8004fc2:	897b      	ldrh	r3, [r7, #10]
 8004fc4:	f645 423e 	movw	r2, #23614	; 0x5c3e
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d855      	bhi.n	8005078 <HAL_TIM_IC_CaptureCallback+0xe0>
			Hcsr04_Distance_tmp = (float) time / 2.0 * 0.0343;
 8004fcc:	897b      	ldrh	r3, [r7, #10]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	ee17 0a90 	vmov	r0, s15
 8004fda:	f7fb fabd 	bl	8000558 <__aeabi_f2d>
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fe6:	f7fb fc39 	bl	800085c <__aeabi_ddiv>
 8004fea:	4603      	mov	r3, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	4618      	mov	r0, r3
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	a323      	add	r3, pc, #140	; (adr r3, 8005080 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	f7fb fb06 	bl	8000608 <__aeabi_dmul>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	4618      	mov	r0, r3
 8005002:	4621      	mov	r1, r4
 8005004:	f7fb fdf8 	bl	8000bf8 <__aeabi_d2f>
 8005008:	4602      	mov	r2, r0
 800500a:	4b21      	ldr	r3, [pc, #132]	; (8005090 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800500c:	601a      	str	r2, [r3, #0]
			sprintf(buff, "X %.2f ", Hcsr04_Distance_tmp);
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f7fb faa0 	bl	8000558 <__aeabi_f2d>
 8005018:	4603      	mov	r3, r0
 800501a:	460c      	mov	r4, r1
 800501c:	461a      	mov	r2, r3
 800501e:	4623      	mov	r3, r4
 8005020:	491c      	ldr	r1, [pc, #112]	; (8005094 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8005022:	481d      	ldr	r0, [pc, #116]	; (8005098 <HAL_TIM_IC_CaptureCallback+0x100>)
 8005024:	f002 f8c0 	bl	80071a8 <siprintf>
			for (int i = 0; i < strlen(buff); i++) {
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e00c      	b.n	8005048 <HAL_TIM_IC_CaptureCallback+0xb0>
				H_sum += buff[i];
 800502e:	4a1a      	ldr	r2, [pc, #104]	; (8005098 <HAL_TIM_IC_CaptureCallback+0x100>)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	4b14      	ldr	r3, [pc, #80]	; (800508c <HAL_TIM_IC_CaptureCallback+0xf4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4413      	add	r3, r2
 800503e:	4a13      	ldr	r2, [pc, #76]	; (800508c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8005040:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < strlen(buff); i++) {
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3301      	adds	r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	4813      	ldr	r0, [pc, #76]	; (8005098 <HAL_TIM_IC_CaptureCallback+0x100>)
 800504a:	f7fb f8c9 	bl	80001e0 <strlen>
 800504e:	4602      	mov	r2, r0
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	429a      	cmp	r2, r3
 8005054:	d8eb      	bhi.n	800502e <HAL_TIM_IC_CaptureCallback+0x96>
			}
			H_sum = H_sum % 37;
 8005056:	4b0d      	ldr	r3, [pc, #52]	; (800508c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <HAL_TIM_IC_CaptureCallback+0x104>)
 800505c:	fb83 2301 	smull	r2, r3, r3, r1
 8005060:	440b      	add	r3, r1
 8005062:	115a      	asrs	r2, r3, #5
 8005064:	17cb      	asrs	r3, r1, #31
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	4613      	mov	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	1aca      	subs	r2, r1, r3
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8005076:	601a      	str	r2, [r3, #0]
		}
	}
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	bd90      	pop	{r4, r7, pc}
 8005080:	04816f00 	.word	0x04816f00
 8005084:	3fa18fc5 	.word	0x3fa18fc5
 8005088:	20000388 	.word	0x20000388
 800508c:	200002d8 	.word	0x200002d8
 8005090:	200002d0 	.word	0x200002d0
 8005094:	0800a990 	.word	0x0800a990
 8005098:	200002bc 	.word	0x200002bc
 800509c:	dd67c8a7 	.word	0xdd67c8a7

080050a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a67      	ldr	r2, [pc, #412]	; (8005248 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d150      	bne.n	8005152 <HAL_TIM_PeriodElapsedCallback+0xb2>
		if (flag == 1 && flaga_dolnego_stepp == 1 && step_dolnego < 25800) {
 80050b0:	4b66      	ldr	r3, [pc, #408]	; (800524c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d125      	bne.n	8005104 <HAL_TIM_PeriodElapsedCallback+0x64>
 80050b8:	4b65      	ldr	r3, [pc, #404]	; (8005250 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d121      	bne.n	8005104 <HAL_TIM_PeriodElapsedCallback+0x64>
 80050c0:	4b64      	ldr	r3, [pc, #400]	; (8005254 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	f246 42c7 	movw	r2, #25799	; 0x64c7
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d81b      	bhi.n	8005104 <HAL_TIM_PeriodElapsedCallback+0x64>
			if (out_dolnego_stepp) {
 80050cc:	4b62      	ldr	r3, [pc, #392]	; (8005258 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_TIM_PeriodElapsedCallback+0x46>
				out_dolnego_stepp = 0;
 80050d4:	4b60      	ldr	r3, [pc, #384]	; (8005258 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 80050da:	2200      	movs	r2, #0
 80050dc:	2140      	movs	r1, #64	; 0x40
 80050de:	485f      	ldr	r0, [pc, #380]	; (800525c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80050e0:	f7fc fdf0 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_dolnego_stepp) {
 80050e4:	e035      	b.n	8005152 <HAL_TIM_PeriodElapsedCallback+0xb2>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
			} else {
				step_dolnego++;
 80050e6:	4b5b      	ldr	r3, [pc, #364]	; (8005254 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	3301      	adds	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	4b59      	ldr	r3, [pc, #356]	; (8005254 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80050f0:	801a      	strh	r2, [r3, #0]
				out_dolnego_stepp = 1;
 80050f2:	4b59      	ldr	r3, [pc, #356]	; (8005258 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 80050f8:	2201      	movs	r2, #1
 80050fa:	2140      	movs	r1, #64	; 0x40
 80050fc:	4857      	ldr	r0, [pc, #348]	; (800525c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80050fe:	f7fc fde1 	bl	8001cc4 <HAL_GPIO_WritePin>
			if (out_dolnego_stepp) {
 8005102:	e026      	b.n	8005152 <HAL_TIM_PeriodElapsedCallback+0xb2>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_SET);
			}
		} else if (flag == 1 && flaga_dolnego_stepp == 2 && step_dolnego > 0) {
 8005104:	4b51      	ldr	r3, [pc, #324]	; (800524c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d122      	bne.n	8005152 <HAL_TIM_PeriodElapsedCallback+0xb2>
 800510c:	4b50      	ldr	r3, [pc, #320]	; (8005250 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d11e      	bne.n	8005152 <HAL_TIM_PeriodElapsedCallback+0xb2>
 8005114:	4b4f      	ldr	r3, [pc, #316]	; (8005254 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <HAL_TIM_PeriodElapsedCallback+0xb2>
			if (out_dolnego_stepp) {
 800511c:	4b4e      	ldr	r3, [pc, #312]	; (8005258 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_TIM_PeriodElapsedCallback+0x96>
				out_dolnego_stepp = 0;
 8005124:	4b4c      	ldr	r3, [pc, #304]	; (8005258 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8005126:	2200      	movs	r2, #0
 8005128:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 800512a:	2200      	movs	r2, #0
 800512c:	2140      	movs	r1, #64	; 0x40
 800512e:	484b      	ldr	r0, [pc, #300]	; (800525c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8005130:	f7fc fdc8 	bl	8001cc4 <HAL_GPIO_WritePin>
 8005134:	e00d      	b.n	8005152 <HAL_TIM_PeriodElapsedCallback+0xb2>
				Step_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
			} else {
				step_dolnego--;
 8005136:	4b47      	ldr	r3, [pc, #284]	; (8005254 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	4b45      	ldr	r3, [pc, #276]	; (8005254 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8005140:	801a      	strh	r2, [r3, #0]
				out_dolnego_stepp = 1;
 8005142:	4b45      	ldr	r3, [pc, #276]	; (8005258 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8005144:	2201      	movs	r2, #1
 8005146:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Step_STEPPER_LOWER_GPIO_Port,
 8005148:	2201      	movs	r2, #1
 800514a:	2140      	movs	r1, #64	; 0x40
 800514c:	4843      	ldr	r0, [pc, #268]	; (800525c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800514e:	f7fc fdb9 	bl	8001cc4 <HAL_GPIO_WritePin>
		}
	}
	if (htim == &htim11) {

	}
	if (htim == &htim10) {
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a42      	ldr	r2, [pc, #264]	; (8005260 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10e      	bne.n	8005178 <HAL_TIM_PeriodElapsedCallback+0xd8>
		printf("X %.2f #%d \r\n", Hcsr04_Distance_tmp, H_sum);
 800515a:	4b42      	ldr	r3, [pc, #264]	; (8005264 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb f9fa 	bl	8000558 <__aeabi_f2d>
 8005164:	460a      	mov	r2, r1
 8005166:	4601      	mov	r1, r0
 8005168:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	4613      	mov	r3, r2
 8005170:	460a      	mov	r2, r1
 8005172:	483e      	ldr	r0, [pc, #248]	; (800526c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8005174:	f001 fffa 	bl	800716c <iprintf>


	}
	if (htim == &htim9) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a3d      	ldr	r2, [pc, #244]	; (8005270 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d15f      	bne.n	8005240 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		if (flag == 1 && flaga_servo_joint == 1
 8005180:	4b32      	ldr	r3, [pc, #200]	; (800524c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d114      	bne.n	80051b2 <HAL_TIM_PeriodElapsedCallback+0x112>
 8005188:	4b3a      	ldr	r3, [pc, #232]	; (8005274 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d110      	bne.n	80051b2 <HAL_TIM_PeriodElapsedCallback+0x112>
				&& pwm_duty_servo_joint < 1250) {
 8005190:	4b39      	ldr	r3, [pc, #228]	; (8005278 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8005198:	4293      	cmp	r3, r2
 800519a:	dc0a      	bgt.n	80051b2 <HAL_TIM_PeriodElapsedCallback+0x112>
			pwm_duty_servo_joint++;
 800519c:	4b36      	ldr	r3, [pc, #216]	; (8005278 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a35      	ldr	r2, [pc, #212]	; (8005278 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80051a4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty_servo_joint);
 80051a6:	4b34      	ldr	r3, [pc, #208]	; (8005278 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b34      	ldr	r3, [pc, #208]	; (800527c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	635a      	str	r2, [r3, #52]	; 0x34
 80051b0:	e046      	b.n	8005240 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		} else if (flag == 1 && flaga_servo_joint == 2
 80051b2:	4b26      	ldr	r3, [pc, #152]	; (800524c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d112      	bne.n	80051e0 <HAL_TIM_PeriodElapsedCallback+0x140>
 80051ba:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_PeriodElapsedCallback+0x140>
				&& pwm_duty_servo_joint > 250) {
 80051c2:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2bfa      	cmp	r3, #250	; 0xfa
 80051c8:	dd0a      	ble.n	80051e0 <HAL_TIM_PeriodElapsedCallback+0x140>
			pwm_duty_servo_joint--;
 80051ca:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	4a29      	ldr	r2, [pc, #164]	; (8005278 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80051d2:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty_servo_joint);
 80051d4:	4b28      	ldr	r3, [pc, #160]	; (8005278 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b28      	ldr	r3, [pc, #160]	; (800527c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	635a      	str	r2, [r3, #52]	; 0x34
 80051de:	e02f      	b.n	8005240 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		} else if (flag == 1 && flaga_servo_effector == 1
 80051e0:	4b1a      	ldr	r3, [pc, #104]	; (800524c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d114      	bne.n	8005212 <HAL_TIM_PeriodElapsedCallback+0x172>
 80051e8:	4b25      	ldr	r3, [pc, #148]	; (8005280 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d110      	bne.n	8005212 <HAL_TIM_PeriodElapsedCallback+0x172>
				&& pwm_duty_servo_effector < 1250) {
 80051f0:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80051f8:	4293      	cmp	r3, r2
 80051fa:	dc0a      	bgt.n	8005212 <HAL_TIM_PeriodElapsedCallback+0x172>
			pwm_duty_servo_effector += 2;
 80051fc:	4b21      	ldr	r3, [pc, #132]	; (8005284 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3302      	adds	r3, #2
 8005202:	4a20      	ldr	r2, [pc, #128]	; (8005284 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8005204:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 8005206:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b1c      	ldr	r3, [pc, #112]	; (800527c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
 8005210:	e016      	b.n	8005240 <HAL_TIM_PeriodElapsedCallback+0x1a0>
					pwm_duty_servo_effector);
		} else if (flag == 1 && flaga_servo_effector == 2
 8005212:	4b0e      	ldr	r3, [pc, #56]	; (800524c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d112      	bne.n	8005240 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 800521a:	4b19      	ldr	r3, [pc, #100]	; (8005280 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_PeriodElapsedCallback+0x1a0>
				&& pwm_duty_servo_effector > 250) {
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2bfa      	cmp	r3, #250	; 0xfa
 8005228:	dd0a      	ble.n	8005240 <HAL_TIM_PeriodElapsedCallback+0x1a0>
			pwm_duty_servo_effector -= 2;
 800522a:	4b16      	ldr	r3, [pc, #88]	; (8005284 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3b02      	subs	r3, #2
 8005230:	4a14      	ldr	r2, [pc, #80]	; (8005284 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8005232:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 8005234:	4b13      	ldr	r3, [pc, #76]	; (8005284 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
					pwm_duty_servo_effector);
		}
	}
}
 800523e:	e7ff      	b.n	8005240 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000488 	.word	0x20000488
 800524c:	200002b8 	.word	0x200002b8
 8005250:	20000307 	.word	0x20000307
 8005254:	200002d6 	.word	0x200002d6
 8005258:	200001f8 	.word	0x200001f8
 800525c:	40020800 	.word	0x40020800
 8005260:	20000348 	.word	0x20000348
 8005264:	200002d0 	.word	0x200002d0
 8005268:	200002d8 	.word	0x200002d8
 800526c:	0800a998 	.word	0x0800a998
 8005270:	20000448 	.word	0x20000448
 8005274:	200002d4 	.word	0x200002d4
 8005278:	200002dc 	.word	0x200002dc
 800527c:	20000408 	.word	0x20000408
 8005280:	20000306 	.word	0x20000306
 8005284:	200002e0 	.word	0x200002e0

08005288 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	flag = 1;
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_UART_RxCpltCallback+0x20>)
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, Received, 15);
 8005296:	220f      	movs	r2, #15
 8005298:	4904      	ldr	r1, [pc, #16]	; (80052ac <HAL_UART_RxCpltCallback+0x24>)
 800529a:	4805      	ldr	r0, [pc, #20]	; (80052b0 <HAL_UART_RxCpltCallback+0x28>)
 800529c:	f7fe fd44 	bl	8003d28 <HAL_UART_Receive_DMA>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	200002b8 	.word	0x200002b8
 80052ac:	20000260 	.word	0x20000260
 80052b0:	20000528 	.word	0x20000528

080052b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	flag = 0;
 80052ba:	4ba1      	ldr	r3, [pc, #644]	; (8005540 <main+0x28c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]
	H_sum = 0;
 80052c0:	4ba0      	ldr	r3, [pc, #640]	; (8005544 <main+0x290>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
	pwm_duty = 0;
 80052c6:	4ba0      	ldr	r3, [pc, #640]	; (8005548 <main+0x294>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
	flaga_dolnego_stepp = 0;
 80052cc:	4b9f      	ldr	r3, [pc, #636]	; (800554c <main+0x298>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	701a      	strb	r2, [r3, #0]
	flaga_gornego_stepp = 0;
 80052d2:	4b9f      	ldr	r3, [pc, #636]	; (8005550 <main+0x29c>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
	pwm_duty_servo_joint = 250;
 80052d8:	4b9e      	ldr	r3, [pc, #632]	; (8005554 <main+0x2a0>)
 80052da:	22fa      	movs	r2, #250	; 0xfa
 80052dc:	601a      	str	r2, [r3, #0]
	pwm_duty_servo_effector = 250;
 80052de:	4b9e      	ldr	r3, [pc, #632]	; (8005558 <main+0x2a4>)
 80052e0:	22fa      	movs	r2, #250	; 0xfa
 80052e2:	601a      	str	r2, [r3, #0]
	flaga_servo_joint = 0;
 80052e4:	4b9d      	ldr	r3, [pc, #628]	; (800555c <main+0x2a8>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
	flaga_servo_effector = 0;
 80052ea:	4b9d      	ldr	r3, [pc, #628]	; (8005560 <main+0x2ac>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
	step_dolnego = 12900;
 80052f0:	4b9c      	ldr	r3, [pc, #624]	; (8005564 <main+0x2b0>)
 80052f2:	f243 2264 	movw	r2, #12900	; 0x3264
 80052f6:	801a      	strh	r2, [r3, #0]
	step_gornego = 0;
 80052f8:	4b9b      	ldr	r3, [pc, #620]	; (8005568 <main+0x2b4>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	801a      	strh	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80052fe:	f7fb fe4b 	bl	8000f98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005302:	f000 f9e5 	bl	80056d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005306:	f7ff fc57 	bl	8004bb8 <MX_GPIO_Init>
	MX_DMA_Init();
 800530a:	f7ff fc35 	bl	8004b78 <MX_DMA_Init>
	MX_TIM3_Init();
 800530e:	f000 fc8d 	bl	8005c2c <MX_TIM3_Init>
	MX_TIM4_Init();
 8005312:	f000 fd35 	bl	8005d80 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8005316:	f000 ffdf 	bl	80062d8 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800531a:	f000 fb8f 	bl	8005a3c <MX_TIM1_Init>
	MX_I2C1_Init();
 800531e:	f7ff fdaf 	bl	8004e80 <MX_I2C1_Init>
	MX_TIM2_Init();
 8005322:	f000 fc37 	bl	8005b94 <MX_TIM2_Init>
	MX_TIM11_Init();
 8005326:	f000 fe15 	bl	8005f54 <MX_TIM11_Init>
	MX_TIM9_Init();
 800532a:	f000 fdb5 	bl	8005e98 <MX_TIM9_Init>
	MX_TIM10_Init();
 800532e:	f000 fded 	bl	8005f0c <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim4);
 8005332:	488e      	ldr	r0, [pc, #568]	; (800556c <main+0x2b8>)
 8005334:	f7fd faa5 	bl	8002882 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005338:	2100      	movs	r1, #0
 800533a:	488c      	ldr	r0, [pc, #560]	; (800556c <main+0x2b8>)
 800533c:	f7fd fb1e 	bl	800297c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005340:	2104      	movs	r1, #4
 8005342:	488a      	ldr	r0, [pc, #552]	; (800556c <main+0x2b8>)
 8005344:	f7fd fb1a 	bl	800297c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005348:	2108      	movs	r1, #8
 800534a:	4888      	ldr	r0, [pc, #544]	; (800556c <main+0x2b8>)
 800534c:	f7fd fb16 	bl	800297c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(&htim3);
 8005350:	4887      	ldr	r0, [pc, #540]	; (8005570 <main+0x2bc>)
 8005352:	f7fd fa96 	bl	8002882 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8005356:	2108      	movs	r1, #8
 8005358:	4885      	ldr	r0, [pc, #532]	; (8005570 <main+0x2bc>)
 800535a:	f7fd fb0f 	bl	800297c <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 800535e:	2100      	movs	r1, #0
 8005360:	4883      	ldr	r0, [pc, #524]	; (8005570 <main+0x2bc>)
 8005362:	f7fd fb72 	bl	8002a4a <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8005366:	2104      	movs	r1, #4
 8005368:	4881      	ldr	r0, [pc, #516]	; (8005570 <main+0x2bc>)
 800536a:	f7fd fb91 	bl	8002a90 <HAL_TIM_IC_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2);
 800536e:	4881      	ldr	r0, [pc, #516]	; (8005574 <main+0x2c0>)
 8005370:	f7fd faab 	bl	80028ca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);
 8005374:	4880      	ldr	r0, [pc, #512]	; (8005578 <main+0x2c4>)
 8005376:	f7fd faa8 	bl	80028ca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 800537a:	4880      	ldr	r0, [pc, #512]	; (800557c <main+0x2c8>)
 800537c:	f7fd faa5 	bl	80028ca <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8005380:	487f      	ldr	r0, [pc, #508]	; (8005580 <main+0x2cc>)
 8005382:	f7fd faa2 	bl	80028ca <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start(&htim1);
 8005386:	487f      	ldr	r0, [pc, #508]	; (8005584 <main+0x2d0>)
 8005388:	f7fd fa7b 	bl	8002882 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800538c:	2100      	movs	r1, #0
 800538e:	487d      	ldr	r0, [pc, #500]	; (8005584 <main+0x2d0>)
 8005390:	f7fd faf4 	bl	800297c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8005394:	2104      	movs	r1, #4
 8005396:	487b      	ldr	r0, [pc, #492]	; (8005584 <main+0x2d0>)
 8005398:	f7fd faf0 	bl	800297c <HAL_TIM_PWM_Start>

	HAL_UART_Receive_DMA(&huart2, Received, 15);
 800539c:	220f      	movs	r2, #15
 800539e:	497a      	ldr	r1, [pc, #488]	; (8005588 <main+0x2d4>)
 80053a0:	487a      	ldr	r0, [pc, #488]	; (800558c <main+0x2d8>)
 80053a2:	f7fe fcc1 	bl	8003d28 <HAL_UART_Receive_DMA>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_duty_servo_joint);
 80053a6:	4b6b      	ldr	r3, [pc, #428]	; (8005554 <main+0x2a0>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	4b76      	ldr	r3, [pc, #472]	; (8005584 <main+0x2d0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	635a      	str	r2, [r3, #52]	; 0x34
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (flag == 1) {
 80053b0:	4b63      	ldr	r3, [pc, #396]	; (8005540 <main+0x28c>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f040 8163 	bne.w	8005680 <main+0x3cc>
			token =strtok(Received, " ");
 80053ba:	4975      	ldr	r1, [pc, #468]	; (8005590 <main+0x2dc>)
 80053bc:	4872      	ldr	r0, [pc, #456]	; (8005588 <main+0x2d4>)
 80053be:	f002 fd33 	bl	8007e28 <strtok>
 80053c2:	6078      	str	r0, [r7, #4]
			switch (atoi(token)) {
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 f85c 	bl	8006482 <atoi>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b0d      	cmp	r3, #13
 80053ce:	f200 812c 	bhi.w	800562a <main+0x376>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <main+0x124>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	08005411 	.word	0x08005411
 80053dc:	080054a5 	.word	0x080054a5
 80053e0:	080054f3 	.word	0x080054f3
 80053e4:	080055a1 	.word	0x080055a1
 80053e8:	080055ef 	.word	0x080055ef
 80053ec:	0800560d 	.word	0x0800560d
 80053f0:	08005685 	.word	0x08005685
 80053f4:	08005685 	.word	0x08005685
 80053f8:	08005685 	.word	0x08005685
 80053fc:	08005685 	.word	0x08005685
 8005400:	08005685 	.word	0x08005685
 8005404:	08005685 	.word	0x08005685
 8005408:	08005685 	.word	0x08005685
 800540c:	08005685 	.word	0x08005685
			case 0: // do przodu
				if (Hcsr04_Distance_tmp >= 50) {
 8005410:	4b60      	ldr	r3, [pc, #384]	; (8005594 <main+0x2e0>)
 8005412:	edd3 7a00 	vldr	s15, [r3]
 8005416:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005598 <main+0x2e4>
 800541a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800541e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005422:	db26      	blt.n	8005472 <main+0x1be>
					HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin,
 8005424:	2200      	movs	r2, #0
 8005426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800542a:	485c      	ldr	r0, [pc, #368]	; (800559c <main+0x2e8>)
 800542c:	f7fc fc4a 	bl	8001cc4 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin,
 8005430:	2200      	movs	r2, #0
 8005432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005436:	4859      	ldr	r0, [pc, #356]	; (800559c <main+0x2e8>)
 8005438:	f7fc fc44 	bl	8001cc4 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);

					if (pwm_duty < 3000) {
 800543c:	4b42      	ldr	r3, [pc, #264]	; (8005548 <main+0x294>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005444:	4293      	cmp	r3, r2
 8005446:	dc04      	bgt.n	8005452 <main+0x19e>
						pwm_duty += 1;
 8005448:	4b3f      	ldr	r3, [pc, #252]	; (8005548 <main+0x294>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3301      	adds	r3, #1
 800544e:	4a3e      	ldr	r2, [pc, #248]	; (8005548 <main+0x294>)
 8005450:	6013      	str	r3, [r2, #0]
					}
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_duty);
 8005452:	4b3d      	ldr	r3, [pc, #244]	; (8005548 <main+0x294>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	4b45      	ldr	r3, [pc, #276]	; (800556c <main+0x2b8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_duty);
 800545c:	4b3a      	ldr	r3, [pc, #232]	; (8005548 <main+0x294>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b42      	ldr	r3, [pc, #264]	; (800556c <main+0x2b8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_duty);
 8005466:	4b38      	ldr	r3, [pc, #224]	; (8005548 <main+0x294>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b40      	ldr	r3, [pc, #256]	; (800556c <main+0x2b8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	63da      	str	r2, [r3, #60]	; 0x3c

					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
				}
				break;
 8005470:	e109      	b.n	8005686 <main+0x3d2>
					HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin,
 8005472:	2200      	movs	r2, #0
 8005474:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005478:	4848      	ldr	r0, [pc, #288]	; (800559c <main+0x2e8>)
 800547a:	f7fc fc23 	bl	8001cc4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin,
 800547e:	2200      	movs	r2, #0
 8005480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005484:	4845      	ldr	r0, [pc, #276]	; (800559c <main+0x2e8>)
 8005486:	f7fc fc1d 	bl	8001cc4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 800548a:	4b38      	ldr	r3, [pc, #224]	; (800556c <main+0x2b8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	63da      	str	r2, [r3, #60]	; 0x3c
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8005492:	4b36      	ldr	r3, [pc, #216]	; (800556c <main+0x2b8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800549a:	4b34      	ldr	r3, [pc, #208]	; (800556c <main+0x2b8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80054a2:	e0f0      	b.n	8005686 <main+0x3d2>

			case 1: // w lewo
				HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 80054a4:	2200      	movs	r2, #0
 80054a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054aa:	483c      	ldr	r0, [pc, #240]	; (800559c <main+0x2e8>)
 80054ac:	f7fc fc0a 	bl	8001cc4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_SET);
 80054b0:	2201      	movs	r2, #1
 80054b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054b6:	4839      	ldr	r0, [pc, #228]	; (800559c <main+0x2e8>)
 80054b8:	f7fc fc04 	bl	8001cc4 <HAL_GPIO_WritePin>

				if (pwm_duty < 3000) {
 80054bc:	4b22      	ldr	r3, [pc, #136]	; (8005548 <main+0x294>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80054c4:	4293      	cmp	r3, r2
 80054c6:	dc04      	bgt.n	80054d2 <main+0x21e>
					pwm_duty += 1;
 80054c8:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <main+0x294>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <main+0x294>)
 80054d0:	6013      	str	r3, [r2, #0]
				}
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_duty);
 80054d2:	4b1d      	ldr	r3, [pc, #116]	; (8005548 <main+0x294>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4b25      	ldr	r3, [pc, #148]	; (800556c <main+0x2b8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_duty);
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <main+0x294>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	4b22      	ldr	r3, [pc, #136]	; (800556c <main+0x2b8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_duty);
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <main+0x294>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b20      	ldr	r3, [pc, #128]	; (800556c <main+0x2b8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80054f0:	e0c9      	b.n	8005686 <main+0x3d2>

			case 2: //  w prawo
				HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_SET);
 80054f2:	2201      	movs	r2, #1
 80054f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054f8:	4828      	ldr	r0, [pc, #160]	; (800559c <main+0x2e8>)
 80054fa:	f7fc fbe3 	bl	8001cc4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 80054fe:	2200      	movs	r2, #0
 8005500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005504:	4825      	ldr	r0, [pc, #148]	; (800559c <main+0x2e8>)
 8005506:	f7fc fbdd 	bl	8001cc4 <HAL_GPIO_WritePin>

				if (pwm_duty < 3000) {
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <main+0x294>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005512:	4293      	cmp	r3, r2
 8005514:	dc04      	bgt.n	8005520 <main+0x26c>
					pwm_duty += 1;
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <main+0x294>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3301      	adds	r3, #1
 800551c:	4a0a      	ldr	r2, [pc, #40]	; (8005548 <main+0x294>)
 800551e:	6013      	str	r3, [r2, #0]
				}
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_duty);
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <main+0x294>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	4b11      	ldr	r3, [pc, #68]	; (800556c <main+0x2b8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_duty);
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <main+0x294>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b0f      	ldr	r3, [pc, #60]	; (800556c <main+0x2b8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_duty);
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <main+0x294>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b0c      	ldr	r3, [pc, #48]	; (800556c <main+0x2b8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800553e:	e0a2      	b.n	8005686 <main+0x3d2>
 8005540:	200002b8 	.word	0x200002b8
 8005544:	200002d8 	.word	0x200002d8
 8005548:	200002f8 	.word	0x200002f8
 800554c:	20000307 	.word	0x20000307
 8005550:	200002fc 	.word	0x200002fc
 8005554:	200002dc 	.word	0x200002dc
 8005558:	200002e0 	.word	0x200002e0
 800555c:	200002d4 	.word	0x200002d4
 8005560:	20000306 	.word	0x20000306
 8005564:	200002d6 	.word	0x200002d6
 8005568:	200002ec 	.word	0x200002ec
 800556c:	20000308 	.word	0x20000308
 8005570:	20000388 	.word	0x20000388
 8005574:	20000488 	.word	0x20000488
 8005578:	20000448 	.word	0x20000448
 800557c:	20000348 	.word	0x20000348
 8005580:	200003c8 	.word	0x200003c8
 8005584:	20000408 	.word	0x20000408
 8005588:	20000260 	.word	0x20000260
 800558c:	20000528 	.word	0x20000528
 8005590:	0800a9a8 	.word	0x0800a9a8
 8005594:	200002d0 	.word	0x200002d0
 8005598:	42480000 	.word	0x42480000
 800559c:	40020c00 	.word	0x40020c00

			case 3: // do tylu
				HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_SET);
 80055a0:	2201      	movs	r2, #1
 80055a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055a6:	4840      	ldr	r0, [pc, #256]	; (80056a8 <main+0x3f4>)
 80055a8:	f7fc fb8c 	bl	8001cc4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_SET);
 80055ac:	2201      	movs	r2, #1
 80055ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055b2:	483d      	ldr	r0, [pc, #244]	; (80056a8 <main+0x3f4>)
 80055b4:	f7fc fb86 	bl	8001cc4 <HAL_GPIO_WritePin>

				if (pwm_duty < 3000) {
 80055b8:	4b3c      	ldr	r3, [pc, #240]	; (80056ac <main+0x3f8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80055c0:	4293      	cmp	r3, r2
 80055c2:	dc04      	bgt.n	80055ce <main+0x31a>
					pwm_duty += 1;
 80055c4:	4b39      	ldr	r3, [pc, #228]	; (80056ac <main+0x3f8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	4a38      	ldr	r2, [pc, #224]	; (80056ac <main+0x3f8>)
 80055cc:	6013      	str	r3, [r2, #0]
				}
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_duty);
 80055ce:	4b37      	ldr	r3, [pc, #220]	; (80056ac <main+0x3f8>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b37      	ldr	r3, [pc, #220]	; (80056b0 <main+0x3fc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_duty);
 80055d8:	4b34      	ldr	r3, [pc, #208]	; (80056ac <main+0x3f8>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4b34      	ldr	r3, [pc, #208]	; (80056b0 <main+0x3fc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_duty);
 80055e2:	4b32      	ldr	r3, [pc, #200]	; (80056ac <main+0x3f8>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4b32      	ldr	r3, [pc, #200]	; (80056b0 <main+0x3fc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80055ec:	e04b      	b.n	8005686 <main+0x3d2>

			case 4:
				flaga_dolnego_stepp = 1;
 80055ee:	4b31      	ldr	r3, [pc, #196]	; (80056b4 <main+0x400>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Dir_STEPPER_LOWER_GPIO_Port,
 80055f4:	2201      	movs	r2, #1
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	482f      	ldr	r0, [pc, #188]	; (80056b8 <main+0x404>)
 80055fa:	f7fc fb63 	bl	8001cc4 <HAL_GPIO_WritePin>
				Dir_STEPPER_LOWER_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port,
 80055fe:	2201      	movs	r2, #1
 8005600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005604:	4828      	ldr	r0, [pc, #160]	; (80056a8 <main+0x3f4>)
 8005606:	f7fc fb5d 	bl	8001cc4 <HAL_GPIO_WritePin>
				En_STEPPER_LOWER_Pin, GPIO_PIN_SET);
				break;
 800560a:	e03c      	b.n	8005686 <main+0x3d2>

			case 5:
				flaga_dolnego_stepp = 2;
 800560c:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <main+0x400>)
 800560e:	2202      	movs	r2, #2
 8005610:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(Dir_STEPPER_LOWER_GPIO_Port,
 8005612:	2200      	movs	r2, #0
 8005614:	2180      	movs	r1, #128	; 0x80
 8005616:	4828      	ldr	r0, [pc, #160]	; (80056b8 <main+0x404>)
 8005618:	f7fc fb54 	bl	8001cc4 <HAL_GPIO_WritePin>
				Dir_STEPPER_LOWER_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port,
 800561c:	2201      	movs	r2, #1
 800561e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005622:	4821      	ldr	r0, [pc, #132]	; (80056a8 <main+0x3f4>)
 8005624:	f7fc fb4e 	bl	8001cc4 <HAL_GPIO_WritePin>
				En_STEPPER_LOWER_Pin, GPIO_PIN_SET);
				break;
 8005628:	e02d      	b.n	8005686 <main+0x3d2>


				break;

			default:
				HAL_GPIO_WritePin(Dc_IN2_GPIO_Port, Dc_IN2_Pin, GPIO_PIN_RESET);
 800562a:	2200      	movs	r2, #0
 800562c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005630:	481d      	ldr	r0, [pc, #116]	; (80056a8 <main+0x3f4>)
 8005632:	f7fc fb47 	bl	8001cc4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Dc_IN1_GPIO_Port, Dc_IN1_Pin, GPIO_PIN_RESET);
 8005636:	2200      	movs	r2, #0
 8005638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800563c:	481a      	ldr	r0, [pc, #104]	; (80056a8 <main+0x3f4>)
 800563e:	f7fc fb41 	bl	8001cc4 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8005642:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <main+0x3fc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2200      	movs	r2, #0
 8005648:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 800564a:	4b19      	ldr	r3, [pc, #100]	; (80056b0 <main+0x3fc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <main+0x3fc>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2200      	movs	r2, #0
 8005658:	635a      	str	r2, [r3, #52]	; 0x34
				flaga_servo_joint = 0;
 800565a:	4b18      	ldr	r3, [pc, #96]	; (80056bc <main+0x408>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
				flaga_servo_effector = 0;
 8005660:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <main+0x40c>)
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
				pwm_duty = 0;
 8005666:	4b11      	ldr	r3, [pc, #68]	; (80056ac <main+0x3f8>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
				flag = 0;
 800566c:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <main+0x410>)
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
				flaga_dolnego_stepp = 0;
 8005672:	4b10      	ldr	r3, [pc, #64]	; (80056b4 <main+0x400>)
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
				flaga_gornego_stepp = 0;
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <main+0x414>)
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
				break;
 800567e:	e002      	b.n	8005686 <main+0x3d2>
			}
			/* USER CODE END WHILE */

			/* USER CODE BEGIN 3 */
			//  HAL_Delay(10);
		}
 8005680:	bf00      	nop
 8005682:	e000      	b.n	8005686 <main+0x3d2>
				break;
 8005684:	bf00      	nop
		if(flaga_dolnego_stepp ==0 && flaga_fabrik_dolny ==0){
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <main+0x400>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f47f ae90 	bne.w	80053b0 <main+0xfc>
 8005690:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <main+0x418>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f47f ae8b 	bne.w	80053b0 <main+0xfc>
			HAL_GPIO_WritePin(En_STEPPER_LOWER_GPIO_Port,
 800569a:	2200      	movs	r2, #0
 800569c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <main+0x3f4>)
 80056a2:	f7fc fb0f 	bl	8001cc4 <HAL_GPIO_WritePin>
		if (flag == 1) {
 80056a6:	e683      	b.n	80053b0 <main+0xfc>
 80056a8:	40020c00 	.word	0x40020c00
 80056ac:	200002f8 	.word	0x200002f8
 80056b0:	20000308 	.word	0x20000308
 80056b4:	20000307 	.word	0x20000307
 80056b8:	40020800 	.word	0x40020800
 80056bc:	200002d4 	.word	0x200002d4
 80056c0:	20000306 	.word	0x20000306
 80056c4:	200002b8 	.word	0x200002b8
 80056c8:	200002fc 	.word	0x200002fc
 80056cc:	200002b2 	.word	0x200002b2

080056d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b094      	sub	sp, #80	; 0x50
 80056d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80056d6:	f107 0320 	add.w	r3, r7, #32
 80056da:	2230      	movs	r2, #48	; 0x30
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fefe 	bl	80064e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80056e4:	f107 030c 	add.w	r3, r7, #12
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	60da      	str	r2, [r3, #12]
 80056f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80056f4:	2300      	movs	r3, #0
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	4b27      	ldr	r3, [pc, #156]	; (8005798 <SystemClock_Config+0xc8>)
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	4a26      	ldr	r2, [pc, #152]	; (8005798 <SystemClock_Config+0xc8>)
 80056fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005702:	6413      	str	r3, [r2, #64]	; 0x40
 8005704:	4b24      	ldr	r3, [pc, #144]	; (8005798 <SystemClock_Config+0xc8>)
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005710:	2300      	movs	r3, #0
 8005712:	607b      	str	r3, [r7, #4]
 8005714:	4b21      	ldr	r3, [pc, #132]	; (800579c <SystemClock_Config+0xcc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a20      	ldr	r2, [pc, #128]	; (800579c <SystemClock_Config+0xcc>)
 800571a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4b1e      	ldr	r3, [pc, #120]	; (800579c <SystemClock_Config+0xcc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800572c:	2302      	movs	r3, #2
 800572e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005730:	2301      	movs	r3, #1
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005734:	2310      	movs	r3, #16
 8005736:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005738:	2302      	movs	r3, #2
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800573c:	2300      	movs	r3, #0
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8005740:	2308      	movs	r3, #8
 8005742:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8005744:	2364      	movs	r3, #100	; 0x64
 8005746:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005748:	2302      	movs	r3, #2
 800574a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 8;
 800574c:	2308      	movs	r3, #8
 800574e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005750:	f107 0320 	add.w	r3, r7, #32
 8005754:	4618      	mov	r0, r3
 8005756:	f7fc fc07 	bl	8001f68 <HAL_RCC_OscConfig>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <SystemClock_Config+0x94>
		Error_Handler();
 8005760:	f000 f81e 	bl	80057a0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005764:	230f      	movs	r3, #15
 8005766:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005768:	2302      	movs	r3, #2
 800576a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005774:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800577a:	f107 030c 	add.w	r3, r7, #12
 800577e:	2103      	movs	r1, #3
 8005780:	4618      	mov	r0, r3
 8005782:	f7fc fe61 	bl	8002448 <HAL_RCC_ClockConfig>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <SystemClock_Config+0xc0>
		Error_Handler();
 800578c:	f000 f808 	bl	80057a0 <Error_Handler>
	}
}
 8005790:	bf00      	nop
 8005792:	3750      	adds	r7, #80	; 0x50
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40023800 	.word	0x40023800
 800579c:	40007000 	.word	0x40007000

080057a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	4b10      	ldr	r3, [pc, #64]	; (80057fc <HAL_MspInit+0x4c>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	4a0f      	ldr	r2, [pc, #60]	; (80057fc <HAL_MspInit+0x4c>)
 80057c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057c4:	6453      	str	r3, [r2, #68]	; 0x44
 80057c6:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <HAL_MspInit+0x4c>)
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_MspInit+0x4c>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	4a08      	ldr	r2, [pc, #32]	; (80057fc <HAL_MspInit+0x4c>)
 80057dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e0:	6413      	str	r3, [r2, #64]	; 0x40
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <HAL_MspInit+0x4c>)
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80057ee:	2007      	movs	r0, #7
 80057f0:	f7fb fd14 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40023800 	.word	0x40023800

08005800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005804:	bf00      	nop
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800580e:	b480      	push	{r7}
 8005810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005812:	e7fe      	b.n	8005812 <HardFault_Handler+0x4>

08005814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005818:	e7fe      	b.n	8005818 <MemManage_Handler+0x4>

0800581a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800581a:	b480      	push	{r7}
 800581c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800581e:	e7fe      	b.n	800581e <BusFault_Handler+0x4>

08005820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005824:	e7fe      	b.n	8005824 <UsageFault_Handler+0x4>

08005826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005826:	b480      	push	{r7}
 8005828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800582a:	bf00      	nop
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005838:	bf00      	nop
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005854:	f7fb fbf2 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005858:	bf00      	nop
 800585a:	bd80      	pop	{r7, pc}

0800585c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005860:	4802      	ldr	r0, [pc, #8]	; (800586c <DMA1_Stream5_IRQHandler+0x10>)
 8005862:	f7fb fe45 	bl	80014f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200004c8 	.word	0x200004c8

08005870 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005874:	4803      	ldr	r0, [pc, #12]	; (8005884 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8005876:	f7fd f973 	bl	8002b60 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800587a:	4803      	ldr	r0, [pc, #12]	; (8005888 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800587c:	f7fd f970 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005880:	bf00      	nop
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000408 	.word	0x20000408
 8005888:	20000448 	.word	0x20000448

0800588c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005890:	4803      	ldr	r0, [pc, #12]	; (80058a0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005892:	f7fd f965 	bl	8002b60 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005896:	4803      	ldr	r0, [pc, #12]	; (80058a4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8005898:	f7fd f962 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800589c:	bf00      	nop
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20000408 	.word	0x20000408
 80058a4:	20000348 	.word	0x20000348

080058a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058ac:	4803      	ldr	r0, [pc, #12]	; (80058bc <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80058ae:	f7fd f957 	bl	8002b60 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80058b2:	4803      	ldr	r0, [pc, #12]	; (80058c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80058b4:	f7fd f954 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80058b8:	bf00      	nop
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000408 	.word	0x20000408
 80058c0:	200003c8 	.word	0x200003c8

080058c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058c8:	4802      	ldr	r0, [pc, #8]	; (80058d4 <TIM2_IRQHandler+0x10>)
 80058ca:	f7fd f949 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058ce:	bf00      	nop
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000488 	.word	0x20000488

080058d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80058dc:	4802      	ldr	r0, [pc, #8]	; (80058e8 <TIM3_IRQHandler+0x10>)
 80058de:	f7fd f93f 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80058e2:	bf00      	nop
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000388 	.word	0x20000388

080058ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80058f0:	4802      	ldr	r0, [pc, #8]	; (80058fc <TIM4_IRQHandler+0x10>)
 80058f2:	f7fd f935 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80058f6:	bf00      	nop
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000308 	.word	0x20000308

08005900 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005904:	4802      	ldr	r0, [pc, #8]	; (8005910 <USART2_IRQHandler+0x10>)
 8005906:	f7fe fa8f 	bl	8003e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000528 	.word	0x20000528

08005914 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	e00a      	b.n	800593c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005926:	f3af 8000 	nop.w
 800592a:	4601      	mov	r1, r0
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	60ba      	str	r2, [r7, #8]
 8005932:	b2ca      	uxtb	r2, r1
 8005934:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	3301      	adds	r3, #1
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	dbf0      	blt.n	8005926 <_read+0x12>
	}

return len;
 8005944:	687b      	ldr	r3, [r7, #4]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <_close>:
	}
	return len;
}

int _close(int file)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
	return -1;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005976:	605a      	str	r2, [r3, #4]
	return 0;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <_isatty>:

int _isatty(int file)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
	return 1;
 800598e:	2301      	movs	r3, #1
}
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
	return 0;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <_sbrk+0x50>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <_sbrk+0x16>
		heap_end = &end;
 80059c8:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <_sbrk+0x50>)
 80059ca:	4a10      	ldr	r2, [pc, #64]	; (8005a0c <_sbrk+0x54>)
 80059cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80059ce:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <_sbrk+0x50>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <_sbrk+0x50>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	466a      	mov	r2, sp
 80059de:	4293      	cmp	r3, r2
 80059e0:	d907      	bls.n	80059f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80059e2:	f000 fd53 	bl	800648c <__errno>
 80059e6:	4602      	mov	r2, r0
 80059e8:	230c      	movs	r3, #12
 80059ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80059ec:	f04f 33ff 	mov.w	r3, #4294967295
 80059f0:	e006      	b.n	8005a00 <_sbrk+0x48>
	}

	heap_end += incr;
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <_sbrk+0x50>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4413      	add	r3, r2
 80059fa:	4a03      	ldr	r2, [pc, #12]	; (8005a08 <_sbrk+0x50>)
 80059fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80059fe:	68fb      	ldr	r3, [r7, #12]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200001fc 	.word	0x200001fc
 8005a0c:	20000570 	.word	0x20000570

08005a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a14:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <SystemInit+0x28>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1a:	4a07      	ldr	r2, [pc, #28]	; (8005a38 <SystemInit+0x28>)
 8005a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005a24:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <SystemInit+0x28>)
 8005a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a2a:	609a      	str	r2, [r3, #8]
#endif
}
 8005a2c:	bf00      	nop
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	e000ed00 	.word	0xe000ed00

08005a3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b096      	sub	sp, #88	; 0x58
 8005a40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	605a      	str	r2, [r3, #4]
 8005a4c:	609a      	str	r2, [r3, #8]
 8005a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	609a      	str	r2, [r3, #8]
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	611a      	str	r2, [r3, #16]
 8005a6a:	615a      	str	r2, [r3, #20]
 8005a6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a6e:	1d3b      	adds	r3, r7, #4
 8005a70:	2220      	movs	r2, #32
 8005a72:	2100      	movs	r1, #0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fd33 	bl	80064e0 <memset>

  htim1.Instance = TIM1;
 8005a7a:	4b44      	ldr	r3, [pc, #272]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005a7c:	4a44      	ldr	r2, [pc, #272]	; (8005b90 <MX_TIM1_Init+0x154>)
 8005a7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 199;
 8005a80:	4b42      	ldr	r3, [pc, #264]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005a82:	22c7      	movs	r2, #199	; 0xc7
 8005a84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a86:	4b41      	ldr	r3, [pc, #260]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8005a8c:	4b3f      	ldr	r3, [pc, #252]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005a8e:	f242 720f 	movw	r2, #9999	; 0x270f
 8005a92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a94:	4b3d      	ldr	r3, [pc, #244]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005a9a:	4b3c      	ldr	r3, [pc, #240]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aa0:	4b3a      	ldr	r3, [pc, #232]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005aa6:	4839      	ldr	r0, [pc, #228]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005aa8:	f7fc fec0 	bl	800282c <HAL_TIM_Base_Init>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005ab2:	f7ff fe75 	bl	80057a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005abc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4832      	ldr	r0, [pc, #200]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005ac4:	f7fd fab6 	bl	8003034 <HAL_TIM_ConfigClockSource>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005ace:	f7ff fe67 	bl	80057a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005ad2:	482e      	ldr	r0, [pc, #184]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005ad4:	f7fc ff1d 	bl	8002912 <HAL_TIM_PWM_Init>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005ade:	f7ff fe5f 	bl	80057a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005aea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005aee:	4619      	mov	r1, r3
 8005af0:	4826      	ldr	r0, [pc, #152]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005af2:	f7fd ff5f 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005afc:	f7ff fe50 	bl	80057a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b00:	2360      	movs	r3, #96	; 0x60
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b10:	2300      	movs	r3, #0
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b14:	2300      	movs	r3, #0
 8005b16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b20:	2200      	movs	r2, #0
 8005b22:	4619      	mov	r1, r3
 8005b24:	4819      	ldr	r0, [pc, #100]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005b26:	f7fd f9bf 	bl	8002ea8 <HAL_TIM_PWM_ConfigChannel>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005b30:	f7ff fe36 	bl	80057a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b38:	2204      	movs	r2, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4813      	ldr	r0, [pc, #76]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005b3e:	f7fd f9b3 	bl	8002ea8 <HAL_TIM_PWM_ConfigChannel>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005b48:	f7ff fe2a 	bl	80057a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005b6a:	1d3b      	adds	r3, r7, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4807      	ldr	r0, [pc, #28]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005b70:	f7fd ff8e 	bl	8003a90 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8005b7a:	f7ff fe11 	bl	80057a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005b7e:	4803      	ldr	r0, [pc, #12]	; (8005b8c <MX_TIM1_Init+0x150>)
 8005b80:	f000 fb1e 	bl	80061c0 <HAL_TIM_MspPostInit>

}
 8005b84:	bf00      	nop
 8005b86:	3758      	adds	r7, #88	; 0x58
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000408 	.word	0x20000408
 8005b90:	40010000 	.word	0x40010000

08005b94 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b9a:	f107 0308 	add.w	r3, r7, #8
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	605a      	str	r2, [r3, #4]
 8005ba4:	609a      	str	r2, [r3, #8]
 8005ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ba8:	463b      	mov	r3, r7
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <MX_TIM2_Init+0x94>)
 8005bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <MX_TIM2_Init+0x94>)
 8005bba:	2263      	movs	r2, #99	; 0x63
 8005bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bbe:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <MX_TIM2_Init+0x94>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005bc4:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <MX_TIM2_Init+0x94>)
 8005bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bcc:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <MX_TIM2_Init+0x94>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bd2:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <MX_TIM2_Init+0x94>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005bd8:	4813      	ldr	r0, [pc, #76]	; (8005c28 <MX_TIM2_Init+0x94>)
 8005bda:	f7fc fe27 	bl	800282c <HAL_TIM_Base_Init>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005be4:	f7ff fddc 	bl	80057a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005bee:	f107 0308 	add.w	r3, r7, #8
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	480c      	ldr	r0, [pc, #48]	; (8005c28 <MX_TIM2_Init+0x94>)
 8005bf6:	f7fd fa1d 	bl	8003034 <HAL_TIM_ConfigClockSource>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005c00:	f7ff fdce 	bl	80057a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4805      	ldr	r0, [pc, #20]	; (8005c28 <MX_TIM2_Init+0x94>)
 8005c12:	f7fd fecf 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005c1c:	f7ff fdc0 	bl	80057a0 <Error_Handler>
  }

}
 8005c20:	bf00      	nop
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000488 	.word	0x20000488

08005c2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b092      	sub	sp, #72	; 0x48
 8005c30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	605a      	str	r2, [r3, #4]
 8005c3c:	609a      	str	r2, [r3, #8]
 8005c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005c4a:	f107 0320 	add.w	r3, r7, #32
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	605a      	str	r2, [r3, #4]
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c58:	1d3b      	adds	r3, r7, #4
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	605a      	str	r2, [r3, #4]
 8005c60:	609a      	str	r2, [r3, #8]
 8005c62:	60da      	str	r2, [r3, #12]
 8005c64:	611a      	str	r2, [r3, #16]
 8005c66:	615a      	str	r2, [r3, #20]
 8005c68:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005c6a:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005c6c:	4a43      	ldr	r2, [pc, #268]	; (8005d7c <MX_TIM3_Init+0x150>)
 8005c6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8005c70:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005c72:	2263      	movs	r2, #99	; 0x63
 8005c74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c76:	4b40      	ldr	r3, [pc, #256]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8005c7c:	4b3e      	ldr	r3, [pc, #248]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c84:	4b3c      	ldr	r3, [pc, #240]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c8a:	4b3b      	ldr	r3, [pc, #236]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005c90:	4839      	ldr	r0, [pc, #228]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005c92:	f7fc fdcb 	bl	800282c <HAL_TIM_Base_Init>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8005c9c:	f7ff fd80 	bl	80057a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005caa:	4619      	mov	r1, r3
 8005cac:	4832      	ldr	r0, [pc, #200]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005cae:	f7fd f9c1 	bl	8003034 <HAL_TIM_ConfigClockSource>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8005cb8:	f7ff fd72 	bl	80057a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8005cbc:	482e      	ldr	r0, [pc, #184]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005cbe:	f7fc fe8f 	bl	80029e0 <HAL_TIM_IC_Init>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8005cc8:	f7ff fd6a 	bl	80057a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005ccc:	482a      	ldr	r0, [pc, #168]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005cce:	f7fc fe20 	bl	8002912 <HAL_TIM_PWM_Init>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005cd8:	f7ff fd62 	bl	80057a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ce4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4823      	ldr	r0, [pc, #140]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005cec:	f7fd fe62 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8005cf6:	f7ff fd53 	bl	80057a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005d02:	2300      	movs	r3, #0
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005d0a:	f107 0320 	add.w	r3, r7, #32
 8005d0e:	2200      	movs	r2, #0
 8005d10:	4619      	mov	r1, r3
 8005d12:	4819      	ldr	r0, [pc, #100]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005d14:	f7fd f82c 	bl	8002d70 <HAL_TIM_IC_ConfigChannel>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8005d1e:	f7ff fd3f 	bl	80057a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8005d22:	2302      	movs	r3, #2
 8005d24:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8005d26:	2302      	movs	r3, #2
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005d2a:	f107 0320 	add.w	r3, r7, #32
 8005d2e:	2204      	movs	r2, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4811      	ldr	r0, [pc, #68]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005d34:	f7fd f81c 	bl	8002d70 <HAL_TIM_IC_ConfigChannel>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8005d3e:	f7ff fd2f 	bl	80057a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d42:	2360      	movs	r3, #96	; 0x60
 8005d44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 11;
 8005d46:	230b      	movs	r3, #11
 8005d48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	2208      	movs	r2, #8
 8005d56:	4619      	mov	r1, r3
 8005d58:	4807      	ldr	r0, [pc, #28]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005d5a:	f7fd f8a5 	bl	8002ea8 <HAL_TIM_PWM_ConfigChannel>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <MX_TIM3_Init+0x13c>
  {
    Error_Handler();
 8005d64:	f7ff fd1c 	bl	80057a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005d68:	4803      	ldr	r0, [pc, #12]	; (8005d78 <MX_TIM3_Init+0x14c>)
 8005d6a:	f000 fa29 	bl	80061c0 <HAL_TIM_MspPostInit>

}
 8005d6e:	bf00      	nop
 8005d70:	3748      	adds	r7, #72	; 0x48
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000388 	.word	0x20000388
 8005d7c:	40000400 	.word	0x40000400

08005d80 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08e      	sub	sp, #56	; 0x38
 8005d84:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	605a      	str	r2, [r3, #4]
 8005d90:	609a      	str	r2, [r3, #8]
 8005d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d94:	f107 0320 	add.w	r3, r7, #32
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d9e:	1d3b      	adds	r3, r7, #4
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	611a      	str	r2, [r3, #16]
 8005dac:	615a      	str	r2, [r3, #20]
 8005dae:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8005db0:	4b37      	ldr	r3, [pc, #220]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005db2:	4a38      	ldr	r2, [pc, #224]	; (8005e94 <MX_TIM4_Init+0x114>)
 8005db4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8005db6:	4b36      	ldr	r3, [pc, #216]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005db8:	2263      	movs	r2, #99	; 0x63
 8005dba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dbc:	4b34      	ldr	r3, [pc, #208]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8005dc2:	4b33      	ldr	r3, [pc, #204]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005dc4:	f242 720f 	movw	r2, #9999	; 0x270f
 8005dc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dca:	4b31      	ldr	r3, [pc, #196]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dd0:	4b2f      	ldr	r3, [pc, #188]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005dd6:	482e      	ldr	r0, [pc, #184]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005dd8:	f7fc fd28 	bl	800282c <HAL_TIM_Base_Init>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005de2:	f7ff fcdd 	bl	80057a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005df0:	4619      	mov	r1, r3
 8005df2:	4827      	ldr	r0, [pc, #156]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005df4:	f7fd f91e 	bl	8003034 <HAL_TIM_ConfigClockSource>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005dfe:	f7ff fccf 	bl	80057a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005e02:	4823      	ldr	r0, [pc, #140]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005e04:	f7fc fd85 	bl	8002912 <HAL_TIM_PWM_Init>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005e0e:	f7ff fcc7 	bl	80057a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e12:	2300      	movs	r3, #0
 8005e14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005e1a:	f107 0320 	add.w	r3, r7, #32
 8005e1e:	4619      	mov	r1, r3
 8005e20:	481b      	ldr	r0, [pc, #108]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005e22:	f7fd fdc7 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005e2c:	f7ff fcb8 	bl	80057a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e30:	2360      	movs	r3, #96	; 0x60
 8005e32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	2200      	movs	r2, #0
 8005e44:	4619      	mov	r1, r3
 8005e46:	4812      	ldr	r0, [pc, #72]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005e48:	f7fd f82e 	bl	8002ea8 <HAL_TIM_PWM_ConfigChannel>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005e52:	f7ff fca5 	bl	80057a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e56:	1d3b      	adds	r3, r7, #4
 8005e58:	2204      	movs	r2, #4
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	480c      	ldr	r0, [pc, #48]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005e5e:	f7fd f823 	bl	8002ea8 <HAL_TIM_PWM_ConfigChannel>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8005e68:	f7ff fc9a 	bl	80057a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e6c:	1d3b      	adds	r3, r7, #4
 8005e6e:	2208      	movs	r2, #8
 8005e70:	4619      	mov	r1, r3
 8005e72:	4807      	ldr	r0, [pc, #28]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005e74:	f7fd f818 	bl	8002ea8 <HAL_TIM_PWM_ConfigChannel>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8005e7e:	f7ff fc8f 	bl	80057a0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8005e82:	4803      	ldr	r0, [pc, #12]	; (8005e90 <MX_TIM4_Init+0x110>)
 8005e84:	f000 f99c 	bl	80061c0 <HAL_TIM_MspPostInit>

}
 8005e88:	bf00      	nop
 8005e8a:	3738      	adds	r7, #56	; 0x38
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000308 	.word	0x20000308
 8005e94:	40000800 	.word	0x40000800

08005e98 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	609a      	str	r2, [r3, #8]
 8005ea8:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8005eaa:	4b16      	ldr	r3, [pc, #88]	; (8005f04 <MX_TIM9_Init+0x6c>)
 8005eac:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <MX_TIM9_Init+0x70>)
 8005eae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 49;
 8005eb0:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <MX_TIM9_Init+0x6c>)
 8005eb2:	2231      	movs	r2, #49	; 0x31
 8005eb4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <MX_TIM9_Init+0x6c>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8005ebc:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <MX_TIM9_Init+0x6c>)
 8005ebe:	f242 720f 	movw	r2, #9999	; 0x270f
 8005ec2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <MX_TIM9_Init+0x6c>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <MX_TIM9_Init+0x6c>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005ed0:	480c      	ldr	r0, [pc, #48]	; (8005f04 <MX_TIM9_Init+0x6c>)
 8005ed2:	f7fc fcab 	bl	800282c <HAL_TIM_Base_Init>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8005edc:	f7ff fc60 	bl	80057a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ee4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4806      	ldr	r0, [pc, #24]	; (8005f04 <MX_TIM9_Init+0x6c>)
 8005eec:	f7fd f8a2 	bl	8003034 <HAL_TIM_ConfigClockSource>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8005ef6:	f7ff fc53 	bl	80057a0 <Error_Handler>
  }

}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000448 	.word	0x20000448
 8005f08:	40014000 	.word	0x40014000

08005f0c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8005f10:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <MX_TIM10_Init+0x40>)
 8005f12:	4a0f      	ldr	r2, [pc, #60]	; (8005f50 <MX_TIM10_Init+0x44>)
 8005f14:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8005f16:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <MX_TIM10_Init+0x40>)
 8005f18:	f242 720f 	movw	r2, #9999	; 0x270f
 8005f1c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f1e:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <MX_TIM10_Init+0x40>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8005f24:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <MX_TIM10_Init+0x40>)
 8005f26:	f242 720f 	movw	r2, #9999	; 0x270f
 8005f2a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f2c:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <MX_TIM10_Init+0x40>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f32:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <MX_TIM10_Init+0x40>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005f38:	4804      	ldr	r0, [pc, #16]	; (8005f4c <MX_TIM10_Init+0x40>)
 8005f3a:	f7fc fc77 	bl	800282c <HAL_TIM_Base_Init>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8005f44:	f7ff fc2c 	bl	80057a0 <Error_Handler>
  }

}
 8005f48:	bf00      	nop
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20000348 	.word	0x20000348
 8005f50:	40014400 	.word	0x40014400

08005f54 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8005f58:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <MX_TIM11_Init+0x40>)
 8005f5a:	4a0f      	ldr	r2, [pc, #60]	; (8005f98 <MX_TIM11_Init+0x44>)
 8005f5c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 199;
 8005f5e:	4b0d      	ldr	r3, [pc, #52]	; (8005f94 <MX_TIM11_Init+0x40>)
 8005f60:	22c7      	movs	r2, #199	; 0xc7
 8005f62:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f64:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <MX_TIM11_Init+0x40>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 9999;
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <MX_TIM11_Init+0x40>)
 8005f6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005f70:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <MX_TIM11_Init+0x40>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f78:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <MX_TIM11_Init+0x40>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005f7e:	4805      	ldr	r0, [pc, #20]	; (8005f94 <MX_TIM11_Init+0x40>)
 8005f80:	f7fc fc54 	bl	800282c <HAL_TIM_Base_Init>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8005f8a:	f7ff fc09 	bl	80057a0 <Error_Handler>
  }

}
 8005f8e:	bf00      	nop
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	200003c8 	.word	0x200003c8
 8005f98:	40014800 	.word	0x40014800

08005f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b090      	sub	sp, #64	; 0x40
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	609a      	str	r2, [r3, #8]
 8005fb0:	60da      	str	r2, [r3, #12]
 8005fb2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a79      	ldr	r2, [pc, #484]	; (80061a0 <HAL_TIM_Base_MspInit+0x204>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d126      	bne.n	800600c <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc2:	4b78      	ldr	r3, [pc, #480]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8005fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc6:	4a77      	ldr	r2, [pc, #476]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fce:	4b75      	ldr	r3, [pc, #468]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2100      	movs	r1, #0
 8005fde:	2018      	movs	r0, #24
 8005fe0:	f7fb f927 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005fe4:	2018      	movs	r0, #24
 8005fe6:	f7fb f940 	bl	800126a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005fea:	2200      	movs	r2, #0
 8005fec:	2100      	movs	r1, #0
 8005fee:	2019      	movs	r0, #25
 8005ff0:	f7fb f91f 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005ff4:	2019      	movs	r0, #25
 8005ff6:	f7fb f938 	bl	800126a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	201a      	movs	r0, #26
 8006000:	f7fb f917 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006004:	201a      	movs	r0, #26
 8006006:	f7fb f930 	bl	800126a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800600a:	e0c4      	b.n	8006196 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006014:	d116      	bne.n	8006044 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006016:	2300      	movs	r3, #0
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
 800601a:	4b62      	ldr	r3, [pc, #392]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	4a61      	ldr	r2, [pc, #388]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006020:	f043 0301 	orr.w	r3, r3, #1
 8006024:	6413      	str	r3, [r2, #64]	; 0x40
 8006026:	4b5f      	ldr	r3, [pc, #380]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006032:	2200      	movs	r2, #0
 8006034:	2100      	movs	r1, #0
 8006036:	201c      	movs	r0, #28
 8006038:	f7fb f8fb 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800603c:	201c      	movs	r0, #28
 800603e:	f7fb f914 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8006042:	e0a8      	b.n	8006196 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM3)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a57      	ldr	r2, [pc, #348]	; (80061a8 <HAL_TIM_Base_MspInit+0x20c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d134      	bne.n	80060b8 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800604e:	2300      	movs	r3, #0
 8006050:	623b      	str	r3, [r7, #32]
 8006052:	4b54      	ldr	r3, [pc, #336]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	4a53      	ldr	r2, [pc, #332]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	6413      	str	r3, [r2, #64]	; 0x40
 800605e:	4b51      	ldr	r3, [pc, #324]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	623b      	str	r3, [r7, #32]
 8006068:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	4b4d      	ldr	r3, [pc, #308]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	4a4c      	ldr	r2, [pc, #304]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006074:	f043 0301 	orr.w	r3, r3, #1
 8006078:	6313      	str	r3, [r2, #48]	; 0x30
 800607a:	4b4a      	ldr	r3, [pc, #296]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Hc_ECHO_Pin;
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800608a:	2302      	movs	r3, #2
 800608c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800608e:	2300      	movs	r3, #0
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006092:	2300      	movs	r3, #0
 8006094:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006096:	2302      	movs	r3, #2
 8006098:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(Hc_ECHO_GPIO_Port, &GPIO_InitStruct);
 800609a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800609e:	4619      	mov	r1, r3
 80060a0:	4842      	ldr	r0, [pc, #264]	; (80061ac <HAL_TIM_Base_MspInit+0x210>)
 80060a2:	f7fb fc8d 	bl	80019c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80060a6:	2200      	movs	r2, #0
 80060a8:	2100      	movs	r1, #0
 80060aa:	201d      	movs	r0, #29
 80060ac:	f7fb f8c1 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80060b0:	201d      	movs	r0, #29
 80060b2:	f7fb f8da 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 80060b6:	e06e      	b.n	8006196 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM4)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a3c      	ldr	r2, [pc, #240]	; (80061b0 <HAL_TIM_Base_MspInit+0x214>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d116      	bne.n	80060f0 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80060c2:	2300      	movs	r3, #0
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	4b37      	ldr	r3, [pc, #220]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	4a36      	ldr	r2, [pc, #216]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 80060cc:	f043 0304 	orr.w	r3, r3, #4
 80060d0:	6413      	str	r3, [r2, #64]	; 0x40
 80060d2:	4b34      	ldr	r3, [pc, #208]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	201e      	movs	r0, #30
 80060e4:	f7fb f8a5 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80060e8:	201e      	movs	r0, #30
 80060ea:	f7fb f8be 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 80060ee:	e052      	b.n	8006196 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM9)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2f      	ldr	r2, [pc, #188]	; (80061b4 <HAL_TIM_Base_MspInit+0x218>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d116      	bne.n	8006128 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	4b29      	ldr	r3, [pc, #164]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	4a28      	ldr	r2, [pc, #160]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006108:	6453      	str	r3, [r2, #68]	; 0x44
 800610a:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8006116:	2200      	movs	r2, #0
 8006118:	2100      	movs	r1, #0
 800611a:	2018      	movs	r0, #24
 800611c:	f7fb f889 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8006120:	2018      	movs	r0, #24
 8006122:	f7fb f8a2 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8006126:	e036      	b.n	8006196 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM10)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a22      	ldr	r2, [pc, #136]	; (80061b8 <HAL_TIM_Base_MspInit+0x21c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d116      	bne.n	8006160 <HAL_TIM_Base_MspInit+0x1c4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006132:	2300      	movs	r3, #0
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 800613c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006140:	6453      	str	r3, [r2, #68]	; 0x44
 8006142:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614a:	613b      	str	r3, [r7, #16]
 800614c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800614e:	2200      	movs	r2, #0
 8006150:	2100      	movs	r1, #0
 8006152:	2019      	movs	r0, #25
 8006154:	f7fb f86d 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006158:	2019      	movs	r0, #25
 800615a:	f7fb f886 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 800615e:	e01a      	b.n	8006196 <HAL_TIM_Base_MspInit+0x1fa>
  else if(tim_baseHandle->Instance==TIM11)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <HAL_TIM_Base_MspInit+0x220>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d115      	bne.n	8006196 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	4a0c      	ldr	r2, [pc, #48]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 8006174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006178:	6453      	str	r3, [r2, #68]	; 0x44
 800617a:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <HAL_TIM_Base_MspInit+0x208>)
 800617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006186:	2200      	movs	r2, #0
 8006188:	2100      	movs	r1, #0
 800618a:	201a      	movs	r0, #26
 800618c:	f7fb f851 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8006190:	201a      	movs	r0, #26
 8006192:	f7fb f86a 	bl	800126a <HAL_NVIC_EnableIRQ>
}
 8006196:	bf00      	nop
 8006198:	3740      	adds	r7, #64	; 0x40
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40023800 	.word	0x40023800
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40020000 	.word	0x40020000
 80061b0:	40000800 	.word	0x40000800
 80061b4:	40014000 	.word	0x40014000
 80061b8:	40014400 	.word	0x40014400
 80061bc:	40014800 	.word	0x40014800

080061c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c8:	f107 0314 	add.w	r3, r7, #20
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	60da      	str	r2, [r3, #12]
 80061d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a37      	ldr	r2, [pc, #220]	; (80062bc <HAL_TIM_MspPostInit+0xfc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d11f      	bne.n	8006222 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <HAL_TIM_MspPostInit+0x100>)
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	4a35      	ldr	r2, [pc, #212]	; (80062c0 <HAL_TIM_MspPostInit+0x100>)
 80061ec:	f043 0301 	orr.w	r3, r3, #1
 80061f0:	6313      	str	r3, [r2, #48]	; 0x30
 80061f2:	4b33      	ldr	r3, [pc, #204]	; (80062c0 <HAL_TIM_MspPostInit+0x100>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Servo_JOINT_Pin|Servo_EFFECTOR_Pin;
 80061fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006204:	2302      	movs	r3, #2
 8006206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006208:	2300      	movs	r3, #0
 800620a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800620c:	2300      	movs	r3, #0
 800620e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006210:	2301      	movs	r3, #1
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006214:	f107 0314 	add.w	r3, r7, #20
 8006218:	4619      	mov	r1, r3
 800621a:	482a      	ldr	r0, [pc, #168]	; (80062c4 <HAL_TIM_MspPostInit+0x104>)
 800621c:	f7fb fbd0 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006220:	e047      	b.n	80062b2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <HAL_TIM_MspPostInit+0x108>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d11e      	bne.n	800626a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	4b23      	ldr	r3, [pc, #140]	; (80062c0 <HAL_TIM_MspPostInit+0x100>)
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <HAL_TIM_MspPostInit+0x100>)
 8006236:	f043 0302 	orr.w	r3, r3, #2
 800623a:	6313      	str	r3, [r2, #48]	; 0x30
 800623c:	4b20      	ldr	r3, [pc, #128]	; (80062c0 <HAL_TIM_MspPostInit+0x100>)
 800623e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Hc_TRIG_Pin;
 8006248:	2301      	movs	r3, #1
 800624a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624c:	2302      	movs	r3, #2
 800624e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006254:	2300      	movs	r3, #0
 8006256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006258:	2302      	movs	r3, #2
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Hc_TRIG_GPIO_Port, &GPIO_InitStruct);
 800625c:	f107 0314 	add.w	r3, r7, #20
 8006260:	4619      	mov	r1, r3
 8006262:	481a      	ldr	r0, [pc, #104]	; (80062cc <HAL_TIM_MspPostInit+0x10c>)
 8006264:	f7fb fbac 	bl	80019c0 <HAL_GPIO_Init>
}
 8006268:	e023      	b.n	80062b2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM4)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <HAL_TIM_MspPostInit+0x110>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d11e      	bne.n	80062b2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006274:	2300      	movs	r3, #0
 8006276:	60bb      	str	r3, [r7, #8]
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <HAL_TIM_MspPostInit+0x100>)
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	4a10      	ldr	r2, [pc, #64]	; (80062c0 <HAL_TIM_MspPostInit+0x100>)
 800627e:	f043 0308 	orr.w	r3, r3, #8
 8006282:	6313      	str	r3, [r2, #48]	; 0x30
 8006284:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <HAL_TIM_MspPostInit+0x100>)
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Dc_ENB_Pin|Dc_ENA_Pin|Dc_ENABLE_DRIVER_Pin;
 8006290:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8006294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006296:	2302      	movs	r3, #2
 8006298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629e:	2300      	movs	r3, #0
 80062a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062a2:	2302      	movs	r3, #2
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062a6:	f107 0314 	add.w	r3, r7, #20
 80062aa:	4619      	mov	r1, r3
 80062ac:	4809      	ldr	r0, [pc, #36]	; (80062d4 <HAL_TIM_MspPostInit+0x114>)
 80062ae:	f7fb fb87 	bl	80019c0 <HAL_GPIO_Init>
}
 80062b2:	bf00      	nop
 80062b4:	3728      	adds	r7, #40	; 0x28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40023800 	.word	0x40023800
 80062c4:	40020000 	.word	0x40020000
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40020400 	.word	0x40020400
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40020c00 	.word	0x40020c00

080062d8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80062dc:	4b11      	ldr	r3, [pc, #68]	; (8006324 <MX_USART2_UART_Init+0x4c>)
 80062de:	4a12      	ldr	r2, [pc, #72]	; (8006328 <MX_USART2_UART_Init+0x50>)
 80062e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80062e2:	4b10      	ldr	r3, [pc, #64]	; (8006324 <MX_USART2_UART_Init+0x4c>)
 80062e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80062e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062ea:	4b0e      	ldr	r3, [pc, #56]	; (8006324 <MX_USART2_UART_Init+0x4c>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062f0:	4b0c      	ldr	r3, [pc, #48]	; (8006324 <MX_USART2_UART_Init+0x4c>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <MX_USART2_UART_Init+0x4c>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <MX_USART2_UART_Init+0x4c>)
 80062fe:	220c      	movs	r2, #12
 8006300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <MX_USART2_UART_Init+0x4c>)
 8006304:	2200      	movs	r2, #0
 8006306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006308:	4b06      	ldr	r3, [pc, #24]	; (8006324 <MX_USART2_UART_Init+0x4c>)
 800630a:	2200      	movs	r2, #0
 800630c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800630e:	4805      	ldr	r0, [pc, #20]	; (8006324 <MX_USART2_UART_Init+0x4c>)
 8006310:	f7fd fc24 	bl	8003b5c <HAL_UART_Init>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800631a:	f7ff fa41 	bl	80057a0 <Error_Handler>
  }

}
 800631e:	bf00      	nop
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000528 	.word	0x20000528
 8006328:	40004400 	.word	0x40004400

0800632c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	; 0x28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006334:	f107 0314 	add.w	r3, r7, #20
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	605a      	str	r2, [r3, #4]
 800633e:	609a      	str	r2, [r3, #8]
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a34      	ldr	r2, [pc, #208]	; (800641c <HAL_UART_MspInit+0xf0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d162      	bne.n	8006414 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800634e:	2300      	movs	r3, #0
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	4b33      	ldr	r3, [pc, #204]	; (8006420 <HAL_UART_MspInit+0xf4>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	4a32      	ldr	r2, [pc, #200]	; (8006420 <HAL_UART_MspInit+0xf4>)
 8006358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800635c:	6413      	str	r3, [r2, #64]	; 0x40
 800635e:	4b30      	ldr	r3, [pc, #192]	; (8006420 <HAL_UART_MspInit+0xf4>)
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	4b2c      	ldr	r3, [pc, #176]	; (8006420 <HAL_UART_MspInit+0xf4>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	4a2b      	ldr	r2, [pc, #172]	; (8006420 <HAL_UART_MspInit+0xf4>)
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	6313      	str	r3, [r2, #48]	; 0x30
 800637a:	4b29      	ldr	r3, [pc, #164]	; (8006420 <HAL_UART_MspInit+0xf4>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006386:	230c      	movs	r3, #12
 8006388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800638a:	2302      	movs	r3, #2
 800638c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638e:	2300      	movs	r3, #0
 8006390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006392:	2303      	movs	r3, #3
 8006394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006396:	2307      	movs	r3, #7
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	4619      	mov	r1, r3
 80063a0:	4820      	ldr	r0, [pc, #128]	; (8006424 <HAL_UART_MspInit+0xf8>)
 80063a2:	f7fb fb0d 	bl	80019c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80063a6:	4b20      	ldr	r3, [pc, #128]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063a8:	4a20      	ldr	r2, [pc, #128]	; (800642c <HAL_UART_MspInit+0x100>)
 80063aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80063ac:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063b4:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063ba:	4b1b      	ldr	r3, [pc, #108]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063bc:	2200      	movs	r2, #0
 80063be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063c0:	4b19      	ldr	r3, [pc, #100]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063ce:	4b16      	ldr	r3, [pc, #88]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80063d4:	4b14      	ldr	r3, [pc, #80]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80063dc:	4b12      	ldr	r3, [pc, #72]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063de:	2200      	movs	r2, #0
 80063e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80063e8:	480f      	ldr	r0, [pc, #60]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063ea:	f7fa ff59 	bl	80012a0 <HAL_DMA_Init>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80063f4:	f7ff f9d4 	bl	80057a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a0b      	ldr	r2, [pc, #44]	; (8006428 <HAL_UART_MspInit+0xfc>)
 80063fc:	635a      	str	r2, [r3, #52]	; 0x34
 80063fe:	4a0a      	ldr	r2, [pc, #40]	; (8006428 <HAL_UART_MspInit+0xfc>)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006404:	2200      	movs	r2, #0
 8006406:	2100      	movs	r1, #0
 8006408:	2026      	movs	r0, #38	; 0x26
 800640a:	f7fa ff12 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800640e:	2026      	movs	r0, #38	; 0x26
 8006410:	f7fa ff2b 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006414:	bf00      	nop
 8006416:	3728      	adds	r7, #40	; 0x28
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40004400 	.word	0x40004400
 8006420:	40023800 	.word	0x40023800
 8006424:	40020000 	.word	0x40020000
 8006428:	200004c8 	.word	0x200004c8
 800642c:	40026088 	.word	0x40026088

08006430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006468 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006434:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006436:	e003      	b.n	8006440 <LoopCopyDataInit>

08006438 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800643a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800643c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800643e:	3104      	adds	r1, #4

08006440 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006440:	480b      	ldr	r0, [pc, #44]	; (8006470 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006444:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006446:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006448:	d3f6      	bcc.n	8006438 <CopyDataInit>
  ldr  r2, =_sbss
 800644a:	4a0b      	ldr	r2, [pc, #44]	; (8006478 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800644c:	e002      	b.n	8006454 <LoopFillZerobss>

0800644e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800644e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006450:	f842 3b04 	str.w	r3, [r2], #4

08006454 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006456:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006458:	d3f9      	bcc.n	800644e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800645a:	f7ff fad9 	bl	8005a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800645e:	f000 f81b 	bl	8006498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006462:	f7fe ff27 	bl	80052b4 <main>
  bx  lr    
 8006466:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006468:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800646c:	0800ad00 	.word	0x0800ad00
  ldr  r0, =_sdata
 8006470:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006474:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006478:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800647c:	2000056c 	.word	0x2000056c

08006480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006480:	e7fe      	b.n	8006480 <ADC_IRQHandler>

08006482 <atoi>:
 8006482:	220a      	movs	r2, #10
 8006484:	2100      	movs	r1, #0
 8006486:	f001 bdb1 	b.w	8007fec <strtol>
	...

0800648c <__errno>:
 800648c:	4b01      	ldr	r3, [pc, #4]	; (8006494 <__errno+0x8>)
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	2000000c 	.word	0x2000000c

08006498 <__libc_init_array>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	4e0d      	ldr	r6, [pc, #52]	; (80064d0 <__libc_init_array+0x38>)
 800649c:	4c0d      	ldr	r4, [pc, #52]	; (80064d4 <__libc_init_array+0x3c>)
 800649e:	1ba4      	subs	r4, r4, r6
 80064a0:	10a4      	asrs	r4, r4, #2
 80064a2:	2500      	movs	r5, #0
 80064a4:	42a5      	cmp	r5, r4
 80064a6:	d109      	bne.n	80064bc <__libc_init_array+0x24>
 80064a8:	4e0b      	ldr	r6, [pc, #44]	; (80064d8 <__libc_init_array+0x40>)
 80064aa:	4c0c      	ldr	r4, [pc, #48]	; (80064dc <__libc_init_array+0x44>)
 80064ac:	f004 fa62 	bl	800a974 <_init>
 80064b0:	1ba4      	subs	r4, r4, r6
 80064b2:	10a4      	asrs	r4, r4, #2
 80064b4:	2500      	movs	r5, #0
 80064b6:	42a5      	cmp	r5, r4
 80064b8:	d105      	bne.n	80064c6 <__libc_init_array+0x2e>
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064c0:	4798      	blx	r3
 80064c2:	3501      	adds	r5, #1
 80064c4:	e7ee      	b.n	80064a4 <__libc_init_array+0xc>
 80064c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064ca:	4798      	blx	r3
 80064cc:	3501      	adds	r5, #1
 80064ce:	e7f2      	b.n	80064b6 <__libc_init_array+0x1e>
 80064d0:	0800acf8 	.word	0x0800acf8
 80064d4:	0800acf8 	.word	0x0800acf8
 80064d8:	0800acf8 	.word	0x0800acf8
 80064dc:	0800acfc 	.word	0x0800acfc

080064e0 <memset>:
 80064e0:	4402      	add	r2, r0
 80064e2:	4603      	mov	r3, r0
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d100      	bne.n	80064ea <memset+0xa>
 80064e8:	4770      	bx	lr
 80064ea:	f803 1b01 	strb.w	r1, [r3], #1
 80064ee:	e7f9      	b.n	80064e4 <memset+0x4>

080064f0 <__cvt>:
 80064f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064f4:	ec55 4b10 	vmov	r4, r5, d0
 80064f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80064fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064fe:	2d00      	cmp	r5, #0
 8006500:	460e      	mov	r6, r1
 8006502:	4691      	mov	r9, r2
 8006504:	4619      	mov	r1, r3
 8006506:	bfb8      	it	lt
 8006508:	4622      	movlt	r2, r4
 800650a:	462b      	mov	r3, r5
 800650c:	f027 0720 	bic.w	r7, r7, #32
 8006510:	bfbb      	ittet	lt
 8006512:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006516:	461d      	movlt	r5, r3
 8006518:	2300      	movge	r3, #0
 800651a:	232d      	movlt	r3, #45	; 0x2d
 800651c:	bfb8      	it	lt
 800651e:	4614      	movlt	r4, r2
 8006520:	2f46      	cmp	r7, #70	; 0x46
 8006522:	700b      	strb	r3, [r1, #0]
 8006524:	d004      	beq.n	8006530 <__cvt+0x40>
 8006526:	2f45      	cmp	r7, #69	; 0x45
 8006528:	d100      	bne.n	800652c <__cvt+0x3c>
 800652a:	3601      	adds	r6, #1
 800652c:	2102      	movs	r1, #2
 800652e:	e000      	b.n	8006532 <__cvt+0x42>
 8006530:	2103      	movs	r1, #3
 8006532:	ab03      	add	r3, sp, #12
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	ab02      	add	r3, sp, #8
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	4632      	mov	r2, r6
 800653c:	4653      	mov	r3, sl
 800653e:	ec45 4b10 	vmov	d0, r4, r5
 8006542:	f001 fdf5 	bl	8008130 <_dtoa_r>
 8006546:	2f47      	cmp	r7, #71	; 0x47
 8006548:	4680      	mov	r8, r0
 800654a:	d102      	bne.n	8006552 <__cvt+0x62>
 800654c:	f019 0f01 	tst.w	r9, #1
 8006550:	d026      	beq.n	80065a0 <__cvt+0xb0>
 8006552:	2f46      	cmp	r7, #70	; 0x46
 8006554:	eb08 0906 	add.w	r9, r8, r6
 8006558:	d111      	bne.n	800657e <__cvt+0x8e>
 800655a:	f898 3000 	ldrb.w	r3, [r8]
 800655e:	2b30      	cmp	r3, #48	; 0x30
 8006560:	d10a      	bne.n	8006578 <__cvt+0x88>
 8006562:	2200      	movs	r2, #0
 8006564:	2300      	movs	r3, #0
 8006566:	4620      	mov	r0, r4
 8006568:	4629      	mov	r1, r5
 800656a:	f7fa fab5 	bl	8000ad8 <__aeabi_dcmpeq>
 800656e:	b918      	cbnz	r0, 8006578 <__cvt+0x88>
 8006570:	f1c6 0601 	rsb	r6, r6, #1
 8006574:	f8ca 6000 	str.w	r6, [sl]
 8006578:	f8da 3000 	ldr.w	r3, [sl]
 800657c:	4499      	add	r9, r3
 800657e:	2200      	movs	r2, #0
 8006580:	2300      	movs	r3, #0
 8006582:	4620      	mov	r0, r4
 8006584:	4629      	mov	r1, r5
 8006586:	f7fa faa7 	bl	8000ad8 <__aeabi_dcmpeq>
 800658a:	b938      	cbnz	r0, 800659c <__cvt+0xac>
 800658c:	2230      	movs	r2, #48	; 0x30
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	454b      	cmp	r3, r9
 8006592:	d205      	bcs.n	80065a0 <__cvt+0xb0>
 8006594:	1c59      	adds	r1, r3, #1
 8006596:	9103      	str	r1, [sp, #12]
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e7f8      	b.n	800658e <__cvt+0x9e>
 800659c:	f8cd 900c 	str.w	r9, [sp, #12]
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065a4:	eba3 0308 	sub.w	r3, r3, r8
 80065a8:	4640      	mov	r0, r8
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	b004      	add	sp, #16
 80065ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080065b2 <__exponent>:
 80065b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b4:	2900      	cmp	r1, #0
 80065b6:	4604      	mov	r4, r0
 80065b8:	bfba      	itte	lt
 80065ba:	4249      	neglt	r1, r1
 80065bc:	232d      	movlt	r3, #45	; 0x2d
 80065be:	232b      	movge	r3, #43	; 0x2b
 80065c0:	2909      	cmp	r1, #9
 80065c2:	f804 2b02 	strb.w	r2, [r4], #2
 80065c6:	7043      	strb	r3, [r0, #1]
 80065c8:	dd20      	ble.n	800660c <__exponent+0x5a>
 80065ca:	f10d 0307 	add.w	r3, sp, #7
 80065ce:	461f      	mov	r7, r3
 80065d0:	260a      	movs	r6, #10
 80065d2:	fb91 f5f6 	sdiv	r5, r1, r6
 80065d6:	fb06 1115 	mls	r1, r6, r5, r1
 80065da:	3130      	adds	r1, #48	; 0x30
 80065dc:	2d09      	cmp	r5, #9
 80065de:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065e2:	f103 32ff 	add.w	r2, r3, #4294967295
 80065e6:	4629      	mov	r1, r5
 80065e8:	dc09      	bgt.n	80065fe <__exponent+0x4c>
 80065ea:	3130      	adds	r1, #48	; 0x30
 80065ec:	3b02      	subs	r3, #2
 80065ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065f2:	42bb      	cmp	r3, r7
 80065f4:	4622      	mov	r2, r4
 80065f6:	d304      	bcc.n	8006602 <__exponent+0x50>
 80065f8:	1a10      	subs	r0, r2, r0
 80065fa:	b003      	add	sp, #12
 80065fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065fe:	4613      	mov	r3, r2
 8006600:	e7e7      	b.n	80065d2 <__exponent+0x20>
 8006602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006606:	f804 2b01 	strb.w	r2, [r4], #1
 800660a:	e7f2      	b.n	80065f2 <__exponent+0x40>
 800660c:	2330      	movs	r3, #48	; 0x30
 800660e:	4419      	add	r1, r3
 8006610:	7083      	strb	r3, [r0, #2]
 8006612:	1d02      	adds	r2, r0, #4
 8006614:	70c1      	strb	r1, [r0, #3]
 8006616:	e7ef      	b.n	80065f8 <__exponent+0x46>

08006618 <_printf_float>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	b08d      	sub	sp, #52	; 0x34
 800661e:	460c      	mov	r4, r1
 8006620:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006624:	4616      	mov	r6, r2
 8006626:	461f      	mov	r7, r3
 8006628:	4605      	mov	r5, r0
 800662a:	f002 ff2f 	bl	800948c <_localeconv_r>
 800662e:	6803      	ldr	r3, [r0, #0]
 8006630:	9304      	str	r3, [sp, #16]
 8006632:	4618      	mov	r0, r3
 8006634:	f7f9 fdd4 	bl	80001e0 <strlen>
 8006638:	2300      	movs	r3, #0
 800663a:	930a      	str	r3, [sp, #40]	; 0x28
 800663c:	f8d8 3000 	ldr.w	r3, [r8]
 8006640:	9005      	str	r0, [sp, #20]
 8006642:	3307      	adds	r3, #7
 8006644:	f023 0307 	bic.w	r3, r3, #7
 8006648:	f103 0208 	add.w	r2, r3, #8
 800664c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006650:	f8d4 b000 	ldr.w	fp, [r4]
 8006654:	f8c8 2000 	str.w	r2, [r8]
 8006658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006660:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006664:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006668:	9307      	str	r3, [sp, #28]
 800666a:	f8cd 8018 	str.w	r8, [sp, #24]
 800666e:	f04f 32ff 	mov.w	r2, #4294967295
 8006672:	4ba7      	ldr	r3, [pc, #668]	; (8006910 <_printf_float+0x2f8>)
 8006674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006678:	f7fa fa60 	bl	8000b3c <__aeabi_dcmpun>
 800667c:	bb70      	cbnz	r0, 80066dc <_printf_float+0xc4>
 800667e:	f04f 32ff 	mov.w	r2, #4294967295
 8006682:	4ba3      	ldr	r3, [pc, #652]	; (8006910 <_printf_float+0x2f8>)
 8006684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006688:	f7fa fa3a 	bl	8000b00 <__aeabi_dcmple>
 800668c:	bb30      	cbnz	r0, 80066dc <_printf_float+0xc4>
 800668e:	2200      	movs	r2, #0
 8006690:	2300      	movs	r3, #0
 8006692:	4640      	mov	r0, r8
 8006694:	4649      	mov	r1, r9
 8006696:	f7fa fa29 	bl	8000aec <__aeabi_dcmplt>
 800669a:	b110      	cbz	r0, 80066a2 <_printf_float+0x8a>
 800669c:	232d      	movs	r3, #45	; 0x2d
 800669e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a2:	4a9c      	ldr	r2, [pc, #624]	; (8006914 <_printf_float+0x2fc>)
 80066a4:	4b9c      	ldr	r3, [pc, #624]	; (8006918 <_printf_float+0x300>)
 80066a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80066aa:	bf8c      	ite	hi
 80066ac:	4690      	movhi	r8, r2
 80066ae:	4698      	movls	r8, r3
 80066b0:	2303      	movs	r3, #3
 80066b2:	f02b 0204 	bic.w	r2, fp, #4
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	6022      	str	r2, [r4, #0]
 80066ba:	f04f 0900 	mov.w	r9, #0
 80066be:	9700      	str	r7, [sp, #0]
 80066c0:	4633      	mov	r3, r6
 80066c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80066c4:	4621      	mov	r1, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 f9e6 	bl	8006a98 <_printf_common>
 80066cc:	3001      	adds	r0, #1
 80066ce:	f040 808d 	bne.w	80067ec <_printf_float+0x1d4>
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295
 80066d6:	b00d      	add	sp, #52	; 0x34
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	4642      	mov	r2, r8
 80066de:	464b      	mov	r3, r9
 80066e0:	4640      	mov	r0, r8
 80066e2:	4649      	mov	r1, r9
 80066e4:	f7fa fa2a 	bl	8000b3c <__aeabi_dcmpun>
 80066e8:	b110      	cbz	r0, 80066f0 <_printf_float+0xd8>
 80066ea:	4a8c      	ldr	r2, [pc, #560]	; (800691c <_printf_float+0x304>)
 80066ec:	4b8c      	ldr	r3, [pc, #560]	; (8006920 <_printf_float+0x308>)
 80066ee:	e7da      	b.n	80066a6 <_printf_float+0x8e>
 80066f0:	6861      	ldr	r1, [r4, #4]
 80066f2:	1c4b      	adds	r3, r1, #1
 80066f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80066f8:	a80a      	add	r0, sp, #40	; 0x28
 80066fa:	d13e      	bne.n	800677a <_printf_float+0x162>
 80066fc:	2306      	movs	r3, #6
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	2300      	movs	r3, #0
 8006702:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006706:	ab09      	add	r3, sp, #36	; 0x24
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	ec49 8b10 	vmov	d0, r8, r9
 800670e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006712:	6022      	str	r2, [r4, #0]
 8006714:	f8cd a004 	str.w	sl, [sp, #4]
 8006718:	6861      	ldr	r1, [r4, #4]
 800671a:	4628      	mov	r0, r5
 800671c:	f7ff fee8 	bl	80064f0 <__cvt>
 8006720:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006724:	2b47      	cmp	r3, #71	; 0x47
 8006726:	4680      	mov	r8, r0
 8006728:	d109      	bne.n	800673e <_printf_float+0x126>
 800672a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672c:	1cd8      	adds	r0, r3, #3
 800672e:	db02      	blt.n	8006736 <_printf_float+0x11e>
 8006730:	6862      	ldr	r2, [r4, #4]
 8006732:	4293      	cmp	r3, r2
 8006734:	dd47      	ble.n	80067c6 <_printf_float+0x1ae>
 8006736:	f1aa 0a02 	sub.w	sl, sl, #2
 800673a:	fa5f fa8a 	uxtb.w	sl, sl
 800673e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006742:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006744:	d824      	bhi.n	8006790 <_printf_float+0x178>
 8006746:	3901      	subs	r1, #1
 8006748:	4652      	mov	r2, sl
 800674a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800674e:	9109      	str	r1, [sp, #36]	; 0x24
 8006750:	f7ff ff2f 	bl	80065b2 <__exponent>
 8006754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006756:	1813      	adds	r3, r2, r0
 8006758:	2a01      	cmp	r2, #1
 800675a:	4681      	mov	r9, r0
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	dc02      	bgt.n	8006766 <_printf_float+0x14e>
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	07d1      	lsls	r1, r2, #31
 8006764:	d501      	bpl.n	800676a <_printf_float+0x152>
 8006766:	3301      	adds	r3, #1
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0a5      	beq.n	80066be <_printf_float+0xa6>
 8006772:	232d      	movs	r3, #45	; 0x2d
 8006774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006778:	e7a1      	b.n	80066be <_printf_float+0xa6>
 800677a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800677e:	f000 8177 	beq.w	8006a70 <_printf_float+0x458>
 8006782:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006786:	d1bb      	bne.n	8006700 <_printf_float+0xe8>
 8006788:	2900      	cmp	r1, #0
 800678a:	d1b9      	bne.n	8006700 <_printf_float+0xe8>
 800678c:	2301      	movs	r3, #1
 800678e:	e7b6      	b.n	80066fe <_printf_float+0xe6>
 8006790:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006794:	d119      	bne.n	80067ca <_printf_float+0x1b2>
 8006796:	2900      	cmp	r1, #0
 8006798:	6863      	ldr	r3, [r4, #4]
 800679a:	dd0c      	ble.n	80067b6 <_printf_float+0x19e>
 800679c:	6121      	str	r1, [r4, #16]
 800679e:	b913      	cbnz	r3, 80067a6 <_printf_float+0x18e>
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	07d2      	lsls	r2, r2, #31
 80067a4:	d502      	bpl.n	80067ac <_printf_float+0x194>
 80067a6:	3301      	adds	r3, #1
 80067a8:	440b      	add	r3, r1
 80067aa:	6123      	str	r3, [r4, #16]
 80067ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80067b0:	f04f 0900 	mov.w	r9, #0
 80067b4:	e7d9      	b.n	800676a <_printf_float+0x152>
 80067b6:	b913      	cbnz	r3, 80067be <_printf_float+0x1a6>
 80067b8:	6822      	ldr	r2, [r4, #0]
 80067ba:	07d0      	lsls	r0, r2, #31
 80067bc:	d501      	bpl.n	80067c2 <_printf_float+0x1aa>
 80067be:	3302      	adds	r3, #2
 80067c0:	e7f3      	b.n	80067aa <_printf_float+0x192>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e7f1      	b.n	80067aa <_printf_float+0x192>
 80067c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80067ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067ce:	4293      	cmp	r3, r2
 80067d0:	db05      	blt.n	80067de <_printf_float+0x1c6>
 80067d2:	6822      	ldr	r2, [r4, #0]
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	07d1      	lsls	r1, r2, #31
 80067d8:	d5e8      	bpl.n	80067ac <_printf_float+0x194>
 80067da:	3301      	adds	r3, #1
 80067dc:	e7e5      	b.n	80067aa <_printf_float+0x192>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bfd4      	ite	le
 80067e2:	f1c3 0302 	rsble	r3, r3, #2
 80067e6:	2301      	movgt	r3, #1
 80067e8:	4413      	add	r3, r2
 80067ea:	e7de      	b.n	80067aa <_printf_float+0x192>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	055a      	lsls	r2, r3, #21
 80067f0:	d407      	bmi.n	8006802 <_printf_float+0x1ea>
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	4642      	mov	r2, r8
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	d12b      	bne.n	8006858 <_printf_float+0x240>
 8006800:	e767      	b.n	80066d2 <_printf_float+0xba>
 8006802:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006806:	f240 80dc 	bls.w	80069c2 <_printf_float+0x3aa>
 800680a:	2200      	movs	r2, #0
 800680c:	2300      	movs	r3, #0
 800680e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006812:	f7fa f961 	bl	8000ad8 <__aeabi_dcmpeq>
 8006816:	2800      	cmp	r0, #0
 8006818:	d033      	beq.n	8006882 <_printf_float+0x26a>
 800681a:	2301      	movs	r3, #1
 800681c:	4a41      	ldr	r2, [pc, #260]	; (8006924 <_printf_float+0x30c>)
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f af54 	beq.w	80066d2 <_printf_float+0xba>
 800682a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800682e:	429a      	cmp	r2, r3
 8006830:	db02      	blt.n	8006838 <_printf_float+0x220>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	07d8      	lsls	r0, r3, #31
 8006836:	d50f      	bpl.n	8006858 <_printf_float+0x240>
 8006838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f af45 	beq.w	80066d2 <_printf_float+0xba>
 8006848:	f04f 0800 	mov.w	r8, #0
 800684c:	f104 091a 	add.w	r9, r4, #26
 8006850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006852:	3b01      	subs	r3, #1
 8006854:	4543      	cmp	r3, r8
 8006856:	dc09      	bgt.n	800686c <_printf_float+0x254>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	079b      	lsls	r3, r3, #30
 800685c:	f100 8103 	bmi.w	8006a66 <_printf_float+0x44e>
 8006860:	68e0      	ldr	r0, [r4, #12]
 8006862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006864:	4298      	cmp	r0, r3
 8006866:	bfb8      	it	lt
 8006868:	4618      	movlt	r0, r3
 800686a:	e734      	b.n	80066d6 <_printf_float+0xbe>
 800686c:	2301      	movs	r3, #1
 800686e:	464a      	mov	r2, r9
 8006870:	4631      	mov	r1, r6
 8006872:	4628      	mov	r0, r5
 8006874:	47b8      	blx	r7
 8006876:	3001      	adds	r0, #1
 8006878:	f43f af2b 	beq.w	80066d2 <_printf_float+0xba>
 800687c:	f108 0801 	add.w	r8, r8, #1
 8006880:	e7e6      	b.n	8006850 <_printf_float+0x238>
 8006882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	dc2b      	bgt.n	80068e0 <_printf_float+0x2c8>
 8006888:	2301      	movs	r3, #1
 800688a:	4a26      	ldr	r2, [pc, #152]	; (8006924 <_printf_float+0x30c>)
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	f43f af1d 	beq.w	80066d2 <_printf_float+0xba>
 8006898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689a:	b923      	cbnz	r3, 80068a6 <_printf_float+0x28e>
 800689c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689e:	b913      	cbnz	r3, 80068a6 <_printf_float+0x28e>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	07d9      	lsls	r1, r3, #31
 80068a4:	d5d8      	bpl.n	8006858 <_printf_float+0x240>
 80068a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	f43f af0e 	beq.w	80066d2 <_printf_float+0xba>
 80068b6:	f04f 0900 	mov.w	r9, #0
 80068ba:	f104 0a1a 	add.w	sl, r4, #26
 80068be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c0:	425b      	negs	r3, r3
 80068c2:	454b      	cmp	r3, r9
 80068c4:	dc01      	bgt.n	80068ca <_printf_float+0x2b2>
 80068c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c8:	e794      	b.n	80067f4 <_printf_float+0x1dc>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4652      	mov	r2, sl
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f aefc 	beq.w	80066d2 <_printf_float+0xba>
 80068da:	f109 0901 	add.w	r9, r9, #1
 80068de:	e7ee      	b.n	80068be <_printf_float+0x2a6>
 80068e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068e4:	429a      	cmp	r2, r3
 80068e6:	bfa8      	it	ge
 80068e8:	461a      	movge	r2, r3
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	4691      	mov	r9, r2
 80068ee:	dd07      	ble.n	8006900 <_printf_float+0x2e8>
 80068f0:	4613      	mov	r3, r2
 80068f2:	4631      	mov	r1, r6
 80068f4:	4642      	mov	r2, r8
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b8      	blx	r7
 80068fa:	3001      	adds	r0, #1
 80068fc:	f43f aee9 	beq.w	80066d2 <_printf_float+0xba>
 8006900:	f104 031a 	add.w	r3, r4, #26
 8006904:	f04f 0b00 	mov.w	fp, #0
 8006908:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800690c:	9306      	str	r3, [sp, #24]
 800690e:	e015      	b.n	800693c <_printf_float+0x324>
 8006910:	7fefffff 	.word	0x7fefffff
 8006914:	0800a9d4 	.word	0x0800a9d4
 8006918:	0800a9d0 	.word	0x0800a9d0
 800691c:	0800a9dc 	.word	0x0800a9dc
 8006920:	0800a9d8 	.word	0x0800a9d8
 8006924:	0800a9e0 	.word	0x0800a9e0
 8006928:	2301      	movs	r3, #1
 800692a:	9a06      	ldr	r2, [sp, #24]
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	f43f aecd 	beq.w	80066d2 <_printf_float+0xba>
 8006938:	f10b 0b01 	add.w	fp, fp, #1
 800693c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006940:	ebaa 0309 	sub.w	r3, sl, r9
 8006944:	455b      	cmp	r3, fp
 8006946:	dcef      	bgt.n	8006928 <_printf_float+0x310>
 8006948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800694c:	429a      	cmp	r2, r3
 800694e:	44d0      	add	r8, sl
 8006950:	db15      	blt.n	800697e <_printf_float+0x366>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	07da      	lsls	r2, r3, #31
 8006956:	d412      	bmi.n	800697e <_printf_float+0x366>
 8006958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800695a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800695c:	eba3 020a 	sub.w	r2, r3, sl
 8006960:	eba3 0a01 	sub.w	sl, r3, r1
 8006964:	4592      	cmp	sl, r2
 8006966:	bfa8      	it	ge
 8006968:	4692      	movge	sl, r2
 800696a:	f1ba 0f00 	cmp.w	sl, #0
 800696e:	dc0e      	bgt.n	800698e <_printf_float+0x376>
 8006970:	f04f 0800 	mov.w	r8, #0
 8006974:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006978:	f104 091a 	add.w	r9, r4, #26
 800697c:	e019      	b.n	80069b2 <_printf_float+0x39a>
 800697e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006982:	4631      	mov	r1, r6
 8006984:	4628      	mov	r0, r5
 8006986:	47b8      	blx	r7
 8006988:	3001      	adds	r0, #1
 800698a:	d1e5      	bne.n	8006958 <_printf_float+0x340>
 800698c:	e6a1      	b.n	80066d2 <_printf_float+0xba>
 800698e:	4653      	mov	r3, sl
 8006990:	4642      	mov	r2, r8
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d1e9      	bne.n	8006970 <_printf_float+0x358>
 800699c:	e699      	b.n	80066d2 <_printf_float+0xba>
 800699e:	2301      	movs	r3, #1
 80069a0:	464a      	mov	r2, r9
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae92 	beq.w	80066d2 <_printf_float+0xba>
 80069ae:	f108 0801 	add.w	r8, r8, #1
 80069b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	eba3 030a 	sub.w	r3, r3, sl
 80069bc:	4543      	cmp	r3, r8
 80069be:	dcee      	bgt.n	800699e <_printf_float+0x386>
 80069c0:	e74a      	b.n	8006858 <_printf_float+0x240>
 80069c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069c4:	2a01      	cmp	r2, #1
 80069c6:	dc01      	bgt.n	80069cc <_printf_float+0x3b4>
 80069c8:	07db      	lsls	r3, r3, #31
 80069ca:	d53a      	bpl.n	8006a42 <_printf_float+0x42a>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4642      	mov	r2, r8
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	f43f ae7b 	beq.w	80066d2 <_printf_float+0xba>
 80069dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069e0:	4631      	mov	r1, r6
 80069e2:	4628      	mov	r0, r5
 80069e4:	47b8      	blx	r7
 80069e6:	3001      	adds	r0, #1
 80069e8:	f108 0801 	add.w	r8, r8, #1
 80069ec:	f43f ae71 	beq.w	80066d2 <_printf_float+0xba>
 80069f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069f2:	2200      	movs	r2, #0
 80069f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80069f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069fc:	2300      	movs	r3, #0
 80069fe:	f7fa f86b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a02:	b9c8      	cbnz	r0, 8006a38 <_printf_float+0x420>
 8006a04:	4653      	mov	r3, sl
 8006a06:	4642      	mov	r2, r8
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d10e      	bne.n	8006a30 <_printf_float+0x418>
 8006a12:	e65e      	b.n	80066d2 <_printf_float+0xba>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4652      	mov	r2, sl
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	f43f ae57 	beq.w	80066d2 <_printf_float+0xba>
 8006a24:	f108 0801 	add.w	r8, r8, #1
 8006a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	4543      	cmp	r3, r8
 8006a2e:	dcf1      	bgt.n	8006a14 <_printf_float+0x3fc>
 8006a30:	464b      	mov	r3, r9
 8006a32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a36:	e6de      	b.n	80067f6 <_printf_float+0x1de>
 8006a38:	f04f 0800 	mov.w	r8, #0
 8006a3c:	f104 0a1a 	add.w	sl, r4, #26
 8006a40:	e7f2      	b.n	8006a28 <_printf_float+0x410>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e7df      	b.n	8006a06 <_printf_float+0x3ee>
 8006a46:	2301      	movs	r3, #1
 8006a48:	464a      	mov	r2, r9
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	f43f ae3e 	beq.w	80066d2 <_printf_float+0xba>
 8006a56:	f108 0801 	add.w	r8, r8, #1
 8006a5a:	68e3      	ldr	r3, [r4, #12]
 8006a5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a5e:	1a9b      	subs	r3, r3, r2
 8006a60:	4543      	cmp	r3, r8
 8006a62:	dcf0      	bgt.n	8006a46 <_printf_float+0x42e>
 8006a64:	e6fc      	b.n	8006860 <_printf_float+0x248>
 8006a66:	f04f 0800 	mov.w	r8, #0
 8006a6a:	f104 0919 	add.w	r9, r4, #25
 8006a6e:	e7f4      	b.n	8006a5a <_printf_float+0x442>
 8006a70:	2900      	cmp	r1, #0
 8006a72:	f43f ae8b 	beq.w	800678c <_printf_float+0x174>
 8006a76:	2300      	movs	r3, #0
 8006a78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006a7c:	ab09      	add	r3, sp, #36	; 0x24
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	ec49 8b10 	vmov	d0, r8, r9
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	f8cd a004 	str.w	sl, [sp, #4]
 8006a8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f7ff fd2e 	bl	80064f0 <__cvt>
 8006a94:	4680      	mov	r8, r0
 8006a96:	e648      	b.n	800672a <_printf_float+0x112>

08006a98 <_printf_common>:
 8006a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a9c:	4691      	mov	r9, r2
 8006a9e:	461f      	mov	r7, r3
 8006aa0:	688a      	ldr	r2, [r1, #8]
 8006aa2:	690b      	ldr	r3, [r1, #16]
 8006aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	bfb8      	it	lt
 8006aac:	4613      	movlt	r3, r2
 8006aae:	f8c9 3000 	str.w	r3, [r9]
 8006ab2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	460c      	mov	r4, r1
 8006aba:	b112      	cbz	r2, 8006ac2 <_printf_common+0x2a>
 8006abc:	3301      	adds	r3, #1
 8006abe:	f8c9 3000 	str.w	r3, [r9]
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	0699      	lsls	r1, r3, #26
 8006ac6:	bf42      	ittt	mi
 8006ac8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006acc:	3302      	addmi	r3, #2
 8006ace:	f8c9 3000 	strmi.w	r3, [r9]
 8006ad2:	6825      	ldr	r5, [r4, #0]
 8006ad4:	f015 0506 	ands.w	r5, r5, #6
 8006ad8:	d107      	bne.n	8006aea <_printf_common+0x52>
 8006ada:	f104 0a19 	add.w	sl, r4, #25
 8006ade:	68e3      	ldr	r3, [r4, #12]
 8006ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	42ab      	cmp	r3, r5
 8006ae8:	dc28      	bgt.n	8006b3c <_printf_common+0xa4>
 8006aea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	3300      	adds	r3, #0
 8006af2:	bf18      	it	ne
 8006af4:	2301      	movne	r3, #1
 8006af6:	0692      	lsls	r2, r2, #26
 8006af8:	d42d      	bmi.n	8006b56 <_printf_common+0xbe>
 8006afa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006afe:	4639      	mov	r1, r7
 8006b00:	4630      	mov	r0, r6
 8006b02:	47c0      	blx	r8
 8006b04:	3001      	adds	r0, #1
 8006b06:	d020      	beq.n	8006b4a <_printf_common+0xb2>
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	68e5      	ldr	r5, [r4, #12]
 8006b0c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b10:	f003 0306 	and.w	r3, r3, #6
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	bf08      	it	eq
 8006b18:	1aad      	subeq	r5, r5, r2
 8006b1a:	68a3      	ldr	r3, [r4, #8]
 8006b1c:	6922      	ldr	r2, [r4, #16]
 8006b1e:	bf0c      	ite	eq
 8006b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b24:	2500      	movne	r5, #0
 8006b26:	4293      	cmp	r3, r2
 8006b28:	bfc4      	itt	gt
 8006b2a:	1a9b      	subgt	r3, r3, r2
 8006b2c:	18ed      	addgt	r5, r5, r3
 8006b2e:	f04f 0900 	mov.w	r9, #0
 8006b32:	341a      	adds	r4, #26
 8006b34:	454d      	cmp	r5, r9
 8006b36:	d11a      	bne.n	8006b6e <_printf_common+0xd6>
 8006b38:	2000      	movs	r0, #0
 8006b3a:	e008      	b.n	8006b4e <_printf_common+0xb6>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	4652      	mov	r2, sl
 8006b40:	4639      	mov	r1, r7
 8006b42:	4630      	mov	r0, r6
 8006b44:	47c0      	blx	r8
 8006b46:	3001      	adds	r0, #1
 8006b48:	d103      	bne.n	8006b52 <_printf_common+0xba>
 8006b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b52:	3501      	adds	r5, #1
 8006b54:	e7c3      	b.n	8006ade <_printf_common+0x46>
 8006b56:	18e1      	adds	r1, r4, r3
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	2030      	movs	r0, #48	; 0x30
 8006b5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b60:	4422      	add	r2, r4
 8006b62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	e7c5      	b.n	8006afa <_printf_common+0x62>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4622      	mov	r2, r4
 8006b72:	4639      	mov	r1, r7
 8006b74:	4630      	mov	r0, r6
 8006b76:	47c0      	blx	r8
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d0e6      	beq.n	8006b4a <_printf_common+0xb2>
 8006b7c:	f109 0901 	add.w	r9, r9, #1
 8006b80:	e7d8      	b.n	8006b34 <_printf_common+0x9c>
	...

08006b84 <_printf_i>:
 8006b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b8c:	460c      	mov	r4, r1
 8006b8e:	7e09      	ldrb	r1, [r1, #24]
 8006b90:	b085      	sub	sp, #20
 8006b92:	296e      	cmp	r1, #110	; 0x6e
 8006b94:	4617      	mov	r7, r2
 8006b96:	4606      	mov	r6, r0
 8006b98:	4698      	mov	r8, r3
 8006b9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b9c:	f000 80b3 	beq.w	8006d06 <_printf_i+0x182>
 8006ba0:	d822      	bhi.n	8006be8 <_printf_i+0x64>
 8006ba2:	2963      	cmp	r1, #99	; 0x63
 8006ba4:	d036      	beq.n	8006c14 <_printf_i+0x90>
 8006ba6:	d80a      	bhi.n	8006bbe <_printf_i+0x3a>
 8006ba8:	2900      	cmp	r1, #0
 8006baa:	f000 80b9 	beq.w	8006d20 <_printf_i+0x19c>
 8006bae:	2958      	cmp	r1, #88	; 0x58
 8006bb0:	f000 8083 	beq.w	8006cba <_printf_i+0x136>
 8006bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006bbc:	e032      	b.n	8006c24 <_printf_i+0xa0>
 8006bbe:	2964      	cmp	r1, #100	; 0x64
 8006bc0:	d001      	beq.n	8006bc6 <_printf_i+0x42>
 8006bc2:	2969      	cmp	r1, #105	; 0x69
 8006bc4:	d1f6      	bne.n	8006bb4 <_printf_i+0x30>
 8006bc6:	6820      	ldr	r0, [r4, #0]
 8006bc8:	6813      	ldr	r3, [r2, #0]
 8006bca:	0605      	lsls	r5, r0, #24
 8006bcc:	f103 0104 	add.w	r1, r3, #4
 8006bd0:	d52a      	bpl.n	8006c28 <_printf_i+0xa4>
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6011      	str	r1, [r2, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	da03      	bge.n	8006be2 <_printf_i+0x5e>
 8006bda:	222d      	movs	r2, #45	; 0x2d
 8006bdc:	425b      	negs	r3, r3
 8006bde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006be2:	486f      	ldr	r0, [pc, #444]	; (8006da0 <_printf_i+0x21c>)
 8006be4:	220a      	movs	r2, #10
 8006be6:	e039      	b.n	8006c5c <_printf_i+0xd8>
 8006be8:	2973      	cmp	r1, #115	; 0x73
 8006bea:	f000 809d 	beq.w	8006d28 <_printf_i+0x1a4>
 8006bee:	d808      	bhi.n	8006c02 <_printf_i+0x7e>
 8006bf0:	296f      	cmp	r1, #111	; 0x6f
 8006bf2:	d020      	beq.n	8006c36 <_printf_i+0xb2>
 8006bf4:	2970      	cmp	r1, #112	; 0x70
 8006bf6:	d1dd      	bne.n	8006bb4 <_printf_i+0x30>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	f043 0320 	orr.w	r3, r3, #32
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	e003      	b.n	8006c0a <_printf_i+0x86>
 8006c02:	2975      	cmp	r1, #117	; 0x75
 8006c04:	d017      	beq.n	8006c36 <_printf_i+0xb2>
 8006c06:	2978      	cmp	r1, #120	; 0x78
 8006c08:	d1d4      	bne.n	8006bb4 <_printf_i+0x30>
 8006c0a:	2378      	movs	r3, #120	; 0x78
 8006c0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c10:	4864      	ldr	r0, [pc, #400]	; (8006da4 <_printf_i+0x220>)
 8006c12:	e055      	b.n	8006cc0 <_printf_i+0x13c>
 8006c14:	6813      	ldr	r3, [r2, #0]
 8006c16:	1d19      	adds	r1, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6011      	str	r1, [r2, #0]
 8006c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c24:	2301      	movs	r3, #1
 8006c26:	e08c      	b.n	8006d42 <_printf_i+0x1be>
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6011      	str	r1, [r2, #0]
 8006c2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c30:	bf18      	it	ne
 8006c32:	b21b      	sxthne	r3, r3
 8006c34:	e7cf      	b.n	8006bd6 <_printf_i+0x52>
 8006c36:	6813      	ldr	r3, [r2, #0]
 8006c38:	6825      	ldr	r5, [r4, #0]
 8006c3a:	1d18      	adds	r0, r3, #4
 8006c3c:	6010      	str	r0, [r2, #0]
 8006c3e:	0628      	lsls	r0, r5, #24
 8006c40:	d501      	bpl.n	8006c46 <_printf_i+0xc2>
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	e002      	b.n	8006c4c <_printf_i+0xc8>
 8006c46:	0668      	lsls	r0, r5, #25
 8006c48:	d5fb      	bpl.n	8006c42 <_printf_i+0xbe>
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	4854      	ldr	r0, [pc, #336]	; (8006da0 <_printf_i+0x21c>)
 8006c4e:	296f      	cmp	r1, #111	; 0x6f
 8006c50:	bf14      	ite	ne
 8006c52:	220a      	movne	r2, #10
 8006c54:	2208      	moveq	r2, #8
 8006c56:	2100      	movs	r1, #0
 8006c58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c5c:	6865      	ldr	r5, [r4, #4]
 8006c5e:	60a5      	str	r5, [r4, #8]
 8006c60:	2d00      	cmp	r5, #0
 8006c62:	f2c0 8095 	blt.w	8006d90 <_printf_i+0x20c>
 8006c66:	6821      	ldr	r1, [r4, #0]
 8006c68:	f021 0104 	bic.w	r1, r1, #4
 8006c6c:	6021      	str	r1, [r4, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d13d      	bne.n	8006cee <_printf_i+0x16a>
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	f040 808e 	bne.w	8006d94 <_printf_i+0x210>
 8006c78:	4665      	mov	r5, ip
 8006c7a:	2a08      	cmp	r2, #8
 8006c7c:	d10b      	bne.n	8006c96 <_printf_i+0x112>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	07db      	lsls	r3, r3, #31
 8006c82:	d508      	bpl.n	8006c96 <_printf_i+0x112>
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	6862      	ldr	r2, [r4, #4]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	bfde      	ittt	le
 8006c8c:	2330      	movle	r3, #48	; 0x30
 8006c8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c96:	ebac 0305 	sub.w	r3, ip, r5
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	f8cd 8000 	str.w	r8, [sp]
 8006ca0:	463b      	mov	r3, r7
 8006ca2:	aa03      	add	r2, sp, #12
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7ff fef6 	bl	8006a98 <_printf_common>
 8006cac:	3001      	adds	r0, #1
 8006cae:	d14d      	bne.n	8006d4c <_printf_i+0x1c8>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	b005      	add	sp, #20
 8006cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cba:	4839      	ldr	r0, [pc, #228]	; (8006da0 <_printf_i+0x21c>)
 8006cbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006cc0:	6813      	ldr	r3, [r2, #0]
 8006cc2:	6821      	ldr	r1, [r4, #0]
 8006cc4:	1d1d      	adds	r5, r3, #4
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6015      	str	r5, [r2, #0]
 8006cca:	060a      	lsls	r2, r1, #24
 8006ccc:	d50b      	bpl.n	8006ce6 <_printf_i+0x162>
 8006cce:	07ca      	lsls	r2, r1, #31
 8006cd0:	bf44      	itt	mi
 8006cd2:	f041 0120 	orrmi.w	r1, r1, #32
 8006cd6:	6021      	strmi	r1, [r4, #0]
 8006cd8:	b91b      	cbnz	r3, 8006ce2 <_printf_i+0x15e>
 8006cda:	6822      	ldr	r2, [r4, #0]
 8006cdc:	f022 0220 	bic.w	r2, r2, #32
 8006ce0:	6022      	str	r2, [r4, #0]
 8006ce2:	2210      	movs	r2, #16
 8006ce4:	e7b7      	b.n	8006c56 <_printf_i+0xd2>
 8006ce6:	064d      	lsls	r5, r1, #25
 8006ce8:	bf48      	it	mi
 8006cea:	b29b      	uxthmi	r3, r3
 8006cec:	e7ef      	b.n	8006cce <_printf_i+0x14a>
 8006cee:	4665      	mov	r5, ip
 8006cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cf4:	fb02 3311 	mls	r3, r2, r1, r3
 8006cf8:	5cc3      	ldrb	r3, [r0, r3]
 8006cfa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006cfe:	460b      	mov	r3, r1
 8006d00:	2900      	cmp	r1, #0
 8006d02:	d1f5      	bne.n	8006cf0 <_printf_i+0x16c>
 8006d04:	e7b9      	b.n	8006c7a <_printf_i+0xf6>
 8006d06:	6813      	ldr	r3, [r2, #0]
 8006d08:	6825      	ldr	r5, [r4, #0]
 8006d0a:	6961      	ldr	r1, [r4, #20]
 8006d0c:	1d18      	adds	r0, r3, #4
 8006d0e:	6010      	str	r0, [r2, #0]
 8006d10:	0628      	lsls	r0, r5, #24
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	d501      	bpl.n	8006d1a <_printf_i+0x196>
 8006d16:	6019      	str	r1, [r3, #0]
 8006d18:	e002      	b.n	8006d20 <_printf_i+0x19c>
 8006d1a:	066a      	lsls	r2, r5, #25
 8006d1c:	d5fb      	bpl.n	8006d16 <_printf_i+0x192>
 8006d1e:	8019      	strh	r1, [r3, #0]
 8006d20:	2300      	movs	r3, #0
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	4665      	mov	r5, ip
 8006d26:	e7b9      	b.n	8006c9c <_printf_i+0x118>
 8006d28:	6813      	ldr	r3, [r2, #0]
 8006d2a:	1d19      	adds	r1, r3, #4
 8006d2c:	6011      	str	r1, [r2, #0]
 8006d2e:	681d      	ldr	r5, [r3, #0]
 8006d30:	6862      	ldr	r2, [r4, #4]
 8006d32:	2100      	movs	r1, #0
 8006d34:	4628      	mov	r0, r5
 8006d36:	f7f9 fa5b 	bl	80001f0 <memchr>
 8006d3a:	b108      	cbz	r0, 8006d40 <_printf_i+0x1bc>
 8006d3c:	1b40      	subs	r0, r0, r5
 8006d3e:	6060      	str	r0, [r4, #4]
 8006d40:	6863      	ldr	r3, [r4, #4]
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	2300      	movs	r3, #0
 8006d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d4a:	e7a7      	b.n	8006c9c <_printf_i+0x118>
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	462a      	mov	r2, r5
 8006d50:	4639      	mov	r1, r7
 8006d52:	4630      	mov	r0, r6
 8006d54:	47c0      	blx	r8
 8006d56:	3001      	adds	r0, #1
 8006d58:	d0aa      	beq.n	8006cb0 <_printf_i+0x12c>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	079b      	lsls	r3, r3, #30
 8006d5e:	d413      	bmi.n	8006d88 <_printf_i+0x204>
 8006d60:	68e0      	ldr	r0, [r4, #12]
 8006d62:	9b03      	ldr	r3, [sp, #12]
 8006d64:	4298      	cmp	r0, r3
 8006d66:	bfb8      	it	lt
 8006d68:	4618      	movlt	r0, r3
 8006d6a:	e7a3      	b.n	8006cb4 <_printf_i+0x130>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	464a      	mov	r2, r9
 8006d70:	4639      	mov	r1, r7
 8006d72:	4630      	mov	r0, r6
 8006d74:	47c0      	blx	r8
 8006d76:	3001      	adds	r0, #1
 8006d78:	d09a      	beq.n	8006cb0 <_printf_i+0x12c>
 8006d7a:	3501      	adds	r5, #1
 8006d7c:	68e3      	ldr	r3, [r4, #12]
 8006d7e:	9a03      	ldr	r2, [sp, #12]
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	42ab      	cmp	r3, r5
 8006d84:	dcf2      	bgt.n	8006d6c <_printf_i+0x1e8>
 8006d86:	e7eb      	b.n	8006d60 <_printf_i+0x1dc>
 8006d88:	2500      	movs	r5, #0
 8006d8a:	f104 0919 	add.w	r9, r4, #25
 8006d8e:	e7f5      	b.n	8006d7c <_printf_i+0x1f8>
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ac      	bne.n	8006cee <_printf_i+0x16a>
 8006d94:	7803      	ldrb	r3, [r0, #0]
 8006d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d9e:	e76c      	b.n	8006c7a <_printf_i+0xf6>
 8006da0:	0800a9e2 	.word	0x0800a9e2
 8006da4:	0800a9f3 	.word	0x0800a9f3

08006da8 <_scanf_float>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	469a      	mov	sl, r3
 8006dae:	688b      	ldr	r3, [r1, #8]
 8006db0:	4616      	mov	r6, r2
 8006db2:	1e5a      	subs	r2, r3, #1
 8006db4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006db8:	b087      	sub	sp, #28
 8006dba:	bf83      	ittte	hi
 8006dbc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006dc0:	189b      	addhi	r3, r3, r2
 8006dc2:	9301      	strhi	r3, [sp, #4]
 8006dc4:	2300      	movls	r3, #0
 8006dc6:	bf86      	itte	hi
 8006dc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006dcc:	608b      	strhi	r3, [r1, #8]
 8006dce:	9301      	strls	r3, [sp, #4]
 8006dd0:	680b      	ldr	r3, [r1, #0]
 8006dd2:	4688      	mov	r8, r1
 8006dd4:	f04f 0b00 	mov.w	fp, #0
 8006dd8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006ddc:	f848 3b1c 	str.w	r3, [r8], #28
 8006de0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006de4:	4607      	mov	r7, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	4645      	mov	r5, r8
 8006dea:	465a      	mov	r2, fp
 8006dec:	46d9      	mov	r9, fp
 8006dee:	f8cd b008 	str.w	fp, [sp, #8]
 8006df2:	68a1      	ldr	r1, [r4, #8]
 8006df4:	b181      	cbz	r1, 8006e18 <_scanf_float+0x70>
 8006df6:	6833      	ldr	r3, [r6, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b49      	cmp	r3, #73	; 0x49
 8006dfc:	d071      	beq.n	8006ee2 <_scanf_float+0x13a>
 8006dfe:	d84d      	bhi.n	8006e9c <_scanf_float+0xf4>
 8006e00:	2b39      	cmp	r3, #57	; 0x39
 8006e02:	d840      	bhi.n	8006e86 <_scanf_float+0xde>
 8006e04:	2b31      	cmp	r3, #49	; 0x31
 8006e06:	f080 8088 	bcs.w	8006f1a <_scanf_float+0x172>
 8006e0a:	2b2d      	cmp	r3, #45	; 0x2d
 8006e0c:	f000 8090 	beq.w	8006f30 <_scanf_float+0x188>
 8006e10:	d815      	bhi.n	8006e3e <_scanf_float+0x96>
 8006e12:	2b2b      	cmp	r3, #43	; 0x2b
 8006e14:	f000 808c 	beq.w	8006f30 <_scanf_float+0x188>
 8006e18:	f1b9 0f00 	cmp.w	r9, #0
 8006e1c:	d003      	beq.n	8006e26 <_scanf_float+0x7e>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	3a01      	subs	r2, #1
 8006e28:	2a01      	cmp	r2, #1
 8006e2a:	f200 80ea 	bhi.w	8007002 <_scanf_float+0x25a>
 8006e2e:	4545      	cmp	r5, r8
 8006e30:	f200 80dc 	bhi.w	8006fec <_scanf_float+0x244>
 8006e34:	2601      	movs	r6, #1
 8006e36:	4630      	mov	r0, r6
 8006e38:	b007      	add	sp, #28
 8006e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e40:	f000 809f 	beq.w	8006f82 <_scanf_float+0x1da>
 8006e44:	2b30      	cmp	r3, #48	; 0x30
 8006e46:	d1e7      	bne.n	8006e18 <_scanf_float+0x70>
 8006e48:	6820      	ldr	r0, [r4, #0]
 8006e4a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006e4e:	d064      	beq.n	8006f1a <_scanf_float+0x172>
 8006e50:	9b01      	ldr	r3, [sp, #4]
 8006e52:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006e56:	6020      	str	r0, [r4, #0]
 8006e58:	f109 0901 	add.w	r9, r9, #1
 8006e5c:	b11b      	cbz	r3, 8006e66 <_scanf_float+0xbe>
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	3101      	adds	r1, #1
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	60a1      	str	r1, [r4, #8]
 8006e66:	68a3      	ldr	r3, [r4, #8]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	60a3      	str	r3, [r4, #8]
 8006e6c:	6923      	ldr	r3, [r4, #16]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	6123      	str	r3, [r4, #16]
 8006e72:	6873      	ldr	r3, [r6, #4]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	6073      	str	r3, [r6, #4]
 8006e7a:	f340 80ac 	ble.w	8006fd6 <_scanf_float+0x22e>
 8006e7e:	6833      	ldr	r3, [r6, #0]
 8006e80:	3301      	adds	r3, #1
 8006e82:	6033      	str	r3, [r6, #0]
 8006e84:	e7b5      	b.n	8006df2 <_scanf_float+0x4a>
 8006e86:	2b45      	cmp	r3, #69	; 0x45
 8006e88:	f000 8085 	beq.w	8006f96 <_scanf_float+0x1ee>
 8006e8c:	2b46      	cmp	r3, #70	; 0x46
 8006e8e:	d06a      	beq.n	8006f66 <_scanf_float+0x1be>
 8006e90:	2b41      	cmp	r3, #65	; 0x41
 8006e92:	d1c1      	bne.n	8006e18 <_scanf_float+0x70>
 8006e94:	2a01      	cmp	r2, #1
 8006e96:	d1bf      	bne.n	8006e18 <_scanf_float+0x70>
 8006e98:	2202      	movs	r2, #2
 8006e9a:	e046      	b.n	8006f2a <_scanf_float+0x182>
 8006e9c:	2b65      	cmp	r3, #101	; 0x65
 8006e9e:	d07a      	beq.n	8006f96 <_scanf_float+0x1ee>
 8006ea0:	d818      	bhi.n	8006ed4 <_scanf_float+0x12c>
 8006ea2:	2b54      	cmp	r3, #84	; 0x54
 8006ea4:	d066      	beq.n	8006f74 <_scanf_float+0x1cc>
 8006ea6:	d811      	bhi.n	8006ecc <_scanf_float+0x124>
 8006ea8:	2b4e      	cmp	r3, #78	; 0x4e
 8006eaa:	d1b5      	bne.n	8006e18 <_scanf_float+0x70>
 8006eac:	2a00      	cmp	r2, #0
 8006eae:	d146      	bne.n	8006f3e <_scanf_float+0x196>
 8006eb0:	f1b9 0f00 	cmp.w	r9, #0
 8006eb4:	d145      	bne.n	8006f42 <_scanf_float+0x19a>
 8006eb6:	6821      	ldr	r1, [r4, #0]
 8006eb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006ebc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006ec0:	d13f      	bne.n	8006f42 <_scanf_float+0x19a>
 8006ec2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006ec6:	6021      	str	r1, [r4, #0]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	e02e      	b.n	8006f2a <_scanf_float+0x182>
 8006ecc:	2b59      	cmp	r3, #89	; 0x59
 8006ece:	d01e      	beq.n	8006f0e <_scanf_float+0x166>
 8006ed0:	2b61      	cmp	r3, #97	; 0x61
 8006ed2:	e7de      	b.n	8006e92 <_scanf_float+0xea>
 8006ed4:	2b6e      	cmp	r3, #110	; 0x6e
 8006ed6:	d0e9      	beq.n	8006eac <_scanf_float+0x104>
 8006ed8:	d815      	bhi.n	8006f06 <_scanf_float+0x15e>
 8006eda:	2b66      	cmp	r3, #102	; 0x66
 8006edc:	d043      	beq.n	8006f66 <_scanf_float+0x1be>
 8006ede:	2b69      	cmp	r3, #105	; 0x69
 8006ee0:	d19a      	bne.n	8006e18 <_scanf_float+0x70>
 8006ee2:	f1bb 0f00 	cmp.w	fp, #0
 8006ee6:	d138      	bne.n	8006f5a <_scanf_float+0x1b2>
 8006ee8:	f1b9 0f00 	cmp.w	r9, #0
 8006eec:	d197      	bne.n	8006e1e <_scanf_float+0x76>
 8006eee:	6821      	ldr	r1, [r4, #0]
 8006ef0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006ef4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006ef8:	d195      	bne.n	8006e26 <_scanf_float+0x7e>
 8006efa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006efe:	6021      	str	r1, [r4, #0]
 8006f00:	f04f 0b01 	mov.w	fp, #1
 8006f04:	e011      	b.n	8006f2a <_scanf_float+0x182>
 8006f06:	2b74      	cmp	r3, #116	; 0x74
 8006f08:	d034      	beq.n	8006f74 <_scanf_float+0x1cc>
 8006f0a:	2b79      	cmp	r3, #121	; 0x79
 8006f0c:	d184      	bne.n	8006e18 <_scanf_float+0x70>
 8006f0e:	f1bb 0f07 	cmp.w	fp, #7
 8006f12:	d181      	bne.n	8006e18 <_scanf_float+0x70>
 8006f14:	f04f 0b08 	mov.w	fp, #8
 8006f18:	e007      	b.n	8006f2a <_scanf_float+0x182>
 8006f1a:	eb12 0f0b 	cmn.w	r2, fp
 8006f1e:	f47f af7b 	bne.w	8006e18 <_scanf_float+0x70>
 8006f22:	6821      	ldr	r1, [r4, #0]
 8006f24:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006f28:	6021      	str	r1, [r4, #0]
 8006f2a:	702b      	strb	r3, [r5, #0]
 8006f2c:	3501      	adds	r5, #1
 8006f2e:	e79a      	b.n	8006e66 <_scanf_float+0xbe>
 8006f30:	6821      	ldr	r1, [r4, #0]
 8006f32:	0608      	lsls	r0, r1, #24
 8006f34:	f57f af70 	bpl.w	8006e18 <_scanf_float+0x70>
 8006f38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f3c:	e7f4      	b.n	8006f28 <_scanf_float+0x180>
 8006f3e:	2a02      	cmp	r2, #2
 8006f40:	d047      	beq.n	8006fd2 <_scanf_float+0x22a>
 8006f42:	f1bb 0f01 	cmp.w	fp, #1
 8006f46:	d003      	beq.n	8006f50 <_scanf_float+0x1a8>
 8006f48:	f1bb 0f04 	cmp.w	fp, #4
 8006f4c:	f47f af64 	bne.w	8006e18 <_scanf_float+0x70>
 8006f50:	f10b 0b01 	add.w	fp, fp, #1
 8006f54:	fa5f fb8b 	uxtb.w	fp, fp
 8006f58:	e7e7      	b.n	8006f2a <_scanf_float+0x182>
 8006f5a:	f1bb 0f03 	cmp.w	fp, #3
 8006f5e:	d0f7      	beq.n	8006f50 <_scanf_float+0x1a8>
 8006f60:	f1bb 0f05 	cmp.w	fp, #5
 8006f64:	e7f2      	b.n	8006f4c <_scanf_float+0x1a4>
 8006f66:	f1bb 0f02 	cmp.w	fp, #2
 8006f6a:	f47f af55 	bne.w	8006e18 <_scanf_float+0x70>
 8006f6e:	f04f 0b03 	mov.w	fp, #3
 8006f72:	e7da      	b.n	8006f2a <_scanf_float+0x182>
 8006f74:	f1bb 0f06 	cmp.w	fp, #6
 8006f78:	f47f af4e 	bne.w	8006e18 <_scanf_float+0x70>
 8006f7c:	f04f 0b07 	mov.w	fp, #7
 8006f80:	e7d3      	b.n	8006f2a <_scanf_float+0x182>
 8006f82:	6821      	ldr	r1, [r4, #0]
 8006f84:	0588      	lsls	r0, r1, #22
 8006f86:	f57f af47 	bpl.w	8006e18 <_scanf_float+0x70>
 8006f8a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006f8e:	6021      	str	r1, [r4, #0]
 8006f90:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f94:	e7c9      	b.n	8006f2a <_scanf_float+0x182>
 8006f96:	6821      	ldr	r1, [r4, #0]
 8006f98:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006f9c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006fa0:	d006      	beq.n	8006fb0 <_scanf_float+0x208>
 8006fa2:	0548      	lsls	r0, r1, #21
 8006fa4:	f57f af38 	bpl.w	8006e18 <_scanf_float+0x70>
 8006fa8:	f1b9 0f00 	cmp.w	r9, #0
 8006fac:	f43f af3b 	beq.w	8006e26 <_scanf_float+0x7e>
 8006fb0:	0588      	lsls	r0, r1, #22
 8006fb2:	bf58      	it	pl
 8006fb4:	9802      	ldrpl	r0, [sp, #8]
 8006fb6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006fba:	bf58      	it	pl
 8006fbc:	eba9 0000 	subpl.w	r0, r9, r0
 8006fc0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006fc4:	bf58      	it	pl
 8006fc6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006fca:	6021      	str	r1, [r4, #0]
 8006fcc:	f04f 0900 	mov.w	r9, #0
 8006fd0:	e7ab      	b.n	8006f2a <_scanf_float+0x182>
 8006fd2:	2203      	movs	r2, #3
 8006fd4:	e7a9      	b.n	8006f2a <_scanf_float+0x182>
 8006fd6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006fda:	9205      	str	r2, [sp, #20]
 8006fdc:	4631      	mov	r1, r6
 8006fde:	4638      	mov	r0, r7
 8006fe0:	4798      	blx	r3
 8006fe2:	9a05      	ldr	r2, [sp, #20]
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f43f af04 	beq.w	8006df2 <_scanf_float+0x4a>
 8006fea:	e715      	b.n	8006e18 <_scanf_float+0x70>
 8006fec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ff0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	4798      	blx	r3
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	6123      	str	r3, [r4, #16]
 8007000:	e715      	b.n	8006e2e <_scanf_float+0x86>
 8007002:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007006:	2b06      	cmp	r3, #6
 8007008:	d80a      	bhi.n	8007020 <_scanf_float+0x278>
 800700a:	f1bb 0f02 	cmp.w	fp, #2
 800700e:	d968      	bls.n	80070e2 <_scanf_float+0x33a>
 8007010:	f1ab 0b03 	sub.w	fp, fp, #3
 8007014:	fa5f fb8b 	uxtb.w	fp, fp
 8007018:	eba5 0b0b 	sub.w	fp, r5, fp
 800701c:	455d      	cmp	r5, fp
 800701e:	d14b      	bne.n	80070b8 <_scanf_float+0x310>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	05da      	lsls	r2, r3, #23
 8007024:	d51f      	bpl.n	8007066 <_scanf_float+0x2be>
 8007026:	055b      	lsls	r3, r3, #21
 8007028:	d468      	bmi.n	80070fc <_scanf_float+0x354>
 800702a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	2965      	cmp	r1, #101	; 0x65
 8007032:	f103 33ff 	add.w	r3, r3, #4294967295
 8007036:	f105 3bff 	add.w	fp, r5, #4294967295
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	d00d      	beq.n	800705a <_scanf_float+0x2b2>
 800703e:	2945      	cmp	r1, #69	; 0x45
 8007040:	d00b      	beq.n	800705a <_scanf_float+0x2b2>
 8007042:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007046:	4632      	mov	r2, r6
 8007048:	4638      	mov	r0, r7
 800704a:	4798      	blx	r3
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007052:	3b01      	subs	r3, #1
 8007054:	f1a5 0b02 	sub.w	fp, r5, #2
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800705e:	4632      	mov	r2, r6
 8007060:	4638      	mov	r0, r7
 8007062:	4798      	blx	r3
 8007064:	465d      	mov	r5, fp
 8007066:	6826      	ldr	r6, [r4, #0]
 8007068:	f016 0610 	ands.w	r6, r6, #16
 800706c:	d17a      	bne.n	8007164 <_scanf_float+0x3bc>
 800706e:	702e      	strb	r6, [r5, #0]
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707a:	d142      	bne.n	8007102 <_scanf_float+0x35a>
 800707c:	9b02      	ldr	r3, [sp, #8]
 800707e:	eba9 0303 	sub.w	r3, r9, r3
 8007082:	425a      	negs	r2, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d149      	bne.n	800711c <_scanf_float+0x374>
 8007088:	2200      	movs	r2, #0
 800708a:	4641      	mov	r1, r8
 800708c:	4638      	mov	r0, r7
 800708e:	f000 febb 	bl	8007e08 <_strtod_r>
 8007092:	6825      	ldr	r5, [r4, #0]
 8007094:	f8da 3000 	ldr.w	r3, [sl]
 8007098:	f015 0f02 	tst.w	r5, #2
 800709c:	f103 0204 	add.w	r2, r3, #4
 80070a0:	ec59 8b10 	vmov	r8, r9, d0
 80070a4:	f8ca 2000 	str.w	r2, [sl]
 80070a8:	d043      	beq.n	8007132 <_scanf_float+0x38a>
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	e9c3 8900 	strd	r8, r9, [r3]
 80070b0:	68e3      	ldr	r3, [r4, #12]
 80070b2:	3301      	adds	r3, #1
 80070b4:	60e3      	str	r3, [r4, #12]
 80070b6:	e6be      	b.n	8006e36 <_scanf_float+0x8e>
 80070b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80070c0:	4632      	mov	r2, r6
 80070c2:	4638      	mov	r0, r7
 80070c4:	4798      	blx	r3
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	6123      	str	r3, [r4, #16]
 80070cc:	e7a6      	b.n	800701c <_scanf_float+0x274>
 80070ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070d2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80070d6:	4632      	mov	r2, r6
 80070d8:	4638      	mov	r0, r7
 80070da:	4798      	blx	r3
 80070dc:	6923      	ldr	r3, [r4, #16]
 80070de:	3b01      	subs	r3, #1
 80070e0:	6123      	str	r3, [r4, #16]
 80070e2:	4545      	cmp	r5, r8
 80070e4:	d8f3      	bhi.n	80070ce <_scanf_float+0x326>
 80070e6:	e6a5      	b.n	8006e34 <_scanf_float+0x8c>
 80070e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80070f0:	4632      	mov	r2, r6
 80070f2:	4638      	mov	r0, r7
 80070f4:	4798      	blx	r3
 80070f6:	6923      	ldr	r3, [r4, #16]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	4545      	cmp	r5, r8
 80070fe:	d8f3      	bhi.n	80070e8 <_scanf_float+0x340>
 8007100:	e698      	b.n	8006e34 <_scanf_float+0x8c>
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0bf      	beq.n	8007088 <_scanf_float+0x2e0>
 8007108:	9904      	ldr	r1, [sp, #16]
 800710a:	230a      	movs	r3, #10
 800710c:	4632      	mov	r2, r6
 800710e:	3101      	adds	r1, #1
 8007110:	4638      	mov	r0, r7
 8007112:	f000 ff59 	bl	8007fc8 <_strtol_r>
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	9d04      	ldr	r5, [sp, #16]
 800711a:	1ac2      	subs	r2, r0, r3
 800711c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007120:	429d      	cmp	r5, r3
 8007122:	bf28      	it	cs
 8007124:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007128:	490f      	ldr	r1, [pc, #60]	; (8007168 <_scanf_float+0x3c0>)
 800712a:	4628      	mov	r0, r5
 800712c:	f000 f83c 	bl	80071a8 <siprintf>
 8007130:	e7aa      	b.n	8007088 <_scanf_float+0x2e0>
 8007132:	f015 0504 	ands.w	r5, r5, #4
 8007136:	d1b8      	bne.n	80070aa <_scanf_float+0x302>
 8007138:	681f      	ldr	r7, [r3, #0]
 800713a:	ee10 2a10 	vmov	r2, s0
 800713e:	464b      	mov	r3, r9
 8007140:	ee10 0a10 	vmov	r0, s0
 8007144:	4649      	mov	r1, r9
 8007146:	f7f9 fcf9 	bl	8000b3c <__aeabi_dcmpun>
 800714a:	b128      	cbz	r0, 8007158 <_scanf_float+0x3b0>
 800714c:	4628      	mov	r0, r5
 800714e:	f000 f825 	bl	800719c <nanf>
 8007152:	ed87 0a00 	vstr	s0, [r7]
 8007156:	e7ab      	b.n	80070b0 <_scanf_float+0x308>
 8007158:	4640      	mov	r0, r8
 800715a:	4649      	mov	r1, r9
 800715c:	f7f9 fd4c 	bl	8000bf8 <__aeabi_d2f>
 8007160:	6038      	str	r0, [r7, #0]
 8007162:	e7a5      	b.n	80070b0 <_scanf_float+0x308>
 8007164:	2600      	movs	r6, #0
 8007166:	e666      	b.n	8006e36 <_scanf_float+0x8e>
 8007168:	0800aa04 	.word	0x0800aa04

0800716c <iprintf>:
 800716c:	b40f      	push	{r0, r1, r2, r3}
 800716e:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <iprintf+0x2c>)
 8007170:	b513      	push	{r0, r1, r4, lr}
 8007172:	681c      	ldr	r4, [r3, #0]
 8007174:	b124      	cbz	r4, 8007180 <iprintf+0x14>
 8007176:	69a3      	ldr	r3, [r4, #24]
 8007178:	b913      	cbnz	r3, 8007180 <iprintf+0x14>
 800717a:	4620      	mov	r0, r4
 800717c:	f001 fdd0 	bl	8008d20 <__sinit>
 8007180:	ab05      	add	r3, sp, #20
 8007182:	9a04      	ldr	r2, [sp, #16]
 8007184:	68a1      	ldr	r1, [r4, #8]
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	4620      	mov	r0, r4
 800718a:	f002 ffe3 	bl	800a154 <_vfiprintf_r>
 800718e:	b002      	add	sp, #8
 8007190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007194:	b004      	add	sp, #16
 8007196:	4770      	bx	lr
 8007198:	2000000c 	.word	0x2000000c

0800719c <nanf>:
 800719c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80071a4 <nanf+0x8>
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	7fc00000 	.word	0x7fc00000

080071a8 <siprintf>:
 80071a8:	b40e      	push	{r1, r2, r3}
 80071aa:	b500      	push	{lr}
 80071ac:	b09c      	sub	sp, #112	; 0x70
 80071ae:	ab1d      	add	r3, sp, #116	; 0x74
 80071b0:	9002      	str	r0, [sp, #8]
 80071b2:	9006      	str	r0, [sp, #24]
 80071b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071b8:	4809      	ldr	r0, [pc, #36]	; (80071e0 <siprintf+0x38>)
 80071ba:	9107      	str	r1, [sp, #28]
 80071bc:	9104      	str	r1, [sp, #16]
 80071be:	4909      	ldr	r1, [pc, #36]	; (80071e4 <siprintf+0x3c>)
 80071c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80071c4:	9105      	str	r1, [sp, #20]
 80071c6:	6800      	ldr	r0, [r0, #0]
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	a902      	add	r1, sp, #8
 80071cc:	f002 fea0 	bl	8009f10 <_svfiprintf_r>
 80071d0:	9b02      	ldr	r3, [sp, #8]
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	b01c      	add	sp, #112	; 0x70
 80071d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80071dc:	b003      	add	sp, #12
 80071de:	4770      	bx	lr
 80071e0:	2000000c 	.word	0x2000000c
 80071e4:	ffff0208 	.word	0xffff0208

080071e8 <sulp>:
 80071e8:	b570      	push	{r4, r5, r6, lr}
 80071ea:	4604      	mov	r4, r0
 80071ec:	460d      	mov	r5, r1
 80071ee:	ec45 4b10 	vmov	d0, r4, r5
 80071f2:	4616      	mov	r6, r2
 80071f4:	f002 fc48 	bl	8009a88 <__ulp>
 80071f8:	ec51 0b10 	vmov	r0, r1, d0
 80071fc:	b17e      	cbz	r6, 800721e <sulp+0x36>
 80071fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007202:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007206:	2b00      	cmp	r3, #0
 8007208:	dd09      	ble.n	800721e <sulp+0x36>
 800720a:	051b      	lsls	r3, r3, #20
 800720c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007210:	2400      	movs	r4, #0
 8007212:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007216:	4622      	mov	r2, r4
 8007218:	462b      	mov	r3, r5
 800721a:	f7f9 f9f5 	bl	8000608 <__aeabi_dmul>
 800721e:	bd70      	pop	{r4, r5, r6, pc}

08007220 <_strtod_l>:
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	461f      	mov	r7, r3
 8007226:	b0a1      	sub	sp, #132	; 0x84
 8007228:	2300      	movs	r3, #0
 800722a:	4681      	mov	r9, r0
 800722c:	4638      	mov	r0, r7
 800722e:	460e      	mov	r6, r1
 8007230:	9217      	str	r2, [sp, #92]	; 0x5c
 8007232:	931c      	str	r3, [sp, #112]	; 0x70
 8007234:	f002 f927 	bl	8009486 <__localeconv_l>
 8007238:	4680      	mov	r8, r0
 800723a:	6800      	ldr	r0, [r0, #0]
 800723c:	f7f8 ffd0 	bl	80001e0 <strlen>
 8007240:	f04f 0a00 	mov.w	sl, #0
 8007244:	4604      	mov	r4, r0
 8007246:	f04f 0b00 	mov.w	fp, #0
 800724a:	961b      	str	r6, [sp, #108]	; 0x6c
 800724c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	2a0d      	cmp	r2, #13
 8007252:	d832      	bhi.n	80072ba <_strtod_l+0x9a>
 8007254:	2a09      	cmp	r2, #9
 8007256:	d236      	bcs.n	80072c6 <_strtod_l+0xa6>
 8007258:	2a00      	cmp	r2, #0
 800725a:	d03e      	beq.n	80072da <_strtod_l+0xba>
 800725c:	2300      	movs	r3, #0
 800725e:	930d      	str	r3, [sp, #52]	; 0x34
 8007260:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007262:	782b      	ldrb	r3, [r5, #0]
 8007264:	2b30      	cmp	r3, #48	; 0x30
 8007266:	f040 80ac 	bne.w	80073c2 <_strtod_l+0x1a2>
 800726a:	786b      	ldrb	r3, [r5, #1]
 800726c:	2b58      	cmp	r3, #88	; 0x58
 800726e:	d001      	beq.n	8007274 <_strtod_l+0x54>
 8007270:	2b78      	cmp	r3, #120	; 0x78
 8007272:	d167      	bne.n	8007344 <_strtod_l+0x124>
 8007274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	ab1c      	add	r3, sp, #112	; 0x70
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	9702      	str	r7, [sp, #8]
 800727e:	ab1d      	add	r3, sp, #116	; 0x74
 8007280:	4a88      	ldr	r2, [pc, #544]	; (80074a4 <_strtod_l+0x284>)
 8007282:	a91b      	add	r1, sp, #108	; 0x6c
 8007284:	4648      	mov	r0, r9
 8007286:	f001 fe24 	bl	8008ed2 <__gethex>
 800728a:	f010 0407 	ands.w	r4, r0, #7
 800728e:	4606      	mov	r6, r0
 8007290:	d005      	beq.n	800729e <_strtod_l+0x7e>
 8007292:	2c06      	cmp	r4, #6
 8007294:	d12b      	bne.n	80072ee <_strtod_l+0xce>
 8007296:	3501      	adds	r5, #1
 8007298:	2300      	movs	r3, #0
 800729a:	951b      	str	r5, [sp, #108]	; 0x6c
 800729c:	930d      	str	r3, [sp, #52]	; 0x34
 800729e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f040 859a 	bne.w	8007dda <_strtod_l+0xbba>
 80072a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072a8:	b1e3      	cbz	r3, 80072e4 <_strtod_l+0xc4>
 80072aa:	4652      	mov	r2, sl
 80072ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80072b0:	ec43 2b10 	vmov	d0, r2, r3
 80072b4:	b021      	add	sp, #132	; 0x84
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	2a2b      	cmp	r2, #43	; 0x2b
 80072bc:	d015      	beq.n	80072ea <_strtod_l+0xca>
 80072be:	2a2d      	cmp	r2, #45	; 0x2d
 80072c0:	d004      	beq.n	80072cc <_strtod_l+0xac>
 80072c2:	2a20      	cmp	r2, #32
 80072c4:	d1ca      	bne.n	800725c <_strtod_l+0x3c>
 80072c6:	3301      	adds	r3, #1
 80072c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80072ca:	e7bf      	b.n	800724c <_strtod_l+0x2c>
 80072cc:	2201      	movs	r2, #1
 80072ce:	920d      	str	r2, [sp, #52]	; 0x34
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1c2      	bne.n	8007260 <_strtod_l+0x40>
 80072da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 8579 	bne.w	8007dd6 <_strtod_l+0xbb6>
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	e7e2      	b.n	80072b0 <_strtod_l+0x90>
 80072ea:	2200      	movs	r2, #0
 80072ec:	e7ef      	b.n	80072ce <_strtod_l+0xae>
 80072ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80072f0:	b13a      	cbz	r2, 8007302 <_strtod_l+0xe2>
 80072f2:	2135      	movs	r1, #53	; 0x35
 80072f4:	a81e      	add	r0, sp, #120	; 0x78
 80072f6:	f002 fcbf 	bl	8009c78 <__copybits>
 80072fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80072fc:	4648      	mov	r0, r9
 80072fe:	f002 f92c 	bl	800955a <_Bfree>
 8007302:	3c01      	subs	r4, #1
 8007304:	2c04      	cmp	r4, #4
 8007306:	d806      	bhi.n	8007316 <_strtod_l+0xf6>
 8007308:	e8df f004 	tbb	[pc, r4]
 800730c:	1714030a 	.word	0x1714030a
 8007310:	0a          	.byte	0x0a
 8007311:	00          	.byte	0x00
 8007312:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007316:	0730      	lsls	r0, r6, #28
 8007318:	d5c1      	bpl.n	800729e <_strtod_l+0x7e>
 800731a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800731e:	e7be      	b.n	800729e <_strtod_l+0x7e>
 8007320:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007324:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007326:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800732a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800732e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007332:	e7f0      	b.n	8007316 <_strtod_l+0xf6>
 8007334:	f8df b170 	ldr.w	fp, [pc, #368]	; 80074a8 <_strtod_l+0x288>
 8007338:	e7ed      	b.n	8007316 <_strtod_l+0xf6>
 800733a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800733e:	f04f 3aff 	mov.w	sl, #4294967295
 8007342:	e7e8      	b.n	8007316 <_strtod_l+0xf6>
 8007344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	921b      	str	r2, [sp, #108]	; 0x6c
 800734a:	785b      	ldrb	r3, [r3, #1]
 800734c:	2b30      	cmp	r3, #48	; 0x30
 800734e:	d0f9      	beq.n	8007344 <_strtod_l+0x124>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0a4      	beq.n	800729e <_strtod_l+0x7e>
 8007354:	2301      	movs	r3, #1
 8007356:	2500      	movs	r5, #0
 8007358:	9306      	str	r3, [sp, #24]
 800735a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800735c:	9308      	str	r3, [sp, #32]
 800735e:	9507      	str	r5, [sp, #28]
 8007360:	9505      	str	r5, [sp, #20]
 8007362:	220a      	movs	r2, #10
 8007364:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007366:	7807      	ldrb	r7, [r0, #0]
 8007368:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800736c:	b2d9      	uxtb	r1, r3
 800736e:	2909      	cmp	r1, #9
 8007370:	d929      	bls.n	80073c6 <_strtod_l+0x1a6>
 8007372:	4622      	mov	r2, r4
 8007374:	f8d8 1000 	ldr.w	r1, [r8]
 8007378:	f003 f855 	bl	800a426 <strncmp>
 800737c:	2800      	cmp	r0, #0
 800737e:	d031      	beq.n	80073e4 <_strtod_l+0x1c4>
 8007380:	2000      	movs	r0, #0
 8007382:	9c05      	ldr	r4, [sp, #20]
 8007384:	9004      	str	r0, [sp, #16]
 8007386:	463b      	mov	r3, r7
 8007388:	4602      	mov	r2, r0
 800738a:	2b65      	cmp	r3, #101	; 0x65
 800738c:	d001      	beq.n	8007392 <_strtod_l+0x172>
 800738e:	2b45      	cmp	r3, #69	; 0x45
 8007390:	d114      	bne.n	80073bc <_strtod_l+0x19c>
 8007392:	b924      	cbnz	r4, 800739e <_strtod_l+0x17e>
 8007394:	b910      	cbnz	r0, 800739c <_strtod_l+0x17c>
 8007396:	9b06      	ldr	r3, [sp, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d09e      	beq.n	80072da <_strtod_l+0xba>
 800739c:	2400      	movs	r4, #0
 800739e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80073a0:	1c73      	adds	r3, r6, #1
 80073a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80073a4:	7873      	ldrb	r3, [r6, #1]
 80073a6:	2b2b      	cmp	r3, #43	; 0x2b
 80073a8:	d078      	beq.n	800749c <_strtod_l+0x27c>
 80073aa:	2b2d      	cmp	r3, #45	; 0x2d
 80073ac:	d070      	beq.n	8007490 <_strtod_l+0x270>
 80073ae:	f04f 0c00 	mov.w	ip, #0
 80073b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80073b6:	2f09      	cmp	r7, #9
 80073b8:	d97c      	bls.n	80074b4 <_strtod_l+0x294>
 80073ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80073bc:	f04f 0e00 	mov.w	lr, #0
 80073c0:	e09a      	b.n	80074f8 <_strtod_l+0x2d8>
 80073c2:	2300      	movs	r3, #0
 80073c4:	e7c7      	b.n	8007356 <_strtod_l+0x136>
 80073c6:	9905      	ldr	r1, [sp, #20]
 80073c8:	2908      	cmp	r1, #8
 80073ca:	bfdd      	ittte	le
 80073cc:	9907      	ldrle	r1, [sp, #28]
 80073ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80073d2:	9307      	strle	r3, [sp, #28]
 80073d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80073d8:	9b05      	ldr	r3, [sp, #20]
 80073da:	3001      	adds	r0, #1
 80073dc:	3301      	adds	r3, #1
 80073de:	9305      	str	r3, [sp, #20]
 80073e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80073e2:	e7bf      	b.n	8007364 <_strtod_l+0x144>
 80073e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80073e6:	191a      	adds	r2, r3, r4
 80073e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80073ea:	9a05      	ldr	r2, [sp, #20]
 80073ec:	5d1b      	ldrb	r3, [r3, r4]
 80073ee:	2a00      	cmp	r2, #0
 80073f0:	d037      	beq.n	8007462 <_strtod_l+0x242>
 80073f2:	9c05      	ldr	r4, [sp, #20]
 80073f4:	4602      	mov	r2, r0
 80073f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80073fa:	2909      	cmp	r1, #9
 80073fc:	d913      	bls.n	8007426 <_strtod_l+0x206>
 80073fe:	2101      	movs	r1, #1
 8007400:	9104      	str	r1, [sp, #16]
 8007402:	e7c2      	b.n	800738a <_strtod_l+0x16a>
 8007404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	921b      	str	r2, [sp, #108]	; 0x6c
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	3001      	adds	r0, #1
 800740e:	2b30      	cmp	r3, #48	; 0x30
 8007410:	d0f8      	beq.n	8007404 <_strtod_l+0x1e4>
 8007412:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007416:	2a08      	cmp	r2, #8
 8007418:	f200 84e4 	bhi.w	8007de4 <_strtod_l+0xbc4>
 800741c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800741e:	9208      	str	r2, [sp, #32]
 8007420:	4602      	mov	r2, r0
 8007422:	2000      	movs	r0, #0
 8007424:	4604      	mov	r4, r0
 8007426:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800742a:	f100 0101 	add.w	r1, r0, #1
 800742e:	d012      	beq.n	8007456 <_strtod_l+0x236>
 8007430:	440a      	add	r2, r1
 8007432:	eb00 0c04 	add.w	ip, r0, r4
 8007436:	4621      	mov	r1, r4
 8007438:	270a      	movs	r7, #10
 800743a:	458c      	cmp	ip, r1
 800743c:	d113      	bne.n	8007466 <_strtod_l+0x246>
 800743e:	1821      	adds	r1, r4, r0
 8007440:	2908      	cmp	r1, #8
 8007442:	f104 0401 	add.w	r4, r4, #1
 8007446:	4404      	add	r4, r0
 8007448:	dc19      	bgt.n	800747e <_strtod_l+0x25e>
 800744a:	9b07      	ldr	r3, [sp, #28]
 800744c:	210a      	movs	r1, #10
 800744e:	fb01 e303 	mla	r3, r1, r3, lr
 8007452:	9307      	str	r3, [sp, #28]
 8007454:	2100      	movs	r1, #0
 8007456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007458:	1c58      	adds	r0, r3, #1
 800745a:	901b      	str	r0, [sp, #108]	; 0x6c
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	4608      	mov	r0, r1
 8007460:	e7c9      	b.n	80073f6 <_strtod_l+0x1d6>
 8007462:	9805      	ldr	r0, [sp, #20]
 8007464:	e7d3      	b.n	800740e <_strtod_l+0x1ee>
 8007466:	2908      	cmp	r1, #8
 8007468:	f101 0101 	add.w	r1, r1, #1
 800746c:	dc03      	bgt.n	8007476 <_strtod_l+0x256>
 800746e:	9b07      	ldr	r3, [sp, #28]
 8007470:	437b      	muls	r3, r7
 8007472:	9307      	str	r3, [sp, #28]
 8007474:	e7e1      	b.n	800743a <_strtod_l+0x21a>
 8007476:	2910      	cmp	r1, #16
 8007478:	bfd8      	it	le
 800747a:	437d      	mulle	r5, r7
 800747c:	e7dd      	b.n	800743a <_strtod_l+0x21a>
 800747e:	2c10      	cmp	r4, #16
 8007480:	bfdc      	itt	le
 8007482:	210a      	movle	r1, #10
 8007484:	fb01 e505 	mlale	r5, r1, r5, lr
 8007488:	e7e4      	b.n	8007454 <_strtod_l+0x234>
 800748a:	2301      	movs	r3, #1
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	e781      	b.n	8007394 <_strtod_l+0x174>
 8007490:	f04f 0c01 	mov.w	ip, #1
 8007494:	1cb3      	adds	r3, r6, #2
 8007496:	931b      	str	r3, [sp, #108]	; 0x6c
 8007498:	78b3      	ldrb	r3, [r6, #2]
 800749a:	e78a      	b.n	80073b2 <_strtod_l+0x192>
 800749c:	f04f 0c00 	mov.w	ip, #0
 80074a0:	e7f8      	b.n	8007494 <_strtod_l+0x274>
 80074a2:	bf00      	nop
 80074a4:	0800aa0c 	.word	0x0800aa0c
 80074a8:	7ff00000 	.word	0x7ff00000
 80074ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074ae:	1c5f      	adds	r7, r3, #1
 80074b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80074b2:	785b      	ldrb	r3, [r3, #1]
 80074b4:	2b30      	cmp	r3, #48	; 0x30
 80074b6:	d0f9      	beq.n	80074ac <_strtod_l+0x28c>
 80074b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80074bc:	2f08      	cmp	r7, #8
 80074be:	f63f af7d 	bhi.w	80073bc <_strtod_l+0x19c>
 80074c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80074c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074c8:	930a      	str	r3, [sp, #40]	; 0x28
 80074ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074cc:	1c5f      	adds	r7, r3, #1
 80074ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80074d0:	785b      	ldrb	r3, [r3, #1]
 80074d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80074d6:	f1b8 0f09 	cmp.w	r8, #9
 80074da:	d937      	bls.n	800754c <_strtod_l+0x32c>
 80074dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074de:	1a7f      	subs	r7, r7, r1
 80074e0:	2f08      	cmp	r7, #8
 80074e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80074e6:	dc37      	bgt.n	8007558 <_strtod_l+0x338>
 80074e8:	45be      	cmp	lr, r7
 80074ea:	bfa8      	it	ge
 80074ec:	46be      	movge	lr, r7
 80074ee:	f1bc 0f00 	cmp.w	ip, #0
 80074f2:	d001      	beq.n	80074f8 <_strtod_l+0x2d8>
 80074f4:	f1ce 0e00 	rsb	lr, lr, #0
 80074f8:	2c00      	cmp	r4, #0
 80074fa:	d151      	bne.n	80075a0 <_strtod_l+0x380>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	f47f aece 	bne.w	800729e <_strtod_l+0x7e>
 8007502:	9a06      	ldr	r2, [sp, #24]
 8007504:	2a00      	cmp	r2, #0
 8007506:	f47f aeca 	bne.w	800729e <_strtod_l+0x7e>
 800750a:	9a04      	ldr	r2, [sp, #16]
 800750c:	2a00      	cmp	r2, #0
 800750e:	f47f aee4 	bne.w	80072da <_strtod_l+0xba>
 8007512:	2b4e      	cmp	r3, #78	; 0x4e
 8007514:	d027      	beq.n	8007566 <_strtod_l+0x346>
 8007516:	dc21      	bgt.n	800755c <_strtod_l+0x33c>
 8007518:	2b49      	cmp	r3, #73	; 0x49
 800751a:	f47f aede 	bne.w	80072da <_strtod_l+0xba>
 800751e:	49a0      	ldr	r1, [pc, #640]	; (80077a0 <_strtod_l+0x580>)
 8007520:	a81b      	add	r0, sp, #108	; 0x6c
 8007522:	f001 ff09 	bl	8009338 <__match>
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f aed7 	beq.w	80072da <_strtod_l+0xba>
 800752c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800752e:	499d      	ldr	r1, [pc, #628]	; (80077a4 <_strtod_l+0x584>)
 8007530:	3b01      	subs	r3, #1
 8007532:	a81b      	add	r0, sp, #108	; 0x6c
 8007534:	931b      	str	r3, [sp, #108]	; 0x6c
 8007536:	f001 feff 	bl	8009338 <__match>
 800753a:	b910      	cbnz	r0, 8007542 <_strtod_l+0x322>
 800753c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800753e:	3301      	adds	r3, #1
 8007540:	931b      	str	r3, [sp, #108]	; 0x6c
 8007542:	f8df b274 	ldr.w	fp, [pc, #628]	; 80077b8 <_strtod_l+0x598>
 8007546:	f04f 0a00 	mov.w	sl, #0
 800754a:	e6a8      	b.n	800729e <_strtod_l+0x7e>
 800754c:	210a      	movs	r1, #10
 800754e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007552:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007556:	e7b8      	b.n	80074ca <_strtod_l+0x2aa>
 8007558:	46be      	mov	lr, r7
 800755a:	e7c8      	b.n	80074ee <_strtod_l+0x2ce>
 800755c:	2b69      	cmp	r3, #105	; 0x69
 800755e:	d0de      	beq.n	800751e <_strtod_l+0x2fe>
 8007560:	2b6e      	cmp	r3, #110	; 0x6e
 8007562:	f47f aeba 	bne.w	80072da <_strtod_l+0xba>
 8007566:	4990      	ldr	r1, [pc, #576]	; (80077a8 <_strtod_l+0x588>)
 8007568:	a81b      	add	r0, sp, #108	; 0x6c
 800756a:	f001 fee5 	bl	8009338 <__match>
 800756e:	2800      	cmp	r0, #0
 8007570:	f43f aeb3 	beq.w	80072da <_strtod_l+0xba>
 8007574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b28      	cmp	r3, #40	; 0x28
 800757a:	d10e      	bne.n	800759a <_strtod_l+0x37a>
 800757c:	aa1e      	add	r2, sp, #120	; 0x78
 800757e:	498b      	ldr	r1, [pc, #556]	; (80077ac <_strtod_l+0x58c>)
 8007580:	a81b      	add	r0, sp, #108	; 0x6c
 8007582:	f001 feed 	bl	8009360 <__hexnan>
 8007586:	2805      	cmp	r0, #5
 8007588:	d107      	bne.n	800759a <_strtod_l+0x37a>
 800758a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800758c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007590:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007594:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007598:	e681      	b.n	800729e <_strtod_l+0x7e>
 800759a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80077c0 <_strtod_l+0x5a0>
 800759e:	e7d2      	b.n	8007546 <_strtod_l+0x326>
 80075a0:	ebae 0302 	sub.w	r3, lr, r2
 80075a4:	9306      	str	r3, [sp, #24]
 80075a6:	9b05      	ldr	r3, [sp, #20]
 80075a8:	9807      	ldr	r0, [sp, #28]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bf08      	it	eq
 80075ae:	4623      	moveq	r3, r4
 80075b0:	2c10      	cmp	r4, #16
 80075b2:	9305      	str	r3, [sp, #20]
 80075b4:	46a0      	mov	r8, r4
 80075b6:	bfa8      	it	ge
 80075b8:	f04f 0810 	movge.w	r8, #16
 80075bc:	f7f8 ffaa 	bl	8000514 <__aeabi_ui2d>
 80075c0:	2c09      	cmp	r4, #9
 80075c2:	4682      	mov	sl, r0
 80075c4:	468b      	mov	fp, r1
 80075c6:	dc13      	bgt.n	80075f0 <_strtod_l+0x3d0>
 80075c8:	9b06      	ldr	r3, [sp, #24]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f43f ae67 	beq.w	800729e <_strtod_l+0x7e>
 80075d0:	9b06      	ldr	r3, [sp, #24]
 80075d2:	dd7a      	ble.n	80076ca <_strtod_l+0x4aa>
 80075d4:	2b16      	cmp	r3, #22
 80075d6:	dc61      	bgt.n	800769c <_strtod_l+0x47c>
 80075d8:	4a75      	ldr	r2, [pc, #468]	; (80077b0 <_strtod_l+0x590>)
 80075da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80075de:	e9de 0100 	ldrd	r0, r1, [lr]
 80075e2:	4652      	mov	r2, sl
 80075e4:	465b      	mov	r3, fp
 80075e6:	f7f9 f80f 	bl	8000608 <__aeabi_dmul>
 80075ea:	4682      	mov	sl, r0
 80075ec:	468b      	mov	fp, r1
 80075ee:	e656      	b.n	800729e <_strtod_l+0x7e>
 80075f0:	4b6f      	ldr	r3, [pc, #444]	; (80077b0 <_strtod_l+0x590>)
 80075f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80075f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80075fa:	f7f9 f805 	bl	8000608 <__aeabi_dmul>
 80075fe:	4606      	mov	r6, r0
 8007600:	4628      	mov	r0, r5
 8007602:	460f      	mov	r7, r1
 8007604:	f7f8 ff86 	bl	8000514 <__aeabi_ui2d>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4630      	mov	r0, r6
 800760e:	4639      	mov	r1, r7
 8007610:	f7f8 fe44 	bl	800029c <__adddf3>
 8007614:	2c0f      	cmp	r4, #15
 8007616:	4682      	mov	sl, r0
 8007618:	468b      	mov	fp, r1
 800761a:	ddd5      	ble.n	80075c8 <_strtod_l+0x3a8>
 800761c:	9b06      	ldr	r3, [sp, #24]
 800761e:	eba4 0808 	sub.w	r8, r4, r8
 8007622:	4498      	add	r8, r3
 8007624:	f1b8 0f00 	cmp.w	r8, #0
 8007628:	f340 8096 	ble.w	8007758 <_strtod_l+0x538>
 800762c:	f018 030f 	ands.w	r3, r8, #15
 8007630:	d00a      	beq.n	8007648 <_strtod_l+0x428>
 8007632:	495f      	ldr	r1, [pc, #380]	; (80077b0 <_strtod_l+0x590>)
 8007634:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007638:	4652      	mov	r2, sl
 800763a:	465b      	mov	r3, fp
 800763c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007640:	f7f8 ffe2 	bl	8000608 <__aeabi_dmul>
 8007644:	4682      	mov	sl, r0
 8007646:	468b      	mov	fp, r1
 8007648:	f038 080f 	bics.w	r8, r8, #15
 800764c:	d073      	beq.n	8007736 <_strtod_l+0x516>
 800764e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007652:	dd47      	ble.n	80076e4 <_strtod_l+0x4c4>
 8007654:	2400      	movs	r4, #0
 8007656:	46a0      	mov	r8, r4
 8007658:	9407      	str	r4, [sp, #28]
 800765a:	9405      	str	r4, [sp, #20]
 800765c:	2322      	movs	r3, #34	; 0x22
 800765e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80077b8 <_strtod_l+0x598>
 8007662:	f8c9 3000 	str.w	r3, [r9]
 8007666:	f04f 0a00 	mov.w	sl, #0
 800766a:	9b07      	ldr	r3, [sp, #28]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f43f ae16 	beq.w	800729e <_strtod_l+0x7e>
 8007672:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007674:	4648      	mov	r0, r9
 8007676:	f001 ff70 	bl	800955a <_Bfree>
 800767a:	9905      	ldr	r1, [sp, #20]
 800767c:	4648      	mov	r0, r9
 800767e:	f001 ff6c 	bl	800955a <_Bfree>
 8007682:	4641      	mov	r1, r8
 8007684:	4648      	mov	r0, r9
 8007686:	f001 ff68 	bl	800955a <_Bfree>
 800768a:	9907      	ldr	r1, [sp, #28]
 800768c:	4648      	mov	r0, r9
 800768e:	f001 ff64 	bl	800955a <_Bfree>
 8007692:	4621      	mov	r1, r4
 8007694:	4648      	mov	r0, r9
 8007696:	f001 ff60 	bl	800955a <_Bfree>
 800769a:	e600      	b.n	800729e <_strtod_l+0x7e>
 800769c:	9a06      	ldr	r2, [sp, #24]
 800769e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80076a2:	4293      	cmp	r3, r2
 80076a4:	dbba      	blt.n	800761c <_strtod_l+0x3fc>
 80076a6:	4d42      	ldr	r5, [pc, #264]	; (80077b0 <_strtod_l+0x590>)
 80076a8:	f1c4 040f 	rsb	r4, r4, #15
 80076ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80076b0:	4652      	mov	r2, sl
 80076b2:	465b      	mov	r3, fp
 80076b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076b8:	f7f8 ffa6 	bl	8000608 <__aeabi_dmul>
 80076bc:	9b06      	ldr	r3, [sp, #24]
 80076be:	1b1c      	subs	r4, r3, r4
 80076c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80076c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076c8:	e78d      	b.n	80075e6 <_strtod_l+0x3c6>
 80076ca:	f113 0f16 	cmn.w	r3, #22
 80076ce:	dba5      	blt.n	800761c <_strtod_l+0x3fc>
 80076d0:	4a37      	ldr	r2, [pc, #220]	; (80077b0 <_strtod_l+0x590>)
 80076d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80076d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80076da:	4650      	mov	r0, sl
 80076dc:	4659      	mov	r1, fp
 80076de:	f7f9 f8bd 	bl	800085c <__aeabi_ddiv>
 80076e2:	e782      	b.n	80075ea <_strtod_l+0x3ca>
 80076e4:	2300      	movs	r3, #0
 80076e6:	4e33      	ldr	r6, [pc, #204]	; (80077b4 <_strtod_l+0x594>)
 80076e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80076ec:	4650      	mov	r0, sl
 80076ee:	4659      	mov	r1, fp
 80076f0:	461d      	mov	r5, r3
 80076f2:	f1b8 0f01 	cmp.w	r8, #1
 80076f6:	dc21      	bgt.n	800773c <_strtod_l+0x51c>
 80076f8:	b10b      	cbz	r3, 80076fe <_strtod_l+0x4de>
 80076fa:	4682      	mov	sl, r0
 80076fc:	468b      	mov	fp, r1
 80076fe:	4b2d      	ldr	r3, [pc, #180]	; (80077b4 <_strtod_l+0x594>)
 8007700:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007704:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007708:	4652      	mov	r2, sl
 800770a:	465b      	mov	r3, fp
 800770c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007710:	f7f8 ff7a 	bl	8000608 <__aeabi_dmul>
 8007714:	4b28      	ldr	r3, [pc, #160]	; (80077b8 <_strtod_l+0x598>)
 8007716:	460a      	mov	r2, r1
 8007718:	400b      	ands	r3, r1
 800771a:	4928      	ldr	r1, [pc, #160]	; (80077bc <_strtod_l+0x59c>)
 800771c:	428b      	cmp	r3, r1
 800771e:	4682      	mov	sl, r0
 8007720:	d898      	bhi.n	8007654 <_strtod_l+0x434>
 8007722:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007726:	428b      	cmp	r3, r1
 8007728:	bf86      	itte	hi
 800772a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80077c4 <_strtod_l+0x5a4>
 800772e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007732:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007736:	2300      	movs	r3, #0
 8007738:	9304      	str	r3, [sp, #16]
 800773a:	e077      	b.n	800782c <_strtod_l+0x60c>
 800773c:	f018 0f01 	tst.w	r8, #1
 8007740:	d006      	beq.n	8007750 <_strtod_l+0x530>
 8007742:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	f7f8 ff5d 	bl	8000608 <__aeabi_dmul>
 800774e:	2301      	movs	r3, #1
 8007750:	3501      	adds	r5, #1
 8007752:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007756:	e7cc      	b.n	80076f2 <_strtod_l+0x4d2>
 8007758:	d0ed      	beq.n	8007736 <_strtod_l+0x516>
 800775a:	f1c8 0800 	rsb	r8, r8, #0
 800775e:	f018 020f 	ands.w	r2, r8, #15
 8007762:	d00a      	beq.n	800777a <_strtod_l+0x55a>
 8007764:	4b12      	ldr	r3, [pc, #72]	; (80077b0 <_strtod_l+0x590>)
 8007766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800776a:	4650      	mov	r0, sl
 800776c:	4659      	mov	r1, fp
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f7f9 f873 	bl	800085c <__aeabi_ddiv>
 8007776:	4682      	mov	sl, r0
 8007778:	468b      	mov	fp, r1
 800777a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800777e:	d0da      	beq.n	8007736 <_strtod_l+0x516>
 8007780:	f1b8 0f1f 	cmp.w	r8, #31
 8007784:	dd20      	ble.n	80077c8 <_strtod_l+0x5a8>
 8007786:	2400      	movs	r4, #0
 8007788:	46a0      	mov	r8, r4
 800778a:	9407      	str	r4, [sp, #28]
 800778c:	9405      	str	r4, [sp, #20]
 800778e:	2322      	movs	r3, #34	; 0x22
 8007790:	f04f 0a00 	mov.w	sl, #0
 8007794:	f04f 0b00 	mov.w	fp, #0
 8007798:	f8c9 3000 	str.w	r3, [r9]
 800779c:	e765      	b.n	800766a <_strtod_l+0x44a>
 800779e:	bf00      	nop
 80077a0:	0800a9d5 	.word	0x0800a9d5
 80077a4:	0800aa63 	.word	0x0800aa63
 80077a8:	0800a9dd 	.word	0x0800a9dd
 80077ac:	0800aa20 	.word	0x0800aa20
 80077b0:	0800ab08 	.word	0x0800ab08
 80077b4:	0800aae0 	.word	0x0800aae0
 80077b8:	7ff00000 	.word	0x7ff00000
 80077bc:	7ca00000 	.word	0x7ca00000
 80077c0:	fff80000 	.word	0xfff80000
 80077c4:	7fefffff 	.word	0x7fefffff
 80077c8:	f018 0310 	ands.w	r3, r8, #16
 80077cc:	bf18      	it	ne
 80077ce:	236a      	movne	r3, #106	; 0x6a
 80077d0:	4da0      	ldr	r5, [pc, #640]	; (8007a54 <_strtod_l+0x834>)
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	4650      	mov	r0, sl
 80077d6:	4659      	mov	r1, fp
 80077d8:	2300      	movs	r3, #0
 80077da:	f1b8 0f00 	cmp.w	r8, #0
 80077de:	f300 810a 	bgt.w	80079f6 <_strtod_l+0x7d6>
 80077e2:	b10b      	cbz	r3, 80077e8 <_strtod_l+0x5c8>
 80077e4:	4682      	mov	sl, r0
 80077e6:	468b      	mov	fp, r1
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	b1bb      	cbz	r3, 800781c <_strtod_l+0x5fc>
 80077ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80077f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	4659      	mov	r1, fp
 80077f8:	dd10      	ble.n	800781c <_strtod_l+0x5fc>
 80077fa:	2b1f      	cmp	r3, #31
 80077fc:	f340 8107 	ble.w	8007a0e <_strtod_l+0x7ee>
 8007800:	2b34      	cmp	r3, #52	; 0x34
 8007802:	bfde      	ittt	le
 8007804:	3b20      	suble	r3, #32
 8007806:	f04f 32ff 	movle.w	r2, #4294967295
 800780a:	fa02 f303 	lslle.w	r3, r2, r3
 800780e:	f04f 0a00 	mov.w	sl, #0
 8007812:	bfcc      	ite	gt
 8007814:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007818:	ea03 0b01 	andle.w	fp, r3, r1
 800781c:	2200      	movs	r2, #0
 800781e:	2300      	movs	r3, #0
 8007820:	4650      	mov	r0, sl
 8007822:	4659      	mov	r1, fp
 8007824:	f7f9 f958 	bl	8000ad8 <__aeabi_dcmpeq>
 8007828:	2800      	cmp	r0, #0
 800782a:	d1ac      	bne.n	8007786 <_strtod_l+0x566>
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	9a05      	ldr	r2, [sp, #20]
 8007832:	9908      	ldr	r1, [sp, #32]
 8007834:	4623      	mov	r3, r4
 8007836:	4648      	mov	r0, r9
 8007838:	f001 fee1 	bl	80095fe <__s2b>
 800783c:	9007      	str	r0, [sp, #28]
 800783e:	2800      	cmp	r0, #0
 8007840:	f43f af08 	beq.w	8007654 <_strtod_l+0x434>
 8007844:	9a06      	ldr	r2, [sp, #24]
 8007846:	9b06      	ldr	r3, [sp, #24]
 8007848:	2a00      	cmp	r2, #0
 800784a:	f1c3 0300 	rsb	r3, r3, #0
 800784e:	bfa8      	it	ge
 8007850:	2300      	movge	r3, #0
 8007852:	930e      	str	r3, [sp, #56]	; 0x38
 8007854:	2400      	movs	r4, #0
 8007856:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800785a:	9316      	str	r3, [sp, #88]	; 0x58
 800785c:	46a0      	mov	r8, r4
 800785e:	9b07      	ldr	r3, [sp, #28]
 8007860:	4648      	mov	r0, r9
 8007862:	6859      	ldr	r1, [r3, #4]
 8007864:	f001 fe45 	bl	80094f2 <_Balloc>
 8007868:	9005      	str	r0, [sp, #20]
 800786a:	2800      	cmp	r0, #0
 800786c:	f43f aef6 	beq.w	800765c <_strtod_l+0x43c>
 8007870:	9b07      	ldr	r3, [sp, #28]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	3202      	adds	r2, #2
 8007876:	f103 010c 	add.w	r1, r3, #12
 800787a:	0092      	lsls	r2, r2, #2
 800787c:	300c      	adds	r0, #12
 800787e:	f001 fe2d 	bl	80094dc <memcpy>
 8007882:	aa1e      	add	r2, sp, #120	; 0x78
 8007884:	a91d      	add	r1, sp, #116	; 0x74
 8007886:	ec4b ab10 	vmov	d0, sl, fp
 800788a:	4648      	mov	r0, r9
 800788c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007890:	f002 f970 	bl	8009b74 <__d2b>
 8007894:	901c      	str	r0, [sp, #112]	; 0x70
 8007896:	2800      	cmp	r0, #0
 8007898:	f43f aee0 	beq.w	800765c <_strtod_l+0x43c>
 800789c:	2101      	movs	r1, #1
 800789e:	4648      	mov	r0, r9
 80078a0:	f001 ff39 	bl	8009716 <__i2b>
 80078a4:	4680      	mov	r8, r0
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f43f aed8 	beq.w	800765c <_strtod_l+0x43c>
 80078ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80078ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80078b0:	2e00      	cmp	r6, #0
 80078b2:	bfab      	itete	ge
 80078b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80078b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80078b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80078ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80078bc:	bfac      	ite	ge
 80078be:	18f7      	addge	r7, r6, r3
 80078c0:	1b9d      	sublt	r5, r3, r6
 80078c2:	9b04      	ldr	r3, [sp, #16]
 80078c4:	1af6      	subs	r6, r6, r3
 80078c6:	4416      	add	r6, r2
 80078c8:	4b63      	ldr	r3, [pc, #396]	; (8007a58 <_strtod_l+0x838>)
 80078ca:	3e01      	subs	r6, #1
 80078cc:	429e      	cmp	r6, r3
 80078ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80078d2:	f280 80af 	bge.w	8007a34 <_strtod_l+0x814>
 80078d6:	1b9b      	subs	r3, r3, r6
 80078d8:	2b1f      	cmp	r3, #31
 80078da:	eba2 0203 	sub.w	r2, r2, r3
 80078de:	f04f 0101 	mov.w	r1, #1
 80078e2:	f300 809b 	bgt.w	8007a1c <_strtod_l+0x7fc>
 80078e6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80078ec:	2300      	movs	r3, #0
 80078ee:	930a      	str	r3, [sp, #40]	; 0x28
 80078f0:	18be      	adds	r6, r7, r2
 80078f2:	9b04      	ldr	r3, [sp, #16]
 80078f4:	42b7      	cmp	r7, r6
 80078f6:	4415      	add	r5, r2
 80078f8:	441d      	add	r5, r3
 80078fa:	463b      	mov	r3, r7
 80078fc:	bfa8      	it	ge
 80078fe:	4633      	movge	r3, r6
 8007900:	42ab      	cmp	r3, r5
 8007902:	bfa8      	it	ge
 8007904:	462b      	movge	r3, r5
 8007906:	2b00      	cmp	r3, #0
 8007908:	bfc2      	ittt	gt
 800790a:	1af6      	subgt	r6, r6, r3
 800790c:	1aed      	subgt	r5, r5, r3
 800790e:	1aff      	subgt	r7, r7, r3
 8007910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007912:	b1bb      	cbz	r3, 8007944 <_strtod_l+0x724>
 8007914:	4641      	mov	r1, r8
 8007916:	461a      	mov	r2, r3
 8007918:	4648      	mov	r0, r9
 800791a:	f001 ff9b 	bl	8009854 <__pow5mult>
 800791e:	4680      	mov	r8, r0
 8007920:	2800      	cmp	r0, #0
 8007922:	f43f ae9b 	beq.w	800765c <_strtod_l+0x43c>
 8007926:	4601      	mov	r1, r0
 8007928:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800792a:	4648      	mov	r0, r9
 800792c:	f001 fefc 	bl	8009728 <__multiply>
 8007930:	900c      	str	r0, [sp, #48]	; 0x30
 8007932:	2800      	cmp	r0, #0
 8007934:	f43f ae92 	beq.w	800765c <_strtod_l+0x43c>
 8007938:	991c      	ldr	r1, [sp, #112]	; 0x70
 800793a:	4648      	mov	r0, r9
 800793c:	f001 fe0d 	bl	800955a <_Bfree>
 8007940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007942:	931c      	str	r3, [sp, #112]	; 0x70
 8007944:	2e00      	cmp	r6, #0
 8007946:	dc7a      	bgt.n	8007a3e <_strtod_l+0x81e>
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	2b00      	cmp	r3, #0
 800794c:	dd08      	ble.n	8007960 <_strtod_l+0x740>
 800794e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007950:	9905      	ldr	r1, [sp, #20]
 8007952:	4648      	mov	r0, r9
 8007954:	f001 ff7e 	bl	8009854 <__pow5mult>
 8007958:	9005      	str	r0, [sp, #20]
 800795a:	2800      	cmp	r0, #0
 800795c:	f43f ae7e 	beq.w	800765c <_strtod_l+0x43c>
 8007960:	2d00      	cmp	r5, #0
 8007962:	dd08      	ble.n	8007976 <_strtod_l+0x756>
 8007964:	462a      	mov	r2, r5
 8007966:	9905      	ldr	r1, [sp, #20]
 8007968:	4648      	mov	r0, r9
 800796a:	f001 ffc1 	bl	80098f0 <__lshift>
 800796e:	9005      	str	r0, [sp, #20]
 8007970:	2800      	cmp	r0, #0
 8007972:	f43f ae73 	beq.w	800765c <_strtod_l+0x43c>
 8007976:	2f00      	cmp	r7, #0
 8007978:	dd08      	ble.n	800798c <_strtod_l+0x76c>
 800797a:	4641      	mov	r1, r8
 800797c:	463a      	mov	r2, r7
 800797e:	4648      	mov	r0, r9
 8007980:	f001 ffb6 	bl	80098f0 <__lshift>
 8007984:	4680      	mov	r8, r0
 8007986:	2800      	cmp	r0, #0
 8007988:	f43f ae68 	beq.w	800765c <_strtod_l+0x43c>
 800798c:	9a05      	ldr	r2, [sp, #20]
 800798e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007990:	4648      	mov	r0, r9
 8007992:	f002 f81b 	bl	80099cc <__mdiff>
 8007996:	4604      	mov	r4, r0
 8007998:	2800      	cmp	r0, #0
 800799a:	f43f ae5f 	beq.w	800765c <_strtod_l+0x43c>
 800799e:	68c3      	ldr	r3, [r0, #12]
 80079a0:	930c      	str	r3, [sp, #48]	; 0x30
 80079a2:	2300      	movs	r3, #0
 80079a4:	60c3      	str	r3, [r0, #12]
 80079a6:	4641      	mov	r1, r8
 80079a8:	f001 fff6 	bl	8009998 <__mcmp>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	da55      	bge.n	8007a5c <_strtod_l+0x83c>
 80079b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079b2:	b9e3      	cbnz	r3, 80079ee <_strtod_l+0x7ce>
 80079b4:	f1ba 0f00 	cmp.w	sl, #0
 80079b8:	d119      	bne.n	80079ee <_strtod_l+0x7ce>
 80079ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079be:	b9b3      	cbnz	r3, 80079ee <_strtod_l+0x7ce>
 80079c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079c4:	0d1b      	lsrs	r3, r3, #20
 80079c6:	051b      	lsls	r3, r3, #20
 80079c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80079cc:	d90f      	bls.n	80079ee <_strtod_l+0x7ce>
 80079ce:	6963      	ldr	r3, [r4, #20]
 80079d0:	b913      	cbnz	r3, 80079d8 <_strtod_l+0x7b8>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	dd0a      	ble.n	80079ee <_strtod_l+0x7ce>
 80079d8:	4621      	mov	r1, r4
 80079da:	2201      	movs	r2, #1
 80079dc:	4648      	mov	r0, r9
 80079de:	f001 ff87 	bl	80098f0 <__lshift>
 80079e2:	4641      	mov	r1, r8
 80079e4:	4604      	mov	r4, r0
 80079e6:	f001 ffd7 	bl	8009998 <__mcmp>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	dc67      	bgt.n	8007abe <_strtod_l+0x89e>
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d171      	bne.n	8007ad8 <_strtod_l+0x8b8>
 80079f4:	e63d      	b.n	8007672 <_strtod_l+0x452>
 80079f6:	f018 0f01 	tst.w	r8, #1
 80079fa:	d004      	beq.n	8007a06 <_strtod_l+0x7e6>
 80079fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a00:	f7f8 fe02 	bl	8000608 <__aeabi_dmul>
 8007a04:	2301      	movs	r3, #1
 8007a06:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a0a:	3508      	adds	r5, #8
 8007a0c:	e6e5      	b.n	80077da <_strtod_l+0x5ba>
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	ea03 0a0a 	and.w	sl, r3, sl
 8007a1a:	e6ff      	b.n	800781c <_strtod_l+0x5fc>
 8007a1c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007a20:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007a24:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007a28:	36e2      	adds	r6, #226	; 0xe2
 8007a2a:	fa01 f306 	lsl.w	r3, r1, r6
 8007a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a30:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a32:	e75d      	b.n	80078f0 <_strtod_l+0x6d0>
 8007a34:	2300      	movs	r3, #0
 8007a36:	930a      	str	r3, [sp, #40]	; 0x28
 8007a38:	2301      	movs	r3, #1
 8007a3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a3c:	e758      	b.n	80078f0 <_strtod_l+0x6d0>
 8007a3e:	4632      	mov	r2, r6
 8007a40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007a42:	4648      	mov	r0, r9
 8007a44:	f001 ff54 	bl	80098f0 <__lshift>
 8007a48:	901c      	str	r0, [sp, #112]	; 0x70
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f47f af7c 	bne.w	8007948 <_strtod_l+0x728>
 8007a50:	e604      	b.n	800765c <_strtod_l+0x43c>
 8007a52:	bf00      	nop
 8007a54:	0800aa38 	.word	0x0800aa38
 8007a58:	fffffc02 	.word	0xfffffc02
 8007a5c:	465d      	mov	r5, fp
 8007a5e:	f040 8086 	bne.w	8007b6e <_strtod_l+0x94e>
 8007a62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a68:	b32a      	cbz	r2, 8007ab6 <_strtod_l+0x896>
 8007a6a:	4aaf      	ldr	r2, [pc, #700]	; (8007d28 <_strtod_l+0xb08>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d153      	bne.n	8007b18 <_strtod_l+0x8f8>
 8007a70:	9b04      	ldr	r3, [sp, #16]
 8007a72:	4650      	mov	r0, sl
 8007a74:	b1d3      	cbz	r3, 8007aac <_strtod_l+0x88c>
 8007a76:	4aad      	ldr	r2, [pc, #692]	; (8007d2c <_strtod_l+0xb0c>)
 8007a78:	402a      	ands	r2, r5
 8007a7a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8007a82:	d816      	bhi.n	8007ab2 <_strtod_l+0x892>
 8007a84:	0d12      	lsrs	r2, r2, #20
 8007a86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8e:	4298      	cmp	r0, r3
 8007a90:	d142      	bne.n	8007b18 <_strtod_l+0x8f8>
 8007a92:	4ba7      	ldr	r3, [pc, #668]	; (8007d30 <_strtod_l+0xb10>)
 8007a94:	429d      	cmp	r5, r3
 8007a96:	d102      	bne.n	8007a9e <_strtod_l+0x87e>
 8007a98:	3001      	adds	r0, #1
 8007a9a:	f43f addf 	beq.w	800765c <_strtod_l+0x43c>
 8007a9e:	4ba3      	ldr	r3, [pc, #652]	; (8007d2c <_strtod_l+0xb0c>)
 8007aa0:	402b      	ands	r3, r5
 8007aa2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007aa6:	f04f 0a00 	mov.w	sl, #0
 8007aaa:	e7a0      	b.n	80079ee <_strtod_l+0x7ce>
 8007aac:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab0:	e7ed      	b.n	8007a8e <_strtod_l+0x86e>
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	e7eb      	b.n	8007a8e <_strtod_l+0x86e>
 8007ab6:	bb7b      	cbnz	r3, 8007b18 <_strtod_l+0x8f8>
 8007ab8:	f1ba 0f00 	cmp.w	sl, #0
 8007abc:	d12c      	bne.n	8007b18 <_strtod_l+0x8f8>
 8007abe:	9904      	ldr	r1, [sp, #16]
 8007ac0:	4a9a      	ldr	r2, [pc, #616]	; (8007d2c <_strtod_l+0xb0c>)
 8007ac2:	465b      	mov	r3, fp
 8007ac4:	b1f1      	cbz	r1, 8007b04 <_strtod_l+0x8e4>
 8007ac6:	ea02 010b 	and.w	r1, r2, fp
 8007aca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ace:	dc19      	bgt.n	8007b04 <_strtod_l+0x8e4>
 8007ad0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ad4:	f77f ae5b 	ble.w	800778e <_strtod_l+0x56e>
 8007ad8:	4a96      	ldr	r2, [pc, #600]	; (8007d34 <_strtod_l+0xb14>)
 8007ada:	2300      	movs	r3, #0
 8007adc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	4659      	mov	r1, fp
 8007ae4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ae8:	f7f8 fd8e 	bl	8000608 <__aeabi_dmul>
 8007aec:	4682      	mov	sl, r0
 8007aee:	468b      	mov	fp, r1
 8007af0:	2900      	cmp	r1, #0
 8007af2:	f47f adbe 	bne.w	8007672 <_strtod_l+0x452>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f47f adbb 	bne.w	8007672 <_strtod_l+0x452>
 8007afc:	2322      	movs	r3, #34	; 0x22
 8007afe:	f8c9 3000 	str.w	r3, [r9]
 8007b02:	e5b6      	b.n	8007672 <_strtod_l+0x452>
 8007b04:	4013      	ands	r3, r2
 8007b06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b0a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b12:	f04f 3aff 	mov.w	sl, #4294967295
 8007b16:	e76a      	b.n	80079ee <_strtod_l+0x7ce>
 8007b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b1a:	b193      	cbz	r3, 8007b42 <_strtod_l+0x922>
 8007b1c:	422b      	tst	r3, r5
 8007b1e:	f43f af66 	beq.w	80079ee <_strtod_l+0x7ce>
 8007b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b24:	9a04      	ldr	r2, [sp, #16]
 8007b26:	4650      	mov	r0, sl
 8007b28:	4659      	mov	r1, fp
 8007b2a:	b173      	cbz	r3, 8007b4a <_strtod_l+0x92a>
 8007b2c:	f7ff fb5c 	bl	80071e8 <sulp>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b38:	f7f8 fbb0 	bl	800029c <__adddf3>
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	468b      	mov	fp, r1
 8007b40:	e755      	b.n	80079ee <_strtod_l+0x7ce>
 8007b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b44:	ea13 0f0a 	tst.w	r3, sl
 8007b48:	e7e9      	b.n	8007b1e <_strtod_l+0x8fe>
 8007b4a:	f7ff fb4d 	bl	80071e8 <sulp>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b56:	f7f8 fb9f 	bl	8000298 <__aeabi_dsub>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4682      	mov	sl, r0
 8007b60:	468b      	mov	fp, r1
 8007b62:	f7f8 ffb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f47f ae11 	bne.w	800778e <_strtod_l+0x56e>
 8007b6c:	e73f      	b.n	80079ee <_strtod_l+0x7ce>
 8007b6e:	4641      	mov	r1, r8
 8007b70:	4620      	mov	r0, r4
 8007b72:	f002 f84e 	bl	8009c12 <__ratio>
 8007b76:	ec57 6b10 	vmov	r6, r7, d0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b80:	ee10 0a10 	vmov	r0, s0
 8007b84:	4639      	mov	r1, r7
 8007b86:	f7f8 ffbb 	bl	8000b00 <__aeabi_dcmple>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d077      	beq.n	8007c7e <_strtod_l+0xa5e>
 8007b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d04a      	beq.n	8007c2a <_strtod_l+0xa0a>
 8007b94:	4b68      	ldr	r3, [pc, #416]	; (8007d38 <_strtod_l+0xb18>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b9c:	4f66      	ldr	r7, [pc, #408]	; (8007d38 <_strtod_l+0xb18>)
 8007b9e:	2600      	movs	r6, #0
 8007ba0:	4b62      	ldr	r3, [pc, #392]	; (8007d2c <_strtod_l+0xb0c>)
 8007ba2:	402b      	ands	r3, r5
 8007ba4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ba8:	4b64      	ldr	r3, [pc, #400]	; (8007d3c <_strtod_l+0xb1c>)
 8007baa:	429a      	cmp	r2, r3
 8007bac:	f040 80ce 	bne.w	8007d4c <_strtod_l+0xb2c>
 8007bb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bb8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007bbc:	ec4b ab10 	vmov	d0, sl, fp
 8007bc0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007bc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007bc8:	f001 ff5e 	bl	8009a88 <__ulp>
 8007bcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bd0:	ec53 2b10 	vmov	r2, r3, d0
 8007bd4:	f7f8 fd18 	bl	8000608 <__aeabi_dmul>
 8007bd8:	4652      	mov	r2, sl
 8007bda:	465b      	mov	r3, fp
 8007bdc:	f7f8 fb5e 	bl	800029c <__adddf3>
 8007be0:	460b      	mov	r3, r1
 8007be2:	4952      	ldr	r1, [pc, #328]	; (8007d2c <_strtod_l+0xb0c>)
 8007be4:	4a56      	ldr	r2, [pc, #344]	; (8007d40 <_strtod_l+0xb20>)
 8007be6:	4019      	ands	r1, r3
 8007be8:	4291      	cmp	r1, r2
 8007bea:	4682      	mov	sl, r0
 8007bec:	d95b      	bls.n	8007ca6 <_strtod_l+0xa86>
 8007bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d103      	bne.n	8007c00 <_strtod_l+0x9e0>
 8007bf8:	9b08      	ldr	r3, [sp, #32]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	f43f ad2e 	beq.w	800765c <_strtod_l+0x43c>
 8007c00:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007d30 <_strtod_l+0xb10>
 8007c04:	f04f 3aff 	mov.w	sl, #4294967295
 8007c08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c0a:	4648      	mov	r0, r9
 8007c0c:	f001 fca5 	bl	800955a <_Bfree>
 8007c10:	9905      	ldr	r1, [sp, #20]
 8007c12:	4648      	mov	r0, r9
 8007c14:	f001 fca1 	bl	800955a <_Bfree>
 8007c18:	4641      	mov	r1, r8
 8007c1a:	4648      	mov	r0, r9
 8007c1c:	f001 fc9d 	bl	800955a <_Bfree>
 8007c20:	4621      	mov	r1, r4
 8007c22:	4648      	mov	r0, r9
 8007c24:	f001 fc99 	bl	800955a <_Bfree>
 8007c28:	e619      	b.n	800785e <_strtod_l+0x63e>
 8007c2a:	f1ba 0f00 	cmp.w	sl, #0
 8007c2e:	d11a      	bne.n	8007c66 <_strtod_l+0xa46>
 8007c30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c34:	b9eb      	cbnz	r3, 8007c72 <_strtod_l+0xa52>
 8007c36:	2200      	movs	r2, #0
 8007c38:	4b3f      	ldr	r3, [pc, #252]	; (8007d38 <_strtod_l+0xb18>)
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 ff55 	bl	8000aec <__aeabi_dcmplt>
 8007c42:	b9c8      	cbnz	r0, 8007c78 <_strtod_l+0xa58>
 8007c44:	4630      	mov	r0, r6
 8007c46:	4639      	mov	r1, r7
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4b3e      	ldr	r3, [pc, #248]	; (8007d44 <_strtod_l+0xb24>)
 8007c4c:	f7f8 fcdc 	bl	8000608 <__aeabi_dmul>
 8007c50:	4606      	mov	r6, r0
 8007c52:	460f      	mov	r7, r1
 8007c54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007c58:	9618      	str	r6, [sp, #96]	; 0x60
 8007c5a:	9319      	str	r3, [sp, #100]	; 0x64
 8007c5c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007c60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c64:	e79c      	b.n	8007ba0 <_strtod_l+0x980>
 8007c66:	f1ba 0f01 	cmp.w	sl, #1
 8007c6a:	d102      	bne.n	8007c72 <_strtod_l+0xa52>
 8007c6c:	2d00      	cmp	r5, #0
 8007c6e:	f43f ad8e 	beq.w	800778e <_strtod_l+0x56e>
 8007c72:	2200      	movs	r2, #0
 8007c74:	4b34      	ldr	r3, [pc, #208]	; (8007d48 <_strtod_l+0xb28>)
 8007c76:	e78f      	b.n	8007b98 <_strtod_l+0x978>
 8007c78:	2600      	movs	r6, #0
 8007c7a:	4f32      	ldr	r7, [pc, #200]	; (8007d44 <_strtod_l+0xb24>)
 8007c7c:	e7ea      	b.n	8007c54 <_strtod_l+0xa34>
 8007c7e:	4b31      	ldr	r3, [pc, #196]	; (8007d44 <_strtod_l+0xb24>)
 8007c80:	4630      	mov	r0, r6
 8007c82:	4639      	mov	r1, r7
 8007c84:	2200      	movs	r2, #0
 8007c86:	f7f8 fcbf 	bl	8000608 <__aeabi_dmul>
 8007c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	460f      	mov	r7, r1
 8007c90:	b933      	cbnz	r3, 8007ca0 <_strtod_l+0xa80>
 8007c92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c96:	9010      	str	r0, [sp, #64]	; 0x40
 8007c98:	9311      	str	r3, [sp, #68]	; 0x44
 8007c9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c9e:	e7df      	b.n	8007c60 <_strtod_l+0xa40>
 8007ca0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007ca4:	e7f9      	b.n	8007c9a <_strtod_l+0xa7a>
 8007ca6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007caa:	9b04      	ldr	r3, [sp, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1ab      	bne.n	8007c08 <_strtod_l+0x9e8>
 8007cb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007cb4:	0d1b      	lsrs	r3, r3, #20
 8007cb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007cb8:	051b      	lsls	r3, r3, #20
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	465d      	mov	r5, fp
 8007cbe:	d1a3      	bne.n	8007c08 <_strtod_l+0x9e8>
 8007cc0:	4639      	mov	r1, r7
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7f8 ff50 	bl	8000b68 <__aeabi_d2iz>
 8007cc8:	f7f8 fc34 	bl	8000534 <__aeabi_i2d>
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f7f8 fae0 	bl	8000298 <__aeabi_dsub>
 8007cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	b933      	cbnz	r3, 8007cee <_strtod_l+0xace>
 8007ce0:	f1ba 0f00 	cmp.w	sl, #0
 8007ce4:	d103      	bne.n	8007cee <_strtod_l+0xace>
 8007ce6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007cea:	2d00      	cmp	r5, #0
 8007cec:	d06d      	beq.n	8007dca <_strtod_l+0xbaa>
 8007cee:	a30a      	add	r3, pc, #40	; (adr r3, 8007d18 <_strtod_l+0xaf8>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	4639      	mov	r1, r7
 8007cf8:	f7f8 fef8 	bl	8000aec <__aeabi_dcmplt>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	f47f acb8 	bne.w	8007672 <_strtod_l+0x452>
 8007d02:	a307      	add	r3, pc, #28	; (adr r3, 8007d20 <_strtod_l+0xb00>)
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	4630      	mov	r0, r6
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	f7f8 ff0c 	bl	8000b28 <__aeabi_dcmpgt>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f43f af79 	beq.w	8007c08 <_strtod_l+0x9e8>
 8007d16:	e4ac      	b.n	8007672 <_strtod_l+0x452>
 8007d18:	94a03595 	.word	0x94a03595
 8007d1c:	3fdfffff 	.word	0x3fdfffff
 8007d20:	35afe535 	.word	0x35afe535
 8007d24:	3fe00000 	.word	0x3fe00000
 8007d28:	000fffff 	.word	0x000fffff
 8007d2c:	7ff00000 	.word	0x7ff00000
 8007d30:	7fefffff 	.word	0x7fefffff
 8007d34:	39500000 	.word	0x39500000
 8007d38:	3ff00000 	.word	0x3ff00000
 8007d3c:	7fe00000 	.word	0x7fe00000
 8007d40:	7c9fffff 	.word	0x7c9fffff
 8007d44:	3fe00000 	.word	0x3fe00000
 8007d48:	bff00000 	.word	0xbff00000
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	b333      	cbz	r3, 8007d9e <_strtod_l+0xb7e>
 8007d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d56:	d822      	bhi.n	8007d9e <_strtod_l+0xb7e>
 8007d58:	a327      	add	r3, pc, #156	; (adr r3, 8007df8 <_strtod_l+0xbd8>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	4630      	mov	r0, r6
 8007d60:	4639      	mov	r1, r7
 8007d62:	f7f8 fecd 	bl	8000b00 <__aeabi_dcmple>
 8007d66:	b1a0      	cbz	r0, 8007d92 <_strtod_l+0xb72>
 8007d68:	4639      	mov	r1, r7
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7f8 ff24 	bl	8000bb8 <__aeabi_d2uiz>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	bf08      	it	eq
 8007d74:	2001      	moveq	r0, #1
 8007d76:	f7f8 fbcd 	bl	8000514 <__aeabi_ui2d>
 8007d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	460f      	mov	r7, r1
 8007d80:	bb03      	cbnz	r3, 8007dc4 <_strtod_l+0xba4>
 8007d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d86:	9012      	str	r0, [sp, #72]	; 0x48
 8007d88:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007d8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d96:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d9e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007da2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007da6:	f001 fe6f 	bl	8009a88 <__ulp>
 8007daa:	4650      	mov	r0, sl
 8007dac:	ec53 2b10 	vmov	r2, r3, d0
 8007db0:	4659      	mov	r1, fp
 8007db2:	f7f8 fc29 	bl	8000608 <__aeabi_dmul>
 8007db6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007dba:	f7f8 fa6f 	bl	800029c <__adddf3>
 8007dbe:	4682      	mov	sl, r0
 8007dc0:	468b      	mov	fp, r1
 8007dc2:	e772      	b.n	8007caa <_strtod_l+0xa8a>
 8007dc4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007dc8:	e7df      	b.n	8007d8a <_strtod_l+0xb6a>
 8007dca:	a30d      	add	r3, pc, #52	; (adr r3, 8007e00 <_strtod_l+0xbe0>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f7f8 fe8c 	bl	8000aec <__aeabi_dcmplt>
 8007dd4:	e79c      	b.n	8007d10 <_strtod_l+0xaf0>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	930d      	str	r3, [sp, #52]	; 0x34
 8007dda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	f7ff ba61 	b.w	80072a6 <_strtod_l+0x86>
 8007de4:	2b65      	cmp	r3, #101	; 0x65
 8007de6:	f04f 0200 	mov.w	r2, #0
 8007dea:	f43f ab4e 	beq.w	800748a <_strtod_l+0x26a>
 8007dee:	2101      	movs	r1, #1
 8007df0:	4614      	mov	r4, r2
 8007df2:	9104      	str	r1, [sp, #16]
 8007df4:	f7ff bacb 	b.w	800738e <_strtod_l+0x16e>
 8007df8:	ffc00000 	.word	0xffc00000
 8007dfc:	41dfffff 	.word	0x41dfffff
 8007e00:	94a03595 	.word	0x94a03595
 8007e04:	3fcfffff 	.word	0x3fcfffff

08007e08 <_strtod_r>:
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <_strtod_r+0x18>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	b410      	push	{r4}
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	4c04      	ldr	r4, [pc, #16]	; (8007e24 <_strtod_r+0x1c>)
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf08      	it	eq
 8007e16:	4623      	moveq	r3, r4
 8007e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e1c:	f7ff ba00 	b.w	8007220 <_strtod_l>
 8007e20:	2000000c 	.word	0x2000000c
 8007e24:	20000070 	.word	0x20000070

08007e28 <strtok>:
 8007e28:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <strtok+0x50>)
 8007e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2e:	681d      	ldr	r5, [r3, #0]
 8007e30:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8007e32:	4606      	mov	r6, r0
 8007e34:	460f      	mov	r7, r1
 8007e36:	b9b4      	cbnz	r4, 8007e66 <strtok+0x3e>
 8007e38:	2050      	movs	r0, #80	; 0x50
 8007e3a:	f001 fb35 	bl	80094a8 <malloc>
 8007e3e:	65a8      	str	r0, [r5, #88]	; 0x58
 8007e40:	e9c0 4400 	strd	r4, r4, [r0]
 8007e44:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007e48:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007e4c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007e50:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007e54:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007e58:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007e5c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007e60:	6184      	str	r4, [r0, #24]
 8007e62:	7704      	strb	r4, [r0, #28]
 8007e64:	6244      	str	r4, [r0, #36]	; 0x24
 8007e66:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8007e68:	4639      	mov	r1, r7
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e72:	f000 b803 	b.w	8007e7c <__strtok_r>
 8007e76:	bf00      	nop
 8007e78:	2000000c 	.word	0x2000000c

08007e7c <__strtok_r>:
 8007e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7e:	b918      	cbnz	r0, 8007e88 <__strtok_r+0xc>
 8007e80:	6810      	ldr	r0, [r2, #0]
 8007e82:	b908      	cbnz	r0, 8007e88 <__strtok_r+0xc>
 8007e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e86:	4620      	mov	r0, r4
 8007e88:	4604      	mov	r4, r0
 8007e8a:	460f      	mov	r7, r1
 8007e8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007e90:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007e94:	b91e      	cbnz	r6, 8007e9e <__strtok_r+0x22>
 8007e96:	b96d      	cbnz	r5, 8007eb4 <__strtok_r+0x38>
 8007e98:	6015      	str	r5, [r2, #0]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	e7f2      	b.n	8007e84 <__strtok_r+0x8>
 8007e9e:	42b5      	cmp	r5, r6
 8007ea0:	d1f6      	bne.n	8007e90 <__strtok_r+0x14>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1ef      	bne.n	8007e86 <__strtok_r+0xa>
 8007ea6:	6014      	str	r4, [r2, #0]
 8007ea8:	7003      	strb	r3, [r0, #0]
 8007eaa:	e7eb      	b.n	8007e84 <__strtok_r+0x8>
 8007eac:	462b      	mov	r3, r5
 8007eae:	e00d      	b.n	8007ecc <__strtok_r+0x50>
 8007eb0:	b926      	cbnz	r6, 8007ebc <__strtok_r+0x40>
 8007eb2:	461c      	mov	r4, r3
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	460f      	mov	r7, r1
 8007eb8:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007ebc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007ec0:	42b5      	cmp	r5, r6
 8007ec2:	d1f5      	bne.n	8007eb0 <__strtok_r+0x34>
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d0f1      	beq.n	8007eac <__strtok_r+0x30>
 8007ec8:	2100      	movs	r1, #0
 8007eca:	7021      	strb	r1, [r4, #0]
 8007ecc:	6013      	str	r3, [r2, #0]
 8007ece:	e7d9      	b.n	8007e84 <__strtok_r+0x8>

08007ed0 <_strtol_l.isra.0>:
 8007ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	4689      	mov	r9, r1
 8007ed8:	4692      	mov	sl, r2
 8007eda:	461e      	mov	r6, r3
 8007edc:	460f      	mov	r7, r1
 8007ede:	463d      	mov	r5, r7
 8007ee0:	9808      	ldr	r0, [sp, #32]
 8007ee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ee6:	f001 facb 	bl	8009480 <__locale_ctype_ptr_l>
 8007eea:	4420      	add	r0, r4
 8007eec:	7843      	ldrb	r3, [r0, #1]
 8007eee:	f013 0308 	ands.w	r3, r3, #8
 8007ef2:	d132      	bne.n	8007f5a <_strtol_l.isra.0+0x8a>
 8007ef4:	2c2d      	cmp	r4, #45	; 0x2d
 8007ef6:	d132      	bne.n	8007f5e <_strtol_l.isra.0+0x8e>
 8007ef8:	787c      	ldrb	r4, [r7, #1]
 8007efa:	1cbd      	adds	r5, r7, #2
 8007efc:	2201      	movs	r2, #1
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	d05d      	beq.n	8007fbe <_strtol_l.isra.0+0xee>
 8007f02:	2e10      	cmp	r6, #16
 8007f04:	d109      	bne.n	8007f1a <_strtol_l.isra.0+0x4a>
 8007f06:	2c30      	cmp	r4, #48	; 0x30
 8007f08:	d107      	bne.n	8007f1a <_strtol_l.isra.0+0x4a>
 8007f0a:	782b      	ldrb	r3, [r5, #0]
 8007f0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f10:	2b58      	cmp	r3, #88	; 0x58
 8007f12:	d14f      	bne.n	8007fb4 <_strtol_l.isra.0+0xe4>
 8007f14:	786c      	ldrb	r4, [r5, #1]
 8007f16:	2610      	movs	r6, #16
 8007f18:	3502      	adds	r5, #2
 8007f1a:	2a00      	cmp	r2, #0
 8007f1c:	bf14      	ite	ne
 8007f1e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007f22:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007f26:	2700      	movs	r7, #0
 8007f28:	fbb1 fcf6 	udiv	ip, r1, r6
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007f32:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	d817      	bhi.n	8007f6a <_strtol_l.isra.0+0x9a>
 8007f3a:	461c      	mov	r4, r3
 8007f3c:	42a6      	cmp	r6, r4
 8007f3e:	dd23      	ble.n	8007f88 <_strtol_l.isra.0+0xb8>
 8007f40:	1c7b      	adds	r3, r7, #1
 8007f42:	d007      	beq.n	8007f54 <_strtol_l.isra.0+0x84>
 8007f44:	4584      	cmp	ip, r0
 8007f46:	d31c      	bcc.n	8007f82 <_strtol_l.isra.0+0xb2>
 8007f48:	d101      	bne.n	8007f4e <_strtol_l.isra.0+0x7e>
 8007f4a:	45a6      	cmp	lr, r4
 8007f4c:	db19      	blt.n	8007f82 <_strtol_l.isra.0+0xb2>
 8007f4e:	fb00 4006 	mla	r0, r0, r6, r4
 8007f52:	2701      	movs	r7, #1
 8007f54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f58:	e7eb      	b.n	8007f32 <_strtol_l.isra.0+0x62>
 8007f5a:	462f      	mov	r7, r5
 8007f5c:	e7bf      	b.n	8007ede <_strtol_l.isra.0+0xe>
 8007f5e:	2c2b      	cmp	r4, #43	; 0x2b
 8007f60:	bf04      	itt	eq
 8007f62:	1cbd      	addeq	r5, r7, #2
 8007f64:	787c      	ldrbeq	r4, [r7, #1]
 8007f66:	461a      	mov	r2, r3
 8007f68:	e7c9      	b.n	8007efe <_strtol_l.isra.0+0x2e>
 8007f6a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007f6e:	2b19      	cmp	r3, #25
 8007f70:	d801      	bhi.n	8007f76 <_strtol_l.isra.0+0xa6>
 8007f72:	3c37      	subs	r4, #55	; 0x37
 8007f74:	e7e2      	b.n	8007f3c <_strtol_l.isra.0+0x6c>
 8007f76:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007f7a:	2b19      	cmp	r3, #25
 8007f7c:	d804      	bhi.n	8007f88 <_strtol_l.isra.0+0xb8>
 8007f7e:	3c57      	subs	r4, #87	; 0x57
 8007f80:	e7dc      	b.n	8007f3c <_strtol_l.isra.0+0x6c>
 8007f82:	f04f 37ff 	mov.w	r7, #4294967295
 8007f86:	e7e5      	b.n	8007f54 <_strtol_l.isra.0+0x84>
 8007f88:	1c7b      	adds	r3, r7, #1
 8007f8a:	d108      	bne.n	8007f9e <_strtol_l.isra.0+0xce>
 8007f8c:	2322      	movs	r3, #34	; 0x22
 8007f8e:	f8c8 3000 	str.w	r3, [r8]
 8007f92:	4608      	mov	r0, r1
 8007f94:	f1ba 0f00 	cmp.w	sl, #0
 8007f98:	d107      	bne.n	8007faa <_strtol_l.isra.0+0xda>
 8007f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9e:	b102      	cbz	r2, 8007fa2 <_strtol_l.isra.0+0xd2>
 8007fa0:	4240      	negs	r0, r0
 8007fa2:	f1ba 0f00 	cmp.w	sl, #0
 8007fa6:	d0f8      	beq.n	8007f9a <_strtol_l.isra.0+0xca>
 8007fa8:	b10f      	cbz	r7, 8007fae <_strtol_l.isra.0+0xde>
 8007faa:	f105 39ff 	add.w	r9, r5, #4294967295
 8007fae:	f8ca 9000 	str.w	r9, [sl]
 8007fb2:	e7f2      	b.n	8007f9a <_strtol_l.isra.0+0xca>
 8007fb4:	2430      	movs	r4, #48	; 0x30
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	d1af      	bne.n	8007f1a <_strtol_l.isra.0+0x4a>
 8007fba:	2608      	movs	r6, #8
 8007fbc:	e7ad      	b.n	8007f1a <_strtol_l.isra.0+0x4a>
 8007fbe:	2c30      	cmp	r4, #48	; 0x30
 8007fc0:	d0a3      	beq.n	8007f0a <_strtol_l.isra.0+0x3a>
 8007fc2:	260a      	movs	r6, #10
 8007fc4:	e7a9      	b.n	8007f1a <_strtol_l.isra.0+0x4a>
	...

08007fc8 <_strtol_r>:
 8007fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fca:	4c06      	ldr	r4, [pc, #24]	; (8007fe4 <_strtol_r+0x1c>)
 8007fcc:	4d06      	ldr	r5, [pc, #24]	; (8007fe8 <_strtol_r+0x20>)
 8007fce:	6824      	ldr	r4, [r4, #0]
 8007fd0:	6a24      	ldr	r4, [r4, #32]
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	bf08      	it	eq
 8007fd6:	462c      	moveq	r4, r5
 8007fd8:	9400      	str	r4, [sp, #0]
 8007fda:	f7ff ff79 	bl	8007ed0 <_strtol_l.isra.0>
 8007fde:	b003      	add	sp, #12
 8007fe0:	bd30      	pop	{r4, r5, pc}
 8007fe2:	bf00      	nop
 8007fe4:	2000000c 	.word	0x2000000c
 8007fe8:	20000070 	.word	0x20000070

08007fec <strtol>:
 8007fec:	4b08      	ldr	r3, [pc, #32]	; (8008010 <strtol+0x24>)
 8007fee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ff0:	681c      	ldr	r4, [r3, #0]
 8007ff2:	4d08      	ldr	r5, [pc, #32]	; (8008014 <strtol+0x28>)
 8007ff4:	6a23      	ldr	r3, [r4, #32]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bf08      	it	eq
 8007ffa:	462b      	moveq	r3, r5
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4613      	mov	r3, r2
 8008000:	460a      	mov	r2, r1
 8008002:	4601      	mov	r1, r0
 8008004:	4620      	mov	r0, r4
 8008006:	f7ff ff63 	bl	8007ed0 <_strtol_l.isra.0>
 800800a:	b003      	add	sp, #12
 800800c:	bd30      	pop	{r4, r5, pc}
 800800e:	bf00      	nop
 8008010:	2000000c 	.word	0x2000000c
 8008014:	20000070 	.word	0x20000070

08008018 <quorem>:
 8008018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	6903      	ldr	r3, [r0, #16]
 800801e:	690c      	ldr	r4, [r1, #16]
 8008020:	42a3      	cmp	r3, r4
 8008022:	4680      	mov	r8, r0
 8008024:	f2c0 8082 	blt.w	800812c <quorem+0x114>
 8008028:	3c01      	subs	r4, #1
 800802a:	f101 0714 	add.w	r7, r1, #20
 800802e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008032:	f100 0614 	add.w	r6, r0, #20
 8008036:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800803a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800803e:	eb06 030c 	add.w	r3, r6, ip
 8008042:	3501      	adds	r5, #1
 8008044:	eb07 090c 	add.w	r9, r7, ip
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	fbb0 f5f5 	udiv	r5, r0, r5
 800804e:	b395      	cbz	r5, 80080b6 <quorem+0x9e>
 8008050:	f04f 0a00 	mov.w	sl, #0
 8008054:	4638      	mov	r0, r7
 8008056:	46b6      	mov	lr, r6
 8008058:	46d3      	mov	fp, sl
 800805a:	f850 2b04 	ldr.w	r2, [r0], #4
 800805e:	b293      	uxth	r3, r2
 8008060:	fb05 a303 	mla	r3, r5, r3, sl
 8008064:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008068:	b29b      	uxth	r3, r3
 800806a:	ebab 0303 	sub.w	r3, fp, r3
 800806e:	0c12      	lsrs	r2, r2, #16
 8008070:	f8de b000 	ldr.w	fp, [lr]
 8008074:	fb05 a202 	mla	r2, r5, r2, sl
 8008078:	fa13 f38b 	uxtah	r3, r3, fp
 800807c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008080:	fa1f fb82 	uxth.w	fp, r2
 8008084:	f8de 2000 	ldr.w	r2, [lr]
 8008088:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800808c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008090:	b29b      	uxth	r3, r3
 8008092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008096:	4581      	cmp	r9, r0
 8008098:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800809c:	f84e 3b04 	str.w	r3, [lr], #4
 80080a0:	d2db      	bcs.n	800805a <quorem+0x42>
 80080a2:	f856 300c 	ldr.w	r3, [r6, ip]
 80080a6:	b933      	cbnz	r3, 80080b6 <quorem+0x9e>
 80080a8:	9b01      	ldr	r3, [sp, #4]
 80080aa:	3b04      	subs	r3, #4
 80080ac:	429e      	cmp	r6, r3
 80080ae:	461a      	mov	r2, r3
 80080b0:	d330      	bcc.n	8008114 <quorem+0xfc>
 80080b2:	f8c8 4010 	str.w	r4, [r8, #16]
 80080b6:	4640      	mov	r0, r8
 80080b8:	f001 fc6e 	bl	8009998 <__mcmp>
 80080bc:	2800      	cmp	r0, #0
 80080be:	db25      	blt.n	800810c <quorem+0xf4>
 80080c0:	3501      	adds	r5, #1
 80080c2:	4630      	mov	r0, r6
 80080c4:	f04f 0c00 	mov.w	ip, #0
 80080c8:	f857 2b04 	ldr.w	r2, [r7], #4
 80080cc:	f8d0 e000 	ldr.w	lr, [r0]
 80080d0:	b293      	uxth	r3, r2
 80080d2:	ebac 0303 	sub.w	r3, ip, r3
 80080d6:	0c12      	lsrs	r2, r2, #16
 80080d8:	fa13 f38e 	uxtah	r3, r3, lr
 80080dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ea:	45b9      	cmp	r9, r7
 80080ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080f0:	f840 3b04 	str.w	r3, [r0], #4
 80080f4:	d2e8      	bcs.n	80080c8 <quorem+0xb0>
 80080f6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80080fa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80080fe:	b92a      	cbnz	r2, 800810c <quorem+0xf4>
 8008100:	3b04      	subs	r3, #4
 8008102:	429e      	cmp	r6, r3
 8008104:	461a      	mov	r2, r3
 8008106:	d30b      	bcc.n	8008120 <quorem+0x108>
 8008108:	f8c8 4010 	str.w	r4, [r8, #16]
 800810c:	4628      	mov	r0, r5
 800810e:	b003      	add	sp, #12
 8008110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	3b04      	subs	r3, #4
 8008118:	2a00      	cmp	r2, #0
 800811a:	d1ca      	bne.n	80080b2 <quorem+0x9a>
 800811c:	3c01      	subs	r4, #1
 800811e:	e7c5      	b.n	80080ac <quorem+0x94>
 8008120:	6812      	ldr	r2, [r2, #0]
 8008122:	3b04      	subs	r3, #4
 8008124:	2a00      	cmp	r2, #0
 8008126:	d1ef      	bne.n	8008108 <quorem+0xf0>
 8008128:	3c01      	subs	r4, #1
 800812a:	e7ea      	b.n	8008102 <quorem+0xea>
 800812c:	2000      	movs	r0, #0
 800812e:	e7ee      	b.n	800810e <quorem+0xf6>

08008130 <_dtoa_r>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	ec57 6b10 	vmov	r6, r7, d0
 8008138:	b097      	sub	sp, #92	; 0x5c
 800813a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800813c:	9106      	str	r1, [sp, #24]
 800813e:	4604      	mov	r4, r0
 8008140:	920b      	str	r2, [sp, #44]	; 0x2c
 8008142:	9312      	str	r3, [sp, #72]	; 0x48
 8008144:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008148:	e9cd 6700 	strd	r6, r7, [sp]
 800814c:	b93d      	cbnz	r5, 800815e <_dtoa_r+0x2e>
 800814e:	2010      	movs	r0, #16
 8008150:	f001 f9aa 	bl	80094a8 <malloc>
 8008154:	6260      	str	r0, [r4, #36]	; 0x24
 8008156:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800815a:	6005      	str	r5, [r0, #0]
 800815c:	60c5      	str	r5, [r0, #12]
 800815e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008160:	6819      	ldr	r1, [r3, #0]
 8008162:	b151      	cbz	r1, 800817a <_dtoa_r+0x4a>
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	604a      	str	r2, [r1, #4]
 8008168:	2301      	movs	r3, #1
 800816a:	4093      	lsls	r3, r2
 800816c:	608b      	str	r3, [r1, #8]
 800816e:	4620      	mov	r0, r4
 8008170:	f001 f9f3 	bl	800955a <_Bfree>
 8008174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008176:	2200      	movs	r2, #0
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	1e3b      	subs	r3, r7, #0
 800817c:	bfbb      	ittet	lt
 800817e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008182:	9301      	strlt	r3, [sp, #4]
 8008184:	2300      	movge	r3, #0
 8008186:	2201      	movlt	r2, #1
 8008188:	bfac      	ite	ge
 800818a:	f8c8 3000 	strge.w	r3, [r8]
 800818e:	f8c8 2000 	strlt.w	r2, [r8]
 8008192:	4baf      	ldr	r3, [pc, #700]	; (8008450 <_dtoa_r+0x320>)
 8008194:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008198:	ea33 0308 	bics.w	r3, r3, r8
 800819c:	d114      	bne.n	80081c8 <_dtoa_r+0x98>
 800819e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80081a4:	6013      	str	r3, [r2, #0]
 80081a6:	9b00      	ldr	r3, [sp, #0]
 80081a8:	b923      	cbnz	r3, 80081b4 <_dtoa_r+0x84>
 80081aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f000 8542 	beq.w	8008c38 <_dtoa_r+0xb08>
 80081b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008464 <_dtoa_r+0x334>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 8544 	beq.w	8008c48 <_dtoa_r+0xb18>
 80081c0:	f10b 0303 	add.w	r3, fp, #3
 80081c4:	f000 bd3e 	b.w	8008c44 <_dtoa_r+0xb14>
 80081c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80081cc:	2200      	movs	r2, #0
 80081ce:	2300      	movs	r3, #0
 80081d0:	4630      	mov	r0, r6
 80081d2:	4639      	mov	r1, r7
 80081d4:	f7f8 fc80 	bl	8000ad8 <__aeabi_dcmpeq>
 80081d8:	4681      	mov	r9, r0
 80081da:	b168      	cbz	r0, 80081f8 <_dtoa_r+0xc8>
 80081dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081de:	2301      	movs	r3, #1
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8524 	beq.w	8008c32 <_dtoa_r+0xb02>
 80081ea:	4b9a      	ldr	r3, [pc, #616]	; (8008454 <_dtoa_r+0x324>)
 80081ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081ee:	f103 3bff 	add.w	fp, r3, #4294967295
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	f000 bd28 	b.w	8008c48 <_dtoa_r+0xb18>
 80081f8:	aa14      	add	r2, sp, #80	; 0x50
 80081fa:	a915      	add	r1, sp, #84	; 0x54
 80081fc:	ec47 6b10 	vmov	d0, r6, r7
 8008200:	4620      	mov	r0, r4
 8008202:	f001 fcb7 	bl	8009b74 <__d2b>
 8008206:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800820a:	9004      	str	r0, [sp, #16]
 800820c:	2d00      	cmp	r5, #0
 800820e:	d07c      	beq.n	800830a <_dtoa_r+0x1da>
 8008210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008214:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008218:	46b2      	mov	sl, r6
 800821a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800821e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008222:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008226:	2200      	movs	r2, #0
 8008228:	4b8b      	ldr	r3, [pc, #556]	; (8008458 <_dtoa_r+0x328>)
 800822a:	4650      	mov	r0, sl
 800822c:	4659      	mov	r1, fp
 800822e:	f7f8 f833 	bl	8000298 <__aeabi_dsub>
 8008232:	a381      	add	r3, pc, #516	; (adr r3, 8008438 <_dtoa_r+0x308>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f7f8 f9e6 	bl	8000608 <__aeabi_dmul>
 800823c:	a380      	add	r3, pc, #512	; (adr r3, 8008440 <_dtoa_r+0x310>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f8 f82b 	bl	800029c <__adddf3>
 8008246:	4606      	mov	r6, r0
 8008248:	4628      	mov	r0, r5
 800824a:	460f      	mov	r7, r1
 800824c:	f7f8 f972 	bl	8000534 <__aeabi_i2d>
 8008250:	a37d      	add	r3, pc, #500	; (adr r3, 8008448 <_dtoa_r+0x318>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f7f8 f9d7 	bl	8000608 <__aeabi_dmul>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	4630      	mov	r0, r6
 8008260:	4639      	mov	r1, r7
 8008262:	f7f8 f81b 	bl	800029c <__adddf3>
 8008266:	4606      	mov	r6, r0
 8008268:	460f      	mov	r7, r1
 800826a:	f7f8 fc7d 	bl	8000b68 <__aeabi_d2iz>
 800826e:	2200      	movs	r2, #0
 8008270:	4682      	mov	sl, r0
 8008272:	2300      	movs	r3, #0
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	f7f8 fc38 	bl	8000aec <__aeabi_dcmplt>
 800827c:	b148      	cbz	r0, 8008292 <_dtoa_r+0x162>
 800827e:	4650      	mov	r0, sl
 8008280:	f7f8 f958 	bl	8000534 <__aeabi_i2d>
 8008284:	4632      	mov	r2, r6
 8008286:	463b      	mov	r3, r7
 8008288:	f7f8 fc26 	bl	8000ad8 <__aeabi_dcmpeq>
 800828c:	b908      	cbnz	r0, 8008292 <_dtoa_r+0x162>
 800828e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008292:	f1ba 0f16 	cmp.w	sl, #22
 8008296:	d859      	bhi.n	800834c <_dtoa_r+0x21c>
 8008298:	4970      	ldr	r1, [pc, #448]	; (800845c <_dtoa_r+0x32c>)
 800829a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800829e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082a6:	f7f8 fc3f 	bl	8000b28 <__aeabi_dcmpgt>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d050      	beq.n	8008350 <_dtoa_r+0x220>
 80082ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082b2:	2300      	movs	r3, #0
 80082b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80082b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082b8:	1b5d      	subs	r5, r3, r5
 80082ba:	f1b5 0801 	subs.w	r8, r5, #1
 80082be:	bf49      	itett	mi
 80082c0:	f1c5 0301 	rsbmi	r3, r5, #1
 80082c4:	2300      	movpl	r3, #0
 80082c6:	9305      	strmi	r3, [sp, #20]
 80082c8:	f04f 0800 	movmi.w	r8, #0
 80082cc:	bf58      	it	pl
 80082ce:	9305      	strpl	r3, [sp, #20]
 80082d0:	f1ba 0f00 	cmp.w	sl, #0
 80082d4:	db3e      	blt.n	8008354 <_dtoa_r+0x224>
 80082d6:	2300      	movs	r3, #0
 80082d8:	44d0      	add	r8, sl
 80082da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80082de:	9307      	str	r3, [sp, #28]
 80082e0:	9b06      	ldr	r3, [sp, #24]
 80082e2:	2b09      	cmp	r3, #9
 80082e4:	f200 8090 	bhi.w	8008408 <_dtoa_r+0x2d8>
 80082e8:	2b05      	cmp	r3, #5
 80082ea:	bfc4      	itt	gt
 80082ec:	3b04      	subgt	r3, #4
 80082ee:	9306      	strgt	r3, [sp, #24]
 80082f0:	9b06      	ldr	r3, [sp, #24]
 80082f2:	f1a3 0302 	sub.w	r3, r3, #2
 80082f6:	bfcc      	ite	gt
 80082f8:	2500      	movgt	r5, #0
 80082fa:	2501      	movle	r5, #1
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	f200 808f 	bhi.w	8008420 <_dtoa_r+0x2f0>
 8008302:	e8df f003 	tbb	[pc, r3]
 8008306:	7f7d      	.short	0x7f7d
 8008308:	7131      	.short	0x7131
 800830a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800830e:	441d      	add	r5, r3
 8008310:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008314:	2820      	cmp	r0, #32
 8008316:	dd13      	ble.n	8008340 <_dtoa_r+0x210>
 8008318:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800831c:	9b00      	ldr	r3, [sp, #0]
 800831e:	fa08 f800 	lsl.w	r8, r8, r0
 8008322:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008326:	fa23 f000 	lsr.w	r0, r3, r0
 800832a:	ea48 0000 	orr.w	r0, r8, r0
 800832e:	f7f8 f8f1 	bl	8000514 <__aeabi_ui2d>
 8008332:	2301      	movs	r3, #1
 8008334:	4682      	mov	sl, r0
 8008336:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800833a:	3d01      	subs	r5, #1
 800833c:	9313      	str	r3, [sp, #76]	; 0x4c
 800833e:	e772      	b.n	8008226 <_dtoa_r+0xf6>
 8008340:	9b00      	ldr	r3, [sp, #0]
 8008342:	f1c0 0020 	rsb	r0, r0, #32
 8008346:	fa03 f000 	lsl.w	r0, r3, r0
 800834a:	e7f0      	b.n	800832e <_dtoa_r+0x1fe>
 800834c:	2301      	movs	r3, #1
 800834e:	e7b1      	b.n	80082b4 <_dtoa_r+0x184>
 8008350:	900f      	str	r0, [sp, #60]	; 0x3c
 8008352:	e7b0      	b.n	80082b6 <_dtoa_r+0x186>
 8008354:	9b05      	ldr	r3, [sp, #20]
 8008356:	eba3 030a 	sub.w	r3, r3, sl
 800835a:	9305      	str	r3, [sp, #20]
 800835c:	f1ca 0300 	rsb	r3, sl, #0
 8008360:	9307      	str	r3, [sp, #28]
 8008362:	2300      	movs	r3, #0
 8008364:	930e      	str	r3, [sp, #56]	; 0x38
 8008366:	e7bb      	b.n	80082e0 <_dtoa_r+0x1b0>
 8008368:	2301      	movs	r3, #1
 800836a:	930a      	str	r3, [sp, #40]	; 0x28
 800836c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800836e:	2b00      	cmp	r3, #0
 8008370:	dd59      	ble.n	8008426 <_dtoa_r+0x2f6>
 8008372:	9302      	str	r3, [sp, #8]
 8008374:	4699      	mov	r9, r3
 8008376:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008378:	2200      	movs	r2, #0
 800837a:	6072      	str	r2, [r6, #4]
 800837c:	2204      	movs	r2, #4
 800837e:	f102 0014 	add.w	r0, r2, #20
 8008382:	4298      	cmp	r0, r3
 8008384:	6871      	ldr	r1, [r6, #4]
 8008386:	d953      	bls.n	8008430 <_dtoa_r+0x300>
 8008388:	4620      	mov	r0, r4
 800838a:	f001 f8b2 	bl	80094f2 <_Balloc>
 800838e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008390:	6030      	str	r0, [r6, #0]
 8008392:	f1b9 0f0e 	cmp.w	r9, #14
 8008396:	f8d3 b000 	ldr.w	fp, [r3]
 800839a:	f200 80e6 	bhi.w	800856a <_dtoa_r+0x43a>
 800839e:	2d00      	cmp	r5, #0
 80083a0:	f000 80e3 	beq.w	800856a <_dtoa_r+0x43a>
 80083a4:	ed9d 7b00 	vldr	d7, [sp]
 80083a8:	f1ba 0f00 	cmp.w	sl, #0
 80083ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80083b0:	dd74      	ble.n	800849c <_dtoa_r+0x36c>
 80083b2:	4a2a      	ldr	r2, [pc, #168]	; (800845c <_dtoa_r+0x32c>)
 80083b4:	f00a 030f 	and.w	r3, sl, #15
 80083b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083bc:	ed93 7b00 	vldr	d7, [r3]
 80083c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80083c4:	06f0      	lsls	r0, r6, #27
 80083c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80083ca:	d565      	bpl.n	8008498 <_dtoa_r+0x368>
 80083cc:	4b24      	ldr	r3, [pc, #144]	; (8008460 <_dtoa_r+0x330>)
 80083ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083d6:	f7f8 fa41 	bl	800085c <__aeabi_ddiv>
 80083da:	e9cd 0100 	strd	r0, r1, [sp]
 80083de:	f006 060f 	and.w	r6, r6, #15
 80083e2:	2503      	movs	r5, #3
 80083e4:	4f1e      	ldr	r7, [pc, #120]	; (8008460 <_dtoa_r+0x330>)
 80083e6:	e04c      	b.n	8008482 <_dtoa_r+0x352>
 80083e8:	2301      	movs	r3, #1
 80083ea:	930a      	str	r3, [sp, #40]	; 0x28
 80083ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ee:	4453      	add	r3, sl
 80083f0:	f103 0901 	add.w	r9, r3, #1
 80083f4:	9302      	str	r3, [sp, #8]
 80083f6:	464b      	mov	r3, r9
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	bfb8      	it	lt
 80083fc:	2301      	movlt	r3, #1
 80083fe:	e7ba      	b.n	8008376 <_dtoa_r+0x246>
 8008400:	2300      	movs	r3, #0
 8008402:	e7b2      	b.n	800836a <_dtoa_r+0x23a>
 8008404:	2300      	movs	r3, #0
 8008406:	e7f0      	b.n	80083ea <_dtoa_r+0x2ba>
 8008408:	2501      	movs	r5, #1
 800840a:	2300      	movs	r3, #0
 800840c:	9306      	str	r3, [sp, #24]
 800840e:	950a      	str	r5, [sp, #40]	; 0x28
 8008410:	f04f 33ff 	mov.w	r3, #4294967295
 8008414:	9302      	str	r3, [sp, #8]
 8008416:	4699      	mov	r9, r3
 8008418:	2200      	movs	r2, #0
 800841a:	2312      	movs	r3, #18
 800841c:	920b      	str	r2, [sp, #44]	; 0x2c
 800841e:	e7aa      	b.n	8008376 <_dtoa_r+0x246>
 8008420:	2301      	movs	r3, #1
 8008422:	930a      	str	r3, [sp, #40]	; 0x28
 8008424:	e7f4      	b.n	8008410 <_dtoa_r+0x2e0>
 8008426:	2301      	movs	r3, #1
 8008428:	9302      	str	r3, [sp, #8]
 800842a:	4699      	mov	r9, r3
 800842c:	461a      	mov	r2, r3
 800842e:	e7f5      	b.n	800841c <_dtoa_r+0x2ec>
 8008430:	3101      	adds	r1, #1
 8008432:	6071      	str	r1, [r6, #4]
 8008434:	0052      	lsls	r2, r2, #1
 8008436:	e7a2      	b.n	800837e <_dtoa_r+0x24e>
 8008438:	636f4361 	.word	0x636f4361
 800843c:	3fd287a7 	.word	0x3fd287a7
 8008440:	8b60c8b3 	.word	0x8b60c8b3
 8008444:	3fc68a28 	.word	0x3fc68a28
 8008448:	509f79fb 	.word	0x509f79fb
 800844c:	3fd34413 	.word	0x3fd34413
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	0800a9e1 	.word	0x0800a9e1
 8008458:	3ff80000 	.word	0x3ff80000
 800845c:	0800ab08 	.word	0x0800ab08
 8008460:	0800aae0 	.word	0x0800aae0
 8008464:	0800aa69 	.word	0x0800aa69
 8008468:	07f1      	lsls	r1, r6, #31
 800846a:	d508      	bpl.n	800847e <_dtoa_r+0x34e>
 800846c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008474:	f7f8 f8c8 	bl	8000608 <__aeabi_dmul>
 8008478:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800847c:	3501      	adds	r5, #1
 800847e:	1076      	asrs	r6, r6, #1
 8008480:	3708      	adds	r7, #8
 8008482:	2e00      	cmp	r6, #0
 8008484:	d1f0      	bne.n	8008468 <_dtoa_r+0x338>
 8008486:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800848a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800848e:	f7f8 f9e5 	bl	800085c <__aeabi_ddiv>
 8008492:	e9cd 0100 	strd	r0, r1, [sp]
 8008496:	e01a      	b.n	80084ce <_dtoa_r+0x39e>
 8008498:	2502      	movs	r5, #2
 800849a:	e7a3      	b.n	80083e4 <_dtoa_r+0x2b4>
 800849c:	f000 80a0 	beq.w	80085e0 <_dtoa_r+0x4b0>
 80084a0:	f1ca 0600 	rsb	r6, sl, #0
 80084a4:	4b9f      	ldr	r3, [pc, #636]	; (8008724 <_dtoa_r+0x5f4>)
 80084a6:	4fa0      	ldr	r7, [pc, #640]	; (8008728 <_dtoa_r+0x5f8>)
 80084a8:	f006 020f 	and.w	r2, r6, #15
 80084ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084b8:	f7f8 f8a6 	bl	8000608 <__aeabi_dmul>
 80084bc:	e9cd 0100 	strd	r0, r1, [sp]
 80084c0:	1136      	asrs	r6, r6, #4
 80084c2:	2300      	movs	r3, #0
 80084c4:	2502      	movs	r5, #2
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d17f      	bne.n	80085ca <_dtoa_r+0x49a>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e1      	bne.n	8008492 <_dtoa_r+0x362>
 80084ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 8087 	beq.w	80085e4 <_dtoa_r+0x4b4>
 80084d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084da:	2200      	movs	r2, #0
 80084dc:	4b93      	ldr	r3, [pc, #588]	; (800872c <_dtoa_r+0x5fc>)
 80084de:	4630      	mov	r0, r6
 80084e0:	4639      	mov	r1, r7
 80084e2:	f7f8 fb03 	bl	8000aec <__aeabi_dcmplt>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d07c      	beq.n	80085e4 <_dtoa_r+0x4b4>
 80084ea:	f1b9 0f00 	cmp.w	r9, #0
 80084ee:	d079      	beq.n	80085e4 <_dtoa_r+0x4b4>
 80084f0:	9b02      	ldr	r3, [sp, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	dd35      	ble.n	8008562 <_dtoa_r+0x432>
 80084f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80084fa:	9308      	str	r3, [sp, #32]
 80084fc:	4639      	mov	r1, r7
 80084fe:	2200      	movs	r2, #0
 8008500:	4b8b      	ldr	r3, [pc, #556]	; (8008730 <_dtoa_r+0x600>)
 8008502:	4630      	mov	r0, r6
 8008504:	f7f8 f880 	bl	8000608 <__aeabi_dmul>
 8008508:	e9cd 0100 	strd	r0, r1, [sp]
 800850c:	9f02      	ldr	r7, [sp, #8]
 800850e:	3501      	adds	r5, #1
 8008510:	4628      	mov	r0, r5
 8008512:	f7f8 f80f 	bl	8000534 <__aeabi_i2d>
 8008516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800851a:	f7f8 f875 	bl	8000608 <__aeabi_dmul>
 800851e:	2200      	movs	r2, #0
 8008520:	4b84      	ldr	r3, [pc, #528]	; (8008734 <_dtoa_r+0x604>)
 8008522:	f7f7 febb 	bl	800029c <__adddf3>
 8008526:	4605      	mov	r5, r0
 8008528:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800852c:	2f00      	cmp	r7, #0
 800852e:	d15d      	bne.n	80085ec <_dtoa_r+0x4bc>
 8008530:	2200      	movs	r2, #0
 8008532:	4b81      	ldr	r3, [pc, #516]	; (8008738 <_dtoa_r+0x608>)
 8008534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008538:	f7f7 feae 	bl	8000298 <__aeabi_dsub>
 800853c:	462a      	mov	r2, r5
 800853e:	4633      	mov	r3, r6
 8008540:	e9cd 0100 	strd	r0, r1, [sp]
 8008544:	f7f8 faf0 	bl	8000b28 <__aeabi_dcmpgt>
 8008548:	2800      	cmp	r0, #0
 800854a:	f040 8288 	bne.w	8008a5e <_dtoa_r+0x92e>
 800854e:	462a      	mov	r2, r5
 8008550:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008558:	f7f8 fac8 	bl	8000aec <__aeabi_dcmplt>
 800855c:	2800      	cmp	r0, #0
 800855e:	f040 827c 	bne.w	8008a5a <_dtoa_r+0x92a>
 8008562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008566:	e9cd 2300 	strd	r2, r3, [sp]
 800856a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800856c:	2b00      	cmp	r3, #0
 800856e:	f2c0 8150 	blt.w	8008812 <_dtoa_r+0x6e2>
 8008572:	f1ba 0f0e 	cmp.w	sl, #14
 8008576:	f300 814c 	bgt.w	8008812 <_dtoa_r+0x6e2>
 800857a:	4b6a      	ldr	r3, [pc, #424]	; (8008724 <_dtoa_r+0x5f4>)
 800857c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008580:	ed93 7b00 	vldr	d7, [r3]
 8008584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008586:	2b00      	cmp	r3, #0
 8008588:	ed8d 7b02 	vstr	d7, [sp, #8]
 800858c:	f280 80d8 	bge.w	8008740 <_dtoa_r+0x610>
 8008590:	f1b9 0f00 	cmp.w	r9, #0
 8008594:	f300 80d4 	bgt.w	8008740 <_dtoa_r+0x610>
 8008598:	f040 825e 	bne.w	8008a58 <_dtoa_r+0x928>
 800859c:	2200      	movs	r2, #0
 800859e:	4b66      	ldr	r3, [pc, #408]	; (8008738 <_dtoa_r+0x608>)
 80085a0:	ec51 0b17 	vmov	r0, r1, d7
 80085a4:	f7f8 f830 	bl	8000608 <__aeabi_dmul>
 80085a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ac:	f7f8 fab2 	bl	8000b14 <__aeabi_dcmpge>
 80085b0:	464f      	mov	r7, r9
 80085b2:	464e      	mov	r6, r9
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f040 8234 	bne.w	8008a22 <_dtoa_r+0x8f2>
 80085ba:	2331      	movs	r3, #49	; 0x31
 80085bc:	f10b 0501 	add.w	r5, fp, #1
 80085c0:	f88b 3000 	strb.w	r3, [fp]
 80085c4:	f10a 0a01 	add.w	sl, sl, #1
 80085c8:	e22f      	b.n	8008a2a <_dtoa_r+0x8fa>
 80085ca:	07f2      	lsls	r2, r6, #31
 80085cc:	d505      	bpl.n	80085da <_dtoa_r+0x4aa>
 80085ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d2:	f7f8 f819 	bl	8000608 <__aeabi_dmul>
 80085d6:	3501      	adds	r5, #1
 80085d8:	2301      	movs	r3, #1
 80085da:	1076      	asrs	r6, r6, #1
 80085dc:	3708      	adds	r7, #8
 80085de:	e772      	b.n	80084c6 <_dtoa_r+0x396>
 80085e0:	2502      	movs	r5, #2
 80085e2:	e774      	b.n	80084ce <_dtoa_r+0x39e>
 80085e4:	f8cd a020 	str.w	sl, [sp, #32]
 80085e8:	464f      	mov	r7, r9
 80085ea:	e791      	b.n	8008510 <_dtoa_r+0x3e0>
 80085ec:	4b4d      	ldr	r3, [pc, #308]	; (8008724 <_dtoa_r+0x5f4>)
 80085ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80085f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d047      	beq.n	800868c <_dtoa_r+0x55c>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	2000      	movs	r0, #0
 8008602:	494e      	ldr	r1, [pc, #312]	; (800873c <_dtoa_r+0x60c>)
 8008604:	f7f8 f92a 	bl	800085c <__aeabi_ddiv>
 8008608:	462a      	mov	r2, r5
 800860a:	4633      	mov	r3, r6
 800860c:	f7f7 fe44 	bl	8000298 <__aeabi_dsub>
 8008610:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008614:	465d      	mov	r5, fp
 8008616:	e9dd 0100 	ldrd	r0, r1, [sp]
 800861a:	f7f8 faa5 	bl	8000b68 <__aeabi_d2iz>
 800861e:	4606      	mov	r6, r0
 8008620:	f7f7 ff88 	bl	8000534 <__aeabi_i2d>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	e9dd 0100 	ldrd	r0, r1, [sp]
 800862c:	f7f7 fe34 	bl	8000298 <__aeabi_dsub>
 8008630:	3630      	adds	r6, #48	; 0x30
 8008632:	f805 6b01 	strb.w	r6, [r5], #1
 8008636:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800863a:	e9cd 0100 	strd	r0, r1, [sp]
 800863e:	f7f8 fa55 	bl	8000aec <__aeabi_dcmplt>
 8008642:	2800      	cmp	r0, #0
 8008644:	d163      	bne.n	800870e <_dtoa_r+0x5de>
 8008646:	e9dd 2300 	ldrd	r2, r3, [sp]
 800864a:	2000      	movs	r0, #0
 800864c:	4937      	ldr	r1, [pc, #220]	; (800872c <_dtoa_r+0x5fc>)
 800864e:	f7f7 fe23 	bl	8000298 <__aeabi_dsub>
 8008652:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008656:	f7f8 fa49 	bl	8000aec <__aeabi_dcmplt>
 800865a:	2800      	cmp	r0, #0
 800865c:	f040 80b7 	bne.w	80087ce <_dtoa_r+0x69e>
 8008660:	eba5 030b 	sub.w	r3, r5, fp
 8008664:	429f      	cmp	r7, r3
 8008666:	f77f af7c 	ble.w	8008562 <_dtoa_r+0x432>
 800866a:	2200      	movs	r2, #0
 800866c:	4b30      	ldr	r3, [pc, #192]	; (8008730 <_dtoa_r+0x600>)
 800866e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008672:	f7f7 ffc9 	bl	8000608 <__aeabi_dmul>
 8008676:	2200      	movs	r2, #0
 8008678:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800867c:	4b2c      	ldr	r3, [pc, #176]	; (8008730 <_dtoa_r+0x600>)
 800867e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008682:	f7f7 ffc1 	bl	8000608 <__aeabi_dmul>
 8008686:	e9cd 0100 	strd	r0, r1, [sp]
 800868a:	e7c4      	b.n	8008616 <_dtoa_r+0x4e6>
 800868c:	462a      	mov	r2, r5
 800868e:	4633      	mov	r3, r6
 8008690:	f7f7 ffba 	bl	8000608 <__aeabi_dmul>
 8008694:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008698:	eb0b 0507 	add.w	r5, fp, r7
 800869c:	465e      	mov	r6, fp
 800869e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086a2:	f7f8 fa61 	bl	8000b68 <__aeabi_d2iz>
 80086a6:	4607      	mov	r7, r0
 80086a8:	f7f7 ff44 	bl	8000534 <__aeabi_i2d>
 80086ac:	3730      	adds	r7, #48	; 0x30
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086b6:	f7f7 fdef 	bl	8000298 <__aeabi_dsub>
 80086ba:	f806 7b01 	strb.w	r7, [r6], #1
 80086be:	42ae      	cmp	r6, r5
 80086c0:	e9cd 0100 	strd	r0, r1, [sp]
 80086c4:	f04f 0200 	mov.w	r2, #0
 80086c8:	d126      	bne.n	8008718 <_dtoa_r+0x5e8>
 80086ca:	4b1c      	ldr	r3, [pc, #112]	; (800873c <_dtoa_r+0x60c>)
 80086cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086d0:	f7f7 fde4 	bl	800029c <__adddf3>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086dc:	f7f8 fa24 	bl	8000b28 <__aeabi_dcmpgt>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d174      	bne.n	80087ce <_dtoa_r+0x69e>
 80086e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086e8:	2000      	movs	r0, #0
 80086ea:	4914      	ldr	r1, [pc, #80]	; (800873c <_dtoa_r+0x60c>)
 80086ec:	f7f7 fdd4 	bl	8000298 <__aeabi_dsub>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086f8:	f7f8 f9f8 	bl	8000aec <__aeabi_dcmplt>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	f43f af30 	beq.w	8008562 <_dtoa_r+0x432>
 8008702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008706:	2b30      	cmp	r3, #48	; 0x30
 8008708:	f105 32ff 	add.w	r2, r5, #4294967295
 800870c:	d002      	beq.n	8008714 <_dtoa_r+0x5e4>
 800870e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008712:	e04a      	b.n	80087aa <_dtoa_r+0x67a>
 8008714:	4615      	mov	r5, r2
 8008716:	e7f4      	b.n	8008702 <_dtoa_r+0x5d2>
 8008718:	4b05      	ldr	r3, [pc, #20]	; (8008730 <_dtoa_r+0x600>)
 800871a:	f7f7 ff75 	bl	8000608 <__aeabi_dmul>
 800871e:	e9cd 0100 	strd	r0, r1, [sp]
 8008722:	e7bc      	b.n	800869e <_dtoa_r+0x56e>
 8008724:	0800ab08 	.word	0x0800ab08
 8008728:	0800aae0 	.word	0x0800aae0
 800872c:	3ff00000 	.word	0x3ff00000
 8008730:	40240000 	.word	0x40240000
 8008734:	401c0000 	.word	0x401c0000
 8008738:	40140000 	.word	0x40140000
 800873c:	3fe00000 	.word	0x3fe00000
 8008740:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008744:	465d      	mov	r5, fp
 8008746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800874a:	4630      	mov	r0, r6
 800874c:	4639      	mov	r1, r7
 800874e:	f7f8 f885 	bl	800085c <__aeabi_ddiv>
 8008752:	f7f8 fa09 	bl	8000b68 <__aeabi_d2iz>
 8008756:	4680      	mov	r8, r0
 8008758:	f7f7 feec 	bl	8000534 <__aeabi_i2d>
 800875c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008760:	f7f7 ff52 	bl	8000608 <__aeabi_dmul>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4630      	mov	r0, r6
 800876a:	4639      	mov	r1, r7
 800876c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008770:	f7f7 fd92 	bl	8000298 <__aeabi_dsub>
 8008774:	f805 6b01 	strb.w	r6, [r5], #1
 8008778:	eba5 060b 	sub.w	r6, r5, fp
 800877c:	45b1      	cmp	r9, r6
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	d139      	bne.n	80087f8 <_dtoa_r+0x6c8>
 8008784:	f7f7 fd8a 	bl	800029c <__adddf3>
 8008788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800878c:	4606      	mov	r6, r0
 800878e:	460f      	mov	r7, r1
 8008790:	f7f8 f9ca 	bl	8000b28 <__aeabi_dcmpgt>
 8008794:	b9c8      	cbnz	r0, 80087ca <_dtoa_r+0x69a>
 8008796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800879a:	4630      	mov	r0, r6
 800879c:	4639      	mov	r1, r7
 800879e:	f7f8 f99b 	bl	8000ad8 <__aeabi_dcmpeq>
 80087a2:	b110      	cbz	r0, 80087aa <_dtoa_r+0x67a>
 80087a4:	f018 0f01 	tst.w	r8, #1
 80087a8:	d10f      	bne.n	80087ca <_dtoa_r+0x69a>
 80087aa:	9904      	ldr	r1, [sp, #16]
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 fed4 	bl	800955a <_Bfree>
 80087b2:	2300      	movs	r3, #0
 80087b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087b6:	702b      	strb	r3, [r5, #0]
 80087b8:	f10a 0301 	add.w	r3, sl, #1
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8241 	beq.w	8008c48 <_dtoa_r+0xb18>
 80087c6:	601d      	str	r5, [r3, #0]
 80087c8:	e23e      	b.n	8008c48 <_dtoa_r+0xb18>
 80087ca:	f8cd a020 	str.w	sl, [sp, #32]
 80087ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087d2:	2a39      	cmp	r2, #57	; 0x39
 80087d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80087d8:	d108      	bne.n	80087ec <_dtoa_r+0x6bc>
 80087da:	459b      	cmp	fp, r3
 80087dc:	d10a      	bne.n	80087f4 <_dtoa_r+0x6c4>
 80087de:	9b08      	ldr	r3, [sp, #32]
 80087e0:	3301      	adds	r3, #1
 80087e2:	9308      	str	r3, [sp, #32]
 80087e4:	2330      	movs	r3, #48	; 0x30
 80087e6:	f88b 3000 	strb.w	r3, [fp]
 80087ea:	465b      	mov	r3, fp
 80087ec:	781a      	ldrb	r2, [r3, #0]
 80087ee:	3201      	adds	r2, #1
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	e78c      	b.n	800870e <_dtoa_r+0x5de>
 80087f4:	461d      	mov	r5, r3
 80087f6:	e7ea      	b.n	80087ce <_dtoa_r+0x69e>
 80087f8:	2200      	movs	r2, #0
 80087fa:	4b9b      	ldr	r3, [pc, #620]	; (8008a68 <_dtoa_r+0x938>)
 80087fc:	f7f7 ff04 	bl	8000608 <__aeabi_dmul>
 8008800:	2200      	movs	r2, #0
 8008802:	2300      	movs	r3, #0
 8008804:	4606      	mov	r6, r0
 8008806:	460f      	mov	r7, r1
 8008808:	f7f8 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800880c:	2800      	cmp	r0, #0
 800880e:	d09a      	beq.n	8008746 <_dtoa_r+0x616>
 8008810:	e7cb      	b.n	80087aa <_dtoa_r+0x67a>
 8008812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008814:	2a00      	cmp	r2, #0
 8008816:	f000 808b 	beq.w	8008930 <_dtoa_r+0x800>
 800881a:	9a06      	ldr	r2, [sp, #24]
 800881c:	2a01      	cmp	r2, #1
 800881e:	dc6e      	bgt.n	80088fe <_dtoa_r+0x7ce>
 8008820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008822:	2a00      	cmp	r2, #0
 8008824:	d067      	beq.n	80088f6 <_dtoa_r+0x7c6>
 8008826:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800882a:	9f07      	ldr	r7, [sp, #28]
 800882c:	9d05      	ldr	r5, [sp, #20]
 800882e:	9a05      	ldr	r2, [sp, #20]
 8008830:	2101      	movs	r1, #1
 8008832:	441a      	add	r2, r3
 8008834:	4620      	mov	r0, r4
 8008836:	9205      	str	r2, [sp, #20]
 8008838:	4498      	add	r8, r3
 800883a:	f000 ff6c 	bl	8009716 <__i2b>
 800883e:	4606      	mov	r6, r0
 8008840:	2d00      	cmp	r5, #0
 8008842:	dd0c      	ble.n	800885e <_dtoa_r+0x72e>
 8008844:	f1b8 0f00 	cmp.w	r8, #0
 8008848:	dd09      	ble.n	800885e <_dtoa_r+0x72e>
 800884a:	4545      	cmp	r5, r8
 800884c:	9a05      	ldr	r2, [sp, #20]
 800884e:	462b      	mov	r3, r5
 8008850:	bfa8      	it	ge
 8008852:	4643      	movge	r3, r8
 8008854:	1ad2      	subs	r2, r2, r3
 8008856:	9205      	str	r2, [sp, #20]
 8008858:	1aed      	subs	r5, r5, r3
 800885a:	eba8 0803 	sub.w	r8, r8, r3
 800885e:	9b07      	ldr	r3, [sp, #28]
 8008860:	b1eb      	cbz	r3, 800889e <_dtoa_r+0x76e>
 8008862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008864:	2b00      	cmp	r3, #0
 8008866:	d067      	beq.n	8008938 <_dtoa_r+0x808>
 8008868:	b18f      	cbz	r7, 800888e <_dtoa_r+0x75e>
 800886a:	4631      	mov	r1, r6
 800886c:	463a      	mov	r2, r7
 800886e:	4620      	mov	r0, r4
 8008870:	f000 fff0 	bl	8009854 <__pow5mult>
 8008874:	9a04      	ldr	r2, [sp, #16]
 8008876:	4601      	mov	r1, r0
 8008878:	4606      	mov	r6, r0
 800887a:	4620      	mov	r0, r4
 800887c:	f000 ff54 	bl	8009728 <__multiply>
 8008880:	9904      	ldr	r1, [sp, #16]
 8008882:	9008      	str	r0, [sp, #32]
 8008884:	4620      	mov	r0, r4
 8008886:	f000 fe68 	bl	800955a <_Bfree>
 800888a:	9b08      	ldr	r3, [sp, #32]
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	9b07      	ldr	r3, [sp, #28]
 8008890:	1bda      	subs	r2, r3, r7
 8008892:	d004      	beq.n	800889e <_dtoa_r+0x76e>
 8008894:	9904      	ldr	r1, [sp, #16]
 8008896:	4620      	mov	r0, r4
 8008898:	f000 ffdc 	bl	8009854 <__pow5mult>
 800889c:	9004      	str	r0, [sp, #16]
 800889e:	2101      	movs	r1, #1
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 ff38 	bl	8009716 <__i2b>
 80088a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088a8:	4607      	mov	r7, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 81d0 	beq.w	8008c50 <_dtoa_r+0xb20>
 80088b0:	461a      	mov	r2, r3
 80088b2:	4601      	mov	r1, r0
 80088b4:	4620      	mov	r0, r4
 80088b6:	f000 ffcd 	bl	8009854 <__pow5mult>
 80088ba:	9b06      	ldr	r3, [sp, #24]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	4607      	mov	r7, r0
 80088c0:	dc40      	bgt.n	8008944 <_dtoa_r+0x814>
 80088c2:	9b00      	ldr	r3, [sp, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d139      	bne.n	800893c <_dtoa_r+0x80c>
 80088c8:	9b01      	ldr	r3, [sp, #4]
 80088ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d136      	bne.n	8008940 <_dtoa_r+0x810>
 80088d2:	9b01      	ldr	r3, [sp, #4]
 80088d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088d8:	0d1b      	lsrs	r3, r3, #20
 80088da:	051b      	lsls	r3, r3, #20
 80088dc:	b12b      	cbz	r3, 80088ea <_dtoa_r+0x7ba>
 80088de:	9b05      	ldr	r3, [sp, #20]
 80088e0:	3301      	adds	r3, #1
 80088e2:	9305      	str	r3, [sp, #20]
 80088e4:	f108 0801 	add.w	r8, r8, #1
 80088e8:	2301      	movs	r3, #1
 80088ea:	9307      	str	r3, [sp, #28]
 80088ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d12a      	bne.n	8008948 <_dtoa_r+0x818>
 80088f2:	2001      	movs	r0, #1
 80088f4:	e030      	b.n	8008958 <_dtoa_r+0x828>
 80088f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088fc:	e795      	b.n	800882a <_dtoa_r+0x6fa>
 80088fe:	9b07      	ldr	r3, [sp, #28]
 8008900:	f109 37ff 	add.w	r7, r9, #4294967295
 8008904:	42bb      	cmp	r3, r7
 8008906:	bfbf      	itttt	lt
 8008908:	9b07      	ldrlt	r3, [sp, #28]
 800890a:	9707      	strlt	r7, [sp, #28]
 800890c:	1afa      	sublt	r2, r7, r3
 800890e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008910:	bfbb      	ittet	lt
 8008912:	189b      	addlt	r3, r3, r2
 8008914:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008916:	1bdf      	subge	r7, r3, r7
 8008918:	2700      	movlt	r7, #0
 800891a:	f1b9 0f00 	cmp.w	r9, #0
 800891e:	bfb5      	itete	lt
 8008920:	9b05      	ldrlt	r3, [sp, #20]
 8008922:	9d05      	ldrge	r5, [sp, #20]
 8008924:	eba3 0509 	sublt.w	r5, r3, r9
 8008928:	464b      	movge	r3, r9
 800892a:	bfb8      	it	lt
 800892c:	2300      	movlt	r3, #0
 800892e:	e77e      	b.n	800882e <_dtoa_r+0x6fe>
 8008930:	9f07      	ldr	r7, [sp, #28]
 8008932:	9d05      	ldr	r5, [sp, #20]
 8008934:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008936:	e783      	b.n	8008840 <_dtoa_r+0x710>
 8008938:	9a07      	ldr	r2, [sp, #28]
 800893a:	e7ab      	b.n	8008894 <_dtoa_r+0x764>
 800893c:	2300      	movs	r3, #0
 800893e:	e7d4      	b.n	80088ea <_dtoa_r+0x7ba>
 8008940:	9b00      	ldr	r3, [sp, #0]
 8008942:	e7d2      	b.n	80088ea <_dtoa_r+0x7ba>
 8008944:	2300      	movs	r3, #0
 8008946:	9307      	str	r3, [sp, #28]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800894e:	6918      	ldr	r0, [r3, #16]
 8008950:	f000 fe93 	bl	800967a <__hi0bits>
 8008954:	f1c0 0020 	rsb	r0, r0, #32
 8008958:	4440      	add	r0, r8
 800895a:	f010 001f 	ands.w	r0, r0, #31
 800895e:	d047      	beq.n	80089f0 <_dtoa_r+0x8c0>
 8008960:	f1c0 0320 	rsb	r3, r0, #32
 8008964:	2b04      	cmp	r3, #4
 8008966:	dd3b      	ble.n	80089e0 <_dtoa_r+0x8b0>
 8008968:	9b05      	ldr	r3, [sp, #20]
 800896a:	f1c0 001c 	rsb	r0, r0, #28
 800896e:	4403      	add	r3, r0
 8008970:	9305      	str	r3, [sp, #20]
 8008972:	4405      	add	r5, r0
 8008974:	4480      	add	r8, r0
 8008976:	9b05      	ldr	r3, [sp, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	dd05      	ble.n	8008988 <_dtoa_r+0x858>
 800897c:	461a      	mov	r2, r3
 800897e:	9904      	ldr	r1, [sp, #16]
 8008980:	4620      	mov	r0, r4
 8008982:	f000 ffb5 	bl	80098f0 <__lshift>
 8008986:	9004      	str	r0, [sp, #16]
 8008988:	f1b8 0f00 	cmp.w	r8, #0
 800898c:	dd05      	ble.n	800899a <_dtoa_r+0x86a>
 800898e:	4639      	mov	r1, r7
 8008990:	4642      	mov	r2, r8
 8008992:	4620      	mov	r0, r4
 8008994:	f000 ffac 	bl	80098f0 <__lshift>
 8008998:	4607      	mov	r7, r0
 800899a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800899c:	b353      	cbz	r3, 80089f4 <_dtoa_r+0x8c4>
 800899e:	4639      	mov	r1, r7
 80089a0:	9804      	ldr	r0, [sp, #16]
 80089a2:	f000 fff9 	bl	8009998 <__mcmp>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	da24      	bge.n	80089f4 <_dtoa_r+0x8c4>
 80089aa:	2300      	movs	r3, #0
 80089ac:	220a      	movs	r2, #10
 80089ae:	9904      	ldr	r1, [sp, #16]
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 fde9 	bl	8009588 <__multadd>
 80089b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b8:	9004      	str	r0, [sp, #16]
 80089ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 814d 	beq.w	8008c5e <_dtoa_r+0xb2e>
 80089c4:	2300      	movs	r3, #0
 80089c6:	4631      	mov	r1, r6
 80089c8:	220a      	movs	r2, #10
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 fddc 	bl	8009588 <__multadd>
 80089d0:	9b02      	ldr	r3, [sp, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	4606      	mov	r6, r0
 80089d6:	dc4f      	bgt.n	8008a78 <_dtoa_r+0x948>
 80089d8:	9b06      	ldr	r3, [sp, #24]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	dd4c      	ble.n	8008a78 <_dtoa_r+0x948>
 80089de:	e011      	b.n	8008a04 <_dtoa_r+0x8d4>
 80089e0:	d0c9      	beq.n	8008976 <_dtoa_r+0x846>
 80089e2:	9a05      	ldr	r2, [sp, #20]
 80089e4:	331c      	adds	r3, #28
 80089e6:	441a      	add	r2, r3
 80089e8:	9205      	str	r2, [sp, #20]
 80089ea:	441d      	add	r5, r3
 80089ec:	4498      	add	r8, r3
 80089ee:	e7c2      	b.n	8008976 <_dtoa_r+0x846>
 80089f0:	4603      	mov	r3, r0
 80089f2:	e7f6      	b.n	80089e2 <_dtoa_r+0x8b2>
 80089f4:	f1b9 0f00 	cmp.w	r9, #0
 80089f8:	dc38      	bgt.n	8008a6c <_dtoa_r+0x93c>
 80089fa:	9b06      	ldr	r3, [sp, #24]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	dd35      	ble.n	8008a6c <_dtoa_r+0x93c>
 8008a00:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	b963      	cbnz	r3, 8008a22 <_dtoa_r+0x8f2>
 8008a08:	4639      	mov	r1, r7
 8008a0a:	2205      	movs	r2, #5
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f000 fdbb 	bl	8009588 <__multadd>
 8008a12:	4601      	mov	r1, r0
 8008a14:	4607      	mov	r7, r0
 8008a16:	9804      	ldr	r0, [sp, #16]
 8008a18:	f000 ffbe 	bl	8009998 <__mcmp>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	f73f adcc 	bgt.w	80085ba <_dtoa_r+0x48a>
 8008a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a24:	465d      	mov	r5, fp
 8008a26:	ea6f 0a03 	mvn.w	sl, r3
 8008a2a:	f04f 0900 	mov.w	r9, #0
 8008a2e:	4639      	mov	r1, r7
 8008a30:	4620      	mov	r0, r4
 8008a32:	f000 fd92 	bl	800955a <_Bfree>
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	f43f aeb7 	beq.w	80087aa <_dtoa_r+0x67a>
 8008a3c:	f1b9 0f00 	cmp.w	r9, #0
 8008a40:	d005      	beq.n	8008a4e <_dtoa_r+0x91e>
 8008a42:	45b1      	cmp	r9, r6
 8008a44:	d003      	beq.n	8008a4e <_dtoa_r+0x91e>
 8008a46:	4649      	mov	r1, r9
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fd86 	bl	800955a <_Bfree>
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4620      	mov	r0, r4
 8008a52:	f000 fd82 	bl	800955a <_Bfree>
 8008a56:	e6a8      	b.n	80087aa <_dtoa_r+0x67a>
 8008a58:	2700      	movs	r7, #0
 8008a5a:	463e      	mov	r6, r7
 8008a5c:	e7e1      	b.n	8008a22 <_dtoa_r+0x8f2>
 8008a5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008a62:	463e      	mov	r6, r7
 8008a64:	e5a9      	b.n	80085ba <_dtoa_r+0x48a>
 8008a66:	bf00      	nop
 8008a68:	40240000 	.word	0x40240000
 8008a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 80fa 	beq.w	8008c6c <_dtoa_r+0xb3c>
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	dd05      	ble.n	8008a88 <_dtoa_r+0x958>
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	462a      	mov	r2, r5
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 ff35 	bl	80098f0 <__lshift>
 8008a86:	4606      	mov	r6, r0
 8008a88:	9b07      	ldr	r3, [sp, #28]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d04c      	beq.n	8008b28 <_dtoa_r+0x9f8>
 8008a8e:	6871      	ldr	r1, [r6, #4]
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fd2e 	bl	80094f2 <_Balloc>
 8008a96:	6932      	ldr	r2, [r6, #16]
 8008a98:	3202      	adds	r2, #2
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	0092      	lsls	r2, r2, #2
 8008a9e:	f106 010c 	add.w	r1, r6, #12
 8008aa2:	300c      	adds	r0, #12
 8008aa4:	f000 fd1a 	bl	80094dc <memcpy>
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	4629      	mov	r1, r5
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 ff1f 	bl	80098f0 <__lshift>
 8008ab2:	9b00      	ldr	r3, [sp, #0]
 8008ab4:	f8cd b014 	str.w	fp, [sp, #20]
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	46b1      	mov	r9, r6
 8008abe:	9307      	str	r3, [sp, #28]
 8008ac0:	4606      	mov	r6, r0
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	9804      	ldr	r0, [sp, #16]
 8008ac6:	f7ff faa7 	bl	8008018 <quorem>
 8008aca:	4649      	mov	r1, r9
 8008acc:	4605      	mov	r5, r0
 8008ace:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ad2:	9804      	ldr	r0, [sp, #16]
 8008ad4:	f000 ff60 	bl	8009998 <__mcmp>
 8008ad8:	4632      	mov	r2, r6
 8008ada:	9000      	str	r0, [sp, #0]
 8008adc:	4639      	mov	r1, r7
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 ff74 	bl	80099cc <__mdiff>
 8008ae4:	68c3      	ldr	r3, [r0, #12]
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	bb03      	cbnz	r3, 8008b2c <_dtoa_r+0x9fc>
 8008aea:	4601      	mov	r1, r0
 8008aec:	9008      	str	r0, [sp, #32]
 8008aee:	9804      	ldr	r0, [sp, #16]
 8008af0:	f000 ff52 	bl	8009998 <__mcmp>
 8008af4:	9a08      	ldr	r2, [sp, #32]
 8008af6:	4603      	mov	r3, r0
 8008af8:	4611      	mov	r1, r2
 8008afa:	4620      	mov	r0, r4
 8008afc:	9308      	str	r3, [sp, #32]
 8008afe:	f000 fd2c 	bl	800955a <_Bfree>
 8008b02:	9b08      	ldr	r3, [sp, #32]
 8008b04:	b9a3      	cbnz	r3, 8008b30 <_dtoa_r+0xa00>
 8008b06:	9a06      	ldr	r2, [sp, #24]
 8008b08:	b992      	cbnz	r2, 8008b30 <_dtoa_r+0xa00>
 8008b0a:	9a07      	ldr	r2, [sp, #28]
 8008b0c:	b982      	cbnz	r2, 8008b30 <_dtoa_r+0xa00>
 8008b0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b12:	d029      	beq.n	8008b68 <_dtoa_r+0xa38>
 8008b14:	9b00      	ldr	r3, [sp, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	dd01      	ble.n	8008b1e <_dtoa_r+0x9ee>
 8008b1a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008b1e:	9b05      	ldr	r3, [sp, #20]
 8008b20:	1c5d      	adds	r5, r3, #1
 8008b22:	f883 8000 	strb.w	r8, [r3]
 8008b26:	e782      	b.n	8008a2e <_dtoa_r+0x8fe>
 8008b28:	4630      	mov	r0, r6
 8008b2a:	e7c2      	b.n	8008ab2 <_dtoa_r+0x982>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e7e3      	b.n	8008af8 <_dtoa_r+0x9c8>
 8008b30:	9a00      	ldr	r2, [sp, #0]
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	db04      	blt.n	8008b40 <_dtoa_r+0xa10>
 8008b36:	d125      	bne.n	8008b84 <_dtoa_r+0xa54>
 8008b38:	9a06      	ldr	r2, [sp, #24]
 8008b3a:	bb1a      	cbnz	r2, 8008b84 <_dtoa_r+0xa54>
 8008b3c:	9a07      	ldr	r2, [sp, #28]
 8008b3e:	bb0a      	cbnz	r2, 8008b84 <_dtoa_r+0xa54>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	ddec      	ble.n	8008b1e <_dtoa_r+0x9ee>
 8008b44:	2201      	movs	r2, #1
 8008b46:	9904      	ldr	r1, [sp, #16]
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 fed1 	bl	80098f0 <__lshift>
 8008b4e:	4639      	mov	r1, r7
 8008b50:	9004      	str	r0, [sp, #16]
 8008b52:	f000 ff21 	bl	8009998 <__mcmp>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	dc03      	bgt.n	8008b62 <_dtoa_r+0xa32>
 8008b5a:	d1e0      	bne.n	8008b1e <_dtoa_r+0x9ee>
 8008b5c:	f018 0f01 	tst.w	r8, #1
 8008b60:	d0dd      	beq.n	8008b1e <_dtoa_r+0x9ee>
 8008b62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b66:	d1d8      	bne.n	8008b1a <_dtoa_r+0x9ea>
 8008b68:	9b05      	ldr	r3, [sp, #20]
 8008b6a:	9a05      	ldr	r2, [sp, #20]
 8008b6c:	1c5d      	adds	r5, r3, #1
 8008b6e:	2339      	movs	r3, #57	; 0x39
 8008b70:	7013      	strb	r3, [r2, #0]
 8008b72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b76:	2b39      	cmp	r3, #57	; 0x39
 8008b78:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b7c:	d04f      	beq.n	8008c1e <_dtoa_r+0xaee>
 8008b7e:	3301      	adds	r3, #1
 8008b80:	7013      	strb	r3, [r2, #0]
 8008b82:	e754      	b.n	8008a2e <_dtoa_r+0x8fe>
 8008b84:	9a05      	ldr	r2, [sp, #20]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f102 0501 	add.w	r5, r2, #1
 8008b8c:	dd06      	ble.n	8008b9c <_dtoa_r+0xa6c>
 8008b8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b92:	d0e9      	beq.n	8008b68 <_dtoa_r+0xa38>
 8008b94:	f108 0801 	add.w	r8, r8, #1
 8008b98:	9b05      	ldr	r3, [sp, #20]
 8008b9a:	e7c2      	b.n	8008b22 <_dtoa_r+0x9f2>
 8008b9c:	9a02      	ldr	r2, [sp, #8]
 8008b9e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008ba2:	eba5 030b 	sub.w	r3, r5, fp
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d021      	beq.n	8008bee <_dtoa_r+0xabe>
 8008baa:	2300      	movs	r3, #0
 8008bac:	220a      	movs	r2, #10
 8008bae:	9904      	ldr	r1, [sp, #16]
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 fce9 	bl	8009588 <__multadd>
 8008bb6:	45b1      	cmp	r9, r6
 8008bb8:	9004      	str	r0, [sp, #16]
 8008bba:	f04f 0300 	mov.w	r3, #0
 8008bbe:	f04f 020a 	mov.w	r2, #10
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	d105      	bne.n	8008bd4 <_dtoa_r+0xaa4>
 8008bc8:	f000 fcde 	bl	8009588 <__multadd>
 8008bcc:	4681      	mov	r9, r0
 8008bce:	4606      	mov	r6, r0
 8008bd0:	9505      	str	r5, [sp, #20]
 8008bd2:	e776      	b.n	8008ac2 <_dtoa_r+0x992>
 8008bd4:	f000 fcd8 	bl	8009588 <__multadd>
 8008bd8:	4631      	mov	r1, r6
 8008bda:	4681      	mov	r9, r0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4620      	mov	r0, r4
 8008be2:	f000 fcd1 	bl	8009588 <__multadd>
 8008be6:	4606      	mov	r6, r0
 8008be8:	e7f2      	b.n	8008bd0 <_dtoa_r+0xaa0>
 8008bea:	f04f 0900 	mov.w	r9, #0
 8008bee:	2201      	movs	r2, #1
 8008bf0:	9904      	ldr	r1, [sp, #16]
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 fe7c 	bl	80098f0 <__lshift>
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	9004      	str	r0, [sp, #16]
 8008bfc:	f000 fecc 	bl	8009998 <__mcmp>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	dcb6      	bgt.n	8008b72 <_dtoa_r+0xa42>
 8008c04:	d102      	bne.n	8008c0c <_dtoa_r+0xadc>
 8008c06:	f018 0f01 	tst.w	r8, #1
 8008c0a:	d1b2      	bne.n	8008b72 <_dtoa_r+0xa42>
 8008c0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c10:	2b30      	cmp	r3, #48	; 0x30
 8008c12:	f105 32ff 	add.w	r2, r5, #4294967295
 8008c16:	f47f af0a 	bne.w	8008a2e <_dtoa_r+0x8fe>
 8008c1a:	4615      	mov	r5, r2
 8008c1c:	e7f6      	b.n	8008c0c <_dtoa_r+0xadc>
 8008c1e:	4593      	cmp	fp, r2
 8008c20:	d105      	bne.n	8008c2e <_dtoa_r+0xafe>
 8008c22:	2331      	movs	r3, #49	; 0x31
 8008c24:	f10a 0a01 	add.w	sl, sl, #1
 8008c28:	f88b 3000 	strb.w	r3, [fp]
 8008c2c:	e6ff      	b.n	8008a2e <_dtoa_r+0x8fe>
 8008c2e:	4615      	mov	r5, r2
 8008c30:	e79f      	b.n	8008b72 <_dtoa_r+0xa42>
 8008c32:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008c98 <_dtoa_r+0xb68>
 8008c36:	e007      	b.n	8008c48 <_dtoa_r+0xb18>
 8008c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008c9c <_dtoa_r+0xb6c>
 8008c3e:	b11b      	cbz	r3, 8008c48 <_dtoa_r+0xb18>
 8008c40:	f10b 0308 	add.w	r3, fp, #8
 8008c44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	4658      	mov	r0, fp
 8008c4a:	b017      	add	sp, #92	; 0x5c
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	9b06      	ldr	r3, [sp, #24]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	f77f ae35 	ble.w	80088c2 <_dtoa_r+0x792>
 8008c58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	e649      	b.n	80088f2 <_dtoa_r+0x7c2>
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dc03      	bgt.n	8008c6c <_dtoa_r+0xb3c>
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	f73f aecc 	bgt.w	8008a04 <_dtoa_r+0x8d4>
 8008c6c:	465d      	mov	r5, fp
 8008c6e:	4639      	mov	r1, r7
 8008c70:	9804      	ldr	r0, [sp, #16]
 8008c72:	f7ff f9d1 	bl	8008018 <quorem>
 8008c76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c7a:	f805 8b01 	strb.w	r8, [r5], #1
 8008c7e:	9a02      	ldr	r2, [sp, #8]
 8008c80:	eba5 030b 	sub.w	r3, r5, fp
 8008c84:	429a      	cmp	r2, r3
 8008c86:	ddb0      	ble.n	8008bea <_dtoa_r+0xaba>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	220a      	movs	r2, #10
 8008c8c:	9904      	ldr	r1, [sp, #16]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f000 fc7a 	bl	8009588 <__multadd>
 8008c94:	9004      	str	r0, [sp, #16]
 8008c96:	e7ea      	b.n	8008c6e <_dtoa_r+0xb3e>
 8008c98:	0800a9e0 	.word	0x0800a9e0
 8008c9c:	0800aa60 	.word	0x0800aa60

08008ca0 <std>:
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8008caa:	6083      	str	r3, [r0, #8]
 8008cac:	8181      	strh	r1, [r0, #12]
 8008cae:	6643      	str	r3, [r0, #100]	; 0x64
 8008cb0:	81c2      	strh	r2, [r0, #14]
 8008cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cb6:	6183      	str	r3, [r0, #24]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	2208      	movs	r2, #8
 8008cbc:	305c      	adds	r0, #92	; 0x5c
 8008cbe:	f7fd fc0f 	bl	80064e0 <memset>
 8008cc2:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <std+0x38>)
 8008cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8008cc6:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <std+0x3c>)
 8008cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <std+0x40>)
 8008ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <std+0x44>)
 8008cd0:	6224      	str	r4, [r4, #32]
 8008cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	bf00      	nop
 8008cd8:	0800a3a1 	.word	0x0800a3a1
 8008cdc:	0800a3c3 	.word	0x0800a3c3
 8008ce0:	0800a3fb 	.word	0x0800a3fb
 8008ce4:	0800a41f 	.word	0x0800a41f

08008ce8 <_cleanup_r>:
 8008ce8:	4901      	ldr	r1, [pc, #4]	; (8008cf0 <_cleanup_r+0x8>)
 8008cea:	f000 b885 	b.w	8008df8 <_fwalk_reent>
 8008cee:	bf00      	nop
 8008cf0:	0800a739 	.word	0x0800a739

08008cf4 <__sfmoreglue>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	1e4a      	subs	r2, r1, #1
 8008cf8:	2568      	movs	r5, #104	; 0x68
 8008cfa:	4355      	muls	r5, r2
 8008cfc:	460e      	mov	r6, r1
 8008cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d02:	f001 f851 	bl	8009da8 <_malloc_r>
 8008d06:	4604      	mov	r4, r0
 8008d08:	b140      	cbz	r0, 8008d1c <__sfmoreglue+0x28>
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d10:	300c      	adds	r0, #12
 8008d12:	60a0      	str	r0, [r4, #8]
 8008d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d18:	f7fd fbe2 	bl	80064e0 <memset>
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	bd70      	pop	{r4, r5, r6, pc}

08008d20 <__sinit>:
 8008d20:	6983      	ldr	r3, [r0, #24]
 8008d22:	b510      	push	{r4, lr}
 8008d24:	4604      	mov	r4, r0
 8008d26:	bb33      	cbnz	r3, 8008d76 <__sinit+0x56>
 8008d28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008d2c:	6503      	str	r3, [r0, #80]	; 0x50
 8008d2e:	4b12      	ldr	r3, [pc, #72]	; (8008d78 <__sinit+0x58>)
 8008d30:	4a12      	ldr	r2, [pc, #72]	; (8008d7c <__sinit+0x5c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6282      	str	r2, [r0, #40]	; 0x28
 8008d36:	4298      	cmp	r0, r3
 8008d38:	bf04      	itt	eq
 8008d3a:	2301      	moveq	r3, #1
 8008d3c:	6183      	streq	r3, [r0, #24]
 8008d3e:	f000 f81f 	bl	8008d80 <__sfp>
 8008d42:	6060      	str	r0, [r4, #4]
 8008d44:	4620      	mov	r0, r4
 8008d46:	f000 f81b 	bl	8008d80 <__sfp>
 8008d4a:	60a0      	str	r0, [r4, #8]
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 f817 	bl	8008d80 <__sfp>
 8008d52:	2200      	movs	r2, #0
 8008d54:	60e0      	str	r0, [r4, #12]
 8008d56:	2104      	movs	r1, #4
 8008d58:	6860      	ldr	r0, [r4, #4]
 8008d5a:	f7ff ffa1 	bl	8008ca0 <std>
 8008d5e:	2201      	movs	r2, #1
 8008d60:	2109      	movs	r1, #9
 8008d62:	68a0      	ldr	r0, [r4, #8]
 8008d64:	f7ff ff9c 	bl	8008ca0 <std>
 8008d68:	2202      	movs	r2, #2
 8008d6a:	2112      	movs	r1, #18
 8008d6c:	68e0      	ldr	r0, [r4, #12]
 8008d6e:	f7ff ff97 	bl	8008ca0 <std>
 8008d72:	2301      	movs	r3, #1
 8008d74:	61a3      	str	r3, [r4, #24]
 8008d76:	bd10      	pop	{r4, pc}
 8008d78:	0800a9cc 	.word	0x0800a9cc
 8008d7c:	08008ce9 	.word	0x08008ce9

08008d80 <__sfp>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	4b1b      	ldr	r3, [pc, #108]	; (8008df0 <__sfp+0x70>)
 8008d84:	681e      	ldr	r6, [r3, #0]
 8008d86:	69b3      	ldr	r3, [r6, #24]
 8008d88:	4607      	mov	r7, r0
 8008d8a:	b913      	cbnz	r3, 8008d92 <__sfp+0x12>
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff ffc7 	bl	8008d20 <__sinit>
 8008d92:	3648      	adds	r6, #72	; 0x48
 8008d94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	d503      	bpl.n	8008da4 <__sfp+0x24>
 8008d9c:	6833      	ldr	r3, [r6, #0]
 8008d9e:	b133      	cbz	r3, 8008dae <__sfp+0x2e>
 8008da0:	6836      	ldr	r6, [r6, #0]
 8008da2:	e7f7      	b.n	8008d94 <__sfp+0x14>
 8008da4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008da8:	b16d      	cbz	r5, 8008dc6 <__sfp+0x46>
 8008daa:	3468      	adds	r4, #104	; 0x68
 8008dac:	e7f4      	b.n	8008d98 <__sfp+0x18>
 8008dae:	2104      	movs	r1, #4
 8008db0:	4638      	mov	r0, r7
 8008db2:	f7ff ff9f 	bl	8008cf4 <__sfmoreglue>
 8008db6:	6030      	str	r0, [r6, #0]
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d1f1      	bne.n	8008da0 <__sfp+0x20>
 8008dbc:	230c      	movs	r3, #12
 8008dbe:	603b      	str	r3, [r7, #0]
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <__sfp+0x74>)
 8008dc8:	6665      	str	r5, [r4, #100]	; 0x64
 8008dca:	e9c4 5500 	strd	r5, r5, [r4]
 8008dce:	60a5      	str	r5, [r4, #8]
 8008dd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008dd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008dd8:	2208      	movs	r2, #8
 8008dda:	4629      	mov	r1, r5
 8008ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008de0:	f7fd fb7e 	bl	80064e0 <memset>
 8008de4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008de8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dec:	e7e9      	b.n	8008dc2 <__sfp+0x42>
 8008dee:	bf00      	nop
 8008df0:	0800a9cc 	.word	0x0800a9cc
 8008df4:	ffff0001 	.word	0xffff0001

08008df8 <_fwalk_reent>:
 8008df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	4689      	mov	r9, r1
 8008e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e04:	2600      	movs	r6, #0
 8008e06:	b914      	cbnz	r4, 8008e0e <_fwalk_reent+0x16>
 8008e08:	4630      	mov	r0, r6
 8008e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008e12:	3f01      	subs	r7, #1
 8008e14:	d501      	bpl.n	8008e1a <_fwalk_reent+0x22>
 8008e16:	6824      	ldr	r4, [r4, #0]
 8008e18:	e7f5      	b.n	8008e06 <_fwalk_reent+0xe>
 8008e1a:	89ab      	ldrh	r3, [r5, #12]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d907      	bls.n	8008e30 <_fwalk_reent+0x38>
 8008e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e24:	3301      	adds	r3, #1
 8008e26:	d003      	beq.n	8008e30 <_fwalk_reent+0x38>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	47c8      	blx	r9
 8008e2e:	4306      	orrs	r6, r0
 8008e30:	3568      	adds	r5, #104	; 0x68
 8008e32:	e7ee      	b.n	8008e12 <_fwalk_reent+0x1a>

08008e34 <rshift>:
 8008e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e36:	6906      	ldr	r6, [r0, #16]
 8008e38:	114b      	asrs	r3, r1, #5
 8008e3a:	429e      	cmp	r6, r3
 8008e3c:	f100 0414 	add.w	r4, r0, #20
 8008e40:	dd30      	ble.n	8008ea4 <rshift+0x70>
 8008e42:	f011 011f 	ands.w	r1, r1, #31
 8008e46:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008e4a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008e4e:	d108      	bne.n	8008e62 <rshift+0x2e>
 8008e50:	4621      	mov	r1, r4
 8008e52:	42b2      	cmp	r2, r6
 8008e54:	460b      	mov	r3, r1
 8008e56:	d211      	bcs.n	8008e7c <rshift+0x48>
 8008e58:	f852 3b04 	ldr.w	r3, [r2], #4
 8008e5c:	f841 3b04 	str.w	r3, [r1], #4
 8008e60:	e7f7      	b.n	8008e52 <rshift+0x1e>
 8008e62:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008e66:	f1c1 0c20 	rsb	ip, r1, #32
 8008e6a:	40cd      	lsrs	r5, r1
 8008e6c:	3204      	adds	r2, #4
 8008e6e:	4623      	mov	r3, r4
 8008e70:	42b2      	cmp	r2, r6
 8008e72:	4617      	mov	r7, r2
 8008e74:	d30c      	bcc.n	8008e90 <rshift+0x5c>
 8008e76:	601d      	str	r5, [r3, #0]
 8008e78:	b105      	cbz	r5, 8008e7c <rshift+0x48>
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	1b1a      	subs	r2, r3, r4
 8008e7e:	42a3      	cmp	r3, r4
 8008e80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e84:	bf08      	it	eq
 8008e86:	2300      	moveq	r3, #0
 8008e88:	6102      	str	r2, [r0, #16]
 8008e8a:	bf08      	it	eq
 8008e8c:	6143      	streq	r3, [r0, #20]
 8008e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e90:	683f      	ldr	r7, [r7, #0]
 8008e92:	fa07 f70c 	lsl.w	r7, r7, ip
 8008e96:	433d      	orrs	r5, r7
 8008e98:	f843 5b04 	str.w	r5, [r3], #4
 8008e9c:	f852 5b04 	ldr.w	r5, [r2], #4
 8008ea0:	40cd      	lsrs	r5, r1
 8008ea2:	e7e5      	b.n	8008e70 <rshift+0x3c>
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	e7e9      	b.n	8008e7c <rshift+0x48>

08008ea8 <__hexdig_fun>:
 8008ea8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008eac:	2b09      	cmp	r3, #9
 8008eae:	d802      	bhi.n	8008eb6 <__hexdig_fun+0xe>
 8008eb0:	3820      	subs	r0, #32
 8008eb2:	b2c0      	uxtb	r0, r0
 8008eb4:	4770      	bx	lr
 8008eb6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	d801      	bhi.n	8008ec2 <__hexdig_fun+0x1a>
 8008ebe:	3847      	subs	r0, #71	; 0x47
 8008ec0:	e7f7      	b.n	8008eb2 <__hexdig_fun+0xa>
 8008ec2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008ec6:	2b05      	cmp	r3, #5
 8008ec8:	d801      	bhi.n	8008ece <__hexdig_fun+0x26>
 8008eca:	3827      	subs	r0, #39	; 0x27
 8008ecc:	e7f1      	b.n	8008eb2 <__hexdig_fun+0xa>
 8008ece:	2000      	movs	r0, #0
 8008ed0:	4770      	bx	lr

08008ed2 <__gethex>:
 8008ed2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed6:	b08b      	sub	sp, #44	; 0x2c
 8008ed8:	468a      	mov	sl, r1
 8008eda:	9002      	str	r0, [sp, #8]
 8008edc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008ede:	9306      	str	r3, [sp, #24]
 8008ee0:	4690      	mov	r8, r2
 8008ee2:	f000 fad0 	bl	8009486 <__localeconv_l>
 8008ee6:	6803      	ldr	r3, [r0, #0]
 8008ee8:	9303      	str	r3, [sp, #12]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7f7 f978 	bl	80001e0 <strlen>
 8008ef0:	9b03      	ldr	r3, [sp, #12]
 8008ef2:	9001      	str	r0, [sp, #4]
 8008ef4:	4403      	add	r3, r0
 8008ef6:	f04f 0b00 	mov.w	fp, #0
 8008efa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008efe:	9307      	str	r3, [sp, #28]
 8008f00:	f8da 3000 	ldr.w	r3, [sl]
 8008f04:	3302      	adds	r3, #2
 8008f06:	461f      	mov	r7, r3
 8008f08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f0c:	2830      	cmp	r0, #48	; 0x30
 8008f0e:	d06c      	beq.n	8008fea <__gethex+0x118>
 8008f10:	f7ff ffca 	bl	8008ea8 <__hexdig_fun>
 8008f14:	4604      	mov	r4, r0
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d16a      	bne.n	8008ff0 <__gethex+0x11e>
 8008f1a:	9a01      	ldr	r2, [sp, #4]
 8008f1c:	9903      	ldr	r1, [sp, #12]
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f001 fa81 	bl	800a426 <strncmp>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d166      	bne.n	8008ff6 <__gethex+0x124>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	5cf8      	ldrb	r0, [r7, r3]
 8008f2c:	18fe      	adds	r6, r7, r3
 8008f2e:	f7ff ffbb 	bl	8008ea8 <__hexdig_fun>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d062      	beq.n	8008ffc <__gethex+0x12a>
 8008f36:	4633      	mov	r3, r6
 8008f38:	7818      	ldrb	r0, [r3, #0]
 8008f3a:	2830      	cmp	r0, #48	; 0x30
 8008f3c:	461f      	mov	r7, r3
 8008f3e:	f103 0301 	add.w	r3, r3, #1
 8008f42:	d0f9      	beq.n	8008f38 <__gethex+0x66>
 8008f44:	f7ff ffb0 	bl	8008ea8 <__hexdig_fun>
 8008f48:	fab0 f580 	clz	r5, r0
 8008f4c:	096d      	lsrs	r5, r5, #5
 8008f4e:	4634      	mov	r4, r6
 8008f50:	f04f 0b01 	mov.w	fp, #1
 8008f54:	463a      	mov	r2, r7
 8008f56:	4616      	mov	r6, r2
 8008f58:	3201      	adds	r2, #1
 8008f5a:	7830      	ldrb	r0, [r6, #0]
 8008f5c:	f7ff ffa4 	bl	8008ea8 <__hexdig_fun>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d1f8      	bne.n	8008f56 <__gethex+0x84>
 8008f64:	9a01      	ldr	r2, [sp, #4]
 8008f66:	9903      	ldr	r1, [sp, #12]
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f001 fa5c 	bl	800a426 <strncmp>
 8008f6e:	b950      	cbnz	r0, 8008f86 <__gethex+0xb4>
 8008f70:	b954      	cbnz	r4, 8008f88 <__gethex+0xb6>
 8008f72:	9b01      	ldr	r3, [sp, #4]
 8008f74:	18f4      	adds	r4, r6, r3
 8008f76:	4622      	mov	r2, r4
 8008f78:	4616      	mov	r6, r2
 8008f7a:	3201      	adds	r2, #1
 8008f7c:	7830      	ldrb	r0, [r6, #0]
 8008f7e:	f7ff ff93 	bl	8008ea8 <__hexdig_fun>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d1f8      	bne.n	8008f78 <__gethex+0xa6>
 8008f86:	b10c      	cbz	r4, 8008f8c <__gethex+0xba>
 8008f88:	1ba4      	subs	r4, r4, r6
 8008f8a:	00a4      	lsls	r4, r4, #2
 8008f8c:	7833      	ldrb	r3, [r6, #0]
 8008f8e:	2b50      	cmp	r3, #80	; 0x50
 8008f90:	d001      	beq.n	8008f96 <__gethex+0xc4>
 8008f92:	2b70      	cmp	r3, #112	; 0x70
 8008f94:	d140      	bne.n	8009018 <__gethex+0x146>
 8008f96:	7873      	ldrb	r3, [r6, #1]
 8008f98:	2b2b      	cmp	r3, #43	; 0x2b
 8008f9a:	d031      	beq.n	8009000 <__gethex+0x12e>
 8008f9c:	2b2d      	cmp	r3, #45	; 0x2d
 8008f9e:	d033      	beq.n	8009008 <__gethex+0x136>
 8008fa0:	1c71      	adds	r1, r6, #1
 8008fa2:	f04f 0900 	mov.w	r9, #0
 8008fa6:	7808      	ldrb	r0, [r1, #0]
 8008fa8:	f7ff ff7e 	bl	8008ea8 <__hexdig_fun>
 8008fac:	1e43      	subs	r3, r0, #1
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b18      	cmp	r3, #24
 8008fb2:	d831      	bhi.n	8009018 <__gethex+0x146>
 8008fb4:	f1a0 0210 	sub.w	r2, r0, #16
 8008fb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fbc:	f7ff ff74 	bl	8008ea8 <__hexdig_fun>
 8008fc0:	1e43      	subs	r3, r0, #1
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b18      	cmp	r3, #24
 8008fc6:	d922      	bls.n	800900e <__gethex+0x13c>
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	d000      	beq.n	8008fd0 <__gethex+0xfe>
 8008fce:	4252      	negs	r2, r2
 8008fd0:	4414      	add	r4, r2
 8008fd2:	f8ca 1000 	str.w	r1, [sl]
 8008fd6:	b30d      	cbz	r5, 800901c <__gethex+0x14a>
 8008fd8:	f1bb 0f00 	cmp.w	fp, #0
 8008fdc:	bf0c      	ite	eq
 8008fde:	2706      	moveq	r7, #6
 8008fe0:	2700      	movne	r7, #0
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	b00b      	add	sp, #44	; 0x2c
 8008fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fea:	f10b 0b01 	add.w	fp, fp, #1
 8008fee:	e78a      	b.n	8008f06 <__gethex+0x34>
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	462c      	mov	r4, r5
 8008ff4:	e7ae      	b.n	8008f54 <__gethex+0x82>
 8008ff6:	463e      	mov	r6, r7
 8008ff8:	2501      	movs	r5, #1
 8008ffa:	e7c7      	b.n	8008f8c <__gethex+0xba>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	e7fb      	b.n	8008ff8 <__gethex+0x126>
 8009000:	f04f 0900 	mov.w	r9, #0
 8009004:	1cb1      	adds	r1, r6, #2
 8009006:	e7ce      	b.n	8008fa6 <__gethex+0xd4>
 8009008:	f04f 0901 	mov.w	r9, #1
 800900c:	e7fa      	b.n	8009004 <__gethex+0x132>
 800900e:	230a      	movs	r3, #10
 8009010:	fb03 0202 	mla	r2, r3, r2, r0
 8009014:	3a10      	subs	r2, #16
 8009016:	e7cf      	b.n	8008fb8 <__gethex+0xe6>
 8009018:	4631      	mov	r1, r6
 800901a:	e7da      	b.n	8008fd2 <__gethex+0x100>
 800901c:	1bf3      	subs	r3, r6, r7
 800901e:	3b01      	subs	r3, #1
 8009020:	4629      	mov	r1, r5
 8009022:	2b07      	cmp	r3, #7
 8009024:	dc49      	bgt.n	80090ba <__gethex+0x1e8>
 8009026:	9802      	ldr	r0, [sp, #8]
 8009028:	f000 fa63 	bl	80094f2 <_Balloc>
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	f100 0914 	add.w	r9, r0, #20
 8009032:	f04f 0b00 	mov.w	fp, #0
 8009036:	f1c3 0301 	rsb	r3, r3, #1
 800903a:	4605      	mov	r5, r0
 800903c:	f8cd 9010 	str.w	r9, [sp, #16]
 8009040:	46da      	mov	sl, fp
 8009042:	9308      	str	r3, [sp, #32]
 8009044:	42b7      	cmp	r7, r6
 8009046:	d33b      	bcc.n	80090c0 <__gethex+0x1ee>
 8009048:	9804      	ldr	r0, [sp, #16]
 800904a:	f840 ab04 	str.w	sl, [r0], #4
 800904e:	eba0 0009 	sub.w	r0, r0, r9
 8009052:	1080      	asrs	r0, r0, #2
 8009054:	6128      	str	r0, [r5, #16]
 8009056:	0147      	lsls	r7, r0, #5
 8009058:	4650      	mov	r0, sl
 800905a:	f000 fb0e 	bl	800967a <__hi0bits>
 800905e:	f8d8 6000 	ldr.w	r6, [r8]
 8009062:	1a3f      	subs	r7, r7, r0
 8009064:	42b7      	cmp	r7, r6
 8009066:	dd64      	ble.n	8009132 <__gethex+0x260>
 8009068:	1bbf      	subs	r7, r7, r6
 800906a:	4639      	mov	r1, r7
 800906c:	4628      	mov	r0, r5
 800906e:	f000 fe1d 	bl	8009cac <__any_on>
 8009072:	4682      	mov	sl, r0
 8009074:	b178      	cbz	r0, 8009096 <__gethex+0x1c4>
 8009076:	1e7b      	subs	r3, r7, #1
 8009078:	1159      	asrs	r1, r3, #5
 800907a:	f003 021f 	and.w	r2, r3, #31
 800907e:	f04f 0a01 	mov.w	sl, #1
 8009082:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009086:	fa0a f202 	lsl.w	r2, sl, r2
 800908a:	420a      	tst	r2, r1
 800908c:	d003      	beq.n	8009096 <__gethex+0x1c4>
 800908e:	4553      	cmp	r3, sl
 8009090:	dc46      	bgt.n	8009120 <__gethex+0x24e>
 8009092:	f04f 0a02 	mov.w	sl, #2
 8009096:	4639      	mov	r1, r7
 8009098:	4628      	mov	r0, r5
 800909a:	f7ff fecb 	bl	8008e34 <rshift>
 800909e:	443c      	add	r4, r7
 80090a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	da52      	bge.n	800914e <__gethex+0x27c>
 80090a8:	4629      	mov	r1, r5
 80090aa:	9802      	ldr	r0, [sp, #8]
 80090ac:	f000 fa55 	bl	800955a <_Bfree>
 80090b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090b2:	2300      	movs	r3, #0
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	27a3      	movs	r7, #163	; 0xa3
 80090b8:	e793      	b.n	8008fe2 <__gethex+0x110>
 80090ba:	3101      	adds	r1, #1
 80090bc:	105b      	asrs	r3, r3, #1
 80090be:	e7b0      	b.n	8009022 <__gethex+0x150>
 80090c0:	1e73      	subs	r3, r6, #1
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	9a07      	ldr	r2, [sp, #28]
 80090c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d018      	beq.n	8009100 <__gethex+0x22e>
 80090ce:	f1bb 0f20 	cmp.w	fp, #32
 80090d2:	d107      	bne.n	80090e4 <__gethex+0x212>
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	f8c3 a000 	str.w	sl, [r3]
 80090da:	3304      	adds	r3, #4
 80090dc:	f04f 0a00 	mov.w	sl, #0
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	46d3      	mov	fp, sl
 80090e4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80090e8:	f7ff fede 	bl	8008ea8 <__hexdig_fun>
 80090ec:	f000 000f 	and.w	r0, r0, #15
 80090f0:	fa00 f00b 	lsl.w	r0, r0, fp
 80090f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80090f8:	f10b 0b04 	add.w	fp, fp, #4
 80090fc:	9b05      	ldr	r3, [sp, #20]
 80090fe:	e00d      	b.n	800911c <__gethex+0x24a>
 8009100:	9b05      	ldr	r3, [sp, #20]
 8009102:	9a08      	ldr	r2, [sp, #32]
 8009104:	4413      	add	r3, r2
 8009106:	42bb      	cmp	r3, r7
 8009108:	d3e1      	bcc.n	80090ce <__gethex+0x1fc>
 800910a:	4618      	mov	r0, r3
 800910c:	9a01      	ldr	r2, [sp, #4]
 800910e:	9903      	ldr	r1, [sp, #12]
 8009110:	9309      	str	r3, [sp, #36]	; 0x24
 8009112:	f001 f988 	bl	800a426 <strncmp>
 8009116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009118:	2800      	cmp	r0, #0
 800911a:	d1d8      	bne.n	80090ce <__gethex+0x1fc>
 800911c:	461e      	mov	r6, r3
 800911e:	e791      	b.n	8009044 <__gethex+0x172>
 8009120:	1eb9      	subs	r1, r7, #2
 8009122:	4628      	mov	r0, r5
 8009124:	f000 fdc2 	bl	8009cac <__any_on>
 8009128:	2800      	cmp	r0, #0
 800912a:	d0b2      	beq.n	8009092 <__gethex+0x1c0>
 800912c:	f04f 0a03 	mov.w	sl, #3
 8009130:	e7b1      	b.n	8009096 <__gethex+0x1c4>
 8009132:	da09      	bge.n	8009148 <__gethex+0x276>
 8009134:	1bf7      	subs	r7, r6, r7
 8009136:	4629      	mov	r1, r5
 8009138:	463a      	mov	r2, r7
 800913a:	9802      	ldr	r0, [sp, #8]
 800913c:	f000 fbd8 	bl	80098f0 <__lshift>
 8009140:	1be4      	subs	r4, r4, r7
 8009142:	4605      	mov	r5, r0
 8009144:	f100 0914 	add.w	r9, r0, #20
 8009148:	f04f 0a00 	mov.w	sl, #0
 800914c:	e7a8      	b.n	80090a0 <__gethex+0x1ce>
 800914e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009152:	42a0      	cmp	r0, r4
 8009154:	dd6a      	ble.n	800922c <__gethex+0x35a>
 8009156:	1b04      	subs	r4, r0, r4
 8009158:	42a6      	cmp	r6, r4
 800915a:	dc2e      	bgt.n	80091ba <__gethex+0x2e8>
 800915c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009160:	2b02      	cmp	r3, #2
 8009162:	d022      	beq.n	80091aa <__gethex+0x2d8>
 8009164:	2b03      	cmp	r3, #3
 8009166:	d024      	beq.n	80091b2 <__gethex+0x2e0>
 8009168:	2b01      	cmp	r3, #1
 800916a:	d115      	bne.n	8009198 <__gethex+0x2c6>
 800916c:	42a6      	cmp	r6, r4
 800916e:	d113      	bne.n	8009198 <__gethex+0x2c6>
 8009170:	2e01      	cmp	r6, #1
 8009172:	dc0b      	bgt.n	800918c <__gethex+0x2ba>
 8009174:	9a06      	ldr	r2, [sp, #24]
 8009176:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	2301      	movs	r3, #1
 800917e:	612b      	str	r3, [r5, #16]
 8009180:	f8c9 3000 	str.w	r3, [r9]
 8009184:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009186:	2762      	movs	r7, #98	; 0x62
 8009188:	601d      	str	r5, [r3, #0]
 800918a:	e72a      	b.n	8008fe2 <__gethex+0x110>
 800918c:	1e71      	subs	r1, r6, #1
 800918e:	4628      	mov	r0, r5
 8009190:	f000 fd8c 	bl	8009cac <__any_on>
 8009194:	2800      	cmp	r0, #0
 8009196:	d1ed      	bne.n	8009174 <__gethex+0x2a2>
 8009198:	4629      	mov	r1, r5
 800919a:	9802      	ldr	r0, [sp, #8]
 800919c:	f000 f9dd 	bl	800955a <_Bfree>
 80091a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091a2:	2300      	movs	r3, #0
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	2750      	movs	r7, #80	; 0x50
 80091a8:	e71b      	b.n	8008fe2 <__gethex+0x110>
 80091aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0e1      	beq.n	8009174 <__gethex+0x2a2>
 80091b0:	e7f2      	b.n	8009198 <__gethex+0x2c6>
 80091b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1dd      	bne.n	8009174 <__gethex+0x2a2>
 80091b8:	e7ee      	b.n	8009198 <__gethex+0x2c6>
 80091ba:	1e67      	subs	r7, r4, #1
 80091bc:	f1ba 0f00 	cmp.w	sl, #0
 80091c0:	d131      	bne.n	8009226 <__gethex+0x354>
 80091c2:	b127      	cbz	r7, 80091ce <__gethex+0x2fc>
 80091c4:	4639      	mov	r1, r7
 80091c6:	4628      	mov	r0, r5
 80091c8:	f000 fd70 	bl	8009cac <__any_on>
 80091cc:	4682      	mov	sl, r0
 80091ce:	117a      	asrs	r2, r7, #5
 80091d0:	2301      	movs	r3, #1
 80091d2:	f007 071f 	and.w	r7, r7, #31
 80091d6:	fa03 f707 	lsl.w	r7, r3, r7
 80091da:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80091de:	4621      	mov	r1, r4
 80091e0:	421f      	tst	r7, r3
 80091e2:	4628      	mov	r0, r5
 80091e4:	bf18      	it	ne
 80091e6:	f04a 0a02 	orrne.w	sl, sl, #2
 80091ea:	1b36      	subs	r6, r6, r4
 80091ec:	f7ff fe22 	bl	8008e34 <rshift>
 80091f0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80091f4:	2702      	movs	r7, #2
 80091f6:	f1ba 0f00 	cmp.w	sl, #0
 80091fa:	d048      	beq.n	800928e <__gethex+0x3bc>
 80091fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d015      	beq.n	8009230 <__gethex+0x35e>
 8009204:	2b03      	cmp	r3, #3
 8009206:	d017      	beq.n	8009238 <__gethex+0x366>
 8009208:	2b01      	cmp	r3, #1
 800920a:	d109      	bne.n	8009220 <__gethex+0x34e>
 800920c:	f01a 0f02 	tst.w	sl, #2
 8009210:	d006      	beq.n	8009220 <__gethex+0x34e>
 8009212:	f8d9 3000 	ldr.w	r3, [r9]
 8009216:	ea4a 0a03 	orr.w	sl, sl, r3
 800921a:	f01a 0f01 	tst.w	sl, #1
 800921e:	d10e      	bne.n	800923e <__gethex+0x36c>
 8009220:	f047 0710 	orr.w	r7, r7, #16
 8009224:	e033      	b.n	800928e <__gethex+0x3bc>
 8009226:	f04f 0a01 	mov.w	sl, #1
 800922a:	e7d0      	b.n	80091ce <__gethex+0x2fc>
 800922c:	2701      	movs	r7, #1
 800922e:	e7e2      	b.n	80091f6 <__gethex+0x324>
 8009230:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009232:	f1c3 0301 	rsb	r3, r3, #1
 8009236:	9315      	str	r3, [sp, #84]	; 0x54
 8009238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0f0      	beq.n	8009220 <__gethex+0x34e>
 800923e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009242:	f105 0314 	add.w	r3, r5, #20
 8009246:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800924a:	eb03 010a 	add.w	r1, r3, sl
 800924e:	f04f 0c00 	mov.w	ip, #0
 8009252:	4618      	mov	r0, r3
 8009254:	f853 2b04 	ldr.w	r2, [r3], #4
 8009258:	f1b2 3fff 	cmp.w	r2, #4294967295
 800925c:	d01c      	beq.n	8009298 <__gethex+0x3c6>
 800925e:	3201      	adds	r2, #1
 8009260:	6002      	str	r2, [r0, #0]
 8009262:	2f02      	cmp	r7, #2
 8009264:	f105 0314 	add.w	r3, r5, #20
 8009268:	d138      	bne.n	80092dc <__gethex+0x40a>
 800926a:	f8d8 2000 	ldr.w	r2, [r8]
 800926e:	3a01      	subs	r2, #1
 8009270:	42b2      	cmp	r2, r6
 8009272:	d10a      	bne.n	800928a <__gethex+0x3b8>
 8009274:	1171      	asrs	r1, r6, #5
 8009276:	2201      	movs	r2, #1
 8009278:	f006 061f 	and.w	r6, r6, #31
 800927c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009280:	fa02 f606 	lsl.w	r6, r2, r6
 8009284:	421e      	tst	r6, r3
 8009286:	bf18      	it	ne
 8009288:	4617      	movne	r7, r2
 800928a:	f047 0720 	orr.w	r7, r7, #32
 800928e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009290:	601d      	str	r5, [r3, #0]
 8009292:	9b06      	ldr	r3, [sp, #24]
 8009294:	601c      	str	r4, [r3, #0]
 8009296:	e6a4      	b.n	8008fe2 <__gethex+0x110>
 8009298:	4299      	cmp	r1, r3
 800929a:	f843 cc04 	str.w	ip, [r3, #-4]
 800929e:	d8d8      	bhi.n	8009252 <__gethex+0x380>
 80092a0:	68ab      	ldr	r3, [r5, #8]
 80092a2:	4599      	cmp	r9, r3
 80092a4:	db12      	blt.n	80092cc <__gethex+0x3fa>
 80092a6:	6869      	ldr	r1, [r5, #4]
 80092a8:	9802      	ldr	r0, [sp, #8]
 80092aa:	3101      	adds	r1, #1
 80092ac:	f000 f921 	bl	80094f2 <_Balloc>
 80092b0:	692a      	ldr	r2, [r5, #16]
 80092b2:	3202      	adds	r2, #2
 80092b4:	f105 010c 	add.w	r1, r5, #12
 80092b8:	4683      	mov	fp, r0
 80092ba:	0092      	lsls	r2, r2, #2
 80092bc:	300c      	adds	r0, #12
 80092be:	f000 f90d 	bl	80094dc <memcpy>
 80092c2:	4629      	mov	r1, r5
 80092c4:	9802      	ldr	r0, [sp, #8]
 80092c6:	f000 f948 	bl	800955a <_Bfree>
 80092ca:	465d      	mov	r5, fp
 80092cc:	692b      	ldr	r3, [r5, #16]
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80092d4:	612a      	str	r2, [r5, #16]
 80092d6:	2201      	movs	r2, #1
 80092d8:	615a      	str	r2, [r3, #20]
 80092da:	e7c2      	b.n	8009262 <__gethex+0x390>
 80092dc:	692a      	ldr	r2, [r5, #16]
 80092de:	454a      	cmp	r2, r9
 80092e0:	dd0b      	ble.n	80092fa <__gethex+0x428>
 80092e2:	2101      	movs	r1, #1
 80092e4:	4628      	mov	r0, r5
 80092e6:	f7ff fda5 	bl	8008e34 <rshift>
 80092ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092ee:	3401      	adds	r4, #1
 80092f0:	42a3      	cmp	r3, r4
 80092f2:	f6ff aed9 	blt.w	80090a8 <__gethex+0x1d6>
 80092f6:	2701      	movs	r7, #1
 80092f8:	e7c7      	b.n	800928a <__gethex+0x3b8>
 80092fa:	f016 061f 	ands.w	r6, r6, #31
 80092fe:	d0fa      	beq.n	80092f6 <__gethex+0x424>
 8009300:	449a      	add	sl, r3
 8009302:	f1c6 0620 	rsb	r6, r6, #32
 8009306:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800930a:	f000 f9b6 	bl	800967a <__hi0bits>
 800930e:	42b0      	cmp	r0, r6
 8009310:	dbe7      	blt.n	80092e2 <__gethex+0x410>
 8009312:	e7f0      	b.n	80092f6 <__gethex+0x424>

08009314 <L_shift>:
 8009314:	f1c2 0208 	rsb	r2, r2, #8
 8009318:	0092      	lsls	r2, r2, #2
 800931a:	b570      	push	{r4, r5, r6, lr}
 800931c:	f1c2 0620 	rsb	r6, r2, #32
 8009320:	6843      	ldr	r3, [r0, #4]
 8009322:	6804      	ldr	r4, [r0, #0]
 8009324:	fa03 f506 	lsl.w	r5, r3, r6
 8009328:	432c      	orrs	r4, r5
 800932a:	40d3      	lsrs	r3, r2
 800932c:	6004      	str	r4, [r0, #0]
 800932e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009332:	4288      	cmp	r0, r1
 8009334:	d3f4      	bcc.n	8009320 <L_shift+0xc>
 8009336:	bd70      	pop	{r4, r5, r6, pc}

08009338 <__match>:
 8009338:	b530      	push	{r4, r5, lr}
 800933a:	6803      	ldr	r3, [r0, #0]
 800933c:	3301      	adds	r3, #1
 800933e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009342:	b914      	cbnz	r4, 800934a <__match+0x12>
 8009344:	6003      	str	r3, [r0, #0]
 8009346:	2001      	movs	r0, #1
 8009348:	bd30      	pop	{r4, r5, pc}
 800934a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800934e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009352:	2d19      	cmp	r5, #25
 8009354:	bf98      	it	ls
 8009356:	3220      	addls	r2, #32
 8009358:	42a2      	cmp	r2, r4
 800935a:	d0f0      	beq.n	800933e <__match+0x6>
 800935c:	2000      	movs	r0, #0
 800935e:	e7f3      	b.n	8009348 <__match+0x10>

08009360 <__hexnan>:
 8009360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009364:	680b      	ldr	r3, [r1, #0]
 8009366:	6801      	ldr	r1, [r0, #0]
 8009368:	115f      	asrs	r7, r3, #5
 800936a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800936e:	f013 031f 	ands.w	r3, r3, #31
 8009372:	b087      	sub	sp, #28
 8009374:	bf18      	it	ne
 8009376:	3704      	addne	r7, #4
 8009378:	2500      	movs	r5, #0
 800937a:	1f3e      	subs	r6, r7, #4
 800937c:	4682      	mov	sl, r0
 800937e:	4690      	mov	r8, r2
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	f847 5c04 	str.w	r5, [r7, #-4]
 8009386:	46b1      	mov	r9, r6
 8009388:	4634      	mov	r4, r6
 800938a:	9502      	str	r5, [sp, #8]
 800938c:	46ab      	mov	fp, r5
 800938e:	784a      	ldrb	r2, [r1, #1]
 8009390:	1c4b      	adds	r3, r1, #1
 8009392:	9303      	str	r3, [sp, #12]
 8009394:	b342      	cbz	r2, 80093e8 <__hexnan+0x88>
 8009396:	4610      	mov	r0, r2
 8009398:	9105      	str	r1, [sp, #20]
 800939a:	9204      	str	r2, [sp, #16]
 800939c:	f7ff fd84 	bl	8008ea8 <__hexdig_fun>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d143      	bne.n	800942c <__hexnan+0xcc>
 80093a4:	9a04      	ldr	r2, [sp, #16]
 80093a6:	9905      	ldr	r1, [sp, #20]
 80093a8:	2a20      	cmp	r2, #32
 80093aa:	d818      	bhi.n	80093de <__hexnan+0x7e>
 80093ac:	9b02      	ldr	r3, [sp, #8]
 80093ae:	459b      	cmp	fp, r3
 80093b0:	dd13      	ble.n	80093da <__hexnan+0x7a>
 80093b2:	454c      	cmp	r4, r9
 80093b4:	d206      	bcs.n	80093c4 <__hexnan+0x64>
 80093b6:	2d07      	cmp	r5, #7
 80093b8:	dc04      	bgt.n	80093c4 <__hexnan+0x64>
 80093ba:	462a      	mov	r2, r5
 80093bc:	4649      	mov	r1, r9
 80093be:	4620      	mov	r0, r4
 80093c0:	f7ff ffa8 	bl	8009314 <L_shift>
 80093c4:	4544      	cmp	r4, r8
 80093c6:	d944      	bls.n	8009452 <__hexnan+0xf2>
 80093c8:	2300      	movs	r3, #0
 80093ca:	f1a4 0904 	sub.w	r9, r4, #4
 80093ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80093d2:	f8cd b008 	str.w	fp, [sp, #8]
 80093d6:	464c      	mov	r4, r9
 80093d8:	461d      	mov	r5, r3
 80093da:	9903      	ldr	r1, [sp, #12]
 80093dc:	e7d7      	b.n	800938e <__hexnan+0x2e>
 80093de:	2a29      	cmp	r2, #41	; 0x29
 80093e0:	d14a      	bne.n	8009478 <__hexnan+0x118>
 80093e2:	3102      	adds	r1, #2
 80093e4:	f8ca 1000 	str.w	r1, [sl]
 80093e8:	f1bb 0f00 	cmp.w	fp, #0
 80093ec:	d044      	beq.n	8009478 <__hexnan+0x118>
 80093ee:	454c      	cmp	r4, r9
 80093f0:	d206      	bcs.n	8009400 <__hexnan+0xa0>
 80093f2:	2d07      	cmp	r5, #7
 80093f4:	dc04      	bgt.n	8009400 <__hexnan+0xa0>
 80093f6:	462a      	mov	r2, r5
 80093f8:	4649      	mov	r1, r9
 80093fa:	4620      	mov	r0, r4
 80093fc:	f7ff ff8a 	bl	8009314 <L_shift>
 8009400:	4544      	cmp	r4, r8
 8009402:	d928      	bls.n	8009456 <__hexnan+0xf6>
 8009404:	4643      	mov	r3, r8
 8009406:	f854 2b04 	ldr.w	r2, [r4], #4
 800940a:	f843 2b04 	str.w	r2, [r3], #4
 800940e:	42a6      	cmp	r6, r4
 8009410:	d2f9      	bcs.n	8009406 <__hexnan+0xa6>
 8009412:	2200      	movs	r2, #0
 8009414:	f843 2b04 	str.w	r2, [r3], #4
 8009418:	429e      	cmp	r6, r3
 800941a:	d2fb      	bcs.n	8009414 <__hexnan+0xb4>
 800941c:	6833      	ldr	r3, [r6, #0]
 800941e:	b91b      	cbnz	r3, 8009428 <__hexnan+0xc8>
 8009420:	4546      	cmp	r6, r8
 8009422:	d127      	bne.n	8009474 <__hexnan+0x114>
 8009424:	2301      	movs	r3, #1
 8009426:	6033      	str	r3, [r6, #0]
 8009428:	2005      	movs	r0, #5
 800942a:	e026      	b.n	800947a <__hexnan+0x11a>
 800942c:	3501      	adds	r5, #1
 800942e:	2d08      	cmp	r5, #8
 8009430:	f10b 0b01 	add.w	fp, fp, #1
 8009434:	dd06      	ble.n	8009444 <__hexnan+0xe4>
 8009436:	4544      	cmp	r4, r8
 8009438:	d9cf      	bls.n	80093da <__hexnan+0x7a>
 800943a:	2300      	movs	r3, #0
 800943c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009440:	2501      	movs	r5, #1
 8009442:	3c04      	subs	r4, #4
 8009444:	6822      	ldr	r2, [r4, #0]
 8009446:	f000 000f 	and.w	r0, r0, #15
 800944a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800944e:	6020      	str	r0, [r4, #0]
 8009450:	e7c3      	b.n	80093da <__hexnan+0x7a>
 8009452:	2508      	movs	r5, #8
 8009454:	e7c1      	b.n	80093da <__hexnan+0x7a>
 8009456:	9b01      	ldr	r3, [sp, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0df      	beq.n	800941c <__hexnan+0xbc>
 800945c:	f04f 32ff 	mov.w	r2, #4294967295
 8009460:	f1c3 0320 	rsb	r3, r3, #32
 8009464:	fa22 f303 	lsr.w	r3, r2, r3
 8009468:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800946c:	401a      	ands	r2, r3
 800946e:	f847 2c04 	str.w	r2, [r7, #-4]
 8009472:	e7d3      	b.n	800941c <__hexnan+0xbc>
 8009474:	3e04      	subs	r6, #4
 8009476:	e7d1      	b.n	800941c <__hexnan+0xbc>
 8009478:	2004      	movs	r0, #4
 800947a:	b007      	add	sp, #28
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009480 <__locale_ctype_ptr_l>:
 8009480:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009484:	4770      	bx	lr

08009486 <__localeconv_l>:
 8009486:	30f0      	adds	r0, #240	; 0xf0
 8009488:	4770      	bx	lr
	...

0800948c <_localeconv_r>:
 800948c:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <_localeconv_r+0x14>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6a18      	ldr	r0, [r3, #32]
 8009492:	4b04      	ldr	r3, [pc, #16]	; (80094a4 <_localeconv_r+0x18>)
 8009494:	2800      	cmp	r0, #0
 8009496:	bf08      	it	eq
 8009498:	4618      	moveq	r0, r3
 800949a:	30f0      	adds	r0, #240	; 0xf0
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	2000000c 	.word	0x2000000c
 80094a4:	20000070 	.word	0x20000070

080094a8 <malloc>:
 80094a8:	4b02      	ldr	r3, [pc, #8]	; (80094b4 <malloc+0xc>)
 80094aa:	4601      	mov	r1, r0
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	f000 bc7b 	b.w	8009da8 <_malloc_r>
 80094b2:	bf00      	nop
 80094b4:	2000000c 	.word	0x2000000c

080094b8 <__ascii_mbtowc>:
 80094b8:	b082      	sub	sp, #8
 80094ba:	b901      	cbnz	r1, 80094be <__ascii_mbtowc+0x6>
 80094bc:	a901      	add	r1, sp, #4
 80094be:	b142      	cbz	r2, 80094d2 <__ascii_mbtowc+0x1a>
 80094c0:	b14b      	cbz	r3, 80094d6 <__ascii_mbtowc+0x1e>
 80094c2:	7813      	ldrb	r3, [r2, #0]
 80094c4:	600b      	str	r3, [r1, #0]
 80094c6:	7812      	ldrb	r2, [r2, #0]
 80094c8:	1c10      	adds	r0, r2, #0
 80094ca:	bf18      	it	ne
 80094cc:	2001      	movne	r0, #1
 80094ce:	b002      	add	sp, #8
 80094d0:	4770      	bx	lr
 80094d2:	4610      	mov	r0, r2
 80094d4:	e7fb      	b.n	80094ce <__ascii_mbtowc+0x16>
 80094d6:	f06f 0001 	mvn.w	r0, #1
 80094da:	e7f8      	b.n	80094ce <__ascii_mbtowc+0x16>

080094dc <memcpy>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	1e43      	subs	r3, r0, #1
 80094e0:	440a      	add	r2, r1
 80094e2:	4291      	cmp	r1, r2
 80094e4:	d100      	bne.n	80094e8 <memcpy+0xc>
 80094e6:	bd10      	pop	{r4, pc}
 80094e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f0:	e7f7      	b.n	80094e2 <memcpy+0x6>

080094f2 <_Balloc>:
 80094f2:	b570      	push	{r4, r5, r6, lr}
 80094f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094f6:	4604      	mov	r4, r0
 80094f8:	460e      	mov	r6, r1
 80094fa:	b93d      	cbnz	r5, 800950c <_Balloc+0x1a>
 80094fc:	2010      	movs	r0, #16
 80094fe:	f7ff ffd3 	bl	80094a8 <malloc>
 8009502:	6260      	str	r0, [r4, #36]	; 0x24
 8009504:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009508:	6005      	str	r5, [r0, #0]
 800950a:	60c5      	str	r5, [r0, #12]
 800950c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800950e:	68eb      	ldr	r3, [r5, #12]
 8009510:	b183      	cbz	r3, 8009534 <_Balloc+0x42>
 8009512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800951a:	b9b8      	cbnz	r0, 800954c <_Balloc+0x5a>
 800951c:	2101      	movs	r1, #1
 800951e:	fa01 f506 	lsl.w	r5, r1, r6
 8009522:	1d6a      	adds	r2, r5, #5
 8009524:	0092      	lsls	r2, r2, #2
 8009526:	4620      	mov	r0, r4
 8009528:	f000 fbe1 	bl	8009cee <_calloc_r>
 800952c:	b160      	cbz	r0, 8009548 <_Balloc+0x56>
 800952e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009532:	e00e      	b.n	8009552 <_Balloc+0x60>
 8009534:	2221      	movs	r2, #33	; 0x21
 8009536:	2104      	movs	r1, #4
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fbd8 	bl	8009cee <_calloc_r>
 800953e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009540:	60e8      	str	r0, [r5, #12]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e4      	bne.n	8009512 <_Balloc+0x20>
 8009548:	2000      	movs	r0, #0
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	6802      	ldr	r2, [r0, #0]
 800954e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009552:	2300      	movs	r3, #0
 8009554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009558:	e7f7      	b.n	800954a <_Balloc+0x58>

0800955a <_Bfree>:
 800955a:	b570      	push	{r4, r5, r6, lr}
 800955c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800955e:	4606      	mov	r6, r0
 8009560:	460d      	mov	r5, r1
 8009562:	b93c      	cbnz	r4, 8009574 <_Bfree+0x1a>
 8009564:	2010      	movs	r0, #16
 8009566:	f7ff ff9f 	bl	80094a8 <malloc>
 800956a:	6270      	str	r0, [r6, #36]	; 0x24
 800956c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009570:	6004      	str	r4, [r0, #0]
 8009572:	60c4      	str	r4, [r0, #12]
 8009574:	b13d      	cbz	r5, 8009586 <_Bfree+0x2c>
 8009576:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009578:	686a      	ldr	r2, [r5, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009580:	6029      	str	r1, [r5, #0]
 8009582:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009586:	bd70      	pop	{r4, r5, r6, pc}

08009588 <__multadd>:
 8009588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800958c:	690d      	ldr	r5, [r1, #16]
 800958e:	461f      	mov	r7, r3
 8009590:	4606      	mov	r6, r0
 8009592:	460c      	mov	r4, r1
 8009594:	f101 0c14 	add.w	ip, r1, #20
 8009598:	2300      	movs	r3, #0
 800959a:	f8dc 0000 	ldr.w	r0, [ip]
 800959e:	b281      	uxth	r1, r0
 80095a0:	fb02 7101 	mla	r1, r2, r1, r7
 80095a4:	0c0f      	lsrs	r7, r1, #16
 80095a6:	0c00      	lsrs	r0, r0, #16
 80095a8:	fb02 7000 	mla	r0, r2, r0, r7
 80095ac:	b289      	uxth	r1, r1
 80095ae:	3301      	adds	r3, #1
 80095b0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80095b4:	429d      	cmp	r5, r3
 80095b6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80095ba:	f84c 1b04 	str.w	r1, [ip], #4
 80095be:	dcec      	bgt.n	800959a <__multadd+0x12>
 80095c0:	b1d7      	cbz	r7, 80095f8 <__multadd+0x70>
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	42ab      	cmp	r3, r5
 80095c6:	dc12      	bgt.n	80095ee <__multadd+0x66>
 80095c8:	6861      	ldr	r1, [r4, #4]
 80095ca:	4630      	mov	r0, r6
 80095cc:	3101      	adds	r1, #1
 80095ce:	f7ff ff90 	bl	80094f2 <_Balloc>
 80095d2:	6922      	ldr	r2, [r4, #16]
 80095d4:	3202      	adds	r2, #2
 80095d6:	f104 010c 	add.w	r1, r4, #12
 80095da:	4680      	mov	r8, r0
 80095dc:	0092      	lsls	r2, r2, #2
 80095de:	300c      	adds	r0, #12
 80095e0:	f7ff ff7c 	bl	80094dc <memcpy>
 80095e4:	4621      	mov	r1, r4
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7ff ffb7 	bl	800955a <_Bfree>
 80095ec:	4644      	mov	r4, r8
 80095ee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095f2:	3501      	adds	r5, #1
 80095f4:	615f      	str	r7, [r3, #20]
 80095f6:	6125      	str	r5, [r4, #16]
 80095f8:	4620      	mov	r0, r4
 80095fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095fe <__s2b>:
 80095fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009602:	460c      	mov	r4, r1
 8009604:	4615      	mov	r5, r2
 8009606:	461f      	mov	r7, r3
 8009608:	2209      	movs	r2, #9
 800960a:	3308      	adds	r3, #8
 800960c:	4606      	mov	r6, r0
 800960e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009612:	2100      	movs	r1, #0
 8009614:	2201      	movs	r2, #1
 8009616:	429a      	cmp	r2, r3
 8009618:	db20      	blt.n	800965c <__s2b+0x5e>
 800961a:	4630      	mov	r0, r6
 800961c:	f7ff ff69 	bl	80094f2 <_Balloc>
 8009620:	9b08      	ldr	r3, [sp, #32]
 8009622:	6143      	str	r3, [r0, #20]
 8009624:	2d09      	cmp	r5, #9
 8009626:	f04f 0301 	mov.w	r3, #1
 800962a:	6103      	str	r3, [r0, #16]
 800962c:	dd19      	ble.n	8009662 <__s2b+0x64>
 800962e:	f104 0809 	add.w	r8, r4, #9
 8009632:	46c1      	mov	r9, r8
 8009634:	442c      	add	r4, r5
 8009636:	f819 3b01 	ldrb.w	r3, [r9], #1
 800963a:	4601      	mov	r1, r0
 800963c:	3b30      	subs	r3, #48	; 0x30
 800963e:	220a      	movs	r2, #10
 8009640:	4630      	mov	r0, r6
 8009642:	f7ff ffa1 	bl	8009588 <__multadd>
 8009646:	45a1      	cmp	r9, r4
 8009648:	d1f5      	bne.n	8009636 <__s2b+0x38>
 800964a:	eb08 0405 	add.w	r4, r8, r5
 800964e:	3c08      	subs	r4, #8
 8009650:	1b2d      	subs	r5, r5, r4
 8009652:	1963      	adds	r3, r4, r5
 8009654:	42bb      	cmp	r3, r7
 8009656:	db07      	blt.n	8009668 <__s2b+0x6a>
 8009658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965c:	0052      	lsls	r2, r2, #1
 800965e:	3101      	adds	r1, #1
 8009660:	e7d9      	b.n	8009616 <__s2b+0x18>
 8009662:	340a      	adds	r4, #10
 8009664:	2509      	movs	r5, #9
 8009666:	e7f3      	b.n	8009650 <__s2b+0x52>
 8009668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800966c:	4601      	mov	r1, r0
 800966e:	3b30      	subs	r3, #48	; 0x30
 8009670:	220a      	movs	r2, #10
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff ff88 	bl	8009588 <__multadd>
 8009678:	e7eb      	b.n	8009652 <__s2b+0x54>

0800967a <__hi0bits>:
 800967a:	0c02      	lsrs	r2, r0, #16
 800967c:	0412      	lsls	r2, r2, #16
 800967e:	4603      	mov	r3, r0
 8009680:	b9b2      	cbnz	r2, 80096b0 <__hi0bits+0x36>
 8009682:	0403      	lsls	r3, r0, #16
 8009684:	2010      	movs	r0, #16
 8009686:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800968a:	bf04      	itt	eq
 800968c:	021b      	lsleq	r3, r3, #8
 800968e:	3008      	addeq	r0, #8
 8009690:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009694:	bf04      	itt	eq
 8009696:	011b      	lsleq	r3, r3, #4
 8009698:	3004      	addeq	r0, #4
 800969a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800969e:	bf04      	itt	eq
 80096a0:	009b      	lsleq	r3, r3, #2
 80096a2:	3002      	addeq	r0, #2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	db06      	blt.n	80096b6 <__hi0bits+0x3c>
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	d503      	bpl.n	80096b4 <__hi0bits+0x3a>
 80096ac:	3001      	adds	r0, #1
 80096ae:	4770      	bx	lr
 80096b0:	2000      	movs	r0, #0
 80096b2:	e7e8      	b.n	8009686 <__hi0bits+0xc>
 80096b4:	2020      	movs	r0, #32
 80096b6:	4770      	bx	lr

080096b8 <__lo0bits>:
 80096b8:	6803      	ldr	r3, [r0, #0]
 80096ba:	f013 0207 	ands.w	r2, r3, #7
 80096be:	4601      	mov	r1, r0
 80096c0:	d00b      	beq.n	80096da <__lo0bits+0x22>
 80096c2:	07da      	lsls	r2, r3, #31
 80096c4:	d423      	bmi.n	800970e <__lo0bits+0x56>
 80096c6:	0798      	lsls	r0, r3, #30
 80096c8:	bf49      	itett	mi
 80096ca:	085b      	lsrmi	r3, r3, #1
 80096cc:	089b      	lsrpl	r3, r3, #2
 80096ce:	2001      	movmi	r0, #1
 80096d0:	600b      	strmi	r3, [r1, #0]
 80096d2:	bf5c      	itt	pl
 80096d4:	600b      	strpl	r3, [r1, #0]
 80096d6:	2002      	movpl	r0, #2
 80096d8:	4770      	bx	lr
 80096da:	b298      	uxth	r0, r3
 80096dc:	b9a8      	cbnz	r0, 800970a <__lo0bits+0x52>
 80096de:	0c1b      	lsrs	r3, r3, #16
 80096e0:	2010      	movs	r0, #16
 80096e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096e6:	bf04      	itt	eq
 80096e8:	0a1b      	lsreq	r3, r3, #8
 80096ea:	3008      	addeq	r0, #8
 80096ec:	071a      	lsls	r2, r3, #28
 80096ee:	bf04      	itt	eq
 80096f0:	091b      	lsreq	r3, r3, #4
 80096f2:	3004      	addeq	r0, #4
 80096f4:	079a      	lsls	r2, r3, #30
 80096f6:	bf04      	itt	eq
 80096f8:	089b      	lsreq	r3, r3, #2
 80096fa:	3002      	addeq	r0, #2
 80096fc:	07da      	lsls	r2, r3, #31
 80096fe:	d402      	bmi.n	8009706 <__lo0bits+0x4e>
 8009700:	085b      	lsrs	r3, r3, #1
 8009702:	d006      	beq.n	8009712 <__lo0bits+0x5a>
 8009704:	3001      	adds	r0, #1
 8009706:	600b      	str	r3, [r1, #0]
 8009708:	4770      	bx	lr
 800970a:	4610      	mov	r0, r2
 800970c:	e7e9      	b.n	80096e2 <__lo0bits+0x2a>
 800970e:	2000      	movs	r0, #0
 8009710:	4770      	bx	lr
 8009712:	2020      	movs	r0, #32
 8009714:	4770      	bx	lr

08009716 <__i2b>:
 8009716:	b510      	push	{r4, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	2101      	movs	r1, #1
 800971c:	f7ff fee9 	bl	80094f2 <_Balloc>
 8009720:	2201      	movs	r2, #1
 8009722:	6144      	str	r4, [r0, #20]
 8009724:	6102      	str	r2, [r0, #16]
 8009726:	bd10      	pop	{r4, pc}

08009728 <__multiply>:
 8009728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	4614      	mov	r4, r2
 800972e:	690a      	ldr	r2, [r1, #16]
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	429a      	cmp	r2, r3
 8009734:	bfb8      	it	lt
 8009736:	460b      	movlt	r3, r1
 8009738:	4688      	mov	r8, r1
 800973a:	bfbc      	itt	lt
 800973c:	46a0      	movlt	r8, r4
 800973e:	461c      	movlt	r4, r3
 8009740:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009744:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009748:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800974c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009750:	eb07 0609 	add.w	r6, r7, r9
 8009754:	42b3      	cmp	r3, r6
 8009756:	bfb8      	it	lt
 8009758:	3101      	addlt	r1, #1
 800975a:	f7ff feca 	bl	80094f2 <_Balloc>
 800975e:	f100 0514 	add.w	r5, r0, #20
 8009762:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009766:	462b      	mov	r3, r5
 8009768:	2200      	movs	r2, #0
 800976a:	4573      	cmp	r3, lr
 800976c:	d316      	bcc.n	800979c <__multiply+0x74>
 800976e:	f104 0214 	add.w	r2, r4, #20
 8009772:	f108 0114 	add.w	r1, r8, #20
 8009776:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800977a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	9201      	str	r2, [sp, #4]
 8009784:	4293      	cmp	r3, r2
 8009786:	d80c      	bhi.n	80097a2 <__multiply+0x7a>
 8009788:	2e00      	cmp	r6, #0
 800978a:	dd03      	ble.n	8009794 <__multiply+0x6c>
 800978c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009790:	2b00      	cmp	r3, #0
 8009792:	d05d      	beq.n	8009850 <__multiply+0x128>
 8009794:	6106      	str	r6, [r0, #16]
 8009796:	b003      	add	sp, #12
 8009798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979c:	f843 2b04 	str.w	r2, [r3], #4
 80097a0:	e7e3      	b.n	800976a <__multiply+0x42>
 80097a2:	f8b2 b000 	ldrh.w	fp, [r2]
 80097a6:	f1bb 0f00 	cmp.w	fp, #0
 80097aa:	d023      	beq.n	80097f4 <__multiply+0xcc>
 80097ac:	4689      	mov	r9, r1
 80097ae:	46ac      	mov	ip, r5
 80097b0:	f04f 0800 	mov.w	r8, #0
 80097b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80097b8:	f8dc a000 	ldr.w	sl, [ip]
 80097bc:	b2a3      	uxth	r3, r4
 80097be:	fa1f fa8a 	uxth.w	sl, sl
 80097c2:	fb0b a303 	mla	r3, fp, r3, sl
 80097c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80097ca:	f8dc 4000 	ldr.w	r4, [ip]
 80097ce:	4443      	add	r3, r8
 80097d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80097d4:	fb0b 840a 	mla	r4, fp, sl, r8
 80097d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80097dc:	46e2      	mov	sl, ip
 80097de:	b29b      	uxth	r3, r3
 80097e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80097e4:	454f      	cmp	r7, r9
 80097e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80097ea:	f84a 3b04 	str.w	r3, [sl], #4
 80097ee:	d82b      	bhi.n	8009848 <__multiply+0x120>
 80097f0:	f8cc 8004 	str.w	r8, [ip, #4]
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80097fa:	3204      	adds	r2, #4
 80097fc:	f1ba 0f00 	cmp.w	sl, #0
 8009800:	d020      	beq.n	8009844 <__multiply+0x11c>
 8009802:	682b      	ldr	r3, [r5, #0]
 8009804:	4689      	mov	r9, r1
 8009806:	46a8      	mov	r8, r5
 8009808:	f04f 0b00 	mov.w	fp, #0
 800980c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009810:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009814:	fb0a 440c 	mla	r4, sl, ip, r4
 8009818:	445c      	add	r4, fp
 800981a:	46c4      	mov	ip, r8
 800981c:	b29b      	uxth	r3, r3
 800981e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009822:	f84c 3b04 	str.w	r3, [ip], #4
 8009826:	f859 3b04 	ldr.w	r3, [r9], #4
 800982a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800982e:	0c1b      	lsrs	r3, r3, #16
 8009830:	fb0a b303 	mla	r3, sl, r3, fp
 8009834:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009838:	454f      	cmp	r7, r9
 800983a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800983e:	d805      	bhi.n	800984c <__multiply+0x124>
 8009840:	f8c8 3004 	str.w	r3, [r8, #4]
 8009844:	3504      	adds	r5, #4
 8009846:	e79b      	b.n	8009780 <__multiply+0x58>
 8009848:	46d4      	mov	ip, sl
 800984a:	e7b3      	b.n	80097b4 <__multiply+0x8c>
 800984c:	46e0      	mov	r8, ip
 800984e:	e7dd      	b.n	800980c <__multiply+0xe4>
 8009850:	3e01      	subs	r6, #1
 8009852:	e799      	b.n	8009788 <__multiply+0x60>

08009854 <__pow5mult>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	4615      	mov	r5, r2
 800985a:	f012 0203 	ands.w	r2, r2, #3
 800985e:	4606      	mov	r6, r0
 8009860:	460f      	mov	r7, r1
 8009862:	d007      	beq.n	8009874 <__pow5mult+0x20>
 8009864:	3a01      	subs	r2, #1
 8009866:	4c21      	ldr	r4, [pc, #132]	; (80098ec <__pow5mult+0x98>)
 8009868:	2300      	movs	r3, #0
 800986a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800986e:	f7ff fe8b 	bl	8009588 <__multadd>
 8009872:	4607      	mov	r7, r0
 8009874:	10ad      	asrs	r5, r5, #2
 8009876:	d035      	beq.n	80098e4 <__pow5mult+0x90>
 8009878:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800987a:	b93c      	cbnz	r4, 800988c <__pow5mult+0x38>
 800987c:	2010      	movs	r0, #16
 800987e:	f7ff fe13 	bl	80094a8 <malloc>
 8009882:	6270      	str	r0, [r6, #36]	; 0x24
 8009884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009888:	6004      	str	r4, [r0, #0]
 800988a:	60c4      	str	r4, [r0, #12]
 800988c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009894:	b94c      	cbnz	r4, 80098aa <__pow5mult+0x56>
 8009896:	f240 2171 	movw	r1, #625	; 0x271
 800989a:	4630      	mov	r0, r6
 800989c:	f7ff ff3b 	bl	8009716 <__i2b>
 80098a0:	2300      	movs	r3, #0
 80098a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80098a6:	4604      	mov	r4, r0
 80098a8:	6003      	str	r3, [r0, #0]
 80098aa:	f04f 0800 	mov.w	r8, #0
 80098ae:	07eb      	lsls	r3, r5, #31
 80098b0:	d50a      	bpl.n	80098c8 <__pow5mult+0x74>
 80098b2:	4639      	mov	r1, r7
 80098b4:	4622      	mov	r2, r4
 80098b6:	4630      	mov	r0, r6
 80098b8:	f7ff ff36 	bl	8009728 <__multiply>
 80098bc:	4639      	mov	r1, r7
 80098be:	4681      	mov	r9, r0
 80098c0:	4630      	mov	r0, r6
 80098c2:	f7ff fe4a 	bl	800955a <_Bfree>
 80098c6:	464f      	mov	r7, r9
 80098c8:	106d      	asrs	r5, r5, #1
 80098ca:	d00b      	beq.n	80098e4 <__pow5mult+0x90>
 80098cc:	6820      	ldr	r0, [r4, #0]
 80098ce:	b938      	cbnz	r0, 80098e0 <__pow5mult+0x8c>
 80098d0:	4622      	mov	r2, r4
 80098d2:	4621      	mov	r1, r4
 80098d4:	4630      	mov	r0, r6
 80098d6:	f7ff ff27 	bl	8009728 <__multiply>
 80098da:	6020      	str	r0, [r4, #0]
 80098dc:	f8c0 8000 	str.w	r8, [r0]
 80098e0:	4604      	mov	r4, r0
 80098e2:	e7e4      	b.n	80098ae <__pow5mult+0x5a>
 80098e4:	4638      	mov	r0, r7
 80098e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ea:	bf00      	nop
 80098ec:	0800abd0 	.word	0x0800abd0

080098f0 <__lshift>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	460c      	mov	r4, r1
 80098f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098fa:	6923      	ldr	r3, [r4, #16]
 80098fc:	6849      	ldr	r1, [r1, #4]
 80098fe:	eb0a 0903 	add.w	r9, sl, r3
 8009902:	68a3      	ldr	r3, [r4, #8]
 8009904:	4607      	mov	r7, r0
 8009906:	4616      	mov	r6, r2
 8009908:	f109 0501 	add.w	r5, r9, #1
 800990c:	42ab      	cmp	r3, r5
 800990e:	db32      	blt.n	8009976 <__lshift+0x86>
 8009910:	4638      	mov	r0, r7
 8009912:	f7ff fdee 	bl	80094f2 <_Balloc>
 8009916:	2300      	movs	r3, #0
 8009918:	4680      	mov	r8, r0
 800991a:	f100 0114 	add.w	r1, r0, #20
 800991e:	461a      	mov	r2, r3
 8009920:	4553      	cmp	r3, sl
 8009922:	db2b      	blt.n	800997c <__lshift+0x8c>
 8009924:	6920      	ldr	r0, [r4, #16]
 8009926:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800992a:	f104 0314 	add.w	r3, r4, #20
 800992e:	f016 021f 	ands.w	r2, r6, #31
 8009932:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009936:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800993a:	d025      	beq.n	8009988 <__lshift+0x98>
 800993c:	f1c2 0e20 	rsb	lr, r2, #32
 8009940:	2000      	movs	r0, #0
 8009942:	681e      	ldr	r6, [r3, #0]
 8009944:	468a      	mov	sl, r1
 8009946:	4096      	lsls	r6, r2
 8009948:	4330      	orrs	r0, r6
 800994a:	f84a 0b04 	str.w	r0, [sl], #4
 800994e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009952:	459c      	cmp	ip, r3
 8009954:	fa20 f00e 	lsr.w	r0, r0, lr
 8009958:	d814      	bhi.n	8009984 <__lshift+0x94>
 800995a:	6048      	str	r0, [r1, #4]
 800995c:	b108      	cbz	r0, 8009962 <__lshift+0x72>
 800995e:	f109 0502 	add.w	r5, r9, #2
 8009962:	3d01      	subs	r5, #1
 8009964:	4638      	mov	r0, r7
 8009966:	f8c8 5010 	str.w	r5, [r8, #16]
 800996a:	4621      	mov	r1, r4
 800996c:	f7ff fdf5 	bl	800955a <_Bfree>
 8009970:	4640      	mov	r0, r8
 8009972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009976:	3101      	adds	r1, #1
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	e7c7      	b.n	800990c <__lshift+0x1c>
 800997c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009980:	3301      	adds	r3, #1
 8009982:	e7cd      	b.n	8009920 <__lshift+0x30>
 8009984:	4651      	mov	r1, sl
 8009986:	e7dc      	b.n	8009942 <__lshift+0x52>
 8009988:	3904      	subs	r1, #4
 800998a:	f853 2b04 	ldr.w	r2, [r3], #4
 800998e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009992:	459c      	cmp	ip, r3
 8009994:	d8f9      	bhi.n	800998a <__lshift+0x9a>
 8009996:	e7e4      	b.n	8009962 <__lshift+0x72>

08009998 <__mcmp>:
 8009998:	6903      	ldr	r3, [r0, #16]
 800999a:	690a      	ldr	r2, [r1, #16]
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	b530      	push	{r4, r5, lr}
 80099a0:	d10c      	bne.n	80099bc <__mcmp+0x24>
 80099a2:	0092      	lsls	r2, r2, #2
 80099a4:	3014      	adds	r0, #20
 80099a6:	3114      	adds	r1, #20
 80099a8:	1884      	adds	r4, r0, r2
 80099aa:	4411      	add	r1, r2
 80099ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099b4:	4295      	cmp	r5, r2
 80099b6:	d003      	beq.n	80099c0 <__mcmp+0x28>
 80099b8:	d305      	bcc.n	80099c6 <__mcmp+0x2e>
 80099ba:	2301      	movs	r3, #1
 80099bc:	4618      	mov	r0, r3
 80099be:	bd30      	pop	{r4, r5, pc}
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d3f3      	bcc.n	80099ac <__mcmp+0x14>
 80099c4:	e7fa      	b.n	80099bc <__mcmp+0x24>
 80099c6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ca:	e7f7      	b.n	80099bc <__mcmp+0x24>

080099cc <__mdiff>:
 80099cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d0:	460d      	mov	r5, r1
 80099d2:	4607      	mov	r7, r0
 80099d4:	4611      	mov	r1, r2
 80099d6:	4628      	mov	r0, r5
 80099d8:	4614      	mov	r4, r2
 80099da:	f7ff ffdd 	bl	8009998 <__mcmp>
 80099de:	1e06      	subs	r6, r0, #0
 80099e0:	d108      	bne.n	80099f4 <__mdiff+0x28>
 80099e2:	4631      	mov	r1, r6
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7ff fd84 	bl	80094f2 <_Balloc>
 80099ea:	2301      	movs	r3, #1
 80099ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80099f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f4:	bfa4      	itt	ge
 80099f6:	4623      	movge	r3, r4
 80099f8:	462c      	movge	r4, r5
 80099fa:	4638      	mov	r0, r7
 80099fc:	6861      	ldr	r1, [r4, #4]
 80099fe:	bfa6      	itte	ge
 8009a00:	461d      	movge	r5, r3
 8009a02:	2600      	movge	r6, #0
 8009a04:	2601      	movlt	r6, #1
 8009a06:	f7ff fd74 	bl	80094f2 <_Balloc>
 8009a0a:	692b      	ldr	r3, [r5, #16]
 8009a0c:	60c6      	str	r6, [r0, #12]
 8009a0e:	6926      	ldr	r6, [r4, #16]
 8009a10:	f105 0914 	add.w	r9, r5, #20
 8009a14:	f104 0214 	add.w	r2, r4, #20
 8009a18:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009a1c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009a20:	f100 0514 	add.w	r5, r0, #20
 8009a24:	f04f 0e00 	mov.w	lr, #0
 8009a28:	f852 ab04 	ldr.w	sl, [r2], #4
 8009a2c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a30:	fa1e f18a 	uxtah	r1, lr, sl
 8009a34:	b2a3      	uxth	r3, r4
 8009a36:	1ac9      	subs	r1, r1, r3
 8009a38:	0c23      	lsrs	r3, r4, #16
 8009a3a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009a3e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a42:	b289      	uxth	r1, r1
 8009a44:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009a48:	45c8      	cmp	r8, r9
 8009a4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a4e:	4694      	mov	ip, r2
 8009a50:	f845 3b04 	str.w	r3, [r5], #4
 8009a54:	d8e8      	bhi.n	8009a28 <__mdiff+0x5c>
 8009a56:	45bc      	cmp	ip, r7
 8009a58:	d304      	bcc.n	8009a64 <__mdiff+0x98>
 8009a5a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009a5e:	b183      	cbz	r3, 8009a82 <__mdiff+0xb6>
 8009a60:	6106      	str	r6, [r0, #16]
 8009a62:	e7c5      	b.n	80099f0 <__mdiff+0x24>
 8009a64:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a68:	fa1e f381 	uxtah	r3, lr, r1
 8009a6c:	141a      	asrs	r2, r3, #16
 8009a6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a78:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009a7c:	f845 3b04 	str.w	r3, [r5], #4
 8009a80:	e7e9      	b.n	8009a56 <__mdiff+0x8a>
 8009a82:	3e01      	subs	r6, #1
 8009a84:	e7e9      	b.n	8009a5a <__mdiff+0x8e>
	...

08009a88 <__ulp>:
 8009a88:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <__ulp+0x4c>)
 8009a8a:	ee10 2a90 	vmov	r2, s1
 8009a8e:	401a      	ands	r2, r3
 8009a90:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dd04      	ble.n	8009aa2 <__ulp+0x1a>
 8009a98:	2000      	movs	r0, #0
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	ec41 0b10 	vmov	d0, r0, r1
 8009aa0:	4770      	bx	lr
 8009aa2:	425b      	negs	r3, r3
 8009aa4:	151b      	asrs	r3, r3, #20
 8009aa6:	2b13      	cmp	r3, #19
 8009aa8:	f04f 0000 	mov.w	r0, #0
 8009aac:	f04f 0100 	mov.w	r1, #0
 8009ab0:	dc04      	bgt.n	8009abc <__ulp+0x34>
 8009ab2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009ab6:	fa42 f103 	asr.w	r1, r2, r3
 8009aba:	e7ef      	b.n	8009a9c <__ulp+0x14>
 8009abc:	3b14      	subs	r3, #20
 8009abe:	2b1e      	cmp	r3, #30
 8009ac0:	f04f 0201 	mov.w	r2, #1
 8009ac4:	bfda      	itte	le
 8009ac6:	f1c3 031f 	rsble	r3, r3, #31
 8009aca:	fa02 f303 	lslle.w	r3, r2, r3
 8009ace:	4613      	movgt	r3, r2
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	e7e3      	b.n	8009a9c <__ulp+0x14>
 8009ad4:	7ff00000 	.word	0x7ff00000

08009ad8 <__b2d>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	6905      	ldr	r5, [r0, #16]
 8009adc:	f100 0714 	add.w	r7, r0, #20
 8009ae0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ae4:	1f2e      	subs	r6, r5, #4
 8009ae6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009aea:	4620      	mov	r0, r4
 8009aec:	f7ff fdc5 	bl	800967a <__hi0bits>
 8009af0:	f1c0 0320 	rsb	r3, r0, #32
 8009af4:	280a      	cmp	r0, #10
 8009af6:	600b      	str	r3, [r1, #0]
 8009af8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009b70 <__b2d+0x98>
 8009afc:	dc14      	bgt.n	8009b28 <__b2d+0x50>
 8009afe:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b02:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b06:	42b7      	cmp	r7, r6
 8009b08:	ea41 030c 	orr.w	r3, r1, ip
 8009b0c:	bf34      	ite	cc
 8009b0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b12:	2100      	movcs	r1, #0
 8009b14:	3015      	adds	r0, #21
 8009b16:	fa04 f000 	lsl.w	r0, r4, r0
 8009b1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b1e:	ea40 0201 	orr.w	r2, r0, r1
 8009b22:	ec43 2b10 	vmov	d0, r2, r3
 8009b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b28:	42b7      	cmp	r7, r6
 8009b2a:	bf3a      	itte	cc
 8009b2c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b34:	2100      	movcs	r1, #0
 8009b36:	380b      	subs	r0, #11
 8009b38:	d015      	beq.n	8009b66 <__b2d+0x8e>
 8009b3a:	4084      	lsls	r4, r0
 8009b3c:	f1c0 0520 	rsb	r5, r0, #32
 8009b40:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009b44:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009b48:	42be      	cmp	r6, r7
 8009b4a:	fa21 fc05 	lsr.w	ip, r1, r5
 8009b4e:	ea44 030c 	orr.w	r3, r4, ip
 8009b52:	bf8c      	ite	hi
 8009b54:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009b58:	2400      	movls	r4, #0
 8009b5a:	fa01 f000 	lsl.w	r0, r1, r0
 8009b5e:	40ec      	lsrs	r4, r5
 8009b60:	ea40 0204 	orr.w	r2, r0, r4
 8009b64:	e7dd      	b.n	8009b22 <__b2d+0x4a>
 8009b66:	ea44 030c 	orr.w	r3, r4, ip
 8009b6a:	460a      	mov	r2, r1
 8009b6c:	e7d9      	b.n	8009b22 <__b2d+0x4a>
 8009b6e:	bf00      	nop
 8009b70:	3ff00000 	.word	0x3ff00000

08009b74 <__d2b>:
 8009b74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b78:	460e      	mov	r6, r1
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	ec59 8b10 	vmov	r8, r9, d0
 8009b80:	4615      	mov	r5, r2
 8009b82:	f7ff fcb6 	bl	80094f2 <_Balloc>
 8009b86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b90:	bb34      	cbnz	r4, 8009be0 <__d2b+0x6c>
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	f1b8 0300 	subs.w	r3, r8, #0
 8009b98:	d027      	beq.n	8009bea <__d2b+0x76>
 8009b9a:	a802      	add	r0, sp, #8
 8009b9c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009ba0:	f7ff fd8a 	bl	80096b8 <__lo0bits>
 8009ba4:	9900      	ldr	r1, [sp, #0]
 8009ba6:	b1f0      	cbz	r0, 8009be6 <__d2b+0x72>
 8009ba8:	9a01      	ldr	r2, [sp, #4]
 8009baa:	f1c0 0320 	rsb	r3, r0, #32
 8009bae:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb2:	430b      	orrs	r3, r1
 8009bb4:	40c2      	lsrs	r2, r0
 8009bb6:	617b      	str	r3, [r7, #20]
 8009bb8:	9201      	str	r2, [sp, #4]
 8009bba:	9b01      	ldr	r3, [sp, #4]
 8009bbc:	61bb      	str	r3, [r7, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bf14      	ite	ne
 8009bc2:	2102      	movne	r1, #2
 8009bc4:	2101      	moveq	r1, #1
 8009bc6:	6139      	str	r1, [r7, #16]
 8009bc8:	b1c4      	cbz	r4, 8009bfc <__d2b+0x88>
 8009bca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009bce:	4404      	add	r4, r0
 8009bd0:	6034      	str	r4, [r6, #0]
 8009bd2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bd6:	6028      	str	r0, [r5, #0]
 8009bd8:	4638      	mov	r0, r7
 8009bda:	b003      	add	sp, #12
 8009bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009be4:	e7d5      	b.n	8009b92 <__d2b+0x1e>
 8009be6:	6179      	str	r1, [r7, #20]
 8009be8:	e7e7      	b.n	8009bba <__d2b+0x46>
 8009bea:	a801      	add	r0, sp, #4
 8009bec:	f7ff fd64 	bl	80096b8 <__lo0bits>
 8009bf0:	9b01      	ldr	r3, [sp, #4]
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	2101      	movs	r1, #1
 8009bf6:	6139      	str	r1, [r7, #16]
 8009bf8:	3020      	adds	r0, #32
 8009bfa:	e7e5      	b.n	8009bc8 <__d2b+0x54>
 8009bfc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009c00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c04:	6030      	str	r0, [r6, #0]
 8009c06:	6918      	ldr	r0, [r3, #16]
 8009c08:	f7ff fd37 	bl	800967a <__hi0bits>
 8009c0c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c10:	e7e1      	b.n	8009bd6 <__d2b+0x62>

08009c12 <__ratio>:
 8009c12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c16:	4688      	mov	r8, r1
 8009c18:	4669      	mov	r1, sp
 8009c1a:	4681      	mov	r9, r0
 8009c1c:	f7ff ff5c 	bl	8009ad8 <__b2d>
 8009c20:	a901      	add	r1, sp, #4
 8009c22:	4640      	mov	r0, r8
 8009c24:	ec57 6b10 	vmov	r6, r7, d0
 8009c28:	f7ff ff56 	bl	8009ad8 <__b2d>
 8009c2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c34:	eba3 0c02 	sub.w	ip, r3, r2
 8009c38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c42:	ec5b ab10 	vmov	sl, fp, d0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bfce      	itee	gt
 8009c4a:	463a      	movgt	r2, r7
 8009c4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c50:	465a      	movle	r2, fp
 8009c52:	4659      	mov	r1, fp
 8009c54:	463d      	mov	r5, r7
 8009c56:	bfd4      	ite	le
 8009c58:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009c5c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009c60:	4630      	mov	r0, r6
 8009c62:	ee10 2a10 	vmov	r2, s0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4629      	mov	r1, r5
 8009c6a:	f7f6 fdf7 	bl	800085c <__aeabi_ddiv>
 8009c6e:	ec41 0b10 	vmov	d0, r0, r1
 8009c72:	b003      	add	sp, #12
 8009c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c78 <__copybits>:
 8009c78:	3901      	subs	r1, #1
 8009c7a:	b510      	push	{r4, lr}
 8009c7c:	1149      	asrs	r1, r1, #5
 8009c7e:	6914      	ldr	r4, [r2, #16]
 8009c80:	3101      	adds	r1, #1
 8009c82:	f102 0314 	add.w	r3, r2, #20
 8009c86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	4602      	mov	r2, r0
 8009c92:	d303      	bcc.n	8009c9c <__copybits+0x24>
 8009c94:	2300      	movs	r3, #0
 8009c96:	428a      	cmp	r2, r1
 8009c98:	d305      	bcc.n	8009ca6 <__copybits+0x2e>
 8009c9a:	bd10      	pop	{r4, pc}
 8009c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca0:	f840 2b04 	str.w	r2, [r0], #4
 8009ca4:	e7f3      	b.n	8009c8e <__copybits+0x16>
 8009ca6:	f842 3b04 	str.w	r3, [r2], #4
 8009caa:	e7f4      	b.n	8009c96 <__copybits+0x1e>

08009cac <__any_on>:
 8009cac:	f100 0214 	add.w	r2, r0, #20
 8009cb0:	6900      	ldr	r0, [r0, #16]
 8009cb2:	114b      	asrs	r3, r1, #5
 8009cb4:	4298      	cmp	r0, r3
 8009cb6:	b510      	push	{r4, lr}
 8009cb8:	db11      	blt.n	8009cde <__any_on+0x32>
 8009cba:	dd0a      	ble.n	8009cd2 <__any_on+0x26>
 8009cbc:	f011 011f 	ands.w	r1, r1, #31
 8009cc0:	d007      	beq.n	8009cd2 <__any_on+0x26>
 8009cc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cc6:	fa24 f001 	lsr.w	r0, r4, r1
 8009cca:	fa00 f101 	lsl.w	r1, r0, r1
 8009cce:	428c      	cmp	r4, r1
 8009cd0:	d10b      	bne.n	8009cea <__any_on+0x3e>
 8009cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d803      	bhi.n	8009ce2 <__any_on+0x36>
 8009cda:	2000      	movs	r0, #0
 8009cdc:	bd10      	pop	{r4, pc}
 8009cde:	4603      	mov	r3, r0
 8009ce0:	e7f7      	b.n	8009cd2 <__any_on+0x26>
 8009ce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d0f5      	beq.n	8009cd6 <__any_on+0x2a>
 8009cea:	2001      	movs	r0, #1
 8009cec:	e7f6      	b.n	8009cdc <__any_on+0x30>

08009cee <_calloc_r>:
 8009cee:	b538      	push	{r3, r4, r5, lr}
 8009cf0:	fb02 f401 	mul.w	r4, r2, r1
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	f000 f857 	bl	8009da8 <_malloc_r>
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	b118      	cbz	r0, 8009d06 <_calloc_r+0x18>
 8009cfe:	4622      	mov	r2, r4
 8009d00:	2100      	movs	r1, #0
 8009d02:	f7fc fbed 	bl	80064e0 <memset>
 8009d06:	4628      	mov	r0, r5
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
	...

08009d0c <_free_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4605      	mov	r5, r0
 8009d10:	2900      	cmp	r1, #0
 8009d12:	d045      	beq.n	8009da0 <_free_r+0x94>
 8009d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d18:	1f0c      	subs	r4, r1, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	bfb8      	it	lt
 8009d1e:	18e4      	addlt	r4, r4, r3
 8009d20:	f000 fdc3 	bl	800a8aa <__malloc_lock>
 8009d24:	4a1f      	ldr	r2, [pc, #124]	; (8009da4 <_free_r+0x98>)
 8009d26:	6813      	ldr	r3, [r2, #0]
 8009d28:	4610      	mov	r0, r2
 8009d2a:	b933      	cbnz	r3, 8009d3a <_free_r+0x2e>
 8009d2c:	6063      	str	r3, [r4, #4]
 8009d2e:	6014      	str	r4, [r2, #0]
 8009d30:	4628      	mov	r0, r5
 8009d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d36:	f000 bdb9 	b.w	800a8ac <__malloc_unlock>
 8009d3a:	42a3      	cmp	r3, r4
 8009d3c:	d90c      	bls.n	8009d58 <_free_r+0x4c>
 8009d3e:	6821      	ldr	r1, [r4, #0]
 8009d40:	1862      	adds	r2, r4, r1
 8009d42:	4293      	cmp	r3, r2
 8009d44:	bf04      	itt	eq
 8009d46:	681a      	ldreq	r2, [r3, #0]
 8009d48:	685b      	ldreq	r3, [r3, #4]
 8009d4a:	6063      	str	r3, [r4, #4]
 8009d4c:	bf04      	itt	eq
 8009d4e:	1852      	addeq	r2, r2, r1
 8009d50:	6022      	streq	r2, [r4, #0]
 8009d52:	6004      	str	r4, [r0, #0]
 8009d54:	e7ec      	b.n	8009d30 <_free_r+0x24>
 8009d56:	4613      	mov	r3, r2
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	b10a      	cbz	r2, 8009d60 <_free_r+0x54>
 8009d5c:	42a2      	cmp	r2, r4
 8009d5e:	d9fa      	bls.n	8009d56 <_free_r+0x4a>
 8009d60:	6819      	ldr	r1, [r3, #0]
 8009d62:	1858      	adds	r0, r3, r1
 8009d64:	42a0      	cmp	r0, r4
 8009d66:	d10b      	bne.n	8009d80 <_free_r+0x74>
 8009d68:	6820      	ldr	r0, [r4, #0]
 8009d6a:	4401      	add	r1, r0
 8009d6c:	1858      	adds	r0, r3, r1
 8009d6e:	4282      	cmp	r2, r0
 8009d70:	6019      	str	r1, [r3, #0]
 8009d72:	d1dd      	bne.n	8009d30 <_free_r+0x24>
 8009d74:	6810      	ldr	r0, [r2, #0]
 8009d76:	6852      	ldr	r2, [r2, #4]
 8009d78:	605a      	str	r2, [r3, #4]
 8009d7a:	4401      	add	r1, r0
 8009d7c:	6019      	str	r1, [r3, #0]
 8009d7e:	e7d7      	b.n	8009d30 <_free_r+0x24>
 8009d80:	d902      	bls.n	8009d88 <_free_r+0x7c>
 8009d82:	230c      	movs	r3, #12
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	e7d3      	b.n	8009d30 <_free_r+0x24>
 8009d88:	6820      	ldr	r0, [r4, #0]
 8009d8a:	1821      	adds	r1, r4, r0
 8009d8c:	428a      	cmp	r2, r1
 8009d8e:	bf04      	itt	eq
 8009d90:	6811      	ldreq	r1, [r2, #0]
 8009d92:	6852      	ldreq	r2, [r2, #4]
 8009d94:	6062      	str	r2, [r4, #4]
 8009d96:	bf04      	itt	eq
 8009d98:	1809      	addeq	r1, r1, r0
 8009d9a:	6021      	streq	r1, [r4, #0]
 8009d9c:	605c      	str	r4, [r3, #4]
 8009d9e:	e7c7      	b.n	8009d30 <_free_r+0x24>
 8009da0:	bd38      	pop	{r3, r4, r5, pc}
 8009da2:	bf00      	nop
 8009da4:	20000200 	.word	0x20000200

08009da8 <_malloc_r>:
 8009da8:	b570      	push	{r4, r5, r6, lr}
 8009daa:	1ccd      	adds	r5, r1, #3
 8009dac:	f025 0503 	bic.w	r5, r5, #3
 8009db0:	3508      	adds	r5, #8
 8009db2:	2d0c      	cmp	r5, #12
 8009db4:	bf38      	it	cc
 8009db6:	250c      	movcc	r5, #12
 8009db8:	2d00      	cmp	r5, #0
 8009dba:	4606      	mov	r6, r0
 8009dbc:	db01      	blt.n	8009dc2 <_malloc_r+0x1a>
 8009dbe:	42a9      	cmp	r1, r5
 8009dc0:	d903      	bls.n	8009dca <_malloc_r+0x22>
 8009dc2:	230c      	movs	r3, #12
 8009dc4:	6033      	str	r3, [r6, #0]
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	bd70      	pop	{r4, r5, r6, pc}
 8009dca:	f000 fd6e 	bl	800a8aa <__malloc_lock>
 8009dce:	4a21      	ldr	r2, [pc, #132]	; (8009e54 <_malloc_r+0xac>)
 8009dd0:	6814      	ldr	r4, [r2, #0]
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	b991      	cbnz	r1, 8009dfc <_malloc_r+0x54>
 8009dd6:	4c20      	ldr	r4, [pc, #128]	; (8009e58 <_malloc_r+0xb0>)
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	b91b      	cbnz	r3, 8009de4 <_malloc_r+0x3c>
 8009ddc:	4630      	mov	r0, r6
 8009dde:	f000 facf 	bl	800a380 <_sbrk_r>
 8009de2:	6020      	str	r0, [r4, #0]
 8009de4:	4629      	mov	r1, r5
 8009de6:	4630      	mov	r0, r6
 8009de8:	f000 faca 	bl	800a380 <_sbrk_r>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d124      	bne.n	8009e3a <_malloc_r+0x92>
 8009df0:	230c      	movs	r3, #12
 8009df2:	6033      	str	r3, [r6, #0]
 8009df4:	4630      	mov	r0, r6
 8009df6:	f000 fd59 	bl	800a8ac <__malloc_unlock>
 8009dfa:	e7e4      	b.n	8009dc6 <_malloc_r+0x1e>
 8009dfc:	680b      	ldr	r3, [r1, #0]
 8009dfe:	1b5b      	subs	r3, r3, r5
 8009e00:	d418      	bmi.n	8009e34 <_malloc_r+0x8c>
 8009e02:	2b0b      	cmp	r3, #11
 8009e04:	d90f      	bls.n	8009e26 <_malloc_r+0x7e>
 8009e06:	600b      	str	r3, [r1, #0]
 8009e08:	50cd      	str	r5, [r1, r3]
 8009e0a:	18cc      	adds	r4, r1, r3
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 fd4d 	bl	800a8ac <__malloc_unlock>
 8009e12:	f104 000b 	add.w	r0, r4, #11
 8009e16:	1d23      	adds	r3, r4, #4
 8009e18:	f020 0007 	bic.w	r0, r0, #7
 8009e1c:	1ac3      	subs	r3, r0, r3
 8009e1e:	d0d3      	beq.n	8009dc8 <_malloc_r+0x20>
 8009e20:	425a      	negs	r2, r3
 8009e22:	50e2      	str	r2, [r4, r3]
 8009e24:	e7d0      	b.n	8009dc8 <_malloc_r+0x20>
 8009e26:	428c      	cmp	r4, r1
 8009e28:	684b      	ldr	r3, [r1, #4]
 8009e2a:	bf16      	itet	ne
 8009e2c:	6063      	strne	r3, [r4, #4]
 8009e2e:	6013      	streq	r3, [r2, #0]
 8009e30:	460c      	movne	r4, r1
 8009e32:	e7eb      	b.n	8009e0c <_malloc_r+0x64>
 8009e34:	460c      	mov	r4, r1
 8009e36:	6849      	ldr	r1, [r1, #4]
 8009e38:	e7cc      	b.n	8009dd4 <_malloc_r+0x2c>
 8009e3a:	1cc4      	adds	r4, r0, #3
 8009e3c:	f024 0403 	bic.w	r4, r4, #3
 8009e40:	42a0      	cmp	r0, r4
 8009e42:	d005      	beq.n	8009e50 <_malloc_r+0xa8>
 8009e44:	1a21      	subs	r1, r4, r0
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 fa9a 	bl	800a380 <_sbrk_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d0cf      	beq.n	8009df0 <_malloc_r+0x48>
 8009e50:	6025      	str	r5, [r4, #0]
 8009e52:	e7db      	b.n	8009e0c <_malloc_r+0x64>
 8009e54:	20000200 	.word	0x20000200
 8009e58:	20000204 	.word	0x20000204

08009e5c <__ssputs_r>:
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	688e      	ldr	r6, [r1, #8]
 8009e62:	429e      	cmp	r6, r3
 8009e64:	4682      	mov	sl, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	4690      	mov	r8, r2
 8009e6a:	4699      	mov	r9, r3
 8009e6c:	d837      	bhi.n	8009ede <__ssputs_r+0x82>
 8009e6e:	898a      	ldrh	r2, [r1, #12]
 8009e70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e74:	d031      	beq.n	8009eda <__ssputs_r+0x7e>
 8009e76:	6825      	ldr	r5, [r4, #0]
 8009e78:	6909      	ldr	r1, [r1, #16]
 8009e7a:	1a6f      	subs	r7, r5, r1
 8009e7c:	6965      	ldr	r5, [r4, #20]
 8009e7e:	2302      	movs	r3, #2
 8009e80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e84:	fb95 f5f3 	sdiv	r5, r5, r3
 8009e88:	f109 0301 	add.w	r3, r9, #1
 8009e8c:	443b      	add	r3, r7
 8009e8e:	429d      	cmp	r5, r3
 8009e90:	bf38      	it	cc
 8009e92:	461d      	movcc	r5, r3
 8009e94:	0553      	lsls	r3, r2, #21
 8009e96:	d530      	bpl.n	8009efa <__ssputs_r+0x9e>
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7ff ff85 	bl	8009da8 <_malloc_r>
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	b950      	cbnz	r0, 8009eb8 <__ssputs_r+0x5c>
 8009ea2:	230c      	movs	r3, #12
 8009ea4:	f8ca 3000 	str.w	r3, [sl]
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb8:	463a      	mov	r2, r7
 8009eba:	6921      	ldr	r1, [r4, #16]
 8009ebc:	f7ff fb0e 	bl	80094dc <memcpy>
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	6126      	str	r6, [r4, #16]
 8009ece:	6165      	str	r5, [r4, #20]
 8009ed0:	443e      	add	r6, r7
 8009ed2:	1bed      	subs	r5, r5, r7
 8009ed4:	6026      	str	r6, [r4, #0]
 8009ed6:	60a5      	str	r5, [r4, #8]
 8009ed8:	464e      	mov	r6, r9
 8009eda:	454e      	cmp	r6, r9
 8009edc:	d900      	bls.n	8009ee0 <__ssputs_r+0x84>
 8009ede:	464e      	mov	r6, r9
 8009ee0:	4632      	mov	r2, r6
 8009ee2:	4641      	mov	r1, r8
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	f000 fcc7 	bl	800a878 <memmove>
 8009eea:	68a3      	ldr	r3, [r4, #8]
 8009eec:	1b9b      	subs	r3, r3, r6
 8009eee:	60a3      	str	r3, [r4, #8]
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	441e      	add	r6, r3
 8009ef4:	6026      	str	r6, [r4, #0]
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e7dc      	b.n	8009eb4 <__ssputs_r+0x58>
 8009efa:	462a      	mov	r2, r5
 8009efc:	f000 fcd7 	bl	800a8ae <_realloc_r>
 8009f00:	4606      	mov	r6, r0
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d1e2      	bne.n	8009ecc <__ssputs_r+0x70>
 8009f06:	6921      	ldr	r1, [r4, #16]
 8009f08:	4650      	mov	r0, sl
 8009f0a:	f7ff feff 	bl	8009d0c <_free_r>
 8009f0e:	e7c8      	b.n	8009ea2 <__ssputs_r+0x46>

08009f10 <_svfiprintf_r>:
 8009f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	461d      	mov	r5, r3
 8009f16:	898b      	ldrh	r3, [r1, #12]
 8009f18:	061f      	lsls	r7, r3, #24
 8009f1a:	b09d      	sub	sp, #116	; 0x74
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	460c      	mov	r4, r1
 8009f20:	4616      	mov	r6, r2
 8009f22:	d50f      	bpl.n	8009f44 <_svfiprintf_r+0x34>
 8009f24:	690b      	ldr	r3, [r1, #16]
 8009f26:	b96b      	cbnz	r3, 8009f44 <_svfiprintf_r+0x34>
 8009f28:	2140      	movs	r1, #64	; 0x40
 8009f2a:	f7ff ff3d 	bl	8009da8 <_malloc_r>
 8009f2e:	6020      	str	r0, [r4, #0]
 8009f30:	6120      	str	r0, [r4, #16]
 8009f32:	b928      	cbnz	r0, 8009f40 <_svfiprintf_r+0x30>
 8009f34:	230c      	movs	r3, #12
 8009f36:	f8c8 3000 	str.w	r3, [r8]
 8009f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3e:	e0c8      	b.n	800a0d2 <_svfiprintf_r+0x1c2>
 8009f40:	2340      	movs	r3, #64	; 0x40
 8009f42:	6163      	str	r3, [r4, #20]
 8009f44:	2300      	movs	r3, #0
 8009f46:	9309      	str	r3, [sp, #36]	; 0x24
 8009f48:	2320      	movs	r3, #32
 8009f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f4e:	2330      	movs	r3, #48	; 0x30
 8009f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f54:	9503      	str	r5, [sp, #12]
 8009f56:	f04f 0b01 	mov.w	fp, #1
 8009f5a:	4637      	mov	r7, r6
 8009f5c:	463d      	mov	r5, r7
 8009f5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009f62:	b10b      	cbz	r3, 8009f68 <_svfiprintf_r+0x58>
 8009f64:	2b25      	cmp	r3, #37	; 0x25
 8009f66:	d13e      	bne.n	8009fe6 <_svfiprintf_r+0xd6>
 8009f68:	ebb7 0a06 	subs.w	sl, r7, r6
 8009f6c:	d00b      	beq.n	8009f86 <_svfiprintf_r+0x76>
 8009f6e:	4653      	mov	r3, sl
 8009f70:	4632      	mov	r2, r6
 8009f72:	4621      	mov	r1, r4
 8009f74:	4640      	mov	r0, r8
 8009f76:	f7ff ff71 	bl	8009e5c <__ssputs_r>
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	f000 80a4 	beq.w	800a0c8 <_svfiprintf_r+0x1b8>
 8009f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f82:	4453      	add	r3, sl
 8009f84:	9309      	str	r3, [sp, #36]	; 0x24
 8009f86:	783b      	ldrb	r3, [r7, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 809d 	beq.w	800a0c8 <_svfiprintf_r+0x1b8>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f04f 32ff 	mov.w	r2, #4294967295
 8009f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f98:	9304      	str	r3, [sp, #16]
 8009f9a:	9307      	str	r3, [sp, #28]
 8009f9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fa0:	931a      	str	r3, [sp, #104]	; 0x68
 8009fa2:	462f      	mov	r7, r5
 8009fa4:	2205      	movs	r2, #5
 8009fa6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009faa:	4850      	ldr	r0, [pc, #320]	; (800a0ec <_svfiprintf_r+0x1dc>)
 8009fac:	f7f6 f920 	bl	80001f0 <memchr>
 8009fb0:	9b04      	ldr	r3, [sp, #16]
 8009fb2:	b9d0      	cbnz	r0, 8009fea <_svfiprintf_r+0xda>
 8009fb4:	06d9      	lsls	r1, r3, #27
 8009fb6:	bf44      	itt	mi
 8009fb8:	2220      	movmi	r2, #32
 8009fba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fbe:	071a      	lsls	r2, r3, #28
 8009fc0:	bf44      	itt	mi
 8009fc2:	222b      	movmi	r2, #43	; 0x2b
 8009fc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009fc8:	782a      	ldrb	r2, [r5, #0]
 8009fca:	2a2a      	cmp	r2, #42	; 0x2a
 8009fcc:	d015      	beq.n	8009ffa <_svfiprintf_r+0xea>
 8009fce:	9a07      	ldr	r2, [sp, #28]
 8009fd0:	462f      	mov	r7, r5
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	250a      	movs	r5, #10
 8009fd6:	4639      	mov	r1, r7
 8009fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fdc:	3b30      	subs	r3, #48	; 0x30
 8009fde:	2b09      	cmp	r3, #9
 8009fe0:	d94d      	bls.n	800a07e <_svfiprintf_r+0x16e>
 8009fe2:	b1b8      	cbz	r0, 800a014 <_svfiprintf_r+0x104>
 8009fe4:	e00f      	b.n	800a006 <_svfiprintf_r+0xf6>
 8009fe6:	462f      	mov	r7, r5
 8009fe8:	e7b8      	b.n	8009f5c <_svfiprintf_r+0x4c>
 8009fea:	4a40      	ldr	r2, [pc, #256]	; (800a0ec <_svfiprintf_r+0x1dc>)
 8009fec:	1a80      	subs	r0, r0, r2
 8009fee:	fa0b f000 	lsl.w	r0, fp, r0
 8009ff2:	4318      	orrs	r0, r3
 8009ff4:	9004      	str	r0, [sp, #16]
 8009ff6:	463d      	mov	r5, r7
 8009ff8:	e7d3      	b.n	8009fa2 <_svfiprintf_r+0x92>
 8009ffa:	9a03      	ldr	r2, [sp, #12]
 8009ffc:	1d11      	adds	r1, r2, #4
 8009ffe:	6812      	ldr	r2, [r2, #0]
 800a000:	9103      	str	r1, [sp, #12]
 800a002:	2a00      	cmp	r2, #0
 800a004:	db01      	blt.n	800a00a <_svfiprintf_r+0xfa>
 800a006:	9207      	str	r2, [sp, #28]
 800a008:	e004      	b.n	800a014 <_svfiprintf_r+0x104>
 800a00a:	4252      	negs	r2, r2
 800a00c:	f043 0302 	orr.w	r3, r3, #2
 800a010:	9207      	str	r2, [sp, #28]
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	783b      	ldrb	r3, [r7, #0]
 800a016:	2b2e      	cmp	r3, #46	; 0x2e
 800a018:	d10c      	bne.n	800a034 <_svfiprintf_r+0x124>
 800a01a:	787b      	ldrb	r3, [r7, #1]
 800a01c:	2b2a      	cmp	r3, #42	; 0x2a
 800a01e:	d133      	bne.n	800a088 <_svfiprintf_r+0x178>
 800a020:	9b03      	ldr	r3, [sp, #12]
 800a022:	1d1a      	adds	r2, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	9203      	str	r2, [sp, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfb8      	it	lt
 800a02c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a030:	3702      	adds	r7, #2
 800a032:	9305      	str	r3, [sp, #20]
 800a034:	4d2e      	ldr	r5, [pc, #184]	; (800a0f0 <_svfiprintf_r+0x1e0>)
 800a036:	7839      	ldrb	r1, [r7, #0]
 800a038:	2203      	movs	r2, #3
 800a03a:	4628      	mov	r0, r5
 800a03c:	f7f6 f8d8 	bl	80001f0 <memchr>
 800a040:	b138      	cbz	r0, 800a052 <_svfiprintf_r+0x142>
 800a042:	2340      	movs	r3, #64	; 0x40
 800a044:	1b40      	subs	r0, r0, r5
 800a046:	fa03 f000 	lsl.w	r0, r3, r0
 800a04a:	9b04      	ldr	r3, [sp, #16]
 800a04c:	4303      	orrs	r3, r0
 800a04e:	3701      	adds	r7, #1
 800a050:	9304      	str	r3, [sp, #16]
 800a052:	7839      	ldrb	r1, [r7, #0]
 800a054:	4827      	ldr	r0, [pc, #156]	; (800a0f4 <_svfiprintf_r+0x1e4>)
 800a056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a05a:	2206      	movs	r2, #6
 800a05c:	1c7e      	adds	r6, r7, #1
 800a05e:	f7f6 f8c7 	bl	80001f0 <memchr>
 800a062:	2800      	cmp	r0, #0
 800a064:	d038      	beq.n	800a0d8 <_svfiprintf_r+0x1c8>
 800a066:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <_svfiprintf_r+0x1e8>)
 800a068:	bb13      	cbnz	r3, 800a0b0 <_svfiprintf_r+0x1a0>
 800a06a:	9b03      	ldr	r3, [sp, #12]
 800a06c:	3307      	adds	r3, #7
 800a06e:	f023 0307 	bic.w	r3, r3, #7
 800a072:	3308      	adds	r3, #8
 800a074:	9303      	str	r3, [sp, #12]
 800a076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a078:	444b      	add	r3, r9
 800a07a:	9309      	str	r3, [sp, #36]	; 0x24
 800a07c:	e76d      	b.n	8009f5a <_svfiprintf_r+0x4a>
 800a07e:	fb05 3202 	mla	r2, r5, r2, r3
 800a082:	2001      	movs	r0, #1
 800a084:	460f      	mov	r7, r1
 800a086:	e7a6      	b.n	8009fd6 <_svfiprintf_r+0xc6>
 800a088:	2300      	movs	r3, #0
 800a08a:	3701      	adds	r7, #1
 800a08c:	9305      	str	r3, [sp, #20]
 800a08e:	4619      	mov	r1, r3
 800a090:	250a      	movs	r5, #10
 800a092:	4638      	mov	r0, r7
 800a094:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a098:	3a30      	subs	r2, #48	; 0x30
 800a09a:	2a09      	cmp	r2, #9
 800a09c:	d903      	bls.n	800a0a6 <_svfiprintf_r+0x196>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d0c8      	beq.n	800a034 <_svfiprintf_r+0x124>
 800a0a2:	9105      	str	r1, [sp, #20]
 800a0a4:	e7c6      	b.n	800a034 <_svfiprintf_r+0x124>
 800a0a6:	fb05 2101 	mla	r1, r5, r1, r2
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	e7f0      	b.n	800a092 <_svfiprintf_r+0x182>
 800a0b0:	ab03      	add	r3, sp, #12
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	4622      	mov	r2, r4
 800a0b6:	4b11      	ldr	r3, [pc, #68]	; (800a0fc <_svfiprintf_r+0x1ec>)
 800a0b8:	a904      	add	r1, sp, #16
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	f7fc faac 	bl	8006618 <_printf_float>
 800a0c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a0c4:	4681      	mov	r9, r0
 800a0c6:	d1d6      	bne.n	800a076 <_svfiprintf_r+0x166>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	065b      	lsls	r3, r3, #25
 800a0cc:	f53f af35 	bmi.w	8009f3a <_svfiprintf_r+0x2a>
 800a0d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0d2:	b01d      	add	sp, #116	; 0x74
 800a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d8:	ab03      	add	r3, sp, #12
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	4622      	mov	r2, r4
 800a0de:	4b07      	ldr	r3, [pc, #28]	; (800a0fc <_svfiprintf_r+0x1ec>)
 800a0e0:	a904      	add	r1, sp, #16
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	f7fc fd4e 	bl	8006b84 <_printf_i>
 800a0e8:	e7ea      	b.n	800a0c0 <_svfiprintf_r+0x1b0>
 800a0ea:	bf00      	nop
 800a0ec:	0800abdc 	.word	0x0800abdc
 800a0f0:	0800abe2 	.word	0x0800abe2
 800a0f4:	0800abe6 	.word	0x0800abe6
 800a0f8:	08006619 	.word	0x08006619
 800a0fc:	08009e5d 	.word	0x08009e5d

0800a100 <__sfputc_r>:
 800a100:	6893      	ldr	r3, [r2, #8]
 800a102:	3b01      	subs	r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	b410      	push	{r4}
 800a108:	6093      	str	r3, [r2, #8]
 800a10a:	da08      	bge.n	800a11e <__sfputc_r+0x1e>
 800a10c:	6994      	ldr	r4, [r2, #24]
 800a10e:	42a3      	cmp	r3, r4
 800a110:	db01      	blt.n	800a116 <__sfputc_r+0x16>
 800a112:	290a      	cmp	r1, #10
 800a114:	d103      	bne.n	800a11e <__sfputc_r+0x1e>
 800a116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a11a:	f000 b997 	b.w	800a44c <__swbuf_r>
 800a11e:	6813      	ldr	r3, [r2, #0]
 800a120:	1c58      	adds	r0, r3, #1
 800a122:	6010      	str	r0, [r2, #0]
 800a124:	7019      	strb	r1, [r3, #0]
 800a126:	4608      	mov	r0, r1
 800a128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <__sfputs_r>:
 800a12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a130:	4606      	mov	r6, r0
 800a132:	460f      	mov	r7, r1
 800a134:	4614      	mov	r4, r2
 800a136:	18d5      	adds	r5, r2, r3
 800a138:	42ac      	cmp	r4, r5
 800a13a:	d101      	bne.n	800a140 <__sfputs_r+0x12>
 800a13c:	2000      	movs	r0, #0
 800a13e:	e007      	b.n	800a150 <__sfputs_r+0x22>
 800a140:	463a      	mov	r2, r7
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	4630      	mov	r0, r6
 800a148:	f7ff ffda 	bl	800a100 <__sfputc_r>
 800a14c:	1c43      	adds	r3, r0, #1
 800a14e:	d1f3      	bne.n	800a138 <__sfputs_r+0xa>
 800a150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a154 <_vfiprintf_r>:
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	460c      	mov	r4, r1
 800a15a:	b09d      	sub	sp, #116	; 0x74
 800a15c:	4617      	mov	r7, r2
 800a15e:	461d      	mov	r5, r3
 800a160:	4606      	mov	r6, r0
 800a162:	b118      	cbz	r0, 800a16c <_vfiprintf_r+0x18>
 800a164:	6983      	ldr	r3, [r0, #24]
 800a166:	b90b      	cbnz	r3, 800a16c <_vfiprintf_r+0x18>
 800a168:	f7fe fdda 	bl	8008d20 <__sinit>
 800a16c:	4b7c      	ldr	r3, [pc, #496]	; (800a360 <_vfiprintf_r+0x20c>)
 800a16e:	429c      	cmp	r4, r3
 800a170:	d158      	bne.n	800a224 <_vfiprintf_r+0xd0>
 800a172:	6874      	ldr	r4, [r6, #4]
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	0718      	lsls	r0, r3, #28
 800a178:	d55e      	bpl.n	800a238 <_vfiprintf_r+0xe4>
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d05b      	beq.n	800a238 <_vfiprintf_r+0xe4>
 800a180:	2300      	movs	r3, #0
 800a182:	9309      	str	r3, [sp, #36]	; 0x24
 800a184:	2320      	movs	r3, #32
 800a186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a18a:	2330      	movs	r3, #48	; 0x30
 800a18c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a190:	9503      	str	r5, [sp, #12]
 800a192:	f04f 0b01 	mov.w	fp, #1
 800a196:	46b8      	mov	r8, r7
 800a198:	4645      	mov	r5, r8
 800a19a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a19e:	b10b      	cbz	r3, 800a1a4 <_vfiprintf_r+0x50>
 800a1a0:	2b25      	cmp	r3, #37	; 0x25
 800a1a2:	d154      	bne.n	800a24e <_vfiprintf_r+0xfa>
 800a1a4:	ebb8 0a07 	subs.w	sl, r8, r7
 800a1a8:	d00b      	beq.n	800a1c2 <_vfiprintf_r+0x6e>
 800a1aa:	4653      	mov	r3, sl
 800a1ac:	463a      	mov	r2, r7
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f7ff ffbc 	bl	800a12e <__sfputs_r>
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	f000 80c2 	beq.w	800a340 <_vfiprintf_r+0x1ec>
 800a1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1be:	4453      	add	r3, sl
 800a1c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c2:	f898 3000 	ldrb.w	r3, [r8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 80ba 	beq.w	800a340 <_vfiprintf_r+0x1ec>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	9307      	str	r3, [sp, #28]
 800a1da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1de:	931a      	str	r3, [sp, #104]	; 0x68
 800a1e0:	46a8      	mov	r8, r5
 800a1e2:	2205      	movs	r2, #5
 800a1e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a1e8:	485e      	ldr	r0, [pc, #376]	; (800a364 <_vfiprintf_r+0x210>)
 800a1ea:	f7f6 f801 	bl	80001f0 <memchr>
 800a1ee:	9b04      	ldr	r3, [sp, #16]
 800a1f0:	bb78      	cbnz	r0, 800a252 <_vfiprintf_r+0xfe>
 800a1f2:	06d9      	lsls	r1, r3, #27
 800a1f4:	bf44      	itt	mi
 800a1f6:	2220      	movmi	r2, #32
 800a1f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1fc:	071a      	lsls	r2, r3, #28
 800a1fe:	bf44      	itt	mi
 800a200:	222b      	movmi	r2, #43	; 0x2b
 800a202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a206:	782a      	ldrb	r2, [r5, #0]
 800a208:	2a2a      	cmp	r2, #42	; 0x2a
 800a20a:	d02a      	beq.n	800a262 <_vfiprintf_r+0x10e>
 800a20c:	9a07      	ldr	r2, [sp, #28]
 800a20e:	46a8      	mov	r8, r5
 800a210:	2000      	movs	r0, #0
 800a212:	250a      	movs	r5, #10
 800a214:	4641      	mov	r1, r8
 800a216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a21a:	3b30      	subs	r3, #48	; 0x30
 800a21c:	2b09      	cmp	r3, #9
 800a21e:	d969      	bls.n	800a2f4 <_vfiprintf_r+0x1a0>
 800a220:	b360      	cbz	r0, 800a27c <_vfiprintf_r+0x128>
 800a222:	e024      	b.n	800a26e <_vfiprintf_r+0x11a>
 800a224:	4b50      	ldr	r3, [pc, #320]	; (800a368 <_vfiprintf_r+0x214>)
 800a226:	429c      	cmp	r4, r3
 800a228:	d101      	bne.n	800a22e <_vfiprintf_r+0xda>
 800a22a:	68b4      	ldr	r4, [r6, #8]
 800a22c:	e7a2      	b.n	800a174 <_vfiprintf_r+0x20>
 800a22e:	4b4f      	ldr	r3, [pc, #316]	; (800a36c <_vfiprintf_r+0x218>)
 800a230:	429c      	cmp	r4, r3
 800a232:	bf08      	it	eq
 800a234:	68f4      	ldreq	r4, [r6, #12]
 800a236:	e79d      	b.n	800a174 <_vfiprintf_r+0x20>
 800a238:	4621      	mov	r1, r4
 800a23a:	4630      	mov	r0, r6
 800a23c:	f000 f978 	bl	800a530 <__swsetup_r>
 800a240:	2800      	cmp	r0, #0
 800a242:	d09d      	beq.n	800a180 <_vfiprintf_r+0x2c>
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	b01d      	add	sp, #116	; 0x74
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	46a8      	mov	r8, r5
 800a250:	e7a2      	b.n	800a198 <_vfiprintf_r+0x44>
 800a252:	4a44      	ldr	r2, [pc, #272]	; (800a364 <_vfiprintf_r+0x210>)
 800a254:	1a80      	subs	r0, r0, r2
 800a256:	fa0b f000 	lsl.w	r0, fp, r0
 800a25a:	4318      	orrs	r0, r3
 800a25c:	9004      	str	r0, [sp, #16]
 800a25e:	4645      	mov	r5, r8
 800a260:	e7be      	b.n	800a1e0 <_vfiprintf_r+0x8c>
 800a262:	9a03      	ldr	r2, [sp, #12]
 800a264:	1d11      	adds	r1, r2, #4
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	9103      	str	r1, [sp, #12]
 800a26a:	2a00      	cmp	r2, #0
 800a26c:	db01      	blt.n	800a272 <_vfiprintf_r+0x11e>
 800a26e:	9207      	str	r2, [sp, #28]
 800a270:	e004      	b.n	800a27c <_vfiprintf_r+0x128>
 800a272:	4252      	negs	r2, r2
 800a274:	f043 0302 	orr.w	r3, r3, #2
 800a278:	9207      	str	r2, [sp, #28]
 800a27a:	9304      	str	r3, [sp, #16]
 800a27c:	f898 3000 	ldrb.w	r3, [r8]
 800a280:	2b2e      	cmp	r3, #46	; 0x2e
 800a282:	d10e      	bne.n	800a2a2 <_vfiprintf_r+0x14e>
 800a284:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a288:	2b2a      	cmp	r3, #42	; 0x2a
 800a28a:	d138      	bne.n	800a2fe <_vfiprintf_r+0x1aa>
 800a28c:	9b03      	ldr	r3, [sp, #12]
 800a28e:	1d1a      	adds	r2, r3, #4
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	9203      	str	r2, [sp, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	bfb8      	it	lt
 800a298:	f04f 33ff 	movlt.w	r3, #4294967295
 800a29c:	f108 0802 	add.w	r8, r8, #2
 800a2a0:	9305      	str	r3, [sp, #20]
 800a2a2:	4d33      	ldr	r5, [pc, #204]	; (800a370 <_vfiprintf_r+0x21c>)
 800a2a4:	f898 1000 	ldrb.w	r1, [r8]
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f7f5 ffa0 	bl	80001f0 <memchr>
 800a2b0:	b140      	cbz	r0, 800a2c4 <_vfiprintf_r+0x170>
 800a2b2:	2340      	movs	r3, #64	; 0x40
 800a2b4:	1b40      	subs	r0, r0, r5
 800a2b6:	fa03 f000 	lsl.w	r0, r3, r0
 800a2ba:	9b04      	ldr	r3, [sp, #16]
 800a2bc:	4303      	orrs	r3, r0
 800a2be:	f108 0801 	add.w	r8, r8, #1
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	f898 1000 	ldrb.w	r1, [r8]
 800a2c8:	482a      	ldr	r0, [pc, #168]	; (800a374 <_vfiprintf_r+0x220>)
 800a2ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2ce:	2206      	movs	r2, #6
 800a2d0:	f108 0701 	add.w	r7, r8, #1
 800a2d4:	f7f5 ff8c 	bl	80001f0 <memchr>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d037      	beq.n	800a34c <_vfiprintf_r+0x1f8>
 800a2dc:	4b26      	ldr	r3, [pc, #152]	; (800a378 <_vfiprintf_r+0x224>)
 800a2de:	bb1b      	cbnz	r3, 800a328 <_vfiprintf_r+0x1d4>
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	3307      	adds	r3, #7
 800a2e4:	f023 0307 	bic.w	r3, r3, #7
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	9303      	str	r3, [sp, #12]
 800a2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ee:	444b      	add	r3, r9
 800a2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f2:	e750      	b.n	800a196 <_vfiprintf_r+0x42>
 800a2f4:	fb05 3202 	mla	r2, r5, r2, r3
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	4688      	mov	r8, r1
 800a2fc:	e78a      	b.n	800a214 <_vfiprintf_r+0xc0>
 800a2fe:	2300      	movs	r3, #0
 800a300:	f108 0801 	add.w	r8, r8, #1
 800a304:	9305      	str	r3, [sp, #20]
 800a306:	4619      	mov	r1, r3
 800a308:	250a      	movs	r5, #10
 800a30a:	4640      	mov	r0, r8
 800a30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a310:	3a30      	subs	r2, #48	; 0x30
 800a312:	2a09      	cmp	r2, #9
 800a314:	d903      	bls.n	800a31e <_vfiprintf_r+0x1ca>
 800a316:	2b00      	cmp	r3, #0
 800a318:	d0c3      	beq.n	800a2a2 <_vfiprintf_r+0x14e>
 800a31a:	9105      	str	r1, [sp, #20]
 800a31c:	e7c1      	b.n	800a2a2 <_vfiprintf_r+0x14e>
 800a31e:	fb05 2101 	mla	r1, r5, r1, r2
 800a322:	2301      	movs	r3, #1
 800a324:	4680      	mov	r8, r0
 800a326:	e7f0      	b.n	800a30a <_vfiprintf_r+0x1b6>
 800a328:	ab03      	add	r3, sp, #12
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	4622      	mov	r2, r4
 800a32e:	4b13      	ldr	r3, [pc, #76]	; (800a37c <_vfiprintf_r+0x228>)
 800a330:	a904      	add	r1, sp, #16
 800a332:	4630      	mov	r0, r6
 800a334:	f7fc f970 	bl	8006618 <_printf_float>
 800a338:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a33c:	4681      	mov	r9, r0
 800a33e:	d1d5      	bne.n	800a2ec <_vfiprintf_r+0x198>
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	065b      	lsls	r3, r3, #25
 800a344:	f53f af7e 	bmi.w	800a244 <_vfiprintf_r+0xf0>
 800a348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a34a:	e77d      	b.n	800a248 <_vfiprintf_r+0xf4>
 800a34c:	ab03      	add	r3, sp, #12
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	4622      	mov	r2, r4
 800a352:	4b0a      	ldr	r3, [pc, #40]	; (800a37c <_vfiprintf_r+0x228>)
 800a354:	a904      	add	r1, sp, #16
 800a356:	4630      	mov	r0, r6
 800a358:	f7fc fc14 	bl	8006b84 <_printf_i>
 800a35c:	e7ec      	b.n	800a338 <_vfiprintf_r+0x1e4>
 800a35e:	bf00      	nop
 800a360:	0800aa90 	.word	0x0800aa90
 800a364:	0800abdc 	.word	0x0800abdc
 800a368:	0800aab0 	.word	0x0800aab0
 800a36c:	0800aa70 	.word	0x0800aa70
 800a370:	0800abe2 	.word	0x0800abe2
 800a374:	0800abe6 	.word	0x0800abe6
 800a378:	08006619 	.word	0x08006619
 800a37c:	0800a12f 	.word	0x0800a12f

0800a380 <_sbrk_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4c06      	ldr	r4, [pc, #24]	; (800a39c <_sbrk_r+0x1c>)
 800a384:	2300      	movs	r3, #0
 800a386:	4605      	mov	r5, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	f7fb fb14 	bl	80059b8 <_sbrk>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_sbrk_r+0x1a>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	b103      	cbz	r3, 800a39a <_sbrk_r+0x1a>
 800a398:	602b      	str	r3, [r5, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	20000568 	.word	0x20000568

0800a3a0 <__sread>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a8:	f000 faa8 	bl	800a8fc <_read_r>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	bfab      	itete	ge
 800a3b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3b4:	181b      	addge	r3, r3, r0
 800a3b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ba:	bfac      	ite	ge
 800a3bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3be:	81a3      	strhlt	r3, [r4, #12]
 800a3c0:	bd10      	pop	{r4, pc}

0800a3c2 <__swrite>:
 800a3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c6:	461f      	mov	r7, r3
 800a3c8:	898b      	ldrh	r3, [r1, #12]
 800a3ca:	05db      	lsls	r3, r3, #23
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	d505      	bpl.n	800a3e0 <__swrite+0x1e>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3dc:	f000 f9d6 	bl	800a78c <_lseek_r>
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	463b      	mov	r3, r7
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f6:	f000 b889 	b.w	800a50c <_write_r>

0800a3fa <__sseek>:
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a402:	f000 f9c3 	bl	800a78c <_lseek_r>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	bf15      	itete	ne
 800a40c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a40e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a416:	81a3      	strheq	r3, [r4, #12]
 800a418:	bf18      	it	ne
 800a41a:	81a3      	strhne	r3, [r4, #12]
 800a41c:	bd10      	pop	{r4, pc}

0800a41e <__sclose>:
 800a41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a422:	f000 b8f3 	b.w	800a60c <_close_r>

0800a426 <strncmp>:
 800a426:	b510      	push	{r4, lr}
 800a428:	b16a      	cbz	r2, 800a446 <strncmp+0x20>
 800a42a:	3901      	subs	r1, #1
 800a42c:	1884      	adds	r4, r0, r2
 800a42e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a432:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a436:	4293      	cmp	r3, r2
 800a438:	d103      	bne.n	800a442 <strncmp+0x1c>
 800a43a:	42a0      	cmp	r0, r4
 800a43c:	d001      	beq.n	800a442 <strncmp+0x1c>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f5      	bne.n	800a42e <strncmp+0x8>
 800a442:	1a98      	subs	r0, r3, r2
 800a444:	bd10      	pop	{r4, pc}
 800a446:	4610      	mov	r0, r2
 800a448:	e7fc      	b.n	800a444 <strncmp+0x1e>
	...

0800a44c <__swbuf_r>:
 800a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44e:	460e      	mov	r6, r1
 800a450:	4614      	mov	r4, r2
 800a452:	4605      	mov	r5, r0
 800a454:	b118      	cbz	r0, 800a45e <__swbuf_r+0x12>
 800a456:	6983      	ldr	r3, [r0, #24]
 800a458:	b90b      	cbnz	r3, 800a45e <__swbuf_r+0x12>
 800a45a:	f7fe fc61 	bl	8008d20 <__sinit>
 800a45e:	4b21      	ldr	r3, [pc, #132]	; (800a4e4 <__swbuf_r+0x98>)
 800a460:	429c      	cmp	r4, r3
 800a462:	d12a      	bne.n	800a4ba <__swbuf_r+0x6e>
 800a464:	686c      	ldr	r4, [r5, #4]
 800a466:	69a3      	ldr	r3, [r4, #24]
 800a468:	60a3      	str	r3, [r4, #8]
 800a46a:	89a3      	ldrh	r3, [r4, #12]
 800a46c:	071a      	lsls	r2, r3, #28
 800a46e:	d52e      	bpl.n	800a4ce <__swbuf_r+0x82>
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	b363      	cbz	r3, 800a4ce <__swbuf_r+0x82>
 800a474:	6923      	ldr	r3, [r4, #16]
 800a476:	6820      	ldr	r0, [r4, #0]
 800a478:	1ac0      	subs	r0, r0, r3
 800a47a:	6963      	ldr	r3, [r4, #20]
 800a47c:	b2f6      	uxtb	r6, r6
 800a47e:	4283      	cmp	r3, r0
 800a480:	4637      	mov	r7, r6
 800a482:	dc04      	bgt.n	800a48e <__swbuf_r+0x42>
 800a484:	4621      	mov	r1, r4
 800a486:	4628      	mov	r0, r5
 800a488:	f000 f956 	bl	800a738 <_fflush_r>
 800a48c:	bb28      	cbnz	r0, 800a4da <__swbuf_r+0x8e>
 800a48e:	68a3      	ldr	r3, [r4, #8]
 800a490:	3b01      	subs	r3, #1
 800a492:	60a3      	str	r3, [r4, #8]
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	6022      	str	r2, [r4, #0]
 800a49a:	701e      	strb	r6, [r3, #0]
 800a49c:	6963      	ldr	r3, [r4, #20]
 800a49e:	3001      	adds	r0, #1
 800a4a0:	4283      	cmp	r3, r0
 800a4a2:	d004      	beq.n	800a4ae <__swbuf_r+0x62>
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	07db      	lsls	r3, r3, #31
 800a4a8:	d519      	bpl.n	800a4de <__swbuf_r+0x92>
 800a4aa:	2e0a      	cmp	r6, #10
 800a4ac:	d117      	bne.n	800a4de <__swbuf_r+0x92>
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f000 f941 	bl	800a738 <_fflush_r>
 800a4b6:	b190      	cbz	r0, 800a4de <__swbuf_r+0x92>
 800a4b8:	e00f      	b.n	800a4da <__swbuf_r+0x8e>
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	; (800a4e8 <__swbuf_r+0x9c>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	d101      	bne.n	800a4c4 <__swbuf_r+0x78>
 800a4c0:	68ac      	ldr	r4, [r5, #8]
 800a4c2:	e7d0      	b.n	800a466 <__swbuf_r+0x1a>
 800a4c4:	4b09      	ldr	r3, [pc, #36]	; (800a4ec <__swbuf_r+0xa0>)
 800a4c6:	429c      	cmp	r4, r3
 800a4c8:	bf08      	it	eq
 800a4ca:	68ec      	ldreq	r4, [r5, #12]
 800a4cc:	e7cb      	b.n	800a466 <__swbuf_r+0x1a>
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f000 f82d 	bl	800a530 <__swsetup_r>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d0cc      	beq.n	800a474 <__swbuf_r+0x28>
 800a4da:	f04f 37ff 	mov.w	r7, #4294967295
 800a4de:	4638      	mov	r0, r7
 800a4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	0800aa90 	.word	0x0800aa90
 800a4e8:	0800aab0 	.word	0x0800aab0
 800a4ec:	0800aa70 	.word	0x0800aa70

0800a4f0 <__ascii_wctomb>:
 800a4f0:	b149      	cbz	r1, 800a506 <__ascii_wctomb+0x16>
 800a4f2:	2aff      	cmp	r2, #255	; 0xff
 800a4f4:	bf85      	ittet	hi
 800a4f6:	238a      	movhi	r3, #138	; 0x8a
 800a4f8:	6003      	strhi	r3, [r0, #0]
 800a4fa:	700a      	strbls	r2, [r1, #0]
 800a4fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a500:	bf98      	it	ls
 800a502:	2001      	movls	r0, #1
 800a504:	4770      	bx	lr
 800a506:	4608      	mov	r0, r1
 800a508:	4770      	bx	lr
	...

0800a50c <_write_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4c07      	ldr	r4, [pc, #28]	; (800a52c <_write_r+0x20>)
 800a510:	4605      	mov	r5, r0
 800a512:	4608      	mov	r0, r1
 800a514:	4611      	mov	r1, r2
 800a516:	2200      	movs	r2, #0
 800a518:	6022      	str	r2, [r4, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	f7fa fd26 	bl	8004f6c <_write>
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	d102      	bne.n	800a52a <_write_r+0x1e>
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	b103      	cbz	r3, 800a52a <_write_r+0x1e>
 800a528:	602b      	str	r3, [r5, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20000568 	.word	0x20000568

0800a530 <__swsetup_r>:
 800a530:	4b32      	ldr	r3, [pc, #200]	; (800a5fc <__swsetup_r+0xcc>)
 800a532:	b570      	push	{r4, r5, r6, lr}
 800a534:	681d      	ldr	r5, [r3, #0]
 800a536:	4606      	mov	r6, r0
 800a538:	460c      	mov	r4, r1
 800a53a:	b125      	cbz	r5, 800a546 <__swsetup_r+0x16>
 800a53c:	69ab      	ldr	r3, [r5, #24]
 800a53e:	b913      	cbnz	r3, 800a546 <__swsetup_r+0x16>
 800a540:	4628      	mov	r0, r5
 800a542:	f7fe fbed 	bl	8008d20 <__sinit>
 800a546:	4b2e      	ldr	r3, [pc, #184]	; (800a600 <__swsetup_r+0xd0>)
 800a548:	429c      	cmp	r4, r3
 800a54a:	d10f      	bne.n	800a56c <__swsetup_r+0x3c>
 800a54c:	686c      	ldr	r4, [r5, #4]
 800a54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a552:	b29a      	uxth	r2, r3
 800a554:	0715      	lsls	r5, r2, #28
 800a556:	d42c      	bmi.n	800a5b2 <__swsetup_r+0x82>
 800a558:	06d0      	lsls	r0, r2, #27
 800a55a:	d411      	bmi.n	800a580 <__swsetup_r+0x50>
 800a55c:	2209      	movs	r2, #9
 800a55e:	6032      	str	r2, [r6, #0]
 800a560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a564:	81a3      	strh	r3, [r4, #12]
 800a566:	f04f 30ff 	mov.w	r0, #4294967295
 800a56a:	e03e      	b.n	800a5ea <__swsetup_r+0xba>
 800a56c:	4b25      	ldr	r3, [pc, #148]	; (800a604 <__swsetup_r+0xd4>)
 800a56e:	429c      	cmp	r4, r3
 800a570:	d101      	bne.n	800a576 <__swsetup_r+0x46>
 800a572:	68ac      	ldr	r4, [r5, #8]
 800a574:	e7eb      	b.n	800a54e <__swsetup_r+0x1e>
 800a576:	4b24      	ldr	r3, [pc, #144]	; (800a608 <__swsetup_r+0xd8>)
 800a578:	429c      	cmp	r4, r3
 800a57a:	bf08      	it	eq
 800a57c:	68ec      	ldreq	r4, [r5, #12]
 800a57e:	e7e6      	b.n	800a54e <__swsetup_r+0x1e>
 800a580:	0751      	lsls	r1, r2, #29
 800a582:	d512      	bpl.n	800a5aa <__swsetup_r+0x7a>
 800a584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a586:	b141      	cbz	r1, 800a59a <__swsetup_r+0x6a>
 800a588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a58c:	4299      	cmp	r1, r3
 800a58e:	d002      	beq.n	800a596 <__swsetup_r+0x66>
 800a590:	4630      	mov	r0, r6
 800a592:	f7ff fbbb 	bl	8009d0c <_free_r>
 800a596:	2300      	movs	r3, #0
 800a598:	6363      	str	r3, [r4, #52]	; 0x34
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5a0:	81a3      	strh	r3, [r4, #12]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	6063      	str	r3, [r4, #4]
 800a5a6:	6923      	ldr	r3, [r4, #16]
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	f043 0308 	orr.w	r3, r3, #8
 800a5b0:	81a3      	strh	r3, [r4, #12]
 800a5b2:	6923      	ldr	r3, [r4, #16]
 800a5b4:	b94b      	cbnz	r3, 800a5ca <__swsetup_r+0x9a>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c0:	d003      	beq.n	800a5ca <__swsetup_r+0x9a>
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f000 f917 	bl	800a7f8 <__smakebuf_r>
 800a5ca:	89a2      	ldrh	r2, [r4, #12]
 800a5cc:	f012 0301 	ands.w	r3, r2, #1
 800a5d0:	d00c      	beq.n	800a5ec <__swsetup_r+0xbc>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60a3      	str	r3, [r4, #8]
 800a5d6:	6963      	ldr	r3, [r4, #20]
 800a5d8:	425b      	negs	r3, r3
 800a5da:	61a3      	str	r3, [r4, #24]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	b953      	cbnz	r3, 800a5f6 <__swsetup_r+0xc6>
 800a5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5e4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a5e8:	d1ba      	bne.n	800a560 <__swsetup_r+0x30>
 800a5ea:	bd70      	pop	{r4, r5, r6, pc}
 800a5ec:	0792      	lsls	r2, r2, #30
 800a5ee:	bf58      	it	pl
 800a5f0:	6963      	ldrpl	r3, [r4, #20]
 800a5f2:	60a3      	str	r3, [r4, #8]
 800a5f4:	e7f2      	b.n	800a5dc <__swsetup_r+0xac>
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	e7f7      	b.n	800a5ea <__swsetup_r+0xba>
 800a5fa:	bf00      	nop
 800a5fc:	2000000c 	.word	0x2000000c
 800a600:	0800aa90 	.word	0x0800aa90
 800a604:	0800aab0 	.word	0x0800aab0
 800a608:	0800aa70 	.word	0x0800aa70

0800a60c <_close_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4c06      	ldr	r4, [pc, #24]	; (800a628 <_close_r+0x1c>)
 800a610:	2300      	movs	r3, #0
 800a612:	4605      	mov	r5, r0
 800a614:	4608      	mov	r0, r1
 800a616:	6023      	str	r3, [r4, #0]
 800a618:	f7fb f999 	bl	800594e <_close>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_close_r+0x1a>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	b103      	cbz	r3, 800a626 <_close_r+0x1a>
 800a624:	602b      	str	r3, [r5, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	20000568 	.word	0x20000568

0800a62c <__sflush_r>:
 800a62c:	898a      	ldrh	r2, [r1, #12]
 800a62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a632:	4605      	mov	r5, r0
 800a634:	0710      	lsls	r0, r2, #28
 800a636:	460c      	mov	r4, r1
 800a638:	d458      	bmi.n	800a6ec <__sflush_r+0xc0>
 800a63a:	684b      	ldr	r3, [r1, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dc05      	bgt.n	800a64c <__sflush_r+0x20>
 800a640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a642:	2b00      	cmp	r3, #0
 800a644:	dc02      	bgt.n	800a64c <__sflush_r+0x20>
 800a646:	2000      	movs	r0, #0
 800a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a64c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a64e:	2e00      	cmp	r6, #0
 800a650:	d0f9      	beq.n	800a646 <__sflush_r+0x1a>
 800a652:	2300      	movs	r3, #0
 800a654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a658:	682f      	ldr	r7, [r5, #0]
 800a65a:	6a21      	ldr	r1, [r4, #32]
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	d032      	beq.n	800a6c6 <__sflush_r+0x9a>
 800a660:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	075a      	lsls	r2, r3, #29
 800a666:	d505      	bpl.n	800a674 <__sflush_r+0x48>
 800a668:	6863      	ldr	r3, [r4, #4]
 800a66a:	1ac0      	subs	r0, r0, r3
 800a66c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a66e:	b10b      	cbz	r3, 800a674 <__sflush_r+0x48>
 800a670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a672:	1ac0      	subs	r0, r0, r3
 800a674:	2300      	movs	r3, #0
 800a676:	4602      	mov	r2, r0
 800a678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a67a:	6a21      	ldr	r1, [r4, #32]
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b0      	blx	r6
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	d106      	bne.n	800a694 <__sflush_r+0x68>
 800a686:	6829      	ldr	r1, [r5, #0]
 800a688:	291d      	cmp	r1, #29
 800a68a:	d848      	bhi.n	800a71e <__sflush_r+0xf2>
 800a68c:	4a29      	ldr	r2, [pc, #164]	; (800a734 <__sflush_r+0x108>)
 800a68e:	40ca      	lsrs	r2, r1
 800a690:	07d6      	lsls	r6, r2, #31
 800a692:	d544      	bpl.n	800a71e <__sflush_r+0xf2>
 800a694:	2200      	movs	r2, #0
 800a696:	6062      	str	r2, [r4, #4]
 800a698:	04d9      	lsls	r1, r3, #19
 800a69a:	6922      	ldr	r2, [r4, #16]
 800a69c:	6022      	str	r2, [r4, #0]
 800a69e:	d504      	bpl.n	800a6aa <__sflush_r+0x7e>
 800a6a0:	1c42      	adds	r2, r0, #1
 800a6a2:	d101      	bne.n	800a6a8 <__sflush_r+0x7c>
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	b903      	cbnz	r3, 800a6aa <__sflush_r+0x7e>
 800a6a8:	6560      	str	r0, [r4, #84]	; 0x54
 800a6aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ac:	602f      	str	r7, [r5, #0]
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	d0c9      	beq.n	800a646 <__sflush_r+0x1a>
 800a6b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6b6:	4299      	cmp	r1, r3
 800a6b8:	d002      	beq.n	800a6c0 <__sflush_r+0x94>
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f7ff fb26 	bl	8009d0c <_free_r>
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6c4:	e7c0      	b.n	800a648 <__sflush_r+0x1c>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	47b0      	blx	r6
 800a6cc:	1c41      	adds	r1, r0, #1
 800a6ce:	d1c8      	bne.n	800a662 <__sflush_r+0x36>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0c5      	beq.n	800a662 <__sflush_r+0x36>
 800a6d6:	2b1d      	cmp	r3, #29
 800a6d8:	d001      	beq.n	800a6de <__sflush_r+0xb2>
 800a6da:	2b16      	cmp	r3, #22
 800a6dc:	d101      	bne.n	800a6e2 <__sflush_r+0xb6>
 800a6de:	602f      	str	r7, [r5, #0]
 800a6e0:	e7b1      	b.n	800a646 <__sflush_r+0x1a>
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6e8:	81a3      	strh	r3, [r4, #12]
 800a6ea:	e7ad      	b.n	800a648 <__sflush_r+0x1c>
 800a6ec:	690f      	ldr	r7, [r1, #16]
 800a6ee:	2f00      	cmp	r7, #0
 800a6f0:	d0a9      	beq.n	800a646 <__sflush_r+0x1a>
 800a6f2:	0793      	lsls	r3, r2, #30
 800a6f4:	680e      	ldr	r6, [r1, #0]
 800a6f6:	bf08      	it	eq
 800a6f8:	694b      	ldreq	r3, [r1, #20]
 800a6fa:	600f      	str	r7, [r1, #0]
 800a6fc:	bf18      	it	ne
 800a6fe:	2300      	movne	r3, #0
 800a700:	eba6 0807 	sub.w	r8, r6, r7
 800a704:	608b      	str	r3, [r1, #8]
 800a706:	f1b8 0f00 	cmp.w	r8, #0
 800a70a:	dd9c      	ble.n	800a646 <__sflush_r+0x1a>
 800a70c:	4643      	mov	r3, r8
 800a70e:	463a      	mov	r2, r7
 800a710:	6a21      	ldr	r1, [r4, #32]
 800a712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a714:	4628      	mov	r0, r5
 800a716:	47b0      	blx	r6
 800a718:	2800      	cmp	r0, #0
 800a71a:	dc06      	bgt.n	800a72a <__sflush_r+0xfe>
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a722:	81a3      	strh	r3, [r4, #12]
 800a724:	f04f 30ff 	mov.w	r0, #4294967295
 800a728:	e78e      	b.n	800a648 <__sflush_r+0x1c>
 800a72a:	4407      	add	r7, r0
 800a72c:	eba8 0800 	sub.w	r8, r8, r0
 800a730:	e7e9      	b.n	800a706 <__sflush_r+0xda>
 800a732:	bf00      	nop
 800a734:	20400001 	.word	0x20400001

0800a738 <_fflush_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	690b      	ldr	r3, [r1, #16]
 800a73c:	4605      	mov	r5, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	b1db      	cbz	r3, 800a77a <_fflush_r+0x42>
 800a742:	b118      	cbz	r0, 800a74c <_fflush_r+0x14>
 800a744:	6983      	ldr	r3, [r0, #24]
 800a746:	b90b      	cbnz	r3, 800a74c <_fflush_r+0x14>
 800a748:	f7fe faea 	bl	8008d20 <__sinit>
 800a74c:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <_fflush_r+0x48>)
 800a74e:	429c      	cmp	r4, r3
 800a750:	d109      	bne.n	800a766 <_fflush_r+0x2e>
 800a752:	686c      	ldr	r4, [r5, #4]
 800a754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a758:	b17b      	cbz	r3, 800a77a <_fflush_r+0x42>
 800a75a:	4621      	mov	r1, r4
 800a75c:	4628      	mov	r0, r5
 800a75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a762:	f7ff bf63 	b.w	800a62c <__sflush_r>
 800a766:	4b07      	ldr	r3, [pc, #28]	; (800a784 <_fflush_r+0x4c>)
 800a768:	429c      	cmp	r4, r3
 800a76a:	d101      	bne.n	800a770 <_fflush_r+0x38>
 800a76c:	68ac      	ldr	r4, [r5, #8]
 800a76e:	e7f1      	b.n	800a754 <_fflush_r+0x1c>
 800a770:	4b05      	ldr	r3, [pc, #20]	; (800a788 <_fflush_r+0x50>)
 800a772:	429c      	cmp	r4, r3
 800a774:	bf08      	it	eq
 800a776:	68ec      	ldreq	r4, [r5, #12]
 800a778:	e7ec      	b.n	800a754 <_fflush_r+0x1c>
 800a77a:	2000      	movs	r0, #0
 800a77c:	bd38      	pop	{r3, r4, r5, pc}
 800a77e:	bf00      	nop
 800a780:	0800aa90 	.word	0x0800aa90
 800a784:	0800aab0 	.word	0x0800aab0
 800a788:	0800aa70 	.word	0x0800aa70

0800a78c <_lseek_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4c07      	ldr	r4, [pc, #28]	; (800a7ac <_lseek_r+0x20>)
 800a790:	4605      	mov	r5, r0
 800a792:	4608      	mov	r0, r1
 800a794:	4611      	mov	r1, r2
 800a796:	2200      	movs	r2, #0
 800a798:	6022      	str	r2, [r4, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	f7fb f8fe 	bl	800599c <_lseek>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d102      	bne.n	800a7aa <_lseek_r+0x1e>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	b103      	cbz	r3, 800a7aa <_lseek_r+0x1e>
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	20000568 	.word	0x20000568

0800a7b0 <__swhatbuf_r>:
 800a7b0:	b570      	push	{r4, r5, r6, lr}
 800a7b2:	460e      	mov	r6, r1
 800a7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b8:	2900      	cmp	r1, #0
 800a7ba:	b096      	sub	sp, #88	; 0x58
 800a7bc:	4614      	mov	r4, r2
 800a7be:	461d      	mov	r5, r3
 800a7c0:	da07      	bge.n	800a7d2 <__swhatbuf_r+0x22>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	602b      	str	r3, [r5, #0]
 800a7c6:	89b3      	ldrh	r3, [r6, #12]
 800a7c8:	061a      	lsls	r2, r3, #24
 800a7ca:	d410      	bmi.n	800a7ee <__swhatbuf_r+0x3e>
 800a7cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7d0:	e00e      	b.n	800a7f0 <__swhatbuf_r+0x40>
 800a7d2:	466a      	mov	r2, sp
 800a7d4:	f000 f8a4 	bl	800a920 <_fstat_r>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	dbf2      	blt.n	800a7c2 <__swhatbuf_r+0x12>
 800a7dc:	9a01      	ldr	r2, [sp, #4]
 800a7de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7e6:	425a      	negs	r2, r3
 800a7e8:	415a      	adcs	r2, r3
 800a7ea:	602a      	str	r2, [r5, #0]
 800a7ec:	e7ee      	b.n	800a7cc <__swhatbuf_r+0x1c>
 800a7ee:	2340      	movs	r3, #64	; 0x40
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	b016      	add	sp, #88	; 0x58
 800a7f6:	bd70      	pop	{r4, r5, r6, pc}

0800a7f8 <__smakebuf_r>:
 800a7f8:	898b      	ldrh	r3, [r1, #12]
 800a7fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7fc:	079d      	lsls	r5, r3, #30
 800a7fe:	4606      	mov	r6, r0
 800a800:	460c      	mov	r4, r1
 800a802:	d507      	bpl.n	800a814 <__smakebuf_r+0x1c>
 800a804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	6123      	str	r3, [r4, #16]
 800a80c:	2301      	movs	r3, #1
 800a80e:	6163      	str	r3, [r4, #20]
 800a810:	b002      	add	sp, #8
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	ab01      	add	r3, sp, #4
 800a816:	466a      	mov	r2, sp
 800a818:	f7ff ffca 	bl	800a7b0 <__swhatbuf_r>
 800a81c:	9900      	ldr	r1, [sp, #0]
 800a81e:	4605      	mov	r5, r0
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff fac1 	bl	8009da8 <_malloc_r>
 800a826:	b948      	cbnz	r0, 800a83c <__smakebuf_r+0x44>
 800a828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a82c:	059a      	lsls	r2, r3, #22
 800a82e:	d4ef      	bmi.n	800a810 <__smakebuf_r+0x18>
 800a830:	f023 0303 	bic.w	r3, r3, #3
 800a834:	f043 0302 	orr.w	r3, r3, #2
 800a838:	81a3      	strh	r3, [r4, #12]
 800a83a:	e7e3      	b.n	800a804 <__smakebuf_r+0xc>
 800a83c:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <__smakebuf_r+0x7c>)
 800a83e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	6020      	str	r0, [r4, #0]
 800a844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a848:	81a3      	strh	r3, [r4, #12]
 800a84a:	9b00      	ldr	r3, [sp, #0]
 800a84c:	6163      	str	r3, [r4, #20]
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	6120      	str	r0, [r4, #16]
 800a852:	b15b      	cbz	r3, 800a86c <__smakebuf_r+0x74>
 800a854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a858:	4630      	mov	r0, r6
 800a85a:	f000 f873 	bl	800a944 <_isatty_r>
 800a85e:	b128      	cbz	r0, 800a86c <__smakebuf_r+0x74>
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	f023 0303 	bic.w	r3, r3, #3
 800a866:	f043 0301 	orr.w	r3, r3, #1
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	431d      	orrs	r5, r3
 800a870:	81a5      	strh	r5, [r4, #12]
 800a872:	e7cd      	b.n	800a810 <__smakebuf_r+0x18>
 800a874:	08008ce9 	.word	0x08008ce9

0800a878 <memmove>:
 800a878:	4288      	cmp	r0, r1
 800a87a:	b510      	push	{r4, lr}
 800a87c:	eb01 0302 	add.w	r3, r1, r2
 800a880:	d807      	bhi.n	800a892 <memmove+0x1a>
 800a882:	1e42      	subs	r2, r0, #1
 800a884:	4299      	cmp	r1, r3
 800a886:	d00a      	beq.n	800a89e <memmove+0x26>
 800a888:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a88c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a890:	e7f8      	b.n	800a884 <memmove+0xc>
 800a892:	4283      	cmp	r3, r0
 800a894:	d9f5      	bls.n	800a882 <memmove+0xa>
 800a896:	1881      	adds	r1, r0, r2
 800a898:	1ad2      	subs	r2, r2, r3
 800a89a:	42d3      	cmn	r3, r2
 800a89c:	d100      	bne.n	800a8a0 <memmove+0x28>
 800a89e:	bd10      	pop	{r4, pc}
 800a8a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a8a8:	e7f7      	b.n	800a89a <memmove+0x22>

0800a8aa <__malloc_lock>:
 800a8aa:	4770      	bx	lr

0800a8ac <__malloc_unlock>:
 800a8ac:	4770      	bx	lr

0800a8ae <_realloc_r>:
 800a8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b0:	4607      	mov	r7, r0
 800a8b2:	4614      	mov	r4, r2
 800a8b4:	460e      	mov	r6, r1
 800a8b6:	b921      	cbnz	r1, 800a8c2 <_realloc_r+0x14>
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8be:	f7ff ba73 	b.w	8009da8 <_malloc_r>
 800a8c2:	b922      	cbnz	r2, 800a8ce <_realloc_r+0x20>
 800a8c4:	f7ff fa22 	bl	8009d0c <_free_r>
 800a8c8:	4625      	mov	r5, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ce:	f000 f849 	bl	800a964 <_malloc_usable_size_r>
 800a8d2:	42a0      	cmp	r0, r4
 800a8d4:	d20f      	bcs.n	800a8f6 <_realloc_r+0x48>
 800a8d6:	4621      	mov	r1, r4
 800a8d8:	4638      	mov	r0, r7
 800a8da:	f7ff fa65 	bl	8009da8 <_malloc_r>
 800a8de:	4605      	mov	r5, r0
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d0f2      	beq.n	800a8ca <_realloc_r+0x1c>
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	4622      	mov	r2, r4
 800a8e8:	f7fe fdf8 	bl	80094dc <memcpy>
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	f7ff fa0c 	bl	8009d0c <_free_r>
 800a8f4:	e7e9      	b.n	800a8ca <_realloc_r+0x1c>
 800a8f6:	4635      	mov	r5, r6
 800a8f8:	e7e7      	b.n	800a8ca <_realloc_r+0x1c>
	...

0800a8fc <_read_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4c07      	ldr	r4, [pc, #28]	; (800a91c <_read_r+0x20>)
 800a900:	4605      	mov	r5, r0
 800a902:	4608      	mov	r0, r1
 800a904:	4611      	mov	r1, r2
 800a906:	2200      	movs	r2, #0
 800a908:	6022      	str	r2, [r4, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	f7fb f802 	bl	8005914 <_read>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d102      	bne.n	800a91a <_read_r+0x1e>
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	b103      	cbz	r3, 800a91a <_read_r+0x1e>
 800a918:	602b      	str	r3, [r5, #0]
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	20000568 	.word	0x20000568

0800a920 <_fstat_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4c07      	ldr	r4, [pc, #28]	; (800a940 <_fstat_r+0x20>)
 800a924:	2300      	movs	r3, #0
 800a926:	4605      	mov	r5, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	4611      	mov	r1, r2
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	f7fb f81a 	bl	8005966 <_fstat>
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	d102      	bne.n	800a93c <_fstat_r+0x1c>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	b103      	cbz	r3, 800a93c <_fstat_r+0x1c>
 800a93a:	602b      	str	r3, [r5, #0]
 800a93c:	bd38      	pop	{r3, r4, r5, pc}
 800a93e:	bf00      	nop
 800a940:	20000568 	.word	0x20000568

0800a944 <_isatty_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4c06      	ldr	r4, [pc, #24]	; (800a960 <_isatty_r+0x1c>)
 800a948:	2300      	movs	r3, #0
 800a94a:	4605      	mov	r5, r0
 800a94c:	4608      	mov	r0, r1
 800a94e:	6023      	str	r3, [r4, #0]
 800a950:	f7fb f819 	bl	8005986 <_isatty>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_isatty_r+0x1a>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_isatty_r+0x1a>
 800a95c:	602b      	str	r3, [r5, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20000568 	.word	0x20000568

0800a964 <_malloc_usable_size_r>:
 800a964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a968:	1f18      	subs	r0, r3, #4
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	bfbc      	itt	lt
 800a96e:	580b      	ldrlt	r3, [r1, r0]
 800a970:	18c0      	addlt	r0, r0, r3
 800a972:	4770      	bx	lr

0800a974 <_init>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	bf00      	nop
 800a978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97a:	bc08      	pop	{r3}
 800a97c:	469e      	mov	lr, r3
 800a97e:	4770      	bx	lr

0800a980 <_fini>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	bf00      	nop
 800a984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a986:	bc08      	pop	{r3}
 800a988:	469e      	mov	lr, r3
 800a98a:	4770      	bx	lr
